
prct23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001442c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006124c  080145dc  080145dc  000245dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08075828  08075828  00090134  2**0
                  CONTENTS
  4 .ARM          00000008  08075828  08075828  00085828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08075830  08075830  00090134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08075830  08075830  00085830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08075834  08075834  00085834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08075838  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00090134  2**0
                  CONTENTS
 10 .bss          00011af8  20000138  20000138  00090138  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20011c30  20011c30  00090138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00090134  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037b17  00000000  00000000  00090164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000756e  00000000  00000000  000c7c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c28  00000000  00000000  000cf1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003018b  00000000  00000000  000d1e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035da9  00000000  00000000  00101fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010743f  00000000  00000000  00137d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023f18b  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000028f8  00000000  00000000  0023f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bf9c  00000000  00000000  00241ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000138 	.word	0x20000138
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080145c4 	.word	0x080145c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	080145c4 	.word	0x080145c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b974 	b.w	8000edc <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f16:	f002 fbf1 	bl	80036fc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000f1a:	20ca      	movs	r0, #202	; 0xca
 8000f1c:	f000 f95d 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000f20:	20c3      	movs	r0, #195	; 0xc3
 8000f22:	f000 f967 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000f26:	2008      	movs	r0, #8
 8000f28:	f000 f964 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000f2c:	2050      	movs	r0, #80	; 0x50
 8000f2e:	f000 f961 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000f32:	20cf      	movs	r0, #207	; 0xcf
 8000f34:	f000 f951 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 f95b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000f3e:	20c1      	movs	r0, #193	; 0xc1
 8000f40:	f000 f958 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000f44:	2030      	movs	r0, #48	; 0x30
 8000f46:	f000 f955 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000f4a:	20ed      	movs	r0, #237	; 0xed
 8000f4c:	f000 f945 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f000 f94f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f94c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 f949 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000f62:	2081      	movs	r0, #129	; 0x81
 8000f64:	f000 f946 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000f68:	20e8      	movs	r0, #232	; 0xe8
 8000f6a:	f000 f936 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000f6e:	2085      	movs	r0, #133	; 0x85
 8000f70:	f000 f940 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f93d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f000 f93a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000f80:	20cb      	movs	r0, #203	; 0xcb
 8000f82:	f000 f92a 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000f86:	2039      	movs	r0, #57	; 0x39
 8000f88:	f000 f934 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000f8c:	202c      	movs	r0, #44	; 0x2c
 8000f8e:	f000 f931 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f92e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000f98:	2034      	movs	r0, #52	; 0x34
 8000f9a:	f000 f92b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f000 f928 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000fa4:	20f7      	movs	r0, #247	; 0xf7
 8000fa6:	f000 f918 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000faa:	2020      	movs	r0, #32
 8000fac:	f000 f922 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000fb0:	20ea      	movs	r0, #234	; 0xea
 8000fb2:	f000 f912 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f91c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f919 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000fc2:	20b1      	movs	r0, #177	; 0xb1
 8000fc4:	f000 f909 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f913 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fce:	201b      	movs	r0, #27
 8000fd0:	f000 f910 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000fd4:	20b6      	movs	r0, #182	; 0xb6
 8000fd6:	f000 f900 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 f90a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000fe0:	20a2      	movs	r0, #162	; 0xa2
 8000fe2:	f000 f907 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000fe6:	20c0      	movs	r0, #192	; 0xc0
 8000fe8:	f000 f8f7 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fec:	2010      	movs	r0, #16
 8000fee:	f000 f901 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000ff2:	20c1      	movs	r0, #193	; 0xc1
 8000ff4:	f000 f8f1 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f000 f8fb 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000ffe:	20c5      	movs	r0, #197	; 0xc5
 8001000:	f000 f8eb 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001004:	2045      	movs	r0, #69	; 0x45
 8001006:	f000 f8f5 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800100a:	2015      	movs	r0, #21
 800100c:	f000 f8f2 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001010:	20c7      	movs	r0, #199	; 0xc7
 8001012:	f000 f8e2 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001016:	2090      	movs	r0, #144	; 0x90
 8001018:	f000 f8ec 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800101c:	2036      	movs	r0, #54	; 0x36
 800101e:	f000 f8dc 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001022:	20c8      	movs	r0, #200	; 0xc8
 8001024:	f000 f8e6 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001028:	20f2      	movs	r0, #242	; 0xf2
 800102a:	f000 f8d6 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f8e0 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001034:	20b0      	movs	r0, #176	; 0xb0
 8001036:	f000 f8d0 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800103a:	20c2      	movs	r0, #194	; 0xc2
 800103c:	f000 f8da 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001040:	20b6      	movs	r0, #182	; 0xb6
 8001042:	f000 f8ca 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 f8d4 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800104c:	20a7      	movs	r0, #167	; 0xa7
 800104e:	f000 f8d1 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001052:	2027      	movs	r0, #39	; 0x27
 8001054:	f000 f8ce 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001058:	2004      	movs	r0, #4
 800105a:	f000 f8cb 	bl	80011f4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800105e:	202a      	movs	r0, #42	; 0x2a
 8001060:	f000 f8bb 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f8c5 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f8c2 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f8bf 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001076:	20ef      	movs	r0, #239	; 0xef
 8001078:	f000 f8bc 	bl	80011f4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800107c:	202b      	movs	r0, #43	; 0x2b
 800107e:	f000 f8ac 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f8b6 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f8b3 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 f8b0 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001094:	203f      	movs	r0, #63	; 0x3f
 8001096:	f000 f8ad 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800109a:	20f6      	movs	r0, #246	; 0xf6
 800109c:	f000 f89d 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 f8a7 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f8a4 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80010ac:	2006      	movs	r0, #6
 80010ae:	f000 f8a1 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f000 f891 	bl	80011da <ili9341_WriteReg>
  LCD_Delay(200);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f002 fc0d 	bl	80038d8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80010be:	2026      	movs	r0, #38	; 0x26
 80010c0:	f000 f88b 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 f895 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80010ca:	20e0      	movs	r0, #224	; 0xe0
 80010cc:	f000 f885 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80010d0:	200f      	movs	r0, #15
 80010d2:	f000 f88f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80010d6:	2029      	movs	r0, #41	; 0x29
 80010d8:	f000 f88c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80010dc:	2024      	movs	r0, #36	; 0x24
 80010de:	f000 f889 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80010e2:	200c      	movs	r0, #12
 80010e4:	f000 f886 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80010e8:	200e      	movs	r0, #14
 80010ea:	f000 f883 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010ee:	2009      	movs	r0, #9
 80010f0:	f000 f880 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80010f4:	204e      	movs	r0, #78	; 0x4e
 80010f6:	f000 f87d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 f87a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001100:	203c      	movs	r0, #60	; 0x3c
 8001102:	f000 f877 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001106:	2009      	movs	r0, #9
 8001108:	f000 f874 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800110c:	2013      	movs	r0, #19
 800110e:	f000 f871 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001112:	2005      	movs	r0, #5
 8001114:	f000 f86e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001118:	2017      	movs	r0, #23
 800111a:	f000 f86b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800111e:	2011      	movs	r0, #17
 8001120:	f000 f868 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f865 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800112a:	20e1      	movs	r0, #225	; 0xe1
 800112c:	f000 f855 	bl	80011da <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f85f 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001136:	2016      	movs	r0, #22
 8001138:	f000 f85c 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800113c:	201b      	movs	r0, #27
 800113e:	f000 f859 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001142:	2004      	movs	r0, #4
 8001144:	f000 f856 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001148:	2011      	movs	r0, #17
 800114a:	f000 f853 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800114e:	2007      	movs	r0, #7
 8001150:	f000 f850 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001154:	2031      	movs	r0, #49	; 0x31
 8001156:	f000 f84d 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800115a:	2033      	movs	r0, #51	; 0x33
 800115c:	f000 f84a 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001160:	2042      	movs	r0, #66	; 0x42
 8001162:	f000 f847 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001166:	2005      	movs	r0, #5
 8001168:	f000 f844 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800116c:	200c      	movs	r0, #12
 800116e:	f000 f841 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001172:	200a      	movs	r0, #10
 8001174:	f000 f83e 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001178:	2028      	movs	r0, #40	; 0x28
 800117a:	f000 f83b 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800117e:	202f      	movs	r0, #47	; 0x2f
 8001180:	f000 f838 	bl	80011f4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001184:	200f      	movs	r0, #15
 8001186:	f000 f835 	bl	80011f4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800118a:	2011      	movs	r0, #17
 800118c:	f000 f825 	bl	80011da <ili9341_WriteReg>
  LCD_Delay(200);
 8001190:	20c8      	movs	r0, #200	; 0xc8
 8001192:	f002 fba1 	bl	80038d8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001196:	2029      	movs	r0, #41	; 0x29
 8001198:	f000 f81f 	bl	80011da <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800119c:	202c      	movs	r0, #44	; 0x2c
 800119e:	f000 f81c 	bl	80011da <ili9341_WriteReg>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80011aa:	f002 faa7 	bl	80036fc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80011ae:	2103      	movs	r1, #3
 80011b0:	20d3      	movs	r0, #211	; 0xd3
 80011b2:	f000 f82c 	bl	800120e <ili9341_ReadData>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29b      	uxth	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}

080011be <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80011c2:	2029      	movs	r0, #41	; 0x29
 80011c4:	f000 f809 	bl	80011da <ili9341_WriteReg>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f000 f802 	bl	80011da <ili9341_WriteReg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fb22 	bl	8003830 <LCD_IO_WriteReg>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 faf3 	bl	80037ec <LCD_IO_WriteData>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	460a      	mov	r2, r1
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800121e:	797a      	ldrb	r2, [r7, #5]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fb25 	bl	8003874 <LCD_IO_ReadData>
 800122a:	4603      	mov	r3, r0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001238:	23f0      	movs	r3, #240	; 0xf0
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001248:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f003 ffc8 	bl	80051f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f850 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 fb10 	bl	8001888 <MX_GPIO_Init>
  MX_CRC_Init();
 8001268:	f000 f908 	bl	800147c <MX_CRC_Init>
  MX_DMA2D_Init();
 800126c:	f000 f91a 	bl	80014a4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001270:	f000 faba 	bl	80017e8 <MX_FMC_Init>
  MX_I2C3_Init();
 8001274:	f000 f948 	bl	8001508 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001278:	f000 f986 	bl	8001588 <MX_LTDC_Init>
  MX_SPI5_Init();
 800127c:	f000 fa04 	bl	8001688 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001280:	f000 fa38 	bl	80016f4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001284:	f000 fa86 	bl	8001794 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001288:	f000 f8a6 	bl	80013d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800128c:	f00e fc7c 	bl	800fb88 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semaforoContador */
  semaforoContadorHandle = osSemaphoreNew(1, 1, &semaforoContador_attributes);
 8001290:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <main+0x80>)
 8001292:	2101      	movs	r1, #1
 8001294:	2001      	movs	r0, #1
 8001296:	f00e fe2d 	bl	800fef4 <osSemaphoreNew>
 800129a:	4603      	mov	r3, r0
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <main+0x84>)
 800129e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of temporizador */
  temporizadorHandle = osTimerNew(temporizadorTick, osTimerPeriodic, NULL, &temporizador_attributes);
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <main+0x88>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <main+0x8c>)
 80012a8:	f00e fd7a 	bl	800fda0 <osTimerNew>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <main+0x90>)
 80012b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <main+0x94>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <main+0x98>)
 80012b8:	f00e fcb0 	bl	800fc1c <osThreadNew>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <main+0x9c>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* creation of tareaPantalla */
  tareaPantallaHandle = osThreadNew(fTareaPantalla, NULL, &tareaPantalla_attributes);
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <main+0xa0>)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <main+0xa4>)
 80012c8:	f00e fca8 	bl	800fc1c <osThreadNew>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <main+0xa8>)
 80012d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012d2:	f00e fc7d 	bl	800fbd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0x7e>
 80012d8:	0806e744 	.word	0x0806e744
 80012dc:	20000404 	.word	0x20000404
 80012e0:	0806e734 	.word	0x0806e734
 80012e4:	08002631 	.word	0x08002631
 80012e8:	20000400 	.word	0x20000400
 80012ec:	0806e6ec 	.word	0x0806e6ec
 80012f0:	080021dd 	.word	0x080021dd
 80012f4:	200003f8 	.word	0x200003f8
 80012f8:	0806e710 	.word	0x0806e710
 80012fc:	0800261d 	.word	0x0800261d
 8001300:	200003fc 	.word	0x200003fc

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	2230      	movs	r2, #48	; 0x30
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f012 fcee 	bl	8013cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <SystemClock_Config+0xcc>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <SystemClock_Config+0xcc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001350:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <SystemClock_Config+0xd0>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800137c:	2348      	movs	r3, #72	; 0x48
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001384:	2303      	movs	r3, #3
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f008 fb33 	bl	80099f8 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001398:	f001 fb60 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 fd95 	bl	8009ee8 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013c4:	f001 fb4a 	bl	8002a5c <Error_Handler>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3750      	adds	r7, #80	; 0x50
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_ADC1_Init+0x98>)
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <MX_ADC1_Init+0x9c>)
 80013ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_ADC1_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_ADC1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_ADC1_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_ADC1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_ADC1_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_ADC1_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_ADC1_Init+0x98>)
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <MX_ADC1_Init+0xa0>)
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_ADC1_Init+0x98>)
 8001424:	2201      	movs	r2, #1
 8001426:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_ADC1_Init+0x98>)
 8001432:	2201      	movs	r2, #1
 8001434:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <MX_ADC1_Init+0x98>)
 8001438:	f003 ff40 	bl	80052bc <HAL_ADC_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f001 fb0b 	bl	8002a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001446:	2305      	movs	r3, #5
 8001448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_ADC1_Init+0x98>)
 8001458:	f004 f912 	bl	8005680 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001462:	f001 fafb 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000154 	.word	0x20000154
 8001474:	40012000 	.word	0x40012000
 8001478:	0f000001 	.word	0x0f000001

0800147c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_CRC_Init+0x20>)
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <MX_CRC_Init+0x24>)
 8001484:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_CRC_Init+0x20>)
 8001488:	f004 fc0a 	bl	8005ca0 <HAL_CRC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001492:	f001 fae3 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000019c 	.word	0x2000019c
 80014a0:	40023000 	.word	0x40023000

080014a4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <MX_DMA2D_Init+0x60>)
 80014ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014da:	f004 fdbb 	bl	8006054 <HAL_DMA2D_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014e4:	f001 faba 	bl	8002a5c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014e8:	2101      	movs	r1, #1
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_DMA2D_Init+0x5c>)
 80014ec:	f004 ff0c 	bl	8006308 <HAL_DMA2D_ConfigLayer>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014f6:	f001 fab1 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001a4 	.word	0x200001a4
 8001504:	4002b000 	.word	0x4002b000

08001508 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_I2C3_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <MX_I2C3_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_I2C3_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MX_I2C3_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_I2C3_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_I2C3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_I2C3_Init+0x74>)
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_I2C3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C3_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_I2C3_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_I2C3_Init+0x74>)
 8001546:	f006 fe4d 	bl	80081e4 <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001550:	f001 fa84 	bl	8002a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_I2C3_Init+0x74>)
 8001558:	f007 fe41 	bl	80091de <HAL_I2CEx_ConfigAnalogFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001562:	f001 fa7b 	bl	8002a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_I2C3_Init+0x74>)
 800156a:	f007 fe74 	bl	8009256 <HAL_I2CEx_ConfigDigitalFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001574:	f001 fa72 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001e4 	.word	0x200001e4
 8001580:	40005c00 	.word	0x40005c00
 8001584:	000186a0 	.word	0x000186a0

08001588 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2234      	movs	r2, #52	; 0x34
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f012 fbad 	bl	8013cf4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_LTDC_Init+0xf8>)
 800159c:	4a39      	ldr	r2, [pc, #228]	; (8001684 <MX_LTDC_Init+0xfc>)
 800159e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ba:	2209      	movs	r2, #9
 80015bc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015c6:	221d      	movs	r2, #29
 80015c8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015cc:	2203      	movs	r2, #3
 80015ce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015d2:	f240 120d 	movw	r2, #269	; 0x10d
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015da:	f240 1243 	movw	r2, #323	; 0x143
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015e2:	f240 1217 	movw	r2, #279	; 0x117
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ea:	f240 1247 	movw	r2, #327	; 0x147
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_LTDC_Init+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001608:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_LTDC_Init+0xf8>)
 800160a:	f007 fe63 	bl	80092d4 <HAL_LTDC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001614:	f001 fa22 	bl	8002a5c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800161c:	23f0      	movs	r3, #240	; 0xf0
 800161e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001624:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001628:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800162e:	23ff      	movs	r3, #255	; 0xff
 8001630:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001636:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800163c:	2307      	movs	r3, #7
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001640:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001646:	23f0      	movs	r3, #240	; 0xf0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800164a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_LTDC_Init+0xf8>)
 800166a:	f007 ffc5 	bl	80095f8 <HAL_LTDC_ConfigLayer>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001674:	f001 f9f2 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000238 	.word	0x20000238
 8001684:	40016800 	.word	0x40016800

08001688 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI5_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <MX_SPI5_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI5_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI5_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_SPI5_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI5_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI5_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI5_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI5_Init+0x64>)
 80016bc:	2218      	movs	r2, #24
 80016be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_SPI5_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI5_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_SPI5_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI5_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_SPI5_Init+0x64>)
 80016da:	f009 f8a8 	bl	800a82e <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016e4:	f001 f9ba 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200002e0 	.word	0x200002e0
 80016f0:	40015000 	.word	0x40015000

080016f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_TIM1_Init+0x98>)
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <MX_TIM1_Init+0x9c>)
 8001714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_TIM1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM1_Init+0x98>)
 8001724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_TIM1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_TIM1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_TIM1_Init+0x98>)
 800173e:	f009 fe55 	bl	800b3ec <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001748:	f001 f988 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_TIM1_Init+0x98>)
 800175a:	f00a f80f 	bl	800b77c <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001764:	f001 f97a 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM1_Init+0x98>)
 8001776:	f00a fa2b 	bl	800bbd0 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001780:	f001 f96c 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000338 	.word	0x20000338
 8001790:	40010000 	.word	0x40010000

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART1_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017cc:	f00a fa90 	bl	800bcf0 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f001 f941 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000380 	.word	0x20000380
 80017e4:	40011000 	.word	0x40011000

080017e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_FMC_Init+0x98>)
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <MX_FMC_Init+0x9c>)
 8001804:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_FMC_Init+0x98>)
 8001808:	2201      	movs	r2, #1
 800180a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_FMC_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_FMC_Init+0x98>)
 8001814:	2204      	movs	r2, #4
 8001816:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_FMC_Init+0x98>)
 800181a:	2210      	movs	r2, #16
 800181c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_FMC_Init+0x98>)
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_FMC_Init+0x98>)
 8001826:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800182a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_FMC_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_FMC_Init+0x98>)
 8001834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001838:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_FMC_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_FMC_Init+0x98>)
 8001842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001848:	2302      	movs	r3, #2
 800184a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800184c:	2307      	movs	r3, #7
 800184e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001854:	2307      	movs	r3, #7
 8001856:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001858:	2303      	movs	r3, #3
 800185a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_FMC_Init+0x98>)
 800186a:	f008 ff4f 	bl	800a70c <HAL_SDRAM_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001874:	f001 f8f2 	bl	8002a5c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200003c4 	.word	0x200003c4
 8001884:	a0000140 	.word	0xa0000140

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a83      	ldr	r2, [pc, #524]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	4b7d      	ldr	r3, [pc, #500]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a7c      	ldr	r2, [pc, #496]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b7a      	ldr	r3, [pc, #488]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a67      	ldr	r2, [pc, #412]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <MX_GPIO_Init+0x22c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	211c      	movs	r1, #28
 8001982:	484d      	ldr	r0, [pc, #308]	; (8001ab8 <MX_GPIO_Init+0x230>)
 8001984:	f005 f80a 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2116      	movs	r1, #22
 800198c:	484b      	ldr	r0, [pc, #300]	; (8001abc <MX_GPIO_Init+0x234>)
 800198e:	f005 f805 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	484a      	ldr	r0, [pc, #296]	; (8001ac0 <MX_GPIO_Init+0x238>)
 8001998:	f005 f800 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80019a2:	4848      	ldr	r0, [pc, #288]	; (8001ac4 <MX_GPIO_Init+0x23c>)
 80019a4:	f004 fffa 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019ae:	4846      	ldr	r0, [pc, #280]	; (8001ac8 <MX_GPIO_Init+0x240>)
 80019b0:	f004 fff4 	bl	800699c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80019b4:	231c      	movs	r3, #28
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	483b      	ldr	r0, [pc, #236]	; (8001ab8 <MX_GPIO_Init+0x230>)
 80019cc:	f004 fd2e 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80019d0:	2316      	movs	r3, #22
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	4835      	ldr	r0, [pc, #212]	; (8001abc <MX_GPIO_Init+0x234>)
 80019e8:	f004 fd20 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80019ec:	f248 0307 	movw	r3, #32775	; 0x8007
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	482f      	ldr	r0, [pc, #188]	; (8001ac0 <MX_GPIO_Init+0x238>)
 8001a04:	f004 fd12 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <MX_GPIO_Init+0x238>)
 8001a20:	f004 fd04 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	4820      	ldr	r0, [pc, #128]	; (8001abc <MX_GPIO_Init+0x234>)
 8001a3a:	f004 fcf7 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481e      	ldr	r0, [pc, #120]	; (8001acc <MX_GPIO_Init+0x244>)
 8001a52:	f004 fceb 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <MX_GPIO_Init+0x23c>)
 8001a6c:	f004 fcde 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <MX_GPIO_Init+0x23c>)
 8001a8a:	f004 fccf 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_GPIO_Init+0x240>)
 8001aa8:	f004 fcc0 	bl	800642c <HAL_GPIO_Init>

}
 8001aac:	bf00      	nop
 8001aae:	3738      	adds	r7, #56	; 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <double2float>:
int Ts=3,cntTs=10,cntTimer=10,espera=0;
int ciclo=50,periodo=100,cntTime=0,medida;
JuegoCaracteresAlpha  juegoConsolas9x18;
PantallaLCD  pantallaLCD;
void double2float(double dato, char cadena[])
{	int entera,real;
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ada:	6078      	str	r0, [r7, #4]

	entera=(int)dato;
 8001adc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae0:	f7ff f834 	bl	8000b4c <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	617b      	str	r3, [r7, #20]
	real=(int)((dato-entera)*10);
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <double2float+0x64>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f81a 	bl	8000b4c <__aeabi_d2iz>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]
	sprintf(cadena, "%s%d.%d",cadena,entera,real);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4904      	ldr	r1, [pc, #16]	; (8001b38 <double2float+0x68>)
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f012 f9dc 	bl	8013ee4 <siprintf>
	return;
 8001b2c:	bf00      	nop
}
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40240000 	.word	0x40240000
 8001b38:	0801461c 	.word	0x0801461c
 8001b3c:	00000000 	.word	0x00000000

08001b40 <funcionBoton1>:
void funcionBoton1() {  // Función a ejecutar cuando se pulse el botón
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b0a0      	sub	sp, #128	; 0x80
 8001b44:	af04      	add	r7, sp, #16
	double Consignaaux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <funcionBoton1+0xc8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e fa5a 	bl	8010008 <osSemaphoreAcquire>
	Consignaaux=Consigna;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <funcionBoton1+0xcc>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    if (Consigna>0)
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <funcionBoton1+0xcc>)
 8001b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f7fe ffe4 	bl	8000b38 <__aeabi_dcmpgt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <funcionBoton1+0x50>
		Consigna-=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <funcionBoton1+0xcc>)
 8001b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b7c:	a320      	add	r3, pc, #128	; (adr r3, 8001c00 <funcionBoton1+0xc0>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fb91 	bl	80002a8 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4920      	ldr	r1, [pc, #128]	; (8001c0c <funcionBoton1+0xcc>)
 8001b8c:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <funcionBoton1+0xc8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00e fa89 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Cnsg=");
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	491c      	ldr	r1, [pc, #112]	; (8001c10 <funcionBoton1+0xd0>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f012 f9a0 	bl	8013ee4 <siprintf>
    double2float(Consignaaux,cadena);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001bac:	f7ff ff90 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001bb0:	1d3a      	adds	r2, r7, #4
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <funcionBoton1+0xd4>)
 8001bb4:	9303      	str	r3, [sp, #12]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2364      	movs	r3, #100	; 0x64
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <funcionBoton1+0xd8>)
 8001bc4:	211e      	movs	r1, #30
 8001bc6:	2046      	movs	r0, #70	; 0x46
 8001bc8:	f001 f9e7 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <funcionBoton1+0xd4>)
 8001bce:	f001 f8db 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001bd2:	1d3a      	adds	r2, r7, #4
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <funcionBoton1+0xd4>)
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <funcionBoton1+0xd8>)
 8001be6:	211e      	movs	r1, #30
 8001be8:	2046      	movs	r0, #70	; 0x46
 8001bea:	f001 f9d6 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <funcionBoton1+0xd4>)
 8001bf0:	f001 f8ca 	bl	8002d88 <intercambiaBuffersLCD>

}
 8001bf4:	bf00      	nop
 8001bf6:	3770      	adds	r7, #112	; 0x70
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	9999999a 	.word	0x9999999a
 8001c04:	3fb99999 	.word	0x3fb99999
 8001c08:	20000404 	.word	0x20000404
 8001c0c:	20000050 	.word	0x20000050
 8001c10:	08014624 	.word	0x08014624
 8001c14:	200004d8 	.word	0x200004d8
 8001c18:	200004cc 	.word	0x200004cc
 8001c1c:	00000000 	.word	0x00000000

08001c20 <funcionBoton2>:
void funcionBoton2() {  // Función a ejecutar cuando se pulse el botón
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0a0      	sub	sp, #128	; 0x80
 8001c24:	af04      	add	r7, sp, #16
	double KpAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <funcionBoton2+0xc8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00e f9ea 	bl	8010008 <osSemaphoreAcquire>
	KpAux=Kp;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <funcionBoton2+0xcc>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    if (Kp>0)
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <funcionBoton2+0xcc>)
 8001c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f7fe ff74 	bl	8000b38 <__aeabi_dcmpgt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <funcionBoton2+0x50>
    {
    	Kp-=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <funcionBoton2+0xcc>)
 8001c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5c:	a320      	add	r3, pc, #128	; (adr r3, 8001ce0 <funcionBoton2+0xc0>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fb21 	bl	80002a8 <__aeabi_dsub>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4920      	ldr	r1, [pc, #128]	; (8001cec <funcionBoton2+0xcc>)
 8001c6c:	e9c1 2300 	strd	r2, r3, [r1]
    }
	osSemaphoreRelease(semaforoContadorHandle);
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <funcionBoton2+0xc8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00e fa19 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Kp=");
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	491c      	ldr	r1, [pc, #112]	; (8001cf0 <funcionBoton2+0xd0>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f012 f930 	bl	8013ee4 <siprintf>
    double2float(KpAux,cadena);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4618      	mov	r0, r3
 8001c88:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001c8c:	f7ff ff20 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001c90:	1d3a      	adds	r2, r7, #4
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <funcionBoton2+0xd4>)
 8001c94:	9303      	str	r3, [sp, #12]
 8001c96:	2301      	movs	r3, #1
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2364      	movs	r3, #100	; 0x64
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <funcionBoton2+0xd8>)
 8001ca4:	216e      	movs	r1, #110	; 0x6e
 8001ca6:	2046      	movs	r0, #70	; 0x46
 8001ca8:	f001 f977 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001cac:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <funcionBoton2+0xd4>)
 8001cae:	f001 f86b 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001cb2:	1d3a      	adds	r2, r7, #4
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <funcionBoton2+0xd4>)
 8001cb6:	9303      	str	r3, [sp, #12]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <funcionBoton2+0xd8>)
 8001cc6:	216e      	movs	r1, #110	; 0x6e
 8001cc8:	2046      	movs	r0, #70	; 0x46
 8001cca:	f001 f966 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001cce:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <funcionBoton2+0xd4>)
 8001cd0:	f001 f85a 	bl	8002d88 <intercambiaBuffersLCD>

}
 8001cd4:	bf00      	nop
 8001cd6:	3770      	adds	r7, #112	; 0x70
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999
 8001ce8:	20000404 	.word	0x20000404
 8001cec:	20000038 	.word	0x20000038
 8001cf0:	0801462c 	.word	0x0801462c
 8001cf4:	200004d8 	.word	0x200004d8
 8001cf8:	200004cc 	.word	0x200004cc
 8001cfc:	00000000 	.word	0x00000000

08001d00 <funcionBoton3>:
void funcionBoton3() {  // Función a ejecutar cuando se pulse el botón
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a0      	sub	sp, #128	; 0x80
 8001d04:	af04      	add	r7, sp, #16
	double KdAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <funcionBoton3+0xc8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00e f97a 	bl	8010008 <osSemaphoreAcquire>
	KdAux=Kd;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <funcionBoton3+0xcc>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	if (Kd>0)
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <funcionBoton3+0xcc>)
 8001d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f7fe ff04 	bl	8000b38 <__aeabi_dcmpgt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <funcionBoton3+0x50>
		Kd-=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <funcionBoton3+0xcc>)
 8001d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d3c:	a320      	add	r3, pc, #128	; (adr r3, 8001dc0 <funcionBoton3+0xc0>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fab1 	bl	80002a8 <__aeabi_dsub>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4920      	ldr	r1, [pc, #128]	; (8001dcc <funcionBoton3+0xcc>)
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <funcionBoton3+0xc8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00e f9a9 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Kd=");
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	491c      	ldr	r1, [pc, #112]	; (8001dd0 <funcionBoton3+0xd0>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f012 f8c0 	bl	8013ee4 <siprintf>
    double2float(KdAux,cadena);
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4618      	mov	r0, r3
 8001d68:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001d6c:	f7ff feb0 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001d70:	1d3a      	adds	r2, r7, #4
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <funcionBoton3+0xd4>)
 8001d74:	9303      	str	r3, [sp, #12]
 8001d76:	2301      	movs	r3, #1
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <funcionBoton3+0xd8>)
 8001d84:	21be      	movs	r1, #190	; 0xbe
 8001d86:	2046      	movs	r0, #70	; 0x46
 8001d88:	f001 f907 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <funcionBoton3+0xd4>)
 8001d8e:	f000 fffb 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001d92:	1d3a      	adds	r2, r7, #4
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <funcionBoton3+0xd4>)
 8001d96:	9303      	str	r3, [sp, #12]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2364      	movs	r3, #100	; 0x64
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <funcionBoton3+0xd8>)
 8001da6:	21be      	movs	r1, #190	; 0xbe
 8001da8:	2046      	movs	r0, #70	; 0x46
 8001daa:	f001 f8f6 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <funcionBoton3+0xd4>)
 8001db0:	f000 ffea 	bl	8002d88 <intercambiaBuffersLCD>
}
 8001db4:	bf00      	nop
 8001db6:	3770      	adds	r7, #112	; 0x70
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	9999999a 	.word	0x9999999a
 8001dc4:	3fb99999 	.word	0x3fb99999
 8001dc8:	20000404 	.word	0x20000404
 8001dcc:	20000040 	.word	0x20000040
 8001dd0:	08014630 	.word	0x08014630
 8001dd4:	200004d8 	.word	0x200004d8
 8001dd8:	200004cc 	.word	0x200004cc
 8001ddc:	00000000 	.word	0x00000000

08001de0 <funcionBoton4>:

void funcionBoton4() {  // Función a ejecutar cuando se pulse el botón
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0a0      	sub	sp, #128	; 0x80
 8001de4:	af04      	add	r7, sp, #16
	double KiAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <funcionBoton4+0xc8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f04f 31ff 	mov.w	r1, #4294967295
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00e f90a 	bl	8010008 <osSemaphoreAcquire>
	KiAux=Ki;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <funcionBoton4+0xcc>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    if(Ki>0)
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <funcionBoton4+0xcc>)
 8001e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	f7fe fe94 	bl	8000b38 <__aeabi_dcmpgt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <funcionBoton4+0x50>
    {
    	Ki-=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <funcionBoton4+0xcc>)
 8001e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e1c:	a320      	add	r3, pc, #128	; (adr r3, 8001ea0 <funcionBoton4+0xc0>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fa41 	bl	80002a8 <__aeabi_dsub>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4920      	ldr	r1, [pc, #128]	; (8001eac <funcionBoton4+0xcc>)
 8001e2c:	e9c1 2300 	strd	r2, r3, [r1]
    }
	osSemaphoreRelease(semaforoContadorHandle);
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <funcionBoton4+0xc8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00e f939 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Ki=");
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	491c      	ldr	r1, [pc, #112]	; (8001eb0 <funcionBoton4+0xd0>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f012 f850 	bl	8013ee4 <siprintf>
    double2float(KiAux,cadena);
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4618      	mov	r0, r3
 8001e48:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001e4c:	f7ff fe40 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001e50:	1d3a      	adds	r2, r7, #4
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <funcionBoton4+0xd4>)
 8001e54:	9303      	str	r3, [sp, #12]
 8001e56:	2301      	movs	r3, #1
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	2364      	movs	r3, #100	; 0x64
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <funcionBoton4+0xd8>)
 8001e64:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001e68:	2046      	movs	r0, #70	; 0x46
 8001e6a:	f001 f896 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <funcionBoton4+0xd4>)
 8001e70:	f000 ff8a 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <funcionBoton4+0xd4>)
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2364      	movs	r3, #100	; 0x64
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <funcionBoton4+0xd8>)
 8001e88:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001e8c:	2046      	movs	r0, #70	; 0x46
 8001e8e:	f001 f884 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001e92:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <funcionBoton4+0xd4>)
 8001e94:	f000 ff78 	bl	8002d88 <intercambiaBuffersLCD>
}
 8001e98:	bf00      	nop
 8001e9a:	3770      	adds	r7, #112	; 0x70
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	9999999a 	.word	0x9999999a
 8001ea4:	3fb99999 	.word	0x3fb99999
 8001ea8:	20000404 	.word	0x20000404
 8001eac:	20000048 	.word	0x20000048
 8001eb0:	08014634 	.word	0x08014634
 8001eb4:	200004d8 	.word	0x200004d8
 8001eb8:	200004cc 	.word	0x200004cc
 8001ebc:	00000000 	.word	0x00000000

08001ec0 <funcionBoton5>:
void funcionBoton5() {  // Función a ejecutar cuando se pulse el botón
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0a0      	sub	sp, #128	; 0x80
 8001ec4:	af04      	add	r7, sp, #16
	double Consignaaux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <funcionBoton5+0xb0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00e f89a 	bl	8010008 <osSemaphoreAcquire>
	Consignaaux=Consigna;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <funcionBoton5+0xb4>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Consigna+=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <funcionBoton5+0xb4>)
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	a320      	add	r3, pc, #128	; (adr r3, 8001f68 <funcionBoton5+0xa8>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe f9df 	bl	80002ac <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4920      	ldr	r1, [pc, #128]	; (8001f74 <funcionBoton5+0xb4>)
 8001ef4:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <funcionBoton5+0xb0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00e f8d5 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Cnsg=");
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	491c      	ldr	r1, [pc, #112]	; (8001f78 <funcionBoton5+0xb8>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f011 ffec 	bl	8013ee4 <siprintf>
    double2float(Consignaaux,cadena);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4618      	mov	r0, r3
 8001f10:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001f14:	f7ff fddc 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001f18:	1d3a      	adds	r2, r7, #4
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <funcionBoton5+0xbc>)
 8001f1c:	9303      	str	r3, [sp, #12]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	2364      	movs	r3, #100	; 0x64
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <funcionBoton5+0xc0>)
 8001f2c:	211e      	movs	r1, #30
 8001f2e:	2046      	movs	r0, #70	; 0x46
 8001f30:	f001 f833 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <funcionBoton5+0xbc>)
 8001f36:	f000 ff27 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001f3a:	1d3a      	adds	r2, r7, #4
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <funcionBoton5+0xbc>)
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	2301      	movs	r3, #1
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2364      	movs	r3, #100	; 0x64
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <funcionBoton5+0xc0>)
 8001f4e:	211e      	movs	r1, #30
 8001f50:	2046      	movs	r0, #70	; 0x46
 8001f52:	f001 f822 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <funcionBoton5+0xbc>)
 8001f58:	f000 ff16 	bl	8002d88 <intercambiaBuffersLCD>

}
 8001f5c:	bf00      	nop
 8001f5e:	3770      	adds	r7, #112	; 0x70
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f3af 8000 	nop.w
 8001f68:	9999999a 	.word	0x9999999a
 8001f6c:	3fb99999 	.word	0x3fb99999
 8001f70:	20000404 	.word	0x20000404
 8001f74:	20000050 	.word	0x20000050
 8001f78:	08014624 	.word	0x08014624
 8001f7c:	200004d8 	.word	0x200004d8
 8001f80:	200004cc 	.word	0x200004cc
 8001f84:	00000000 	.word	0x00000000

08001f88 <funcionBoton6>:
void funcionBoton6() {  // Función a ejecutar cuando se pulse el botón
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0a0      	sub	sp, #128	; 0x80
 8001f8c:	af04      	add	r7, sp, #16
	double KpAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <funcionBoton6+0xb0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f04f 31ff 	mov.w	r1, #4294967295
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00e f836 	bl	8010008 <osSemaphoreAcquire>
	KpAux=Kp;
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <funcionBoton6+0xb4>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Kp+=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <funcionBoton6+0xb4>)
 8001fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fac:	a320      	add	r3, pc, #128	; (adr r3, 8002030 <funcionBoton6+0xa8>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe f97b 	bl	80002ac <__adddf3>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4920      	ldr	r1, [pc, #128]	; (800203c <funcionBoton6+0xb4>)
 8001fbc:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <funcionBoton6+0xb0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00e f871 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Kp=");
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	491c      	ldr	r1, [pc, #112]	; (8002040 <funcionBoton6+0xb8>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f011 ff88 	bl	8013ee4 <siprintf>
    double2float(KpAux,cadena);
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001fdc:	f7ff fd78 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8001fe0:	1d3a      	adds	r2, r7, #4
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <funcionBoton6+0xbc>)
 8001fe4:	9303      	str	r3, [sp, #12]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	9302      	str	r3, [sp, #8]
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <funcionBoton6+0xc0>)
 8001ff4:	216e      	movs	r1, #110	; 0x6e
 8001ff6:	2046      	movs	r0, #70	; 0x46
 8001ff8:	f000 ffcf 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <funcionBoton6+0xbc>)
 8001ffe:	f000 fec3 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002002:	1d3a      	adds	r2, r7, #4
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <funcionBoton6+0xbc>)
 8002006:	9303      	str	r3, [sp, #12]
 8002008:	2301      	movs	r3, #1
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2364      	movs	r3, #100	; 0x64
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <funcionBoton6+0xc0>)
 8002016:	216e      	movs	r1, #110	; 0x6e
 8002018:	2046      	movs	r0, #70	; 0x46
 800201a:	f000 ffbe 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 800201e:	4809      	ldr	r0, [pc, #36]	; (8002044 <funcionBoton6+0xbc>)
 8002020:	f000 feb2 	bl	8002d88 <intercambiaBuffersLCD>


}
 8002024:	bf00      	nop
 8002026:	3770      	adds	r7, #112	; 0x70
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	f3af 8000 	nop.w
 8002030:	9999999a 	.word	0x9999999a
 8002034:	3fb99999 	.word	0x3fb99999
 8002038:	20000404 	.word	0x20000404
 800203c:	20000038 	.word	0x20000038
 8002040:	0801462c 	.word	0x0801462c
 8002044:	200004d8 	.word	0x200004d8
 8002048:	200004cc 	.word	0x200004cc
 800204c:	00000000 	.word	0x00000000

08002050 <funcionBoton7>:
void funcionBoton7() {  // Función a ejecutar cuando se pulse el botón
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a0      	sub	sp, #128	; 0x80
 8002054:	af04      	add	r7, sp, #16
	double KdAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <funcionBoton7+0xb0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f04f 31ff 	mov.w	r1, #4294967295
 800205e:	4618      	mov	r0, r3
 8002060:	f00d ffd2 	bl	8010008 <osSemaphoreAcquire>
	KdAux=Kd;
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <funcionBoton7+0xb4>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Kd+=0.1;  // Cuando se pulsa el botón, se resetea el contador
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <funcionBoton7+0xb4>)
 8002070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002074:	a320      	add	r3, pc, #128	; (adr r3, 80020f8 <funcionBoton7+0xa8>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe f917 	bl	80002ac <__adddf3>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4920      	ldr	r1, [pc, #128]	; (8002104 <funcionBoton7+0xb4>)
 8002084:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <funcionBoton7+0xb0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f00e f80d 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Kd=");
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	491c      	ldr	r1, [pc, #112]	; (8002108 <funcionBoton7+0xb8>)
 8002096:	4618      	mov	r0, r3
 8002098:	f011 ff24 	bl	8013ee4 <siprintf>
    double2float(KdAux,cadena);
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80020a4:	f7ff fd14 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 80020a8:	1d3a      	adds	r2, r7, #4
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <funcionBoton7+0xbc>)
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	2364      	movs	r3, #100	; 0x64
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <funcionBoton7+0xc0>)
 80020bc:	21be      	movs	r1, #190	; 0xbe
 80020be:	2046      	movs	r0, #70	; 0x46
 80020c0:	f000 ff6b 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <funcionBoton7+0xbc>)
 80020c6:	f000 fe5f 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 80020ca:	1d3a      	adds	r2, r7, #4
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <funcionBoton7+0xbc>)
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	2301      	movs	r3, #1
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2364      	movs	r3, #100	; 0x64
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <funcionBoton7+0xc0>)
 80020de:	21be      	movs	r1, #190	; 0xbe
 80020e0:	2046      	movs	r0, #70	; 0x46
 80020e2:	f000 ff5a 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <funcionBoton7+0xbc>)
 80020e8:	f000 fe4e 	bl	8002d88 <intercambiaBuffersLCD>
}
 80020ec:	bf00      	nop
 80020ee:	3770      	adds	r7, #112	; 0x70
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	f3af 8000 	nop.w
 80020f8:	9999999a 	.word	0x9999999a
 80020fc:	3fb99999 	.word	0x3fb99999
 8002100:	20000404 	.word	0x20000404
 8002104:	20000040 	.word	0x20000040
 8002108:	08014630 	.word	0x08014630
 800210c:	200004d8 	.word	0x200004d8
 8002110:	200004cc 	.word	0x200004cc
 8002114:	00000000 	.word	0x00000000

08002118 <funcionBoton8>:


void funcionBoton8() {  // Función a ejecutar cuando se pulse el botón
 8002118:	b580      	push	{r7, lr}
 800211a:	b0a0      	sub	sp, #128	; 0x80
 800211c:	af04      	add	r7, sp, #16
	double KiAux;
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <funcionBoton8+0xb0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f04f 31ff 	mov.w	r1, #4294967295
 8002126:	4618      	mov	r0, r3
 8002128:	f00d ff6e 	bl	8010008 <osSemaphoreAcquire>
	KiAux=Ki;
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <funcionBoton8+0xb4>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Ki+=0.1;  // Cuando se pulsa el botón, se resetea el contador
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <funcionBoton8+0xb4>)
 8002138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213c:	a320      	add	r3, pc, #128	; (adr r3, 80021c0 <funcionBoton8+0xa8>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe f8b3 	bl	80002ac <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4920      	ldr	r1, [pc, #128]	; (80021cc <funcionBoton8+0xb4>)
 800214c:	e9c1 2300 	strd	r2, r3, [r1]
	osSemaphoreRelease(semaforoContadorHandle);
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <funcionBoton8+0xb0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f00d ffa9 	bl	80100ac <osSemaphoreRelease>
    char cadena[100];
    sprintf(cadena, "Ki=");
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	491c      	ldr	r1, [pc, #112]	; (80021d0 <funcionBoton8+0xb8>)
 800215e:	4618      	mov	r0, r3
 8002160:	f011 fec0 	bl	8013ee4 <siprintf>
    double2float(KiAux,cadena);
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4618      	mov	r0, r3
 8002168:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800216c:	f7ff fcb0 	bl	8001ad0 <double2float>
    dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002170:	1d3a      	adds	r2, r7, #4
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <funcionBoton8+0xbc>)
 8002174:	9303      	str	r3, [sp, #12]
 8002176:	2301      	movs	r3, #1
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	2364      	movs	r3, #100	; 0x64
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <funcionBoton8+0xc0>)
 8002184:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002188:	2046      	movs	r0, #70	; 0x46
 800218a:	f000 ff06 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 800218e:	4811      	ldr	r0, [pc, #68]	; (80021d4 <funcionBoton8+0xbc>)
 8002190:	f000 fdfa 	bl	8002d88 <intercambiaBuffersLCD>
    dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002194:	1d3a      	adds	r2, r7, #4
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <funcionBoton8+0xbc>)
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	2301      	movs	r3, #1
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	2364      	movs	r3, #100	; 0x64
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2300      	movs	r3, #0
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <funcionBoton8+0xc0>)
 80021a8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021ac:	2046      	movs	r0, #70	; 0x46
 80021ae:	f000 fef4 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
    intercambiaBuffersLCD(&pantallaLCD);
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <funcionBoton8+0xbc>)
 80021b4:	f000 fde8 	bl	8002d88 <intercambiaBuffersLCD>
}
 80021b8:	bf00      	nop
 80021ba:	3770      	adds	r7, #112	; 0x70
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	9999999a 	.word	0x9999999a
 80021c4:	3fb99999 	.word	0x3fb99999
 80021c8:	20000404 	.word	0x20000404
 80021cc:	20000048 	.word	0x20000048
 80021d0:	08014634 	.word	0x08014634
 80021d4:	200004d8 	.word	0x200004d8
 80021d8:	200004cc 	.word	0x200004cc

080021dc <StartDefaultTask>:
#define COLOR_TEXTO 0xFFFFFF00  // Color amarillo para el texto
#define COLOR_DIBUJO 0xFFFF0000  // Color rojo para dibujar

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0a4      	sub	sp, #144	; 0x90
 80021e0:	af06      	add	r7, sp, #24
 80021e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80021e4:	f011 fa36 	bl	8013654 <MX_USB_HOST_Init>

  	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
  	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
  	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET); //siempre calor Probar otros valores

  inicializaPantalla2Buffers(1, COLOR_FONDO_PANTALLA, industria3_240x320, &pantallaLCD);
 80021e8:	4bb5      	ldr	r3, [pc, #724]	; (80024c0 <StartDefaultTask+0x2e4>)
 80021ea:	4ab6      	ldr	r2, [pc, #728]	; (80024c4 <StartDefaultTask+0x2e8>)
 80021ec:	49b6      	ldr	r1, [pc, #728]	; (80024c8 <StartDefaultTask+0x2ec>)
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fd32 	bl	8002c58 <inicializaPantalla2Buffers>

  inicializaBoton(5, 10, 60, 60, menos,funcionBoton1, 1, 1, &botonReset1, &pantallaLCD);
 80021f4:	4bb2      	ldr	r3, [pc, #712]	; (80024c0 <StartDefaultTask+0x2e4>)
 80021f6:	9305      	str	r3, [sp, #20]
 80021f8:	4bb4      	ldr	r3, [pc, #720]	; (80024cc <StartDefaultTask+0x2f0>)
 80021fa:	9304      	str	r3, [sp, #16]
 80021fc:	2301      	movs	r3, #1
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	2301      	movs	r3, #1
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	4bb2      	ldr	r3, [pc, #712]	; (80024d0 <StartDefaultTask+0x2f4>)
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	4bb2      	ldr	r3, [pc, #712]	; (80024d4 <StartDefaultTask+0x2f8>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	233c      	movs	r3, #60	; 0x3c
 800220e:	223c      	movs	r2, #60	; 0x3c
 8002210:	210a      	movs	r1, #10
 8002212:	2005      	movs	r0, #5
 8002214:	f000 fc77 	bl	8002b06 <inicializaBoton>
  inicializaBoton(5, 90, 60, 60, menos,funcionBoton2, 1, 1, &botonReset2, &pantallaLCD);
 8002218:	4ba9      	ldr	r3, [pc, #676]	; (80024c0 <StartDefaultTask+0x2e4>)
 800221a:	9305      	str	r3, [sp, #20]
 800221c:	4bae      	ldr	r3, [pc, #696]	; (80024d8 <StartDefaultTask+0x2fc>)
 800221e:	9304      	str	r3, [sp, #16]
 8002220:	2301      	movs	r3, #1
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	2301      	movs	r3, #1
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	4bac      	ldr	r3, [pc, #688]	; (80024dc <StartDefaultTask+0x300>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	4ba9      	ldr	r3, [pc, #676]	; (80024d4 <StartDefaultTask+0x2f8>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	233c      	movs	r3, #60	; 0x3c
 8002232:	223c      	movs	r2, #60	; 0x3c
 8002234:	215a      	movs	r1, #90	; 0x5a
 8002236:	2005      	movs	r0, #5
 8002238:	f000 fc65 	bl	8002b06 <inicializaBoton>
  inicializaBoton(5, 170, 60, 60, menos,funcionBoton3, 1, 1, &botonReset3, &pantallaLCD);
 800223c:	4ba0      	ldr	r3, [pc, #640]	; (80024c0 <StartDefaultTask+0x2e4>)
 800223e:	9305      	str	r3, [sp, #20]
 8002240:	4ba7      	ldr	r3, [pc, #668]	; (80024e0 <StartDefaultTask+0x304>)
 8002242:	9304      	str	r3, [sp, #16]
 8002244:	2301      	movs	r3, #1
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	2301      	movs	r3, #1
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	4ba5      	ldr	r3, [pc, #660]	; (80024e4 <StartDefaultTask+0x308>)
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <StartDefaultTask+0x2f8>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	233c      	movs	r3, #60	; 0x3c
 8002256:	223c      	movs	r2, #60	; 0x3c
 8002258:	21aa      	movs	r1, #170	; 0xaa
 800225a:	2005      	movs	r0, #5
 800225c:	f000 fc53 	bl	8002b06 <inicializaBoton>
  inicializaBoton(5, 250, 60, 60, menos,funcionBoton4, 1, 1, &botonReset4, &pantallaLCD);
 8002260:	4b97      	ldr	r3, [pc, #604]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002262:	9305      	str	r3, [sp, #20]
 8002264:	4ba0      	ldr	r3, [pc, #640]	; (80024e8 <StartDefaultTask+0x30c>)
 8002266:	9304      	str	r3, [sp, #16]
 8002268:	2301      	movs	r3, #1
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	2301      	movs	r3, #1
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <StartDefaultTask+0x310>)
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <StartDefaultTask+0x2f8>)
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	233c      	movs	r3, #60	; 0x3c
 800227a:	223c      	movs	r2, #60	; 0x3c
 800227c:	21fa      	movs	r1, #250	; 0xfa
 800227e:	2005      	movs	r0, #5
 8002280:	f000 fc41 	bl	8002b06 <inicializaBoton>

  inicializaBoton(170, 10, 60, 60, mas,funcionBoton5, 1, 1, &botonReset5, &pantallaLCD);
 8002284:	4b8e      	ldr	r3, [pc, #568]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002286:	9305      	str	r3, [sp, #20]
 8002288:	4b99      	ldr	r3, [pc, #612]	; (80024f0 <StartDefaultTask+0x314>)
 800228a:	9304      	str	r3, [sp, #16]
 800228c:	2301      	movs	r3, #1
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	2301      	movs	r3, #1
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	4b97      	ldr	r3, [pc, #604]	; (80024f4 <StartDefaultTask+0x318>)
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	4b97      	ldr	r3, [pc, #604]	; (80024f8 <StartDefaultTask+0x31c>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	233c      	movs	r3, #60	; 0x3c
 800229e:	223c      	movs	r2, #60	; 0x3c
 80022a0:	210a      	movs	r1, #10
 80022a2:	20aa      	movs	r0, #170	; 0xaa
 80022a4:	f000 fc2f 	bl	8002b06 <inicializaBoton>
  inicializaBoton(170, 90, 60, 60, mas,funcionBoton6, 1, 1, &botonReset6, &pantallaLCD);
 80022a8:	4b85      	ldr	r3, [pc, #532]	; (80024c0 <StartDefaultTask+0x2e4>)
 80022aa:	9305      	str	r3, [sp, #20]
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <StartDefaultTask+0x320>)
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	2301      	movs	r3, #1
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	4b91      	ldr	r3, [pc, #580]	; (8002500 <StartDefaultTask+0x324>)
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	4b8e      	ldr	r3, [pc, #568]	; (80024f8 <StartDefaultTask+0x31c>)
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	233c      	movs	r3, #60	; 0x3c
 80022c2:	223c      	movs	r2, #60	; 0x3c
 80022c4:	215a      	movs	r1, #90	; 0x5a
 80022c6:	20aa      	movs	r0, #170	; 0xaa
 80022c8:	f000 fc1d 	bl	8002b06 <inicializaBoton>
  inicializaBoton(170, 170, 60, 60, mas,funcionBoton7, 1, 1, &botonReset7, &pantallaLCD);
 80022cc:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <StartDefaultTask+0x2e4>)
 80022ce:	9305      	str	r3, [sp, #20]
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <StartDefaultTask+0x328>)
 80022d2:	9304      	str	r3, [sp, #16]
 80022d4:	2301      	movs	r3, #1
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	2301      	movs	r3, #1
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	4b8a      	ldr	r3, [pc, #552]	; (8002508 <StartDefaultTask+0x32c>)
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	4b85      	ldr	r3, [pc, #532]	; (80024f8 <StartDefaultTask+0x31c>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	233c      	movs	r3, #60	; 0x3c
 80022e6:	223c      	movs	r2, #60	; 0x3c
 80022e8:	21aa      	movs	r1, #170	; 0xaa
 80022ea:	20aa      	movs	r0, #170	; 0xaa
 80022ec:	f000 fc0b 	bl	8002b06 <inicializaBoton>
  inicializaBoton(170, 250, 60, 60, mas,funcionBoton8, 1, 1, &botonReset8, &pantallaLCD);
 80022f0:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <StartDefaultTask+0x2e4>)
 80022f2:	9305      	str	r3, [sp, #20]
 80022f4:	4b85      	ldr	r3, [pc, #532]	; (800250c <StartDefaultTask+0x330>)
 80022f6:	9304      	str	r3, [sp, #16]
 80022f8:	2301      	movs	r3, #1
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	2301      	movs	r3, #1
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <StartDefaultTask+0x334>)
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	4b7c      	ldr	r3, [pc, #496]	; (80024f8 <StartDefaultTask+0x31c>)
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	233c      	movs	r3, #60	; 0x3c
 800230a:	223c      	movs	r2, #60	; 0x3c
 800230c:	21fa      	movs	r1, #250	; 0xfa
 800230e:	20aa      	movs	r0, #170	; 0xaa
 8002310:	f000 fbf9 	bl	8002b06 <inicializaBoton>

  inicializaJuegoCaracteresAlpha(9, 18, 0, Consolas9x18Amarillo, &juegoConsolas9x18);
 8002314:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <StartDefaultTask+0x338>)
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <StartDefaultTask+0x33c>)
 800231a:	2200      	movs	r2, #0
 800231c:	2112      	movs	r1, #18
 800231e:	2009      	movs	r0, #9
 8002320:	f000 fde4 	bl	8002eec <inicializaJuegoCaracteresAlpha>
  char cadena[100];
  sprintf(cadena, "Cnsg=");
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	497c      	ldr	r1, [pc, #496]	; (800251c <StartDefaultTask+0x340>)
 800232a:	4618      	mov	r0, r3
 800232c:	f011 fdda 	bl	8013ee4 <siprintf>
  double2float(Consigna,cadena);
 8002330:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <StartDefaultTask+0x344>)
 8002332:	ed93 7b00 	vldr	d7, [r3]
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4618      	mov	r0, r3
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	f7ff fbc4 	bl	8001ad0 <double2float>
  dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002348:	f107 0210 	add.w	r2, r7, #16
 800234c:	4b5c      	ldr	r3, [pc, #368]	; (80024c0 <StartDefaultTask+0x2e4>)
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	2301      	movs	r3, #1
 8002352:	9302      	str	r3, [sp, #8]
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2300      	movs	r3, #0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <StartDefaultTask+0x338>)
 800235e:	211e      	movs	r1, #30
 8002360:	2046      	movs	r0, #70	; 0x46
 8002362:	f000 fe1a 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 8002366:	4856      	ldr	r0, [pc, #344]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002368:	f000 fd0e 	bl	8002d88 <intercambiaBuffersLCD>
  dibujaCadenaCaracteresAlpha(70, 30, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 800236c:	f107 0210 	add.w	r2, r7, #16
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002372:	9303      	str	r3, [sp, #12]
 8002374:	2301      	movs	r3, #1
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <StartDefaultTask+0x338>)
 8002382:	211e      	movs	r1, #30
 8002384:	2046      	movs	r0, #70	; 0x46
 8002386:	f000 fe08 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 800238a:	484d      	ldr	r0, [pc, #308]	; (80024c0 <StartDefaultTask+0x2e4>)
 800238c:	f000 fcfc 	bl	8002d88 <intercambiaBuffersLCD>
  sprintf(cadena, "Kp=");
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4963      	ldr	r1, [pc, #396]	; (8002524 <StartDefaultTask+0x348>)
 8002396:	4618      	mov	r0, r3
 8002398:	f011 fda4 	bl	8013ee4 <siprintf>
  double2float(Kp,cadena);
 800239c:	4b62      	ldr	r3, [pc, #392]	; (8002528 <StartDefaultTask+0x34c>)
 800239e:	ed93 7b00 	vldr	d7, [r3]
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	eef0 0a67 	vmov.f32	s1, s15
 80023b0:	f7ff fb8e 	bl	8001ad0 <double2float>
  dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 80023b4:	f107 0210 	add.w	r2, r7, #16
 80023b8:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <StartDefaultTask+0x2e4>)
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	2301      	movs	r3, #1
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2364      	movs	r3, #100	; 0x64
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <StartDefaultTask+0x338>)
 80023ca:	216e      	movs	r1, #110	; 0x6e
 80023cc:	2046      	movs	r0, #70	; 0x46
 80023ce:	f000 fde4 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 80023d2:	483b      	ldr	r0, [pc, #236]	; (80024c0 <StartDefaultTask+0x2e4>)
 80023d4:	f000 fcd8 	bl	8002d88 <intercambiaBuffersLCD>
  dibujaCadenaCaracteresAlpha(70, 110, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 80023d8:	f107 0210 	add.w	r2, r7, #16
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <StartDefaultTask+0x2e4>)
 80023de:	9303      	str	r3, [sp, #12]
 80023e0:	2301      	movs	r3, #1
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2364      	movs	r3, #100	; 0x64
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2300      	movs	r3, #0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <StartDefaultTask+0x338>)
 80023ee:	216e      	movs	r1, #110	; 0x6e
 80023f0:	2046      	movs	r0, #70	; 0x46
 80023f2:	f000 fdd2 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 80023f6:	4832      	ldr	r0, [pc, #200]	; (80024c0 <StartDefaultTask+0x2e4>)
 80023f8:	f000 fcc6 	bl	8002d88 <intercambiaBuffersLCD>
  sprintf(cadena, "Kd=");
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	494a      	ldr	r1, [pc, #296]	; (800252c <StartDefaultTask+0x350>)
 8002402:	4618      	mov	r0, r3
 8002404:	f011 fd6e 	bl	8013ee4 <siprintf>
  double2float(Kd,cadena);
 8002408:	4b49      	ldr	r3, [pc, #292]	; (8002530 <StartDefaultTask+0x354>)
 800240a:	ed93 7b00 	vldr	d7, [r3]
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4618      	mov	r0, r3
 8002414:	eeb0 0a47 	vmov.f32	s0, s14
 8002418:	eef0 0a67 	vmov.f32	s1, s15
 800241c:	f7ff fb58 	bl	8001ad0 <double2float>
  dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002420:	f107 0210 	add.w	r2, r7, #16
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002426:	9303      	str	r3, [sp, #12]
 8002428:	2301      	movs	r3, #1
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4b37      	ldr	r3, [pc, #220]	; (8002514 <StartDefaultTask+0x338>)
 8002436:	21be      	movs	r1, #190	; 0xbe
 8002438:	2046      	movs	r0, #70	; 0x46
 800243a:	f000 fdae 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 800243e:	4820      	ldr	r0, [pc, #128]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002440:	f000 fca2 	bl	8002d88 <intercambiaBuffersLCD>
  //sprintf(cadena, "Kd=");
  dibujaCadenaCaracteresAlpha(70, 190, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 8002444:	f107 0210 	add.w	r2, r7, #16
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <StartDefaultTask+0x2e4>)
 800244a:	9303      	str	r3, [sp, #12]
 800244c:	2301      	movs	r3, #1
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2364      	movs	r3, #100	; 0x64
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <StartDefaultTask+0x338>)
 800245a:	21be      	movs	r1, #190	; 0xbe
 800245c:	2046      	movs	r0, #70	; 0x46
 800245e:	f000 fd9c 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 8002462:	4817      	ldr	r0, [pc, #92]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002464:	f000 fc90 	bl	8002d88 <intercambiaBuffersLCD>
  sprintf(cadena, "Ki=");
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4931      	ldr	r1, [pc, #196]	; (8002534 <StartDefaultTask+0x358>)
 800246e:	4618      	mov	r0, r3
 8002470:	f011 fd38 	bl	8013ee4 <siprintf>
  double2float(Ki,cadena);
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <StartDefaultTask+0x35c>)
 8002476:	ed93 7b00 	vldr	d7, [r3]
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4618      	mov	r0, r3
 8002480:	eeb0 0a47 	vmov.f32	s0, s14
 8002484:	eef0 0a67 	vmov.f32	s1, s15
 8002488:	f7ff fb22 	bl	8001ad0 <double2float>
  dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0,100, 1, &pantallaLCD);
 800248c:	f107 0210 	add.w	r2, r7, #16
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <StartDefaultTask+0x2e4>)
 8002492:	9303      	str	r3, [sp, #12]
 8002494:	2301      	movs	r3, #1
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	2364      	movs	r3, #100	; 0x64
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <StartDefaultTask+0x338>)
 80024a2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80024a6:	2046      	movs	r0, #70	; 0x46
 80024a8:	f000 fd77 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <StartDefaultTask+0x2e4>)
 80024ae:	f000 fc6b 	bl	8002d88 <intercambiaBuffersLCD>
  dibujaCadenaCaracteresAlpha(70, 270, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
 80024b2:	f107 0210 	add.w	r2, r7, #16
 80024b6:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <StartDefaultTask+0x2e4>)
 80024b8:	9303      	str	r3, [sp, #12]
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03e      	b.n	800253c <StartDefaultTask+0x360>
 80024be:	bf00      	nop
 80024c0:	200004d8 	.word	0x200004d8
 80024c4:	080236ec 	.word	0x080236ec
 80024c8:	ff000030 	.word	0xff000030
 80024cc:	20000408 	.word	0x20000408
 80024d0:	08001b41 	.word	0x08001b41
 80024d4:	08071f94 	.word	0x08071f94
 80024d8:	2000041c 	.word	0x2000041c
 80024dc:	08001c21 	.word	0x08001c21
 80024e0:	20000430 	.word	0x20000430
 80024e4:	08001d01 	.word	0x08001d01
 80024e8:	20000444 	.word	0x20000444
 80024ec:	08001de1 	.word	0x08001de1
 80024f0:	20000458 	.word	0x20000458
 80024f4:	08001ec1 	.word	0x08001ec1
 80024f8:	0806e754 	.word	0x0806e754
 80024fc:	2000046c 	.word	0x2000046c
 8002500:	08001f89 	.word	0x08001f89
 8002504:	20000480 	.word	0x20000480
 8002508:	08002051 	.word	0x08002051
 800250c:	20000494 	.word	0x20000494
 8002510:	08002119 	.word	0x08002119
 8002514:	200004cc 	.word	0x200004cc
 8002518:	08014674 	.word	0x08014674
 800251c:	08014624 	.word	0x08014624
 8002520:	20000050 	.word	0x20000050
 8002524:	0801462c 	.word	0x0801462c
 8002528:	20000038 	.word	0x20000038
 800252c:	08014630 	.word	0x08014630
 8002530:	20000040 	.word	0x20000040
 8002534:	08014634 	.word	0x08014634
 8002538:	20000048 	.word	0x20000048
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2364      	movs	r3, #100	; 0x64
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2300      	movs	r3, #0
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <StartDefaultTask+0x414>)
 8002548:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800254c:	2046      	movs	r0, #70	; 0x46
 800254e:	f000 fd24 	bl	8002f9a <dibujaCadenaCaracteresAlpha>
  intercambiaBuffersLCD(&pantallaLCD);
 8002552:	4828      	ldr	r0, [pc, #160]	; (80025f4 <StartDefaultTask+0x418>)
 8002554:	f000 fc18 	bl	8002d88 <intercambiaBuffersLCD>
  //sprintf(cadena, "Ki=");
  osTimerStart(temporizadorHandle,100);
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <StartDefaultTask+0x41c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2164      	movs	r1, #100	; 0x64
 800255e:	4618      	mov	r0, r3
 8002560:	f00d fc9a 	bl	800fe98 <osTimerStart>
  while(1) {  // Repite contínuamente //.



        uint16_t xClick, yClick;
        int pulsada = pantallaPulsada( &xClick, &yClick);
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	f107 030e 	add.w	r3, r7, #14
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa79 	bl	8002a66 <pantallaPulsada>
 8002574:	4603      	mov	r3, r0
 8002576:	677b      	str	r3, [r7, #116]	; 0x74
        atiendeBoton(xClick, yClick, pulsada, &botonReset1);
 8002578:	89f8      	ldrh	r0, [r7, #14]
 800257a:	89b9      	ldrh	r1, [r7, #12]
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <StartDefaultTask+0x420>)
 8002582:	f000 fa88 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset2);
 8002586:	89f8      	ldrh	r0, [r7, #14]
 8002588:	89b9      	ldrh	r1, [r7, #12]
 800258a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <StartDefaultTask+0x424>)
 8002590:	f000 fa81 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset3);
 8002594:	89f8      	ldrh	r0, [r7, #14]
 8002596:	89b9      	ldrh	r1, [r7, #12]
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <StartDefaultTask+0x428>)
 800259e:	f000 fa7a 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset4);
 80025a2:	89f8      	ldrh	r0, [r7, #14]
 80025a4:	89b9      	ldrh	r1, [r7, #12]
 80025a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <StartDefaultTask+0x42c>)
 80025ac:	f000 fa73 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset5);
 80025b0:	89f8      	ldrh	r0, [r7, #14]
 80025b2:	89b9      	ldrh	r1, [r7, #12]
 80025b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <StartDefaultTask+0x430>)
 80025ba:	f000 fa6c 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset6);
 80025be:	89f8      	ldrh	r0, [r7, #14]
 80025c0:	89b9      	ldrh	r1, [r7, #12]
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <StartDefaultTask+0x434>)
 80025c8:	f000 fa65 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset7);
 80025cc:	89f8      	ldrh	r0, [r7, #14]
 80025ce:	89b9      	ldrh	r1, [r7, #12]
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <StartDefaultTask+0x438>)
 80025d6:	f000 fa5e 	bl	8002a96 <atiendeBoton>
        atiendeBoton(xClick, yClick, pulsada, &botonReset8);
 80025da:	89f8      	ldrh	r0, [r7, #14]
 80025dc:	89b9      	ldrh	r1, [r7, #12]
 80025de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <StartDefaultTask+0x43c>)
 80025e4:	f000 fa57 	bl	8002a96 <atiendeBoton>
        osDelay(100);
 80025e8:	2064      	movs	r0, #100	; 0x64
 80025ea:	f00d fba9 	bl	800fd40 <osDelay>
  while(1) {  // Repite contínuamente //.
 80025ee:	e7b9      	b.n	8002564 <StartDefaultTask+0x388>
 80025f0:	200004cc 	.word	0x200004cc
 80025f4:	200004d8 	.word	0x200004d8
 80025f8:	20000400 	.word	0x20000400
 80025fc:	20000408 	.word	0x20000408
 8002600:	2000041c 	.word	0x2000041c
 8002604:	20000430 	.word	0x20000430
 8002608:	20000444 	.word	0x20000444
 800260c:	20000458 	.word	0x20000458
 8002610:	2000046c 	.word	0x2000046c
 8002614:	20000480 	.word	0x20000480
 8002618:	20000494 	.word	0x20000494

0800261c <fTareaPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTareaPantalla */
void fTareaPantalla(void *argument)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTareaPantalla */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f00d fb8b 	bl	800fd40 <osDelay>
 800262a:	e7fb      	b.n	8002624 <fTareaPantalla+0x8>
 800262c:	0000      	movs	r0, r0
	...

08002630 <temporizadorTick>:
  /* USER CODE END fTareaPantalla */
}

/* temporizadorTick function */
void temporizadorTick(void *argument)
{
 8002630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002634:	b091      	sub	sp, #68	; 0x44
 8002636:	af04      	add	r7, sp, #16
 8002638:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizadorTick */
double Kpp,Kdd,Kii,error;


cntTime++;
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <temporizadorTick+0x230>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a87      	ldr	r2, [pc, #540]	; (8002860 <temporizadorTick+0x230>)
 8002642:	6013      	str	r3, [r2, #0]
if (cntTime>ciclo)
 8002644:	4b86      	ldr	r3, [pc, #536]	; (8002860 <temporizadorTick+0x230>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b86      	ldr	r3, [pc, #536]	; (8002864 <temporizadorTick+0x234>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	dd05      	ble.n	800265c <temporizadorTick+0x2c>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	2110      	movs	r1, #16
 8002654:	4884      	ldr	r0, [pc, #528]	; (8002868 <temporizadorTick+0x238>)
 8002656:	f004 f9a1 	bl	800699c <HAL_GPIO_WritePin>
 800265a:	e004      	b.n	8002666 <temporizadorTick+0x36>
else
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 800265c:	2201      	movs	r2, #1
 800265e:	2110      	movs	r1, #16
 8002660:	4881      	ldr	r0, [pc, #516]	; (8002868 <temporizadorTick+0x238>)
 8002662:	f004 f99b 	bl	800699c <HAL_GPIO_WritePin>
if (cntTime==periodo)
 8002666:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <temporizadorTick+0x230>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b80      	ldr	r3, [pc, #512]	; (800286c <temporizadorTick+0x23c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d102      	bne.n	8002678 <temporizadorTick+0x48>
	cntTime=0;
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <temporizadorTick+0x230>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
//-----------------------------------------------------------------------------

cntTs--;
 8002678:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <temporizadorTick+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	4a7c      	ldr	r2, [pc, #496]	; (8002870 <temporizadorTick+0x240>)
 8002680:	6013      	str	r3, [r2, #0]
if(cntTs==0)
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <temporizadorTick+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 8157 	bne.w	800293a <temporizadorTick+0x30a>
	{
	cntTs=Ts;
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <temporizadorTick+0x244>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a77      	ldr	r2, [pc, #476]	; (8002870 <temporizadorTick+0x240>)
 8002692:	6013      	str	r3, [r2, #0]
	osSemaphoreAcquire(semaforoContadorHandle,osWaitForever);
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <temporizadorTick+0x248>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	4618      	mov	r0, r3
 800269e:	f00d fcb3 	bl	8010008 <osSemaphoreAcquire>
	/*Kpp=Kp;
	Kdd=Kd;
	Kii=Ki;*/
	//Consigna=Consigna;
	osSemaphoreRelease(semaforoContadorHandle);
 80026a2:	4b75      	ldr	r3, [pc, #468]	; (8002878 <temporizadorTick+0x248>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00d fd00 	bl	80100ac <osSemaphoreRelease>
	/*char mat[10];
	sprintf(mat, "In=%d",medida);
	dibujaCadenaCaracteresAlpha(70, 30, mat, &juegoConsolas9x18, 0, 200, 0, &pantallaLCD);*/
	HAL_ADC_Start(&hadc1); //inicio conversión
 80026ac:	4873      	ldr	r0, [pc, #460]	; (800287c <temporizadorTick+0x24c>)
 80026ae:	f002 fe49 	bl	8005344 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 80026b2:	2164      	movs	r1, #100	; 0x64
 80026b4:	4871      	ldr	r0, [pc, #452]	; (800287c <temporizadorTick+0x24c>)
 80026b6:	f002 ff4a 	bl	800554e <HAL_ADC_PollForConversion>
	medida=HAL_ADC_GetValue(&hadc1);
 80026ba:	4870      	ldr	r0, [pc, #448]	; (800287c <temporizadorTick+0x24c>)
 80026bc:	f002 ffd2 	bl	8005664 <HAL_ADC_GetValue>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b6e      	ldr	r3, [pc, #440]	; (8002880 <temporizadorTick+0x250>)
 80026c6:	601a      	str	r2, [r3, #0]
	medida=medida*330/4096/3;
 80026c8:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <temporizadorTick+0x250>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a6b      	ldr	r2, [pc, #428]	; (8002884 <temporizadorTick+0x254>)
 80026d6:	fb82 1203 	smull	r1, r2, r2, r3
 80026da:	12d2      	asrs	r2, r2, #11
 80026dc:	17db      	asrs	r3, r3, #31
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a67      	ldr	r2, [pc, #412]	; (8002880 <temporizadorTick+0x250>)
 80026e2:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1); //fin conversión
 80026e4:	4865      	ldr	r0, [pc, #404]	; (800287c <temporizadorTick+0x24c>)
 80026e6:	f002 feff 	bl	80054e8 <HAL_ADC_Stop>

	error=Consigna-medida; //diferencia entre la temperatura consigna y la real
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <temporizadorTick+0x258>)
 80026ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <temporizadorTick+0x250>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff25 	bl	8000544 <__aeabi_i2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	f7fd fdd1 	bl	80002a8 <__aeabi_dsub>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	sumaError+=error;
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <temporizadorTick+0x25c>)
 8002710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002714:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002718:	f7fd fdc8 	bl	80002ac <__adddf3>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	495a      	ldr	r1, [pc, #360]	; (800288c <temporizadorTick+0x25c>)
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
	actua=(Kp*error)+(Ki*Ts*0.1*sumaError)+(Kd*Ts*0.1*(error-errorAnt)); //PID
 8002726:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <temporizadorTick+0x260>)
 8002728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002730:	f7fd ff72 	bl	8000618 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <temporizadorTick+0x244>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feff 	bl	8000544 <__aeabi_i2d>
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <temporizadorTick+0x264>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd ff64 	bl	8000618 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	a33f      	add	r3, pc, #252	; (adr r3, 8002858 <temporizadorTick+0x228>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff5b 	bl	8000618 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4b48      	ldr	r3, [pc, #288]	; (800288c <temporizadorTick+0x25c>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ff52 	bl	8000618 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd96 	bl	80002ac <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <temporizadorTick+0x244>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fed9 	bl	8000544 <__aeabi_i2d>
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <temporizadorTick+0x268>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd ff3e 	bl	8000618 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	a32c      	add	r3, pc, #176	; (adr r3, 8002858 <temporizadorTick+0x228>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd ff35 	bl	8000618 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <temporizadorTick+0x26c>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027c0:	f7fd fd72 	bl	80002a8 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4640      	mov	r0, r8
 80027ca:	4649      	mov	r1, r9
 80027cc:	f7fd ff24 	bl	8000618 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd68 	bl	80002ac <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	492f      	ldr	r1, [pc, #188]	; (80028a0 <temporizadorTick+0x270>)
 80027e2:	e9c1 2300 	strd	r2, r3, [r1]
	errorAnt=error;
 80027e6:	492d      	ldr	r1, [pc, #180]	; (800289c <temporizadorTick+0x26c>)
 80027e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ec:	e9c1 2300 	strd	r2, r3, [r1]
	double abs=actua;
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <temporizadorTick+0x270>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (actua>1){ //si está más caliente
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <temporizadorTick+0x270>)
 80027fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <temporizadorTick+0x274>)
 8002806:	f7fe f997 	bl	8000b38 <__aeabi_dcmpgt>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <temporizadorTick+0x1f6>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2104      	movs	r1, #4
 8002814:	4814      	ldr	r0, [pc, #80]	; (8002868 <temporizadorTick+0x238>)
 8002816:	f004 f8c1 	bl	800699c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	2108      	movs	r1, #8
 800281e:	4812      	ldr	r0, [pc, #72]	; (8002868 <temporizadorTick+0x238>)
 8002820:	f004 f8bc 	bl	800699c <HAL_GPIO_WritePin>
 8002824:	e04c      	b.n	80028c0 <temporizadorTick+0x290>
	}
	else if (actua<-1){ //si está más frío
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <temporizadorTick+0x270>)
 8002828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <temporizadorTick+0x278>)
 8002832:	f7fe f963 	bl	8000afc <__aeabi_dcmplt>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d037      	beq.n	80028ac <temporizadorTick+0x27c>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	2104      	movs	r1, #4
 8002840:	4809      	ldr	r0, [pc, #36]	; (8002868 <temporizadorTick+0x238>)
 8002842:	f004 f8ab 	bl	800699c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8002846:	2201      	movs	r2, #1
 8002848:	2108      	movs	r1, #8
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <temporizadorTick+0x238>)
 800284c:	f004 f8a6 	bl	800699c <HAL_GPIO_WritePin>
 8002850:	e036      	b.n	80028c0 <temporizadorTick+0x290>
 8002852:	bf00      	nop
 8002854:	f3af 8000 	nop.w
 8002858:	9999999a 	.word	0x9999999a
 800285c:	3fb99999 	.word	0x3fb99999
 8002860:	200004c4 	.word	0x200004c4
 8002864:	20000064 	.word	0x20000064
 8002868:	40021000 	.word	0x40021000
 800286c:	20000068 	.word	0x20000068
 8002870:	2000005c 	.word	0x2000005c
 8002874:	20000058 	.word	0x20000058
 8002878:	20000404 	.word	0x20000404
 800287c:	20000154 	.word	0x20000154
 8002880:	200004c8 	.word	0x200004c8
 8002884:	2aaaaaab 	.word	0x2aaaaaab
 8002888:	20000050 	.word	0x20000050
 800288c:	200004b8 	.word	0x200004b8
 8002890:	20000038 	.word	0x20000038
 8002894:	20000048 	.word	0x20000048
 8002898:	20000040 	.word	0x20000040
 800289c:	200004a8 	.word	0x200004a8
 80028a0:	200004b0 	.word	0x200004b0
 80028a4:	3ff00000 	.word	0x3ff00000
 80028a8:	bff00000 	.word	0xbff00000
	}
	else { //si está a la temperatura correcta
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2104      	movs	r1, #4
 80028b0:	4852      	ldr	r0, [pc, #328]	; (80029fc <temporizadorTick+0x3cc>)
 80028b2:	f004 f873 	bl	800699c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2108      	movs	r1, #8
 80028ba:	4850      	ldr	r0, [pc, #320]	; (80029fc <temporizadorTick+0x3cc>)
 80028bc:	f004 f86e 	bl	800699c <HAL_GPIO_WritePin>
	}
	if (actua>100)
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <temporizadorTick+0x3d0>)
 80028c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <temporizadorTick+0x3d4>)
 80028cc:	f7fe f934 	bl	8000b38 <__aeabi_dcmpgt>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <temporizadorTick+0x2b2>
		actua=100;
 80028d6:	494a      	ldr	r1, [pc, #296]	; (8002a00 <temporizadorTick+0x3d0>)
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <temporizadorTick+0x3d4>)
 80028de:	e9c1 2300 	strd	r2, r3, [r1]
	if (actua<0)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <temporizadorTick+0x3d0>)
 80028e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fe f904 	bl	8000afc <__aeabi_dcmplt>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <temporizadorTick+0x2da>
		abs=-actua;
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <temporizadorTick+0x3d0>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	4611      	mov	r1, r2
 8002902:	62b9      	str	r1, [r7, #40]	; 0x28
 8002904:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (actua <-100)
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <temporizadorTick+0x3d0>)
 800290c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <temporizadorTick+0x3d8>)
 8002916:	f7fe f8f1 	bl	8000afc <__aeabi_dcmplt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <temporizadorTick+0x2fc>
		actua=-100;
 8002920:	4937      	ldr	r1, [pc, #220]	; (8002a00 <temporizadorTick+0x3d0>)
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <temporizadorTick+0x3d8>)
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
	ciclo=(int)abs;
 800292c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002930:	f7fe f90c 	bl	8000b4c <__aeabi_d2iz>
 8002934:	4603      	mov	r3, r0
 8002936:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <temporizadorTick+0x3dc>)
 8002938:	6013      	str	r3, [r2, #0]
	}

//-------------------------------------------------------------
cntTimer--;
 800293a:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <temporizadorTick+0x3e0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <temporizadorTick+0x3e0>)
 8002942:	6013      	str	r3, [r2, #0]
if (cntTimer==0)
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <temporizadorTick+0x3e0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d151      	bne.n	80029f0 <temporizadorTick+0x3c0>
	{
	char cadena[20];
	cntTimer=(cntTs)+espera;
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <temporizadorTick+0x3e4>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <temporizadorTick+0x3e8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4413      	add	r3, r2
 8002956:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <temporizadorTick+0x3e0>)
 8002958:	6013      	str	r3, [r2, #0]
	//sprintf(cadena,"%d %d %d\r\n",(int)Consigna,(int)actua,(int)medida);
	sprintf(cadena,"%d %d %d %d %d %d\r\n",(int)Consigna,(int)actua,(int)medida,(int)Kp,(int)Kd,(int)Ki);
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <temporizadorTick+0x3ec>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f8f2 	bl	8000b4c <__aeabi_d2iz>
 8002968:	4680      	mov	r8, r0
 800296a:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <temporizadorTick+0x3d0>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f8ea 	bl	8000b4c <__aeabi_d2iz>
 8002978:	4681      	mov	r9, r0
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <temporizadorTick+0x3f0>)
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <temporizadorTick+0x3f4>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe f8e0 	bl	8000b4c <__aeabi_d2iz>
 800298c:	4605      	mov	r5, r0
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <temporizadorTick+0x3f8>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f8d8 	bl	8000b4c <__aeabi_d2iz>
 800299c:	4606      	mov	r6, r0
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <temporizadorTick+0x3fc>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f8d0 	bl	8000b4c <__aeabi_d2iz>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f107 000c 	add.w	r0, r7, #12
 80029b2:	9303      	str	r3, [sp, #12]
 80029b4:	9602      	str	r6, [sp, #8]
 80029b6:	9501      	str	r5, [sp, #4]
 80029b8:	9400      	str	r4, [sp, #0]
 80029ba:	464b      	mov	r3, r9
 80029bc:	4642      	mov	r2, r8
 80029be:	491c      	ldr	r1, [pc, #112]	; (8002a30 <temporizadorTick+0x400>)
 80029c0:	f011 fa90 	bl	8013ee4 <siprintf>

	if (HAL_UART_Transmit(&huart1,(uint8_t *) cadena,strlen(cadena),5000))
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fc11 	bl	80001f0 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f107 010c 	add.w	r1, r7, #12
 80029d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029da:	4816      	ldr	r0, [pc, #88]	; (8002a34 <temporizadorTick+0x404>)
 80029dc:	f009 f9d5 	bl	800bd8a <HAL_UART_Transmit>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <temporizadorTick+0x3c0>
		espera+=5;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <temporizadorTick+0x3e8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3305      	adds	r3, #5
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <temporizadorTick+0x3e8>)
 80029ee:	6013      	str	r3, [r2, #0]
	}


  /* USER CODE END temporizadorTick */
}
 80029f0:	bf00      	nop
 80029f2:	3734      	adds	r7, #52	; 0x34
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	200004b0 	.word	0x200004b0
 8002a04:	40590000 	.word	0x40590000
 8002a08:	c0590000 	.word	0xc0590000
 8002a0c:	20000064 	.word	0x20000064
 8002a10:	20000060 	.word	0x20000060
 8002a14:	2000005c 	.word	0x2000005c
 8002a18:	200004c0 	.word	0x200004c0
 8002a1c:	20000050 	.word	0x20000050
 8002a20:	200004c8 	.word	0x200004c8
 8002a24:	20000038 	.word	0x20000038
 8002a28:	20000040 	.word	0x20000040
 8002a2c:	20000048 	.word	0x20000048
 8002a30:	08014638 	.word	0x08014638
 8002a34:	20000380 	.word	0x20000380

08002a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a4a:	f002 fbf3 	bl	8005234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40001000 	.word	0x40001000

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <Error_Handler+0x8>

08002a66 <pantallaPulsada>:
#include <stdlib.h>  // para abs()
#include <cmsis_os2.h>  // para osDelay()


uint16_t pantallaPulsada(uint16_t * x, uint16_t *y)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
	TS_StateTypeDef TsState;
	BSP_TS_GetState(& TsState);
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fb73 	bl	8004160 <BSP_TS_GetState>
	*x=TsState.X;
 8002a7a:	897a      	ldrh	r2, [r7, #10]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	801a      	strh	r2, [r3, #0]
	*y=320-TsState.Y;
 8002a80:	89bb      	ldrh	r3, [r7, #12]
 8002a82:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	801a      	strh	r2, [r3, #0]
	return TsState.TouchDetected;
 8002a8c:	893b      	ldrh	r3, [r7, #8]

}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <atiendeBoton>:
					intercambiaBuffersLCD(botonReset->pantallaLCD);
					dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,0,0,0,botonReset->pantallaLCD);
		}
}
void atiendeBoton(uint16_t x,uint16_t y, uint16_t pulsada, TsBoton * botonReset)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	81bb      	strh	r3, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	817b      	strh	r3, [r7, #10]
	if (pulsada && botonReset->habilitado  && botonReset->visible)
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d026      	beq.n	8002afe <atiendeBoton+0x68>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	799b      	ldrb	r3, [r3, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d022      	beq.n	8002afe <atiendeBoton+0x68>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	79db      	ldrb	r3, [r3, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01e      	beq.n	8002afe <atiendeBoton+0x68>
		if (x>botonReset->x && x<botonReset->x+botonReset->ancho && y>botonReset->y && y<botonReset->y+botonReset->alto )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	89fa      	ldrh	r2, [r7, #14]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d919      	bls.n	8002afe <atiendeBoton+0x68>
 8002aca:	89fa      	ldrh	r2, [r7, #14]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	885b      	ldrh	r3, [r3, #2]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	440b      	add	r3, r1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	da10      	bge.n	8002afe <atiendeBoton+0x68>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	889b      	ldrh	r3, [r3, #4]
 8002ae0:	89ba      	ldrh	r2, [r7, #12]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90b      	bls.n	8002afe <atiendeBoton+0x68>
 8002ae6:	89ba      	ldrh	r2, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	889b      	ldrh	r3, [r3, #4]
 8002aec:	4619      	mov	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	785b      	ldrb	r3, [r3, #1]
 8002af2:	440b      	add	r3, r1
 8002af4:	429a      	cmp	r2, r3
 8002af6:	da02      	bge.n	8002afe <atiendeBoton+0x68>
			botonReset->pFuncion();
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <inicializaBoton>:

void inicializaBoton(uint16_t xBoton,uint16_t yBoton, uint8_t ancho, uint8_t alto, const uint8_t * imagen ,void (* pFunc)(void), uint8_t vis,uint8_t En,TsBoton * botonReset, PantallaLCD *pantallaLCD)
{
 8002b06:	b5b0      	push	{r4, r5, r7, lr}
 8002b08:	b088      	sub	sp, #32
 8002b0a:	af06      	add	r7, sp, #24
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	4608      	mov	r0, r1
 8002b10:	4611      	mov	r1, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	4623      	mov	r3, r4
 8002b16:	80fb      	strh	r3, [r7, #6]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	80bb      	strh	r3, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
 8002b20:	4613      	mov	r3, r2
 8002b22:	70bb      	strb	r3, [r7, #2]
	botonReset->x=xBoton;
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	805a      	strh	r2, [r3, #2]
	botonReset->y=yBoton;
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	88ba      	ldrh	r2, [r7, #4]
 8002b2e:	809a      	strh	r2, [r3, #4]
	botonReset->ancho=ancho;
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	701a      	strb	r2, [r3, #0]
	botonReset->alto=alto;
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	78ba      	ldrb	r2, [r7, #2]
 8002b3a:	705a      	strb	r2, [r3, #1]
	botonReset->habilitado=En;
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b42:	719a      	strb	r2, [r3, #6]
	botonReset->visible=vis;
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b4a:	71da      	strb	r2, [r3, #7]
	botonReset->pFuncion=pFunc;
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	60da      	str	r2, [r3, #12]
	botonReset->imagen=imagen;
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	609a      	str	r2, [r3, #8]
	botonReset->pantallaLCD=pantallaLCD;
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	611a      	str	r2, [r3, #16]
	if (botonReset->visible)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	79db      	ldrb	r3, [r3, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d074      	beq.n	8002c50 <inicializaBoton+0x14a>
	{
		if(botonReset->habilitado)
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	799b      	ldrb	r3, [r3, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d038      	beq.n	8002be0 <inicializaBoton+0xda>
		{   intercambiaBuffersLCD(pantallaLCD);
 8002b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b70:	f000 f90a 	bl	8002d88 <intercambiaBuffersLCD>
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,0,100,0,pantallaLCD);
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	8858      	ldrh	r0, [r3, #2]
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	8899      	ldrh	r1, [r3, #4]
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b29c      	uxth	r4, r3
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	b29d      	uxth	r5, r3
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8e:	9204      	str	r2, [sp, #16]
 8002b90:	2200      	movs	r2, #0
 8002b92:	9203      	str	r2, [sp, #12]
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	9202      	str	r2, [sp, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	9201      	str	r2, [sp, #4]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	f000 fb43 	bl	800322c <dibujaImagen>
			intercambiaBuffersLCD(pantallaLCD);
 8002ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba8:	f000 f8ee 	bl	8002d88 <intercambiaBuffersLCD>
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,0,100,0,pantallaLCD);
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	8858      	ldrh	r0, [r3, #2]
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	8899      	ldrh	r1, [r3, #4]
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b29c      	uxth	r4, r3
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	b29d      	uxth	r5, r3
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	9204      	str	r2, [sp, #16]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	9203      	str	r2, [sp, #12]
 8002bcc:	2264      	movs	r2, #100	; 0x64
 8002bce:	9202      	str	r2, [sp, #8]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	9201      	str	r2, [sp, #4]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	4622      	mov	r2, r4
 8002bda:	f000 fb27 	bl	800322c <dibujaImagen>
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,1,100,0,pantallaLCD);
			intercambiaBuffersLCD(pantallaLCD);
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,1,100,0,pantallaLCD);
		}
	}
}
 8002bde:	e037      	b.n	8002c50 <inicializaBoton+0x14a>
		{   intercambiaBuffersLCD(pantallaLCD);
 8002be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be2:	f000 f8d1 	bl	8002d88 <intercambiaBuffersLCD>
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,1,100,0,pantallaLCD);
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	8858      	ldrh	r0, [r3, #2]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	8899      	ldrh	r1, [r3, #4]
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b29c      	uxth	r4, r3
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	b29d      	uxth	r5, r3
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c00:	9204      	str	r2, [sp, #16]
 8002c02:	2200      	movs	r2, #0
 8002c04:	9203      	str	r2, [sp, #12]
 8002c06:	2264      	movs	r2, #100	; 0x64
 8002c08:	9202      	str	r2, [sp, #8]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	462b      	mov	r3, r5
 8002c12:	4622      	mov	r2, r4
 8002c14:	f000 fb0a 	bl	800322c <dibujaImagen>
			intercambiaBuffersLCD(pantallaLCD);
 8002c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c1a:	f000 f8b5 	bl	8002d88 <intercambiaBuffersLCD>
			dibujaImagen(botonReset->x, botonReset->y, 	botonReset->ancho,botonReset->alto,botonReset->imagen,1,100,0,pantallaLCD);
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	8858      	ldrh	r0, [r3, #2]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	8899      	ldrh	r1, [r3, #4]
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	b29d      	uxth	r5, r3
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c38:	9204      	str	r2, [sp, #16]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	9203      	str	r2, [sp, #12]
 8002c3e:	2264      	movs	r2, #100	; 0x64
 8002c40:	9202      	str	r2, [sp, #8]
 8002c42:	2201      	movs	r2, #1
 8002c44:	9201      	str	r2, [sp, #4]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	462b      	mov	r3, r5
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	f000 faee 	bl	800322c <dibujaImagen>
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}

08002c58 <inicializaPantalla2Buffers>:

void inicializaPantalla2Buffers(uint8_t solido,uint32_t colorFondo,const uint8_t * imagen, PantallaLCD* pantallaLCD) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af06      	add	r7, sp, #24
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
	// Inicializa la pantalla para trabajar con 2 frame buffers. Pone el color de todos los puntos
	// segÃºn el parÃ¡metro 'colorFondo'. En 'pantallaLCD' se indica la direcciÃ³nd e una estructura
	// donde se guarda informaciÃ³n sobre la pantalla.

	BSP_LCD_Init();
 8002c68:	f000 fe96 	bl	8003998 <BSP_LCD_Init>
	BSP_LCD_Init();  // Inicializa la pantalla LCD
 8002c6c:	f000 fe94 	bl	8003998 <BSP_LCD_Init>

	pantallaLCD->ancho = BSP_LCD_GetXSize();  // Obtiene el ancho de la pantalla en nÃºmero de puntos
 8002c70:	f000 fef6 	bl	8003a60 <BSP_LCD_GetXSize>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	801a      	strh	r2, [r3, #0]
	pantallaLCD->alto = BSP_LCD_GetYSize();  // Obtiene el alto de la pantalla
 8002c7c:	f000 fefc 	bl	8003a78 <BSP_LCD_GetYSize>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	805a      	strh	r2, [r3, #2]
	pantallaLCD->buffers[0] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_0;  // DirecciÃ³n del frame buffer nÃºmero 0
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8002c8e:	605a      	str	r2, [r3, #4]
	pantallaLCD->buffers[1] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_1;  // DirecciÃ³n del frame buffer nÃºmero 1
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a3b      	ldr	r2, [pc, #236]	; (8002d80 <inicializaPantalla2Buffers+0x128>)
 8002c94:	609a      	str	r2, [r3, #8]

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER_0);  // Inicializa frame buffer 0
 8002c96:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f000 fef8 	bl	8003a90 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER_1);  // Inicializa frame buffer 1
 8002ca0:	4937      	ldr	r1, [pc, #220]	; (8002d80 <inicializaPantalla2Buffers+0x128>)
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 fef4 	bl	8003a90 <BSP_LCD_LayerDefaultInit>
	pantallaLCD->solido=solido;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	741a      	strb	r2, [r3, #16]
	pantallaLCD->fondoColor=colorFondo;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	615a      	str	r2, [r3, #20]
	pantallaLCD->fondoImagen=imagen;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
	pantallaLCD->bufferDibujo = 0;  // Selecciona el frame buffer 0 para dibujar
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
	dibujaRectangulo(0, 0, 240, 320, colorFondo,pantallaLCD);  // Pone todos los puntos al color de fondo
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ccc:	22f0      	movs	r2, #240	; 0xf0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f000 f8c1 	bl	8002e58 <dibujaRectangulo>
	pantallaLCD->bufferDibujo = 1;  // Selecciona el frame buffer 0 para dibujar
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	60da      	str	r2, [r3, #12]
	dibujaRectangulo(0, 0, 240, 320, colorFondo,pantallaLCD);  // Pone todos los puntos al color de fondo
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ce8:	22f0      	movs	r2, #240	; 0xf0
 8002cea:	2100      	movs	r1, #0
 8002cec:	2000      	movs	r0, #0
 8002cee:	f000 f8b3 	bl	8002e58 <dibujaRectangulo>
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 8002cf2:	bf00      	nop
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <inicializaPantalla2Buffers+0x12c>)
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <inicializaPantalla2Buffers+0x9c>
	BSP_LCD_SetLayerVisible(0, DISABLE);  // Frame buffer 0 visible
 8002d00:	2100      	movs	r1, #0
 8002d02:	2000      	movs	r0, #0
 8002d04:	f000 ff14 	bl	8003b30 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1,ENABLE);  // Frame buffer 1 invisible
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 ff10 	bl	8003b30 <BSP_LCD_SetLayerVisible>
	//BSP_LCD_SetTransparency(1,0x10);
	BSP_TS_Init(pantallaLCD->ancho, pantallaLCD->alto);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	885b      	ldrh	r3, [r3, #2]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f001 f9e6 	bl	80040ec <BSP_TS_Init>
	if (!solido)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d110      	bne.n	8002d48 <inicializaPantalla2Buffers+0xf0>
			dibujaImagen(0,0,240,320,imagen,0,100,0,pantallaLCD);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9303      	str	r3, [sp, #12]
 8002d2e:	2364      	movs	r3, #100	; 0x64
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d3e:	22f0      	movs	r2, #240	; 0xf0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 fa72 	bl	800322c <dibujaImagen>
	intercambiaBuffersLCD(pantallaLCD);
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f000 f81d 	bl	8002d88 <intercambiaBuffersLCD>
	if (!solido)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d110      	bne.n	8002d76 <inicializaPantalla2Buffers+0x11e>
				dibujaImagen(0,0,240,320,imagen,0,100,0,pantallaLCD);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9303      	str	r3, [sp, #12]
 8002d5c:	2364      	movs	r3, #100	; 0x64
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d6c:	22f0      	movs	r2, #240	; 0xf0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2000      	movs	r0, #0
 8002d72:	f000 fa5b 	bl	800322c <dibujaImagen>


}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	d0130000 	.word	0xd0130000
 8002d84:	40016800 	.word	0x40016800

08002d88 <intercambiaBuffersLCD>:


void intercambiaBuffersLCD(PantallaLCD* pantallaLCD) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	// Cambia en quÃ© frame buffer se dibuja y quÃ© frame buffer se visualiza

	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 8002d90:	bf00      	nop
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <intercambiaBuffersLCD+0x54>)
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f9      	beq.n	8002d92 <intercambiaBuffersLCD+0xa>
	if (pantallaLCD->bufferDibujo == 0) {  // Si se dibujÃ³ en el buffer 0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <intercambiaBuffersLCD+0x36>
		BSP_LCD_SetLayerVisible(1, DISABLE);  // Buffer 1 invisible
 8002da6:	2100      	movs	r1, #0
 8002da8:	2001      	movs	r0, #1
 8002daa:	f000 fec1 	bl	8003b30 <BSP_LCD_SetLayerVisible>
		BSP_LCD_SetLayerVisible(0, ENABLE);  // Buffer 0 visible
 8002dae:	2101      	movs	r1, #1
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 febd 	bl	8003b30 <BSP_LCD_SetLayerVisible>
		pantallaLCD->bufferDibujo = 1;  // Buffer donde se va a dibujar
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	60da      	str	r2, [r3, #12]
	} else {
		BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
		BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
		pantallaLCD->bufferDibujo = 0;  // Buffer donde se dibuja
	}
}
 8002dbc:	e00a      	b.n	8002dd4 <intercambiaBuffersLCD+0x4c>
		BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f000 feb5 	bl	8003b30 <BSP_LCD_SetLayerVisible>
		BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f000 feb1 	bl	8003b30 <BSP_LCD_SetLayerVisible>
		pantallaLCD->bufferDibujo = 0;  // Buffer donde se dibuja
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40016800 	.word	0x40016800

08002de0 <rgb2gray>:

uint32_t rgb2gray(uint32_t color)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	uint8_t r,g,b,gy,alfa=color>>24;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0e1b      	lsrs	r3, r3, #24
 8002dec:	75fb      	strb	r3, [r7, #23]
	uint32_t salida=0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
	b=color;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	73fb      	strb	r3, [r7, #15]
	g=color>>8;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	73bb      	strb	r3, [r7, #14]
	r=color>>16;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	737b      	strb	r3, [r7, #13]
	gy=(r+g+b)/3;
 8002e02:	7b7a      	ldrb	r2, [r7, #13]
 8002e04:	7bbb      	ldrb	r3, [r7, #14]
 8002e06:	441a      	add	r2, r3
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <rgb2gray+0x74>)
 8002e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e12:	17db      	asrs	r3, r3, #31
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	733b      	strb	r3, [r7, #12]
	salida|=gy;
 8002e18:	7b3b      	ldrb	r3, [r7, #12]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
	salida|=gy<<8;
 8002e20:	7b3b      	ldrb	r3, [r7, #12]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	461a      	mov	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
	salida|=gy<<16;
 8002e2c:	7b3b      	ldrb	r3, [r7, #12]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	461a      	mov	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
	salida|=alfa<<24;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
	return salida;
 8002e44:	693b      	ldr	r3, [r7, #16]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	55555556 	.word	0x55555556

08002e58 <dibujaRectangulo>:
void dibujaRectangulo(uint16_t xInicial, uint16_t yInicial, uint16_t ancho, uint16_t alto,
	uint32_t color, PantallaLCD * pPantalla) {
 8002e58:	b490      	push	{r4, r7}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	80fb      	strh	r3, [r7, #6]
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80bb      	strh	r3, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	807b      	strh	r3, [r7, #2]
 8002e72:	4613      	mov	r3, r2
 8002e74:	803b      	strh	r3, [r7, #0]
	// Dibuja un rectÃ¡ngulo cuya esquina superior izquierda estÃ¡ situada en (xInicial, yInicial) y
	// donde se indica el alto y ancho el color de sus puntos

    uint32_t * p = pPantalla->buffers[pPantalla->bufferDibujo] + yInicial * pPantalla->ancho + xInicial;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	88bb      	ldrh	r3, [r7, #4]
 8002e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e86:	8809      	ldrh	r1, [r1, #0]
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	440b      	add	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
    // Puntero que apunta al primer punto de la primera fila de puntos del rectÃ¡ngulo

    uint32_t incremento = pPantalla->ancho - ancho;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	60bb      	str	r3, [r7, #8]
    // NÃºmero de puntos a saltar en el frame buffer para ir desde el final de una fila al comienzo de la siguiente

    for(int fila = 0; fila < alto; fila++) {  // Recorriendo las filas del rectÃ¡ngulo
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e016      	b.n	8002ed8 <dibujaRectangulo+0x80>
    	for(int columna = 0; columna < ancho; columna++) {  // y las columnas
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e007      	b.n	8002ec0 <dibujaRectangulo+0x68>
    		//dibujaPunto(fila,columna, color,0,0xFF, fondo, pPantalla);
    		*(p++) = color;  // colorea cada punto del rectÃ¡ngulo e incrementa el puntero para ir al siguiente
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1d1a      	adds	r2, r3, #4
 8002eb4:	617a      	str	r2, [r7, #20]
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	601a      	str	r2, [r3, #0]
    	for(int columna = 0; columna < ancho; columna++) {  // y las columnas
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf3      	blt.n	8002eb0 <dibujaRectangulo+0x58>
    	}
    	p += incremento;  // Mueve el puntero al comienzo de la siguiente fila
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    for(int fila = 0; fila < alto; fila++) {  // Recorriendo las filas del rectÃ¡ngulo
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	dbe4      	blt.n	8002eaa <dibujaRectangulo+0x52>
    }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc90      	pop	{r4, r7}
 8002eea:	4770      	bx	lr

08002eec <inicializaJuegoCaracteresAlpha>:
	pJuegoCaracteres->nBytesPorCaracter = ((ancho - 1) / 8 + 1) * alto;
	// Guarda el nÃºmero de bytes utilizado para describir cÃ³mo se dibuja cada carÃ¡cter.
}

void inicializaJuegoCaracteresAlpha(uint8_t ancho, uint8_t alto, uint8_t separacion,const uint8_t* pCaracteres, JuegoCaracteresAlpha * pJuegoCaracteres)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	71bb      	strb	r3, [r7, #6]
 8002efc:	4613      	mov	r3, r2
 8002efe:	717b      	strb	r3, [r7, #5]
		pJuegoCaracteres->ancho = ancho;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	701a      	strb	r2, [r3, #0]
		pJuegoCaracteres->alto = alto;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	79ba      	ldrb	r2, [r7, #6]
 8002f0a:	705a      	strb	r2, [r3, #1]
		pJuegoCaracteres->separacion = separacion;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	797a      	ldrb	r2, [r7, #5]
 8002f10:	709a      	strb	r2, [r3, #2]
		pJuegoCaracteres->pCaracteres = pCaracteres;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	609a      	str	r2, [r3, #8]
		pJuegoCaracteres->nBytesPorCaracter = ancho * alto*4;
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	79bb      	ldrb	r3, [r7, #6]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	fb12 f303 	smulbb	r3, r2, r3
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	809a      	strh	r2, [r3, #4]
		return;
 8002f2e:	bf00      	nop
}
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <dibujaCaracterAlpha>:



void dibujaCaracterAlpha(uint16_t xCaracter, uint16_t yCaracter, char caracter,
		JuegoCaracteresAlpha * pJuegoCaracteresAlpha, uint8_t gray,uint8_t alfa, uint8_t fondo, PantallaLCD * pPantalla)
		{
 8002f3a:	b590      	push	{r4, r7, lr}
 8002f3c:	b08d      	sub	sp, #52	; 0x34
 8002f3e:	af06      	add	r7, sp, #24
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	4603      	mov	r3, r0
 8002f44:	81fb      	strh	r3, [r7, #14]
 8002f46:	460b      	mov	r3, r1
 8002f48:	81bb      	strh	r3, [r7, #12]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	72fb      	strb	r3, [r7, #11]
		const uint8_t * pBytes = pJuegoCaracteresAlpha->pCaracteres +(caracter - ' ') * pJuegoCaracteresAlpha->nBytesPorCaracter;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	7afa      	ldrb	r2, [r7, #11]
 8002f54:	3a20      	subs	r2, #32
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	8889      	ldrh	r1, [r1, #4]
 8002f5a:	fb01 f202 	mul.w	r2, r1, r2
 8002f5e:	4413      	add	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

		dibujaImagen(xCaracter, yCaracter, pJuegoCaracteresAlpha->ancho, pJuegoCaracteresAlpha->alto,pBytes, gray,alfa,fondo,pPantalla);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	b29c      	uxth	r4, r3
 8002f6e:	89b9      	ldrh	r1, [r7, #12]
 8002f70:	89f8      	ldrh	r0, [r7, #14]
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f7a:	9303      	str	r3, [sp, #12]
 8002f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	f000 f94d 	bl	800322c <dibujaImagen>


}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}

08002f9a <dibujaCadenaCaracteresAlpha>:
}


void dibujaCadenaCaracteresAlpha(uint32_t xCadena, uint32_t yCadena, char *cadena,
		JuegoCaracteresAlpha * pJuegoCaracteresAlpha, uint8_t gray,uint8_t alfa, uint8_t fondo, PantallaLCD * pPantalla)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af04      	add	r7, sp, #16
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
	int i = 0, x = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
		while(cadena[i]) {  // Para cada carÃ¡cter de la cadena
 8002fb0:	e035      	b.n	800301e <dibujaCadenaCaracteresAlpha+0x84>

			dibujaCaracterAlpha(xCadena + x * (pJuegoCaracteresAlpha->separacion + pJuegoCaracteresAlpha->ancho), yCadena,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	fb12 f303 	smulbb	r3, r2, r3
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	b298      	uxth	r0, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	b299      	uxth	r1, r3
				cadena[i], pJuegoCaracteresAlpha,gray,alfa,fondo, pPantalla);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
			dibujaCaracterAlpha(xCadena + x * (pJuegoCaracteresAlpha->separacion + pJuegoCaracteresAlpha->ancho), yCadena,
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	9303      	str	r3, [sp, #12]
 8002fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f7ff ffa0 	bl	8002f3a <dibujaCaracterAlpha>
			// Dibuja el carÃ¡cter en posiciones sucesivas hacia la derecha

			if (cadena[i] != '\'' && cadena[i] != '~')
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b27      	cmp	r3, #39	; 0x27
 8003004:	d008      	beq.n	8003018 <dibujaCadenaCaracteresAlpha+0x7e>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b7e      	cmp	r3, #126	; 0x7e
 8003010:	d002      	beq.n	8003018 <dibujaCadenaCaracteresAlpha+0x7e>
				x++;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3301      	adds	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
			// La comilla se utiliza para componer letras acentuadas, ej. "presi\'on"
			// El ~ se utiliza para componer las eÃ±es, ej. "ca~na"

			i++;  // Para acceder al siguiente carÃ¡cter de la cadena
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
		while(cadena[i]) {  // Para cada carÃ¡cter de la cadena
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1c3      	bne.n	8002fb2 <dibujaCadenaCaracteresAlpha+0x18>
		}
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <mezclaColores>:

uint32_t mezclaColores(uint32_t back,uint32_t front)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	uint8_t rb,gb,bb,rf,gf,bf,r,g,b,transparencia;
	uint32_t salida;
	transparencia=front>>24;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	0e1b      	lsrs	r3, r3, #24
 8003042:	75fb      	strb	r3, [r7, #23]
	rb=back>>16;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	75bb      	strb	r3, [r7, #22]
	gb=back>>8;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	757b      	strb	r3, [r7, #21]
	bb=back;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	753b      	strb	r3, [r7, #20]
	rf=front>>16;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	74fb      	strb	r3, [r7, #19]
	gf=front>>8;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	74bb      	strb	r3, [r7, #18]
	bf=front;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	747b      	strb	r3, [r7, #17]
	r=((rf-rb)*(transparencia*100/255)/100)+rb;
 8003064:	7cfa      	ldrb	r2, [r7, #19]
 8003066:	7dbb      	ldrb	r3, [r7, #22]
 8003068:	1ad2      	subs	r2, r2, r3
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4930      	ldr	r1, [pc, #192]	; (8003134 <mezclaColores+0x100>)
 8003074:	fb81 0103 	smull	r0, r1, r1, r3
 8003078:	4419      	add	r1, r3
 800307a:	11c9      	asrs	r1, r1, #7
 800307c:	17db      	asrs	r3, r3, #31
 800307e:	1acb      	subs	r3, r1, r3
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <mezclaColores+0x104>)
 8003086:	fb82 1203 	smull	r1, r2, r2, r3
 800308a:	1152      	asrs	r2, r2, #5
 800308c:	17db      	asrs	r3, r3, #31
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	7dbb      	ldrb	r3, [r7, #22]
 8003094:	4413      	add	r3, r2
 8003096:	743b      	strb	r3, [r7, #16]
	g=((gf-gb)*(transparencia*100/255)/100)+gb;
 8003098:	7cba      	ldrb	r2, [r7, #18]
 800309a:	7d7b      	ldrb	r3, [r7, #21]
 800309c:	1ad2      	subs	r2, r2, r3
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2164      	movs	r1, #100	; 0x64
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4923      	ldr	r1, [pc, #140]	; (8003134 <mezclaColores+0x100>)
 80030a8:	fb81 0103 	smull	r0, r1, r1, r3
 80030ac:	4419      	add	r1, r3
 80030ae:	11c9      	asrs	r1, r1, #7
 80030b0:	17db      	asrs	r3, r3, #31
 80030b2:	1acb      	subs	r3, r1, r3
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <mezclaColores+0x104>)
 80030ba:	fb82 1203 	smull	r1, r2, r2, r3
 80030be:	1152      	asrs	r2, r2, #5
 80030c0:	17db      	asrs	r3, r3, #31
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	7d7b      	ldrb	r3, [r7, #21]
 80030c8:	4413      	add	r3, r2
 80030ca:	73fb      	strb	r3, [r7, #15]
	b=((bf-bb)*(transparencia*100/255)/100)+bb;
 80030cc:	7c7a      	ldrb	r2, [r7, #17]
 80030ce:	7d3b      	ldrb	r3, [r7, #20]
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2164      	movs	r1, #100	; 0x64
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4916      	ldr	r1, [pc, #88]	; (8003134 <mezclaColores+0x100>)
 80030dc:	fb81 0103 	smull	r0, r1, r1, r3
 80030e0:	4419      	add	r1, r3
 80030e2:	11c9      	asrs	r1, r1, #7
 80030e4:	17db      	asrs	r3, r3, #31
 80030e6:	1acb      	subs	r3, r1, r3
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <mezclaColores+0x104>)
 80030ee:	fb82 1203 	smull	r1, r2, r2, r3
 80030f2:	1152      	asrs	r2, r2, #5
 80030f4:	17db      	asrs	r3, r3, #31
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	7d3b      	ldrb	r3, [r7, #20]
 80030fc:	4413      	add	r3, r2
 80030fe:	73bb      	strb	r3, [r7, #14]
	salida=0x000000FF&b;
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	60bb      	str	r3, [r7, #8]
	salida|=g<<8;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
	salida|=r<<16;
 8003110:	7c3b      	ldrb	r3, [r7, #16]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4313      	orrs	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
	salida|=0xFF000000;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003122:	60bb      	str	r3, [r7, #8]
	return salida;
 8003124:	68bb      	ldr	r3, [r7, #8]
}
 8003126:	4618      	mov	r0, r3
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	80808081 	.word	0x80808081
 8003138:	51eb851f 	.word	0x51eb851f

0800313c <dibujaPunto>:

void dibujaPunto(uint16_t x, uint16_t y, uint32_t color,uint8_t gray,uint8_t alfa, uint8_t fondo, PantallaLCD * pPantalla)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60ba      	str	r2, [r7, #8]
 8003144:	461a      	mov	r2, r3
 8003146:	4603      	mov	r3, r0
 8003148:	81fb      	strh	r3, [r7, #14]
 800314a:	460b      	mov	r3, r1
 800314c:	81bb      	strh	r3, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	71fb      	strb	r3, [r7, #7]
	// Dibuja un punto en coordenadas ('x', 'y') con el color indicado en 'color'
		uint32_t * pPuntos;
		uint32_t coloralfa,back,mezcla;
		coloralfa=color>>24;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	0e1b      	lsrs	r3, r3, #24
 8003156:	61fb      	str	r3, [r7, #28]
		coloralfa=(uint8_t)coloralfa*((double)alfa/100);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9f1 	bl	8000544 <__aeabi_i2d>
 8003162:	4604      	mov	r4, r0
 8003164:	460d      	mov	r5, r1
 8003166:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f9da 	bl	8000524 <__aeabi_ui2d>
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <dibujaPunto+0xec>)
 8003176:	f7fd fb79 	bl	800086c <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd fa49 	bl	8000618 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fd05 	bl	8000b9c <__aeabi_d2uiz>
 8003192:	4603      	mov	r3, r0
 8003194:	61fb      	str	r3, [r7, #28]
		coloralfa=(coloralfa<<24)|(color&0x00FFFFFF);
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	061a      	lsls	r2, r3, #24
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
		/*coloralfa=0x00FFFFFF & color;
		coloralfa|=alfa<<24;*/
		if (gray)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <dibujaPunto+0x76>
			    	coloralfa=rgb2gray(coloralfa);
 80031aa:	69f8      	ldr	r0, [r7, #28]
 80031ac:	f7ff fe18 	bl	8002de0 <rgb2gray>
 80031b0:	61f8      	str	r0, [r7, #28]
		pPuntos= pPantalla->buffers[pPantalla->bufferDibujo]+( y * pPantalla->ancho) + x;
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	89bb      	ldrh	r3, [r7, #12]
 80031c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c2:	8809      	ldrh	r1, [r1, #0]
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	89fb      	ldrh	r3, [r7, #14]
 80031cc:	440b      	add	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

	    if (fondo)
 80031d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d016      	beq.n	800320a <dibujaPunto+0xce>
	    {	if(pPantalla->solido)
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	7c1b      	ldrb	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <dibujaPunto+0xb0>
	    		back=pPantalla->fondoColor;
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e011      	b.n	8003210 <dibujaPunto+0xd4>
	    	else
	    		back=*(pPantalla->fondoImagen +( y * pPantalla->ancho) + x);
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	89bb      	ldrh	r3, [r7, #12]
 80031f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f4:	8809      	ldrh	r1, [r1, #0]
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	89fb      	ldrh	r3, [r7, #14]
 80031fe:	440b      	add	r3, r1
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e002      	b.n	8003210 <dibujaPunto+0xd4>
	    }
	    else
	    	back=*pPuntos;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	61bb      	str	r3, [r7, #24]
	    mezcla=mezclaColores(back,coloralfa);
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	69b8      	ldr	r0, [r7, #24]
 8003214:	f7ff ff0e 	bl	8003034 <mezclaColores>
 8003218:	6138      	str	r0, [r7, #16]
	    *pPuntos= mezcla;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	601a      	str	r2, [r3, #0]

	    // Guarda los 4 bytes del color en el frame buffer

}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bdb0      	pop	{r4, r5, r7, pc}
 8003228:	40590000 	.word	0x40590000

0800322c <dibujaImagen>:
        dibujaPuntosCirculo(xc, yc, x, y, color,gray,alfa,fondo, pPantalla);
    }
}

void dibujaImagen(uint16_t xImagen, uint16_t yImagen, uint16_t ancho, uint16_t alto,
	const uint8_t * imagen, uint8_t gray,uint8_t alfa,uint8_t fondo,PantallaLCD * pPantalla) {
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af04      	add	r7, sp, #16
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4623      	mov	r3, r4
 800323c:	80fb      	strh	r3, [r7, #6]
 800323e:	4603      	mov	r3, r0
 8003240:	80bb      	strh	r3, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	807b      	strh	r3, [r7, #2]
 8003246:	4613      	mov	r3, r2
 8003248:	803b      	strh	r3, [r7, #0]
	// Dibuja una imagen situando su esquina superior izquierda en 'xImagen', 'yImagen', que tiene
	// una resoluciÃ³n de 'ancho' puntos en horizontal y 'alto' puntos en vertical. Los bytes que
	// expresan el color de todos sus puntos (cada punto en 4 bytes en formato ARGB)
	// se encuentran en 'imagen'.

	uint32_t * p = (uint32_t*) imagen;  // Para acceder a cada punto por separado
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	60fb      	str	r3, [r7, #12]
	for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 800324e:	88bb      	ldrh	r3, [r7, #4]
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	e022      	b.n	800329a <dibujaImagen+0x6e>
		for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	813b      	strh	r3, [r7, #8]
 8003258:	e016      	b.n	8003288 <dibujaImagen+0x5c>
			dibujaPunto(x, y, *p, gray,alfa,fondo,pPantalla);  // dibuja cada punto
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	8938      	ldrh	r0, [r7, #8]
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	9302      	str	r3, [sp, #8]
 800326a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4623      	mov	r3, r4
 8003278:	f7ff ff60 	bl	800313c <dibujaPunto>
			p++;  // Para acceder al color del siguiente punto
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3304      	adds	r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
		for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 8003282:	893b      	ldrh	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	813b      	strh	r3, [r7, #8]
 8003288:	893a      	ldrh	r2, [r7, #8]
 800328a:	88f9      	ldrh	r1, [r7, #6]
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	440b      	add	r3, r1
 8003290:	429a      	cmp	r2, r3
 8003292:	dbe2      	blt.n	800325a <dibujaImagen+0x2e>
	for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	3301      	adds	r3, #1
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	897a      	ldrh	r2, [r7, #10]
 800329c:	88b9      	ldrh	r1, [r7, #4]
 800329e:	883b      	ldrh	r3, [r7, #0]
 80032a0:	440b      	add	r3, r1
 80032a2:	429a      	cmp	r2, r3
 80032a4:	dbd6      	blt.n	8003254 <dibujaImagen+0x28>
		}
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd90      	pop	{r4, r7, pc}

080032b0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a33      	ldr	r2, [pc, #204]	; (800338c <I2Cx_MspInit+0xdc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d15f      	bne.n	8003382 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a31      	ldr	r2, [pc, #196]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <I2Cx_MspInit+0xe0>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80032fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003300:	2312      	movs	r3, #18
 8003302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800330c:	2304      	movs	r3, #4
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4619      	mov	r1, r3
 8003316:	481f      	ldr	r0, [pc, #124]	; (8003394 <I2Cx_MspInit+0xe4>)
 8003318:	f003 f888 	bl	800642c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800331c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003320:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	481b      	ldr	r0, [pc, #108]	; (8003398 <I2Cx_MspInit+0xe8>)
 800332a:	f003 f87f 	bl	800642c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <I2Cx_MspInit+0xe0>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <I2Cx_MspInit+0xe0>)
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <I2Cx_MspInit+0xe0>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <I2Cx_MspInit+0xe0>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <I2Cx_MspInit+0xe0>)
 8003350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003354:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <I2Cx_MspInit+0xe0>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <I2Cx_MspInit+0xe0>)
 800335c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003360:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	210f      	movs	r1, #15
 8003366:	2048      	movs	r0, #72	; 0x48
 8003368:	f002 fc70 	bl	8005c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800336c:	2048      	movs	r0, #72	; 0x48
 800336e:	f002 fc89 	bl	8005c84 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	210f      	movs	r1, #15
 8003376:	2049      	movs	r0, #73	; 0x49
 8003378:	f002 fc68 	bl	8005c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800337c:	2049      	movs	r0, #73	; 0x49
 800337e:	f002 fc81 	bl	8005c84 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003382:	bf00      	nop
 8003384:	3728      	adds	r7, #40	; 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40005c00 	.word	0x40005c00
 8003390:	40023800 	.word	0x40023800
 8003394:	40020000 	.word	0x40020000
 8003398:	40020800 	.word	0x40020800

0800339c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80033a0:	4814      	ldr	r0, [pc, #80]	; (80033f4 <I2Cx_Init+0x58>)
 80033a2:	f005 fbb3 	bl	8008b0c <HAL_I2C_GetState>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d121      	bne.n	80033f0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <I2Cx_Init+0x58>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <I2Cx_Init+0x5c>)
 80033b0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <I2Cx_Init+0x58>)
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <I2Cx_Init+0x60>)
 80033b6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <I2Cx_Init+0x58>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <I2Cx_Init+0x58>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <I2Cx_Init+0x58>)
 80033c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ca:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <I2Cx_Init+0x58>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <I2Cx_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <I2Cx_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <I2Cx_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <I2Cx_Init+0x58>)
 80033e6:	f7ff ff63 	bl	80032b0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80033ea:	4802      	ldr	r0, [pc, #8]	; (80033f4 <I2Cx_Init+0x58>)
 80033ec:	f004 fefa 	bl	80081e4 <HAL_I2C_Init>
  }
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200004f4 	.word	0x200004f4
 80033f8:	40005c00 	.word	0x40005c00
 80033fc:	000186a0 	.word	0x000186a0

08003400 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <I2Cx_ITConfig+0x58>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <I2Cx_ITConfig+0x58>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <I2Cx_ITConfig+0x58>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003430:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003434:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4808      	ldr	r0, [pc, #32]	; (800345c <I2Cx_ITConfig+0x5c>)
 800343c:	f002 fff6 	bl	800642c <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003440:	2200      	movs	r2, #0
 8003442:	210f      	movs	r1, #15
 8003444:	2028      	movs	r0, #40	; 0x28
 8003446:	f002 fc01 	bl	8005c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800344a:	2028      	movs	r0, #40	; 0x28
 800344c:	f002 fc1a 	bl	8005c84 <HAL_NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000

08003460 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af04      	add	r7, sp, #16
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
 800346a:	460b      	mov	r3, r1
 800346c:	71bb      	strb	r3, [r7, #6]
 800346e:	4613      	mov	r3, r2
 8003470:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	b299      	uxth	r1, r3
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	b29a      	uxth	r2, r3
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <I2Cx_WriteData+0x4c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	2301      	movs	r3, #1
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	1d7b      	adds	r3, r7, #5
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	4808      	ldr	r0, [pc, #32]	; (80034b0 <I2Cx_WriteData+0x50>)
 8003490:	f005 f81c 	bl	80084cc <HAL_I2C_Mem_Write>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800349e:	f000 f863 	bl	8003568 <I2Cx_Error>
  }        
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000006c 	.word	0x2000006c
 80034b0:	200004f4 	.word	0x200004f4

080034b4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	b299      	uxth	r1, r3
 80034d0:	79bb      	ldrb	r3, [r7, #6]
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <I2Cx_ReadData+0x50>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	2301      	movs	r3, #1
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f107 030e 	add.w	r3, r7, #14
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <I2Cx_ReadData+0x54>)
 80034e8:	f005 f8ea 	bl	80086c0 <HAL_I2C_Mem_Read>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80034f6:	f000 f837 	bl	8003568 <I2Cx_Error>
  
  }
  return value;
 80034fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2000006c 	.word	0x2000006c
 8003508:	200004f4 	.word	0x200004f4

0800350c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af04      	add	r7, sp, #16
 8003512:	603a      	str	r2, [r7, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	460b      	mov	r3, r1
 800351c:	71bb      	strb	r3, [r7, #6]
 800351e:	4613      	mov	r3, r2
 8003520:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	b299      	uxth	r1, r3
 800352a:	79bb      	ldrb	r3, [r7, #6]
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <I2Cx_ReadBuffer+0x54>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	88bb      	ldrh	r3, [r7, #4]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	4809      	ldr	r0, [pc, #36]	; (8003564 <I2Cx_ReadBuffer+0x58>)
 8003540:	f005 f8be 	bl	80086c0 <HAL_I2C_Mem_Read>
 8003544:	4603      	mov	r3, r0
 8003546:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800354e:	2300      	movs	r3, #0
 8003550:	e002      	b.n	8003558 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003552:	f000 f809 	bl	8003568 <I2Cx_Error>

    return 1;
 8003556:	2301      	movs	r3, #1
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000006c 	.word	0x2000006c
 8003564:	200004f4 	.word	0x200004f4

08003568 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <I2Cx_Error+0x14>)
 800356e:	f004 ff7d 	bl	800846c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003572:	f7ff ff13 	bl	800339c <I2Cx_Init>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200004f4 	.word	0x200004f4

08003580 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003584:	4819      	ldr	r0, [pc, #100]	; (80035ec <SPIx_Init+0x6c>)
 8003586:	f007 fdf2 	bl	800b16e <HAL_SPI_GetState>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d12b      	bne.n	80035e8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <SPIx_Init+0x6c>)
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <SPIx_Init+0x70>)
 8003594:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <SPIx_Init+0x6c>)
 8003598:	2218      	movs	r2, #24
 800359a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <SPIx_Init+0x6c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <SPIx_Init+0x6c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <SPIx_Init+0x6c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <SPIx_Init+0x6c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <SPIx_Init+0x6c>)
 80035b6:	2207      	movs	r2, #7
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <SPIx_Init+0x6c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <SPIx_Init+0x6c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <SPIx_Init+0x6c>)
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <SPIx_Init+0x6c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SPIx_Init+0x6c>)
 80035d6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035da:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <SPIx_Init+0x6c>)
 80035de:	f000 f853 	bl	8003688 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80035e2:	4802      	ldr	r0, [pc, #8]	; (80035ec <SPIx_Init+0x6c>)
 80035e4:	f007 f923 	bl	800a82e <HAL_SPI_Init>
  } 
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000548 	.word	0x20000548
 80035f0:	40015000 	.word	0x40015000

080035f4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	b29a      	uxth	r2, r3
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <SPIx_Read+0x38>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f107 0108 	add.w	r1, r7, #8
 800360e:	4808      	ldr	r0, [pc, #32]	; (8003630 <SPIx_Read+0x3c>)
 8003610:	f007 fafa 	bl	800ac08 <HAL_SPI_Receive>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800361e:	f000 f827 	bl	8003670 <SPIx_Error>
  }
  
  return readvalue;
 8003622:	68bb      	ldr	r3, [r7, #8]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000070 	.word	0x20000070
 8003630:	20000548 	.word	0x20000548

08003634 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <SPIx_Write+0x34>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1db9      	adds	r1, r7, #6
 8003648:	2201      	movs	r2, #1
 800364a:	4808      	ldr	r0, [pc, #32]	; (800366c <SPIx_Write+0x38>)
 800364c:	f007 f9a0 	bl	800a990 <HAL_SPI_Transmit>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800365a:	f000 f809 	bl	8003670 <SPIx_Error>
  }
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000070 	.word	0x20000070
 800366c:	20000548 	.word	0x20000548

08003670 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003674:	4803      	ldr	r0, [pc, #12]	; (8003684 <SPIx_Error+0x14>)
 8003676:	f007 f963 	bl	800a940 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800367a:	f7ff ff81 	bl	8003580 <SPIx_Init>
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000548 	.word	0x20000548

08003688 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <SPIx_MspInit+0x6c>)
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <SPIx_MspInit+0x6c>)
 800369a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369e:	6453      	str	r3, [r2, #68]	; 0x44
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <SPIx_MspInit+0x6c>)
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <SPIx_MspInit+0x6c>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <SPIx_MspInit+0x6c>)
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	6313      	str	r3, [r2, #48]	; 0x30
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <SPIx_MspInit+0x6c>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80036c8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80036cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80036d2:	2302      	movs	r3, #2
 80036d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80036d6:	2301      	movs	r3, #1
 80036d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80036da:	2305      	movs	r3, #5
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80036de:	f107 0314 	add.w	r3, r7, #20
 80036e2:	4619      	mov	r1, r3
 80036e4:	4804      	ldr	r0, [pc, #16]	; (80036f8 <SPIx_MspInit+0x70>)
 80036e6:	f002 fea1 	bl	800642c <HAL_GPIO_Init>
}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40021400 	.word	0x40021400

080036fc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <LCD_IO_Init+0xe0>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d164      	bne.n	80037d4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <LCD_IO_Init+0xe0>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <LCD_IO_Init+0xe4>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <LCD_IO_Init+0xe4>)
 800371a:	f043 0308 	orr.w	r3, r3, #8
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <LCD_IO_Init+0xe4>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800372c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003732:	2301      	movs	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800373a:	2302      	movs	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800373e:	f107 030c 	add.w	r3, r7, #12
 8003742:	4619      	mov	r1, r3
 8003744:	4827      	ldr	r0, [pc, #156]	; (80037e4 <LCD_IO_Init+0xe8>)
 8003746:	f002 fe71 	bl	800642c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <LCD_IO_Init+0xe4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <LCD_IO_Init+0xe4>)
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <LCD_IO_Init+0xe4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003774:	2302      	movs	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4619      	mov	r1, r3
 800377e:	4819      	ldr	r0, [pc, #100]	; (80037e4 <LCD_IO_Init+0xe8>)
 8003780:	f002 fe54 	bl	800642c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003784:	2300      	movs	r3, #0
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <LCD_IO_Init+0xe4>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <LCD_IO_Init+0xe4>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <LCD_IO_Init+0xe4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80037a0:	2304      	movs	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80037a4:	2301      	movs	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80037ac:	2302      	movs	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	480c      	ldr	r0, [pc, #48]	; (80037e8 <LCD_IO_Init+0xec>)
 80037b8:	f002 fe38 	bl	800642c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80037bc:	2200      	movs	r2, #0
 80037be:	2104      	movs	r1, #4
 80037c0:	4809      	ldr	r0, [pc, #36]	; (80037e8 <LCD_IO_Init+0xec>)
 80037c2:	f003 f8eb 	bl	800699c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80037c6:	2201      	movs	r2, #1
 80037c8:	2104      	movs	r1, #4
 80037ca:	4807      	ldr	r0, [pc, #28]	; (80037e8 <LCD_IO_Init+0xec>)
 80037cc:	f003 f8e6 	bl	800699c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80037d0:	f7ff fed6 	bl	8003580 <SPIx_Init>
  }
}
 80037d4:	bf00      	nop
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200005a0 	.word	0x200005a0
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40020800 	.word	0x40020800

080037ec <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037f6:	2201      	movs	r2, #1
 80037f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037fc:	480a      	ldr	r0, [pc, #40]	; (8003828 <LCD_IO_WriteData+0x3c>)
 80037fe:	f003 f8cd 	bl	800699c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003802:	2200      	movs	r2, #0
 8003804:	2104      	movs	r1, #4
 8003806:	4809      	ldr	r0, [pc, #36]	; (800382c <LCD_IO_WriteData+0x40>)
 8003808:	f003 f8c8 	bl	800699c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff10 	bl	8003634 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003814:	2201      	movs	r2, #1
 8003816:	2104      	movs	r1, #4
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <LCD_IO_WriteData+0x40>)
 800381a:	f003 f8bf 	bl	800699c <HAL_GPIO_WritePin>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40020c00 	.word	0x40020c00
 800382c:	40020800 	.word	0x40020800

08003830 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003840:	480a      	ldr	r0, [pc, #40]	; (800386c <LCD_IO_WriteReg+0x3c>)
 8003842:	f003 f8ab 	bl	800699c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003846:	2200      	movs	r2, #0
 8003848:	2104      	movs	r1, #4
 800384a:	4809      	ldr	r0, [pc, #36]	; (8003870 <LCD_IO_WriteReg+0x40>)
 800384c:	f003 f8a6 	bl	800699c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff feed 	bl	8003634 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800385a:	2201      	movs	r2, #1
 800385c:	2104      	movs	r1, #4
 800385e:	4804      	ldr	r0, [pc, #16]	; (8003870 <LCD_IO_WriteReg+0x40>)
 8003860:	f003 f89c 	bl	800699c <HAL_GPIO_WritePin>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40020c00 	.word	0x40020c00
 8003870:	40020800 	.word	0x40020800

08003874 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	460a      	mov	r2, r1
 800387e:	80fb      	strh	r3, [r7, #6]
 8003880:	4613      	mov	r3, r2
 8003882:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003888:	2200      	movs	r2, #0
 800388a:	2104      	movs	r1, #4
 800388c:	4810      	ldr	r0, [pc, #64]	; (80038d0 <LCD_IO_ReadData+0x5c>)
 800388e:	f003 f885 	bl	800699c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003892:	2200      	movs	r2, #0
 8003894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003898:	480e      	ldr	r0, [pc, #56]	; (80038d4 <LCD_IO_ReadData+0x60>)
 800389a:	f003 f87f 	bl	800699c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fec7 	bl	8003634 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80038a6:	797b      	ldrb	r3, [r7, #5]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fea3 	bl	80035f4 <SPIx_Read>
 80038ae:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80038b0:	2201      	movs	r2, #1
 80038b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b6:	4807      	ldr	r0, [pc, #28]	; (80038d4 <LCD_IO_ReadData+0x60>)
 80038b8:	f003 f870 	bl	800699c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80038bc:	2201      	movs	r2, #1
 80038be:	2104      	movs	r1, #4
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <LCD_IO_ReadData+0x5c>)
 80038c2:	f003 f86b 	bl	800699c <HAL_GPIO_WritePin>
  
  return readvalue;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00

080038d8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 fcc7 	bl	8005274 <HAL_Delay>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80038f2:	f7ff fd53 	bl	800339c <I2Cx_Init>
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}

080038fa <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80038fe:	f7ff fd7f 	bl	8003400 <I2Cx_ITConfig>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}

08003906 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
 8003910:	460b      	mov	r3, r1
 8003912:	71bb      	strb	r3, [r7, #6]
 8003914:	4613      	mov	r3, r2
 8003916:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003918:	797a      	ldrb	r2, [r7, #5]
 800391a:	79b9      	ldrb	r1, [r7, #6]
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd9e 	bl	8003460 <I2Cx_WriteData>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	460a      	mov	r2, r1
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	4613      	mov	r3, r2
 800393a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800393c:	79ba      	ldrb	r2, [r7, #6]
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fdb6 	bl	80034b4 <I2Cx_ReadData>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	603a      	str	r2, [r7, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
 8003960:	460b      	mov	r3, r1
 8003962:	71bb      	strb	r3, [r7, #6]
 8003964:	4613      	mov	r3, r2
 8003966:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003968:	88bb      	ldrh	r3, [r7, #4]
 800396a:	79b9      	ldrb	r1, [r7, #6]
 800396c:	79f8      	ldrb	r0, [r7, #7]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	f7ff fdcc 	bl	800350c <I2Cx_ReadBuffer>
 8003974:	4603      	mov	r3, r0
 8003976:	b29b      	uxth	r3, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f001 fc73 	bl	8005274 <HAL_Delay>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <BSP_LCD_Init+0xb4>)
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <BSP_LCD_Init+0xb8>)
 80039a0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039a4:	2209      	movs	r2, #9
 80039a6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80039ae:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039b0:	221d      	movs	r2, #29
 80039b2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039bc:	f240 120d 	movw	r2, #269	; 0x10d
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039c4:	f240 1243 	movw	r2, #323	; 0x143
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039cc:	f240 1217 	movw	r2, #279	; 0x117
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039d4:	f240 1247 	movw	r2, #327	; 0x147
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <BSP_LCD_Init+0xb4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <BSP_LCD_Init+0xbc>)
 80039f4:	2208      	movs	r2, #8
 80039f6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <BSP_LCD_Init+0xbc>)
 80039fa:	22c0      	movs	r2, #192	; 0xc0
 80039fc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <BSP_LCD_Init+0xbc>)
 8003a00:	2204      	movs	r2, #4
 8003a02:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <BSP_LCD_Init+0xbc>)
 8003a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003a0c:	4811      	ldr	r0, [pc, #68]	; (8003a54 <BSP_LCD_Init+0xbc>)
 8003a0e:	f006 fcbd 	bl	800a38c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <BSP_LCD_Init+0xb4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <BSP_LCD_Init+0xb4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <BSP_LCD_Init+0xb4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <BSP_LCD_Init+0xb4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003a2a:	f000 f8bf 	bl	8003bac <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003a2e:	4807      	ldr	r0, [pc, #28]	; (8003a4c <BSP_LCD_Init+0xb4>)
 8003a30:	f005 fc50 	bl	80092d4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <BSP_LCD_Init+0xc0>)
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <BSP_LCD_Init+0xc4>)
 8003a38:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <BSP_LCD_Init+0xc0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003a42:	f000 f989 	bl	8003d58 <BSP_SDRAM_Init>

  return LCD_OK;
 8003a46:	2300      	movs	r3, #0
}  
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200005a4 	.word	0x200005a4
 8003a50:	40016800 	.word	0x40016800
 8003a54:	2000064c 	.word	0x2000064c
 8003a58:	2000068c 	.word	0x2000068c
 8003a5c:	20000000 	.word	0x20000000

08003a60 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <BSP_LCD_GetXSize+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	4798      	blx	r3
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000068c 	.word	0x2000068c

08003a78 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <BSP_LCD_GetYSize+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000068c 	.word	0x2000068c

08003a90 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b090      	sub	sp, #64	; 0x40
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003aa0:	f7ff ffde 	bl	8003a60 <BSP_LCD_GetXSize>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003aac:	f7ff ffe4 	bl	8003a78 <BSP_LCD_GetYSize>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003abc:	23ff      	movs	r3, #255	; 0xff
 8003abe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003adc:	2307      	movs	r3, #7
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003ae0:	f7ff ffbe 	bl	8003a60 <BSP_LCD_GetXSize>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003ae8:	f7ff ffc6 	bl	8003a78 <BSP_LCD_GetYSize>
 8003aec:	4603      	mov	r3, r0
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	4619      	mov	r1, r3
 8003af8:	480b      	ldr	r0, [pc, #44]	; (8003b28 <BSP_LCD_LayerDefaultInit+0x98>)
 8003afa:	f005 fd7d 	bl	80095f8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <BSP_LCD_LayerDefaultInit+0x9c>)
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0a:	605a      	str	r2, [r3, #4]

  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <BSP_LCD_LayerDefaultInit+0x9c>)
 8003b10:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8003b14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003b18:	4803      	ldr	r0, [pc, #12]	; (8003b28 <BSP_LCD_LayerDefaultInit+0x98>)
 8003b1a:	f005 fdab 	bl	8009674 <HAL_LTDC_EnableDither>
}
 8003b1e:	bf00      	nop
 8003b20:	3740      	adds	r7, #64	; 0x40
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200005a4 	.word	0x200005a4
 8003b2c:	2000067c 	.word	0x2000067c

08003b30 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d112      	bne.n	8003b68 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003b42:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3384      	adds	r3, #132	; 0x84
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	4611      	mov	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	01d2      	lsls	r2, r2, #7
 8003b5c:	440a      	add	r2, r1
 8003b5e:	3284      	adds	r2, #132	; 0x84
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e011      	b.n	8003b8c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	01db      	lsls	r3, r3, #7
 8003b72:	4413      	add	r3, r2
 8003b74:	3384      	adds	r3, #132	; 0x84
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	01d2      	lsls	r2, r2, #7
 8003b82:	440a      	add	r2, r1
 8003b84:	3284      	adds	r2, #132	; 0x84
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <BSP_LCD_SetLayerVisible+0x78>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	200005a4 	.word	0x200005a4

08003bac <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	; 0x38
 8003bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a60      	ldr	r2, [pc, #384]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b3e      	ldr	r3, [pc, #248]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c64:	f043 0320 	orr.w	r3, r3, #32
 8003c68:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6a:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <BSP_LCD_MspInit+0x190>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003c92:	f641 0358 	movw	r3, #6232	; 0x1858
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003ca4:	230e      	movs	r3, #14
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cac:	4619      	mov	r1, r3
 8003cae:	4824      	ldr	r0, [pc, #144]	; (8003d40 <BSP_LCD_MspInit+0x194>)
 8003cb0:	f002 fbbc 	bl	800642c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003cb4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4820      	ldr	r0, [pc, #128]	; (8003d44 <BSP_LCD_MspInit+0x198>)
 8003cc2:	f002 fbb3 	bl	800642c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003cc6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	481d      	ldr	r0, [pc, #116]	; (8003d48 <BSP_LCD_MspInit+0x19c>)
 8003cd4:	f002 fbaa 	bl	800642c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003cd8:	2348      	movs	r3, #72	; 0x48
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	481a      	ldr	r0, [pc, #104]	; (8003d4c <BSP_LCD_MspInit+0x1a0>)
 8003ce4:	f002 fba2 	bl	800642c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4816      	ldr	r0, [pc, #88]	; (8003d50 <BSP_LCD_MspInit+0x1a4>)
 8003cf6:	f002 fb99 	bl	800642c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003cfa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d04:	4619      	mov	r1, r3
 8003d06:	4813      	ldr	r0, [pc, #76]	; (8003d54 <BSP_LCD_MspInit+0x1a8>)
 8003d08:	f002 fb90 	bl	800642c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003d10:	2309      	movs	r3, #9
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	480a      	ldr	r0, [pc, #40]	; (8003d44 <BSP_LCD_MspInit+0x198>)
 8003d1c:	f002 fb86 	bl	800642c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003d20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4809      	ldr	r0, [pc, #36]	; (8003d54 <BSP_LCD_MspInit+0x1a8>)
 8003d2e:	f002 fb7d 	bl	800642c <HAL_GPIO_Init>
}
 8003d32:	bf00      	nop
 8003d34:	3738      	adds	r7, #56	; 0x38
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40020800 	.word	0x40020800
 8003d4c:	40020c00 	.word	0x40020c00
 8003d50:	40021400 	.word	0x40021400
 8003d54:	40021800 	.word	0x40021800

08003d58 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <BSP_SDRAM_Init+0xb0>)
 8003d60:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003d62:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d64:	2202      	movs	r2, #2
 8003d66:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003d6e:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d70:	2204      	movs	r2, #4
 8003d72:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d76:	2207      	movs	r2, #7
 8003d78:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d82:	2202      	movs	r2, #2
 8003d84:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003d86:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003d88:	2202      	movs	r2, #2
 8003d8a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003da0:	2210      	movs	r2, #16
 8003da2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003da6:	2240      	movs	r2, #64	; 0x40
 8003da8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003db0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dbe:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dd2:	f000 f87f 	bl	8003ed4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003dd6:	490d      	ldr	r1, [pc, #52]	; (8003e0c <BSP_SDRAM_Init+0xb4>)
 8003dd8:	480a      	ldr	r0, [pc, #40]	; (8003e04 <BSP_SDRAM_Init+0xac>)
 8003dda:	f006 fc97 	bl	800a70c <HAL_SDRAM_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <BSP_SDRAM_Init+0xb8>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <BSP_SDRAM_Init+0xb8>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003df2:	f240 506a 	movw	r0, #1386	; 0x56a
 8003df6:	f000 f80d 	bl	8003e14 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <BSP_SDRAM_Init+0xb8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000690 	.word	0x20000690
 8003e08:	a0000140 	.word	0xa0000140
 8003e0c:	200006c4 	.word	0x200006c4
 8003e10:	20000074 	.word	0x20000074

08003e14 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e26:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e28:	2208      	movs	r2, #8
 8003e2a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e3c:	4923      	ldr	r1, [pc, #140]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e3e:	4824      	ldr	r0, [pc, #144]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e40:	f006 fc98 	bl	800a774 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e44:	2001      	movs	r0, #1
 8003e46:	f001 fa15 	bl	8005274 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e52:	2208      	movs	r2, #8
 8003e54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e66:	4919      	ldr	r1, [pc, #100]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e68:	4819      	ldr	r0, [pc, #100]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e6a:	f006 fc83 	bl	800a774 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e70:	2203      	movs	r2, #3
 8003e72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e76:	2208      	movs	r2, #8
 8003e78:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8a:	4910      	ldr	r1, [pc, #64]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e8c:	4810      	ldr	r0, [pc, #64]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e8e:	f006 fc71 	bl	800a774 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003e92:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003e96:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb4:	4905      	ldr	r1, [pc, #20]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003eb8:	f006 fc5c 	bl	800a774 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ec0:	f006 fc8d 	bl	800a7de <HAL_SDRAM_ProgramRefreshRate>
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200006e0 	.word	0x200006e0
 8003ed0:	20000690 	.word	0x20000690

08003ed4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b090      	sub	sp, #64	; 0x40
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80ec 	beq.w	80040be <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	4b77      	ldr	r3, [pc, #476]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4a76      	ldr	r2, [pc, #472]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ef6:	4b74      	ldr	r3, [pc, #464]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	4b69      	ldr	r3, [pc, #420]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a68      	ldr	r2, [pc, #416]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	4b62      	ldr	r3, [pc, #392]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4a61      	ldr	r2, [pc, #388]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	4b5f      	ldr	r3, [pc, #380]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a5a      	ldr	r2, [pc, #360]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b58      	ldr	r3, [pc, #352]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	4b54      	ldr	r3, [pc, #336]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a53      	ldr	r2, [pc, #332]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a4c      	ldr	r2, [pc, #304]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003f98:	f043 0320 	orr.w	r3, r3, #32
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b4a      	ldr	r3, [pc, #296]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a45      	ldr	r2, [pc, #276]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <BSP_SDRAM_MspInit+0x1f4>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003fd6:	2360      	movs	r3, #96	; 0x60
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fde:	4619      	mov	r1, r3
 8003fe0:	483a      	ldr	r0, [pc, #232]	; (80040cc <BSP_SDRAM_MspInit+0x1f8>)
 8003fe2:	f002 fa23 	bl	800642c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4837      	ldr	r0, [pc, #220]	; (80040d0 <BSP_SDRAM_MspInit+0x1fc>)
 8003ff2:	f002 fa1b 	bl	800642c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003ff6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004000:	4619      	mov	r1, r3
 8004002:	4834      	ldr	r0, [pc, #208]	; (80040d4 <BSP_SDRAM_MspInit+0x200>)
 8004004:	f002 fa12 	bl	800642c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004008:	f64f 7383 	movw	r3, #65411	; 0xff83
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800400e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004012:	4619      	mov	r1, r3
 8004014:	4830      	ldr	r0, [pc, #192]	; (80040d8 <BSP_SDRAM_MspInit+0x204>)
 8004016:	f002 fa09 	bl	800642c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800401a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004024:	4619      	mov	r1, r3
 8004026:	482d      	ldr	r0, [pc, #180]	; (80040dc <BSP_SDRAM_MspInit+0x208>)
 8004028:	f002 fa00 	bl	800642c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800402c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004036:	4619      	mov	r1, r3
 8004038:	4829      	ldr	r0, [pc, #164]	; (80040e0 <BSP_SDRAM_MspInit+0x20c>)
 800403a:	f002 f9f7 	bl	800642c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800404c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004050:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004058:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800405c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004060:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004068:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800406c:	2200      	movs	r2, #0
 800406e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004076:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004080:	2203      	movs	r2, #3
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004086:	2200      	movs	r2, #0
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <BSP_SDRAM_MspInit+0x214>)
 8004094:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80040a2:	4810      	ldr	r0, [pc, #64]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 80040a4:	f001 fec6 	bl	8005e34 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80040a8:	480e      	ldr	r0, [pc, #56]	; (80040e4 <BSP_SDRAM_MspInit+0x210>)
 80040aa:	f001 fe15 	bl	8005cd8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	210f      	movs	r1, #15
 80040b2:	2038      	movs	r0, #56	; 0x38
 80040b4:	f001 fdca 	bl	8005c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80040b8:	2038      	movs	r0, #56	; 0x38
 80040ba:	f001 fde3 	bl	8005c84 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80040be:	bf00      	nop
 80040c0:	3740      	adds	r7, #64	; 0x40
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40020400 	.word	0x40020400
 80040d0:	40020800 	.word	0x40020800
 80040d4:	40020c00 	.word	0x40020c00
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40021400 	.word	0x40021400
 80040e0:	40021800 	.word	0x40021800
 80040e4:	200006f0 	.word	0x200006f0
 80040e8:	40026410 	.word	0x40026410

080040ec <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	460a      	mov	r2, r1
 80040f6:	80fb      	strh	r3, [r7, #6]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <BSP_TS_Init+0x64>)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <BSP_TS_Init+0x68>)
 8004108:	88bb      	ldrh	r3, [r7, #4]
 800410a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <BSP_TS_Init+0x6c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2082      	movs	r0, #130	; 0x82
 8004112:	4798      	blx	r3
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	f640 0311 	movw	r3, #2065	; 0x811
 800411c:	429a      	cmp	r2, r3
 800411e:	d104      	bne.n	800412a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <BSP_TS_Init+0x70>)
 8004122:	4a0d      	ldr	r2, [pc, #52]	; (8004158 <BSP_TS_Init+0x6c>)
 8004124:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <BSP_TS_Init+0x70>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2082      	movs	r0, #130	; 0x82
 8004138:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <BSP_TS_Init+0x70>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2082      	movs	r0, #130	; 0x82
 8004142:	4798      	blx	r3
  }

  return ret;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000754 	.word	0x20000754
 8004154:	20000756 	.word	0x20000756
 8004158:	20000078 	.word	0x20000078
 800415c:	20000750 	.word	0x20000750

08004160 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004168:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <BSP_TS_GetState+0x148>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2082      	movs	r0, #130	; 0x82
 8004170:	4798      	blx	r3
 8004172:	4603      	mov	r3, r0
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808d 	beq.w	800429e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <BSP_TS_GetState+0x148>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f107 020c 	add.w	r2, r7, #12
 800418e:	f107 010e 	add.w	r1, r7, #14
 8004192:	2082      	movs	r0, #130	; 0x82
 8004194:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004196:	89bb      	ldrh	r3, [r7, #12]
 8004198:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800419c:	b29b      	uxth	r3, r3
 800419e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80041a0:	89bb      	ldrh	r3, [r7, #12]
 80041a2:	4a42      	ldr	r2, [pc, #264]	; (80042ac <BSP_TS_GetState+0x14c>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	08db      	lsrs	r3, r3, #3
 80041aa:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80041ac:	8abb      	ldrh	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	82bb      	strh	r3, [r7, #20]
 80041b6:	e008      	b.n	80041ca <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80041b8:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <BSP_TS_GetState+0x150>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	8aba      	ldrh	r2, [r7, #20]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d903      	bls.n	80041ca <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <BSP_TS_GetState+0x150>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80041ca:	8abb      	ldrh	r3, [r7, #20]
 80041cc:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80041ce:	89fb      	ldrh	r3, [r7, #14]
 80041d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d806      	bhi.n	80041e6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80041de:	330e      	adds	r3, #14
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	81fb      	strh	r3, [r7, #14]
 80041e4:	e005      	b.n	80041f2 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80041e6:	89fb      	ldrh	r3, [r7, #14]
 80041e8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80041ec:	3308      	adds	r3, #8
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <BSP_TS_GetState+0x154>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	08db      	lsrs	r3, r3, #3
 80041fc:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80041fe:	8afb      	ldrh	r3, [r7, #22]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	82fb      	strh	r3, [r7, #22]
 8004208:	e008      	b.n	800421c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <BSP_TS_GetState+0x158>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	8afa      	ldrh	r2, [r7, #22]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <BSP_TS_GetState+0x158>)
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800421c:	8afb      	ldrh	r3, [r7, #22]
 800421e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	461a      	mov	r2, r3
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <BSP_TS_GetState+0x15c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d906      	bls.n	800423a <BSP_TS_GetState+0xda>
 800422c:	89fa      	ldrh	r2, [r7, #14]
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <BSP_TS_GetState+0x15c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	b29b      	uxth	r3, r3
 8004238:	e005      	b.n	8004246 <BSP_TS_GetState+0xe6>
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <BSP_TS_GetState+0x15c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29a      	uxth	r2, r3
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b29b      	uxth	r3, r3
 8004246:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004248:	89bb      	ldrh	r3, [r7, #12]
 800424a:	461a      	mov	r2, r3
 800424c:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <BSP_TS_GetState+0x160>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d906      	bls.n	8004262 <BSP_TS_GetState+0x102>
 8004254:	89ba      	ldrh	r2, [r7, #12]
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <BSP_TS_GetState+0x160>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	e005      	b.n	800426e <BSP_TS_GetState+0x10e>
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <BSP_TS_GetState+0x160>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	89bb      	ldrh	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004270:	8a7a      	ldrh	r2, [r7, #18]
 8004272:	8a3b      	ldrh	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	2b05      	cmp	r3, #5
 8004278:	dd07      	ble.n	800428a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	461a      	mov	r2, r3
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <BSP_TS_GetState+0x15c>)
 8004280:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004282:	89bb      	ldrh	r3, [r7, #12]
 8004284:	461a      	mov	r2, r3
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <BSP_TS_GetState+0x160>)
 8004288:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <BSP_TS_GetState+0x15c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <BSP_TS_GetState+0x160>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	809a      	strh	r2, [r3, #4]
  }
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000750 	.word	0x20000750
 80042ac:	ba2e8ba3 	.word	0xba2e8ba3
 80042b0:	20000756 	.word	0x20000756
 80042b4:	88888889 	.word	0x88888889
 80042b8:	20000754 	.word	0x20000754
 80042bc:	20000758 	.word	0x20000758
 80042c0:	2000075c 	.word	0x2000075c

080042c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_MspInit+0x54>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <HAL_MspInit+0x54>)
 80042d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d8:	6453      	str	r3, [r2, #68]	; 0x44
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_MspInit+0x54>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	603b      	str	r3, [r7, #0]
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_MspInit+0x54>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_MspInit+0x54>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_MspInit+0x54>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	210f      	movs	r1, #15
 8004306:	f06f 0001 	mvn.w	r0, #1
 800430a:	f001 fc9f 	bl	8005c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_ADC_MspInit+0x7c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d127      	bne.n	800438e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_ADC_MspInit+0x80>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <HAL_ADC_MspInit+0x80>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434c:	6453      	str	r3, [r2, #68]	; 0x44
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_ADC_MspInit+0x80>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_ADC_MspInit+0x80>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <HAL_ADC_MspInit+0x80>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_ADC_MspInit+0x80>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004376:	2320      	movs	r3, #32
 8004378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800437a:	2303      	movs	r3, #3
 800437c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	4619      	mov	r1, r3
 8004388:	4805      	ldr	r0, [pc, #20]	; (80043a0 <HAL_ADC_MspInit+0x84>)
 800438a:	f002 f84f 	bl	800642c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800438e:	bf00      	nop
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40012000 	.word	0x40012000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020000 	.word	0x40020000

080043a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <HAL_CRC_MspInit+0x3c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10d      	bne.n	80043d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_CRC_MspInit+0x40>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <HAL_CRC_MspInit+0x40>)
 80043c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_CRC_MspInit+0x40>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40023000 	.word	0x40023000
 80043e4:	40023800 	.word	0x40023800

080043e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <HAL_DMA2D_MspInit+0x48>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d115      	bne.n	8004426 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <HAL_DMA2D_MspInit+0x4c>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_DMA2D_MspInit+0x4c>)
 8004404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_DMA2D_MspInit+0x4c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2105      	movs	r1, #5
 800441a:	205a      	movs	r0, #90	; 0x5a
 800441c:	f001 fc16 	bl	8005c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004420:	205a      	movs	r0, #90	; 0x5a
 8004422:	f001 fc2f 	bl	8005c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	4002b000 	.word	0x4002b000
 8004434:	40023800 	.word	0x40023800

08004438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <HAL_I2C_MspInit+0xc4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d14b      	bne.n	80044f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a27      	ldr	r2, [pc, #156]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	4a20      	ldr	r2, [pc, #128]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6313      	str	r3, [r2, #48]	; 0x30
 8004486:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004498:	2312      	movs	r3, #18
 800449a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800449c:	2301      	movs	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a0:	2300      	movs	r3, #0
 80044a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80044a4:	2304      	movs	r3, #4
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	4815      	ldr	r0, [pc, #84]	; (8004504 <HAL_I2C_MspInit+0xcc>)
 80044b0:	f001 ffbc 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80044b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ba:	2312      	movs	r3, #18
 80044bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044be:	2301      	movs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80044c6:	2304      	movs	r3, #4
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80044ca:	f107 0314 	add.w	r3, r7, #20
 80044ce:	4619      	mov	r1, r3
 80044d0:	480d      	ldr	r0, [pc, #52]	; (8004508 <HAL_I2C_MspInit+0xd0>)
 80044d2:	f001 ffab 	bl	800642c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 80044e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_I2C_MspInit+0xc8>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80044f2:	bf00      	nop
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40005c00 	.word	0x40005c00
 8004500:	40023800 	.word	0x40023800
 8004504:	40020800 	.word	0x40020800
 8004508:	40020000 	.word	0x40020000

0800450c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_I2C_MspDeInit+0x3c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10f      	bne.n	800453e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_I2C_MspDeInit+0x40>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_I2C_MspDeInit+0x40>)
 8004524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800452a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800452e:	4808      	ldr	r0, [pc, #32]	; (8004550 <HAL_I2C_MspDeInit+0x44>)
 8004530:	f002 f928 	bl	8006784 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8004534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004538:	4806      	ldr	r0, [pc, #24]	; (8004554 <HAL_I2C_MspDeInit+0x48>)
 800453a:	f002 f923 	bl	8006784 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40005c00 	.word	0x40005c00
 800454c:	40023800 	.word	0x40023800
 8004550:	40020800 	.word	0x40020800
 8004554:	40020000 	.word	0x40020000

08004558 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b09a      	sub	sp, #104	; 0x68
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004574:	2230      	movs	r2, #48	; 0x30
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f00f fbbb 	bl	8013cf4 <memset>
  if(hltdc->Instance==LTDC)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a85      	ldr	r2, [pc, #532]	; (8004798 <HAL_LTDC_MspInit+0x240>)
 8004584:	4293      	cmp	r3, r2
 8004586:	f040 8102 	bne.w	800478e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800458a:	2308      	movs	r3, #8
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800458e:	2332      	movs	r3, #50	; 0x32
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004592:	2302      	movs	r3, #2
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004596:	2300      	movs	r3, #0
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800459a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459e:	4618      	mov	r0, r3
 80045a0:	f005 fef4 	bl	800a38c <HAL_RCCEx_PeriphCLKConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80045aa:	f7fe fa57 	bl	8002a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	4a79      	ldr	r2, [pc, #484]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045bc:	6453      	str	r3, [r2, #68]	; 0x44
 80045be:	4b77      	ldr	r3, [pc, #476]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a72      	ldr	r2, [pc, #456]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045d4:	f043 0320 	orr.w	r3, r3, #32
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b70      	ldr	r3, [pc, #448]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a6b      	ldr	r2, [pc, #428]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b69      	ldr	r3, [pc, #420]	; (800479c <HAL_LTDC_MspInit+0x244>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a64      	ldr	r2, [pc, #400]	; (800479c <HAL_LTDC_MspInit+0x244>)
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	4b5e      	ldr	r3, [pc, #376]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b5b      	ldr	r3, [pc, #364]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a56      	ldr	r2, [pc, #344]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b54      	ldr	r3, [pc, #336]	; (800479c <HAL_LTDC_MspInit+0x244>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_LTDC_MspInit+0x244>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a4f      	ldr	r2, [pc, #316]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004660:	f043 0308 	orr.w	r3, r3, #8
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_LTDC_MspInit+0x244>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004676:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004678:	2302      	movs	r3, #2
 800467a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	2300      	movs	r3, #0
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004684:	230e      	movs	r3, #14
 8004686:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800468c:	4619      	mov	r1, r3
 800468e:	4844      	ldr	r0, [pc, #272]	; (80047a0 <HAL_LTDC_MspInit+0x248>)
 8004690:	f001 fecc 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004694:	f641 0358 	movw	r3, #6232	; 0x1858
 8004698:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a2:	2300      	movs	r3, #0
 80046a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046a6:	230e      	movs	r3, #14
 80046a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ae:	4619      	mov	r1, r3
 80046b0:	483c      	ldr	r0, [pc, #240]	; (80047a4 <HAL_LTDC_MspInit+0x24c>)
 80046b2:	f001 febb 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80046b6:	2303      	movs	r3, #3
 80046b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80046c6:	2309      	movs	r3, #9
 80046c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ce:	4619      	mov	r1, r3
 80046d0:	4835      	ldr	r0, [pc, #212]	; (80047a8 <HAL_LTDC_MspInit+0x250>)
 80046d2:	f001 feab 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80046d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e4:	2300      	movs	r3, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046e8:	230e      	movs	r3, #14
 80046ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046f0:	4619      	mov	r1, r3
 80046f2:	482d      	ldr	r0, [pc, #180]	; (80047a8 <HAL_LTDC_MspInit+0x250>)
 80046f4:	f001 fe9a 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80046f8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80046fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	2300      	movs	r3, #0
 8004708:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800470a:	230e      	movs	r3, #14
 800470c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800470e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004712:	4619      	mov	r1, r3
 8004714:	4825      	ldr	r0, [pc, #148]	; (80047ac <HAL_LTDC_MspInit+0x254>)
 8004716:	f001 fe89 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800471a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004728:	2300      	movs	r3, #0
 800472a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800472c:	230e      	movs	r3, #14
 800472e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004730:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004734:	4619      	mov	r1, r3
 8004736:	481e      	ldr	r0, [pc, #120]	; (80047b0 <HAL_LTDC_MspInit+0x258>)
 8004738:	f001 fe78 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800473c:	2348      	movs	r3, #72	; 0x48
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	2300      	movs	r3, #0
 800474a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800474c:	230e      	movs	r3, #14
 800474e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004754:	4619      	mov	r1, r3
 8004756:	4817      	ldr	r0, [pc, #92]	; (80047b4 <HAL_LTDC_MspInit+0x25c>)
 8004758:	f001 fe68 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800475c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004760:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476a:	2300      	movs	r3, #0
 800476c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800476e:	2309      	movs	r3, #9
 8004770:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004776:	4619      	mov	r1, r3
 8004778:	480c      	ldr	r0, [pc, #48]	; (80047ac <HAL_LTDC_MspInit+0x254>)
 800477a:	f001 fe57 	bl	800642c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2105      	movs	r1, #5
 8004782:	2058      	movs	r0, #88	; 0x58
 8004784:	f001 fa62 	bl	8005c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004788:	2058      	movs	r0, #88	; 0x58
 800478a:	f001 fa7b 	bl	8005c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800478e:	bf00      	nop
 8004790:	3768      	adds	r7, #104	; 0x68
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40016800 	.word	0x40016800
 800479c:	40023800 	.word	0x40023800
 80047a0:	40021400 	.word	0x40021400
 80047a4:	40020000 	.word	0x40020000
 80047a8:	40020400 	.word	0x40020400
 80047ac:	40021800 	.word	0x40021800
 80047b0:	40020800 	.word	0x40020800
 80047b4:	40020c00 	.word	0x40020c00

080047b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_SPI_MspInit+0x84>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d12c      	bne.n	8004834 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_SPI_MspInit+0x88>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_SPI_MspInit+0x88>)
 80047e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_SPI_MspInit+0x88>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_SPI_MspInit+0x88>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_SPI_MspInit+0x88>)
 8004800:	f043 0320 	orr.w	r3, r3, #32
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_SPI_MspInit+0x88>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004812:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004824:	2305      	movs	r3, #5
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4619      	mov	r1, r3
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <HAL_SPI_MspInit+0x8c>)
 8004830:	f001 fdfc 	bl	800642c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004834:	bf00      	nop
 8004836:	3728      	adds	r7, #40	; 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40015000 	.word	0x40015000
 8004840:	40023800 	.word	0x40023800
 8004844:	40021400 	.word	0x40021400

08004848 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <HAL_SPI_MspDeInit+0x30>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10a      	bne.n	8004870 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_SPI_MspDeInit+0x34>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_SPI_MspDeInit+0x34>)
 8004860:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004864:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004866:	f44f 7160 	mov.w	r1, #896	; 0x380
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <HAL_SPI_MspDeInit+0x38>)
 800486c:	f001 ff8a 	bl	8006784 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40015000 	.word	0x40015000
 800487c:	40023800 	.word	0x40023800
 8004880:	40021400 	.word	0x40021400

08004884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <HAL_TIM_Base_MspInit+0x3c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d10d      	bne.n	80048b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_TIM_Base_MspInit+0x40>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_TIM_Base_MspInit+0x40>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6453      	str	r3, [r2, #68]	; 0x44
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_TIM_Base_MspInit+0x40>)
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_UART_MspInit+0x84>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d12c      	bne.n	8004944 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_UART_MspInit+0x88>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_UART_MspInit+0x88>)
 80048f4:	f043 0310 	orr.w	r3, r3, #16
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_UART_MspInit+0x88>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_UART_MspInit+0x88>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_UART_MspInit+0x88>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <HAL_UART_MspInit+0x88>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004922:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004930:	2303      	movs	r3, #3
 8004932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004934:	2307      	movs	r3, #7
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4619      	mov	r1, r3
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <HAL_UART_MspInit+0x8c>)
 8004940:	f001 fd74 	bl	800642c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004944:	bf00      	nop
 8004946:	3728      	adds	r7, #40	; 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40011000 	.word	0x40011000
 8004950:	40023800 	.word	0x40023800
 8004954:	40020000 	.word	0x40020000

08004958 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_FMC_MspInit+0x104>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d16f      	bne.n	8004a54 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <HAL_FMC_MspInit+0x104>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <HAL_FMC_MspInit+0x108>)
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	4a37      	ldr	r2, [pc, #220]	; (8004a60 <HAL_FMC_MspInit+0x108>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6393      	str	r3, [r2, #56]	; 0x38
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_FMC_MspInit+0x108>)
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8004996:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800499a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	2303      	movs	r3, #3
 80049a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049a8:	230c      	movs	r3, #12
 80049aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	482c      	ldr	r0, [pc, #176]	; (8004a64 <HAL_FMC_MspInit+0x10c>)
 80049b2:	f001 fd3b 	bl	800642c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80049b6:	2301      	movs	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c2:	2303      	movs	r3, #3
 80049c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049c6:	230c      	movs	r3, #12
 80049c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4826      	ldr	r0, [pc, #152]	; (8004a68 <HAL_FMC_MspInit+0x110>)
 80049d0:	f001 fd2c 	bl	800642c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80049d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80049d8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e2:	2303      	movs	r3, #3
 80049e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049e6:	230c      	movs	r3, #12
 80049e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	481f      	ldr	r0, [pc, #124]	; (8004a6c <HAL_FMC_MspInit+0x114>)
 80049f0:	f001 fd1c 	bl	800642c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80049f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80049f8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fa:	2302      	movs	r3, #2
 80049fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a02:	2303      	movs	r3, #3
 8004a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a06:	230c      	movs	r3, #12
 8004a08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4818      	ldr	r0, [pc, #96]	; (8004a70 <HAL_FMC_MspInit+0x118>)
 8004a10:	f001 fd0c 	bl	800642c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8004a14:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004a18:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a22:	2303      	movs	r3, #3
 8004a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a26:	230c      	movs	r3, #12
 8004a28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4811      	ldr	r0, [pc, #68]	; (8004a74 <HAL_FMC_MspInit+0x11c>)
 8004a30:	f001 fcfc 	bl	800642c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8004a34:	2360      	movs	r3, #96	; 0x60
 8004a36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a40:	2303      	movs	r3, #3
 8004a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a44:	230c      	movs	r3, #12
 8004a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	480a      	ldr	r0, [pc, #40]	; (8004a78 <HAL_FMC_MspInit+0x120>)
 8004a4e:	f001 fced 	bl	800642c <HAL_GPIO_Init>
 8004a52:	e000      	b.n	8004a56 <HAL_FMC_MspInit+0xfe>
    return;
 8004a54:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000760 	.word	0x20000760
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40021400 	.word	0x40021400
 8004a68:	40020800 	.word	0x40020800
 8004a6c:	40021800 	.word	0x40021800
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40020c00 	.word	0x40020c00
 8004a78:	40020400 	.word	0x40020400

08004a7c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004a84:	f7ff ff68 	bl	8004958 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	; 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_InitTick+0xe4>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	4a32      	ldr	r2, [pc, #200]	; (8004b74 <HAL_InitTick+0xe4>)
 8004aaa:	f043 0310 	orr.w	r3, r3, #16
 8004aae:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab0:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_InitTick+0xe4>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004abc:	f107 0210 	add.w	r2, r7, #16
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f005 fc2e 	bl	800a328 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f005 fbff 	bl	800a2d8 <HAL_RCC_GetPCLK1Freq>
 8004ada:	6378      	str	r0, [r7, #52]	; 0x34
 8004adc:	e004      	b.n	8004ae8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004ade:	f005 fbfb 	bl	800a2d8 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_InitTick+0xe8>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	3b01      	subs	r3, #1
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_InitTick+0xec>)
 8004af8:	4a21      	ldr	r2, [pc, #132]	; (8004b80 <HAL_InitTick+0xf0>)
 8004afa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <HAL_InitTick+0xec>)
 8004afe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_InitTick+0xec>)
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_InitTick+0xec>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <HAL_InitTick+0xec>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_InitTick+0xec>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004b1c:	4817      	ldr	r0, [pc, #92]	; (8004b7c <HAL_InitTick+0xec>)
 8004b1e:	f006 fc65 	bl	800b3ec <HAL_TIM_Base_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11b      	bne.n	8004b68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004b30:	4812      	ldr	r0, [pc, #72]	; (8004b7c <HAL_InitTick+0xec>)
 8004b32:	f006 fcab 	bl	800b48c <HAL_TIM_Base_Start_IT>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d111      	bne.n	8004b68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b44:	2036      	movs	r0, #54	; 0x36
 8004b46:	f001 f89d 	bl	8005c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b0f      	cmp	r3, #15
 8004b4e:	d808      	bhi.n	8004b62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004b50:	2200      	movs	r2, #0
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	2036      	movs	r0, #54	; 0x36
 8004b56:	f001 f879 	bl	8005c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <HAL_InitTick+0xf4>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e002      	b.n	8004b68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3738      	adds	r7, #56	; 0x38
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	431bde83 	.word	0x431bde83
 8004b7c:	20000764 	.word	0x20000764
 8004b80:	40001000 	.word	0x40001000
 8004b84:	200000a4 	.word	0x200000a4

08004b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b8c:	e7fe      	b.n	8004b8c <NMI_Handler+0x4>

08004b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b92:	e7fe      	b.n	8004b92 <HardFault_Handler+0x4>

08004b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b98:	e7fe      	b.n	8004b98 <MemManage_Handler+0x4>

08004b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b9e:	e7fe      	b.n	8004b9e <BusFault_Handler+0x4>

08004ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ba4:	e7fe      	b.n	8004ba4 <UsageFault_Handler+0x4>

08004ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004bb8:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <TIM6_DAC_IRQHandler+0x10>)
 8004bba:	f006 fcd7 	bl	800b56c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000764 	.word	0x20000764

08004bc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8004bcc:	4802      	ldr	r0, [pc, #8]	; (8004bd8 <OTG_HS_IRQHandler+0x10>)
 8004bce:	f002 f969 	bl	8006ea4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2001191c 	.word	0x2001191c

08004bdc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004be0:	4802      	ldr	r0, [pc, #8]	; (8004bec <LTDC_IRQHandler+0x10>)
 8004be2:	f004 fc47 	bl	8009474 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000238 	.word	0x20000238

08004bf0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004bf4:	4802      	ldr	r0, [pc, #8]	; (8004c00 <DMA2D_IRQHandler+0x10>)
 8004bf6:	f001 fa76 	bl	80060e6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	200001a4 	.word	0x200001a4

08004c04 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fa59 	bl	80050c8 <stmpe811_GetInstance>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2bff      	cmp	r3, #255	; 0xff
 8004c1e:	d112      	bne.n	8004c46 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8004c20:	2000      	movs	r0, #0
 8004c22:	f000 fa51 	bl	80050c8 <stmpe811_GetInstance>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d80a      	bhi.n	8004c46 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8004c30:	7bbb      	ldrb	r3, [r7, #14]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	b2d1      	uxtb	r1, r2
 8004c36:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <stmpe811_Init+0x4c>)
 8004c38:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8004c3a:	f7fe fe58 	bl	80038ee <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f807 	bl	8004c54 <stmpe811_Reset>
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200007ac 	.word	0x200007ac

08004c54 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2202      	movs	r2, #2
 8004c64:	2103      	movs	r1, #3
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fe4d 	bl	8003906 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004c6c:	200a      	movs	r0, #10
 8004c6e:	f7fe fe87 	bl	8003980 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2200      	movs	r2, #0
 8004c78:	2103      	movs	r1, #3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fe43 	bl	8003906 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7fe fe7d 	bl	8003980 <IOE_Delay>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004c8e:	b590      	push	{r4, r7, lr}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	4603      	mov	r3, r0
 8004c96:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8004c98:	f7fe fe29 	bl	80038ee <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fe42 	bl	800392c <IOE_Read>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe fe39 	bl	800392c <IOE_Read>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004cbe:	4323      	orrs	r3, r4
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	b29b      	uxth	r3, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}

08004ccc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2109      	movs	r1, #9
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fe23 	bl	800392c <IOE_Read>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	2109      	movs	r1, #9
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fe03 	bl	8003906 <IOE_Write>
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2109      	movs	r1, #9
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fe fe05 	bl	800392c <IOE_Read>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	2109      	movs	r1, #9
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fde5 	bl	8003906 <IOE_Write>
    
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	80fb      	strh	r3, [r7, #6]
 8004d50:	4613      	mov	r3, r2
 8004d52:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	210a      	movs	r1, #10
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fde4 	bl	800392c <IOE_Read>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	797b      	ldrb	r3, [r7, #5]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	210a      	movs	r1, #10
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fdc4 	bl	8003906 <IOE_Write>
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	460a      	mov	r2, r1
 8004d90:	80fb      	strh	r3, [r7, #6]
 8004d92:	4613      	mov	r3, r2
 8004d94:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	210a      	movs	r1, #10
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fdc3 	bl	800392c <IOE_Read>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8004daa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	b25a      	sxtb	r2, r3
 8004db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	210a      	movs	r1, #10
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe fd9e 	bl	8003906 <IOE_Write>
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	460a      	mov	r2, r1
 8004ddc:	80fb      	strh	r3, [r7, #6]
 8004dde:	4613      	mov	r3, r2
 8004de0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	210b      	movs	r1, #11
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fd9f 	bl	800392c <IOE_Read>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	797b      	ldrb	r3, [r7, #5]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b2db      	uxtb	r3, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	80fb      	strh	r3, [r7, #6]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	797a      	ldrb	r2, [r7, #5]
 8004e16:	210b      	movs	r1, #11
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe fd74 	bl	8003906 <IOE_Write>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	6039      	str	r1, [r7, #0]
 8004e30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2117      	movs	r1, #23
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fd75 	bl	800392c <IOE_Read>
 8004e42:	4603      	mov	r3, r0
 8004e44:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	b25a      	sxtb	r2, r3
 8004e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e52:	4013      	ands	r3, r2
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	2117      	movs	r1, #23
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fd50 	bl	8003906 <IOE_Write>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fd54 	bl	800392c <IOE_Read>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	f023 0304 	bic.w	r3, r3, #4
 8004e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	2104      	movs	r1, #4
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fd34 	bl	8003906 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	21f0      	movs	r1, #240	; 0xf0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff ffbf 	bl	8004e26 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fd24 	bl	8003906 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2249      	movs	r2, #73	; 0x49
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fd1d 	bl	8003906 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8004ecc:	2002      	movs	r0, #2
 8004ece:	f7fe fd57 	bl	8003980 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2121      	movs	r1, #33	; 0x21
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fd13 	bl	8003906 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	229a      	movs	r2, #154	; 0x9a
 8004ee6:	2141      	movs	r1, #65	; 0x41
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fd0c 	bl	8003906 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	214a      	movs	r1, #74	; 0x4a
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fd05 	bl	8003906 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2201      	movs	r2, #1
 8004f02:	214b      	movs	r1, #75	; 0x4b
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fcfe 	bl	8003906 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2200      	movs	r2, #0
 8004f10:	214b      	movs	r1, #75	; 0x4b
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fcf7 	bl	8003906 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2156      	movs	r1, #86	; 0x56
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fcf0 	bl	8003906 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2158      	movs	r1, #88	; 0x58
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fce9 	bl	8003906 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fce2 	bl	8003906 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	210b      	movs	r1, #11
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fcdb 	bl	8003906 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8004f50:	2002      	movs	r0, #2
 8004f52:	f7fe fd15 	bl	8003980 <IOE_Delay>
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	4603      	mov	r3, r0
 8004f66:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2140      	movs	r1, #64	; 0x40
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fcda 	bl	800392c <IOE_Read>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	214c      	movs	r1, #76	; 0x4c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fcc8 	bl	800392c <IOE_Read>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e00d      	b.n	8004fc4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	214b      	movs	r1, #75	; 0x4b
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fe fca8 	bl	8003906 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2200      	movs	r2, #0
 8004fbc:	214b      	movs	r1, #75	; 0x4b
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fca1 	bl	8003906 <IOE_Write>
  }
  
  return ret;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004fdc:	89fb      	ldrh	r3, [r7, #14]
 8004fde:	b2d8      	uxtb	r0, r3
 8004fe0:	f107 0210 	add.w	r2, r7, #16
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	21d7      	movs	r1, #215	; 0xd7
 8004fe8:	f7fe fcb3 	bl	8003952 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8004fec:	7c3b      	ldrb	r3, [r7, #16]
 8004fee:	061a      	lsls	r2, r3, #24
 8004ff0:	7c7b      	ldrb	r3, [r7, #17]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	7cbb      	ldrb	r3, [r7, #18]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	7cfa      	ldrb	r2, [r7, #19]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	0d1b      	lsrs	r3, r3, #20
 8005006:	b29a      	uxth	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2201      	movs	r2, #1
 8005022:	214b      	movs	r1, #75	; 0x4b
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fc6e 	bl	8003906 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800502a:	89fb      	ldrh	r3, [r7, #14]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2200      	movs	r2, #0
 8005030:	214b      	movs	r1, #75	; 0x4b
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fc67 	bl	8003906 <IOE_Write>
}
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800504a:	f7fe fc56 	bl	80038fa <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	211f      	movs	r1, #31
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fe76 	bl	8004d44 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fe36 	bl	8004ccc <stmpe811_EnableGlobalIT>
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fe47 	bl	8004d08 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	211f      	movs	r1, #31
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fe81 	bl	8004d86 <stmpe811_DisableITSource>
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	211f      	movs	r1, #31
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fe99 	bl	8004dd2 <stmpe811_ReadGITStatus>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	211f      	movs	r1, #31
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fea1 	bl	8004e00 <stmpe811_ClearGlobalIT>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e00b      	b.n	80050f4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <stmpe811_GetInstance+0x40>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d101      	bne.n	80050ee <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	e006      	b.n	80050fc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3301      	adds	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d9f0      	bls.n	80050dc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80050fa:	23ff      	movs	r3, #255	; 0xff
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	200007ac 	.word	0x200007ac

0800510c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005114:	4a14      	ldr	r2, [pc, #80]	; (8005168 <_sbrk+0x5c>)
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <_sbrk+0x60>)
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <_sbrk+0x64>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <_sbrk+0x64>)
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <_sbrk+0x68>)
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <_sbrk+0x64>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d207      	bcs.n	800514c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800513c:	f00e fd92 	bl	8013c64 <__errno>
 8005140:	4603      	mov	r3, r0
 8005142:	220c      	movs	r2, #12
 8005144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	e009      	b.n	8005160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <_sbrk+0x64>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <_sbrk+0x64>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <_sbrk+0x64>)
 800515c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20030000 	.word	0x20030000
 800516c:	00000400 	.word	0x00000400
 8005170:	200007b0 	.word	0x200007b0
 8005174:	20011c30 	.word	0x20011c30

08005178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <SystemInit+0x20>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	4a05      	ldr	r2, [pc, #20]	; (8005198 <SystemInit+0x20>)
 8005184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800519c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051a0:	480d      	ldr	r0, [pc, #52]	; (80051d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051a2:	490e      	ldr	r1, [pc, #56]	; (80051dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051a4:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051a8:	e002      	b.n	80051b0 <LoopCopyDataInit>

080051aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ae:	3304      	adds	r3, #4

080051b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b4:	d3f9      	bcc.n	80051aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051b6:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051b8:	4c0b      	ldr	r4, [pc, #44]	; (80051e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80051ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051bc:	e001      	b.n	80051c2 <LoopFillZerobss>

080051be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051c0:	3204      	adds	r2, #4

080051c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c4:	d3fb      	bcc.n	80051be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051c6:	f7ff ffd7 	bl	8005178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ca:	f00e fd51 	bl	8013c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ce:	f7fc f843 	bl	8001258 <main>
  bx  lr    
 80051d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80051d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80051d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051dc:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 80051e0:	08075838 	.word	0x08075838
  ldr r2, =_sbss
 80051e4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80051e8:	20011c30 	.word	0x20011c30

080051ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051ec:	e7fe      	b.n	80051ec <ADC_IRQHandler>
	...

080051f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_Init+0x40>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0d      	ldr	r2, [pc, #52]	; (8005230 <HAL_Init+0x40>)
 80051fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_Init+0x40>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <HAL_Init+0x40>)
 8005206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800520a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <HAL_Init+0x40>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a07      	ldr	r2, [pc, #28]	; (8005230 <HAL_Init+0x40>)
 8005212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005218:	2003      	movs	r0, #3
 800521a:	f000 fd0c 	bl	8005c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800521e:	2000      	movs	r0, #0
 8005220:	f7ff fc36 	bl	8004a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005224:	f7ff f84e 	bl	80042c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023c00 	.word	0x40023c00

08005234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_IncTick+0x20>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_IncTick+0x24>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4413      	add	r3, r2
 8005244:	4a04      	ldr	r2, [pc, #16]	; (8005258 <HAL_IncTick+0x24>)
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	200000a8 	.word	0x200000a8
 8005258:	200007b4 	.word	0x200007b4

0800525c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return uwTick;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_GetTick+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200007b4 	.word	0x200007b4

08005274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800527c:	f7ff ffee 	bl	800525c <HAL_GetTick>
 8005280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d005      	beq.n	800529a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <HAL_Delay+0x44>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800529a:	bf00      	nop
 800529c:	f7ff ffde 	bl	800525c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d8f7      	bhi.n	800529c <HAL_Delay+0x28>
  {
  }
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200000a8 	.word	0x200000a8

080052bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e033      	b.n	800533a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff f81e 	bl	800431c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d118      	bne.n	800532c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005302:	f023 0302 	bic.w	r3, r3, #2
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fae8 	bl	80058e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
 800532a:	e001      	b.n	8005330 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_ADC_Start+0x1a>
 800535a:	2302      	movs	r3, #2
 800535c:	e0b2      	b.n	80054c4 <HAL_ADC_Start+0x180>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d018      	beq.n	80053a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005384:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <HAL_ADC_Start+0x18c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_ADC_Start+0x190>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0c9a      	lsrs	r2, r3, #18
 8005390:	4613      	mov	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	4413      	add	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005398:	e002      	b.n	80053a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3b01      	subs	r3, #1
 800539e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f9      	bne.n	800539a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d17a      	bne.n	80054aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d106      	bne.n	8005402 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f8:	f023 0206 	bic.w	r2, r3, #6
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
 8005400:	e002      	b.n	8005408 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_ADC_Start+0x194>)
 8005412:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800541c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2b00      	cmp	r3, #0
 8005428:	d12a      	bne.n	8005480 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <HAL_ADC_Start+0x198>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d015      	beq.n	8005460 <HAL_ADC_Start+0x11c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <HAL_ADC_Start+0x19c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d105      	bne.n	800544a <HAL_ADC_Start+0x106>
 800543e:	4b26      	ldr	r3, [pc, #152]	; (80054d8 <HAL_ADC_Start+0x194>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <HAL_ADC_Start+0x1a0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d136      	bne.n	80054c2 <HAL_ADC_Start+0x17e>
 8005454:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_ADC_Start+0x194>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d130      	bne.n	80054c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d129      	bne.n	80054c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	e020      	b.n	80054c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a15      	ldr	r2, [pc, #84]	; (80054dc <HAL_ADC_Start+0x198>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d11b      	bne.n	80054c2 <HAL_ADC_Start+0x17e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d114      	bne.n	80054c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	e00b      	b.n	80054c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f043 0210 	orr.w	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f043 0201 	orr.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	200000a0 	.word	0x200000a0
 80054d4:	431bde83 	.word	0x431bde83
 80054d8:	40012300 	.word	0x40012300
 80054dc:	40012000 	.word	0x40012000
 80054e0:	40012100 	.word	0x40012100
 80054e4:	40012200 	.word	0x40012200

080054e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_Stop+0x16>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e021      	b.n	8005542 <HAL_ADC_Stop+0x5a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556a:	d113      	bne.n	8005594 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d10b      	bne.n	8005594 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e063      	b.n	800565c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005594:	f7ff fe62 	bl	800525c <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800559a:	e021      	b.n	80055e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a2:	d01d      	beq.n	80055e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <HAL_ADC_PollForConversion+0x6c>
 80055aa:	f7ff fe57 	bl	800525c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d212      	bcs.n	80055e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d00b      	beq.n	80055e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e03d      	b.n	800565c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d1d6      	bne.n	800559c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0212 	mvn.w	r2, #18
 80055f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d123      	bne.n	800565a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11f      	bne.n	800565a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005632:	2b00      	cmp	r3, #0
 8005634:	d111      	bne.n	800565a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_ADC_ConfigChannel+0x1c>
 8005698:	2302      	movs	r3, #2
 800569a:	e113      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x244>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d925      	bls.n	80056f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68d9      	ldr	r1, [r3, #12]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	3b1e      	subs	r3, #30
 80056c2:	2207      	movs	r2, #7
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43da      	mvns	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	400a      	ands	r2, r1
 80056d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68d9      	ldr	r1, [r3, #12]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4618      	mov	r0, r3
 80056e4:	4603      	mov	r3, r0
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4403      	add	r3, r0
 80056ea:	3b1e      	subs	r3, #30
 80056ec:	409a      	lsls	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e022      	b.n	800573e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6919      	ldr	r1, [r3, #16]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	2207      	movs	r2, #7
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43da      	mvns	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	400a      	ands	r2, r1
 800571a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	4618      	mov	r0, r3
 800572e:	4603      	mov	r3, r0
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4403      	add	r3, r0
 8005734:	409a      	lsls	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b06      	cmp	r3, #6
 8005744:	d824      	bhi.n	8005790 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	3b05      	subs	r3, #5
 8005758:	221f      	movs	r2, #31
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43da      	mvns	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	400a      	ands	r2, r1
 8005766:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	4618      	mov	r0, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	3b05      	subs	r3, #5
 8005782:	fa00 f203 	lsl.w	r2, r0, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
 800578e:	e04c      	b.n	800582a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b0c      	cmp	r3, #12
 8005796:	d824      	bhi.n	80057e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	3b23      	subs	r3, #35	; 0x23
 80057aa:	221f      	movs	r2, #31
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	43da      	mvns	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	400a      	ands	r2, r1
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4618      	mov	r0, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	3b23      	subs	r3, #35	; 0x23
 80057d4:	fa00 f203 	lsl.w	r2, r0, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
 80057e0:	e023      	b.n	800582a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	3b41      	subs	r3, #65	; 0x41
 80057f4:	221f      	movs	r2, #31
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43da      	mvns	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	400a      	ands	r2, r1
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	4618      	mov	r0, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	3b41      	subs	r3, #65	; 0x41
 800581e:	fa00 f203 	lsl.w	r2, r0, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <HAL_ADC_ConfigChannel+0x250>)
 800582c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a28      	ldr	r2, [pc, #160]	; (80058d4 <HAL_ADC_ConfigChannel+0x254>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d10f      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x1d8>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b12      	cmp	r3, #18
 800583e:	d10b      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <HAL_ADC_ConfigChannel+0x254>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d12b      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x23a>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_ADC_ConfigChannel+0x258>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <HAL_ADC_ConfigChannel+0x1f4>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b11      	cmp	r3, #17
 8005872:	d122      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <HAL_ADC_ConfigChannel+0x258>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_ADC_ConfigChannel+0x25c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <HAL_ADC_ConfigChannel+0x260>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	0c9a      	lsrs	r2, r3, #18
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80058ac:	e002      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f9      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40012300 	.word	0x40012300
 80058d4:	40012000 	.word	0x40012000
 80058d8:	10000012 	.word	0x10000012
 80058dc:	200000a0 	.word	0x200000a0
 80058e0:	431bde83 	.word	0x431bde83

080058e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058ec:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <ADC_Init+0x1f0>)
 80058ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	431a      	orrs	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6859      	ldr	r1, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	021a      	lsls	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800593c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <ADC_Init+0x1f4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800598a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6899      	ldr	r1, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e00f      	b.n	80059e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0202 	bic.w	r2, r2, #2
 80059f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6899      	ldr	r1, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7e1b      	ldrb	r3, [r3, #24]
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	035a      	lsls	r2, r3, #13
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	e007      	b.n	8005a58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	051a      	lsls	r2, r3, #20
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a9a:	025a      	lsls	r2, r3, #9
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	029a      	lsls	r2, r3, #10
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40012300 	.word	0x40012300
 8005ad8:	0f000001 	.word	0x0f000001

08005adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aec:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <__NVIC_SetPriorityGrouping+0x44>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005af8:	4013      	ands	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b0e:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <__NVIC_SetPriorityGrouping+0x44>)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	60d3      	str	r3, [r2, #12]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000ed00 	.word	0xe000ed00

08005b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <__NVIC_GetPriorityGrouping+0x18>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f003 0307 	and.w	r3, r3, #7
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	db0b      	blt.n	8005b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	4907      	ldr	r1, [pc, #28]	; (8005b78 <__NVIC_EnableIRQ+0x38>)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2001      	movs	r0, #1
 8005b62:	fa00 f202 	lsl.w	r2, r0, r2
 8005b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000e100 	.word	0xe000e100

08005b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	6039      	str	r1, [r7, #0]
 8005b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	db0a      	blt.n	8005ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <__NVIC_SetPriority+0x4c>)
 8005b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ba4:	e00a      	b.n	8005bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4908      	ldr	r1, [pc, #32]	; (8005bcc <__NVIC_SetPriority+0x50>)
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	0112      	lsls	r2, r2, #4
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	440b      	add	r3, r1
 8005bba:	761a      	strb	r2, [r3, #24]
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	e000e100 	.word	0xe000e100
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f1c3 0307 	rsb	r3, r3, #7
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf28      	it	cs
 8005bee:	2304      	movcs	r3, #4
 8005bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d902      	bls.n	8005c00 <NVIC_EncodePriority+0x30>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3b03      	subs	r3, #3
 8005bfe:	e000      	b.n	8005c02 <NVIC_EncodePriority+0x32>
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	401a      	ands	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c18:	f04f 31ff 	mov.w	r1, #4294967295
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	43d9      	mvns	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	4313      	orrs	r3, r2
         );
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3724      	adds	r7, #36	; 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff4c 	bl	8005adc <__NVIC_SetPriorityGrouping>
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c5e:	f7ff ff61 	bl	8005b24 <__NVIC_GetPriorityGrouping>
 8005c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	6978      	ldr	r0, [r7, #20]
 8005c6a:	f7ff ffb1 	bl	8005bd0 <NVIC_EncodePriority>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff ff80 	bl	8005b7c <__NVIC_SetPriority>
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff ff54 	bl	8005b40 <__NVIC_EnableIRQ>
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e00e      	b.n	8005cd0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	795b      	ldrb	r3, [r3, #5]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fe fb6e 	bl	80043a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ce4:	f7ff faba 	bl	800525c <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e099      	b.n	8005e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d14:	e00f      	b.n	8005d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d16:	f7ff faa1 	bl	800525c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d908      	bls.n	8005d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e078      	b.n	8005e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e8      	bne.n	8005d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <HAL_DMA_Init+0x158>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d107      	bne.n	8005da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d117      	bne.n	8005dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f8bd 	bl	8005f5c <DMA_CheckFifoParam>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2240      	movs	r2, #64	; 0x40
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005df6:	2301      	movs	r3, #1
 8005df8:	e016      	b.n	8005e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f874 	bl	8005ef0 <DMA_CalcBaseAndBitshift>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	223f      	movs	r2, #63	; 0x3f
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	f010803f 	.word	0xf010803f

08005e34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e050      	b.n	8005ee8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d101      	bne.n	8005e56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005e52:	2302      	movs	r3, #2
 8005e54:	e048      	b.n	8005ee8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2221      	movs	r2, #33	; 0x21
 8005e94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f82a 	bl	8005ef0 <DMA_CalcBaseAndBitshift>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec8:	223f      	movs	r2, #63	; 0x3f
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	3b10      	subs	r3, #16
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <DMA_CalcBaseAndBitshift+0x64>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <DMA_CalcBaseAndBitshift+0x68>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d909      	bls.n	8005f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f30:	e007      	b.n	8005f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	aaaaaaab 	.word	0xaaaaaaab
 8005f58:	080757ec 	.word	0x080757ec

08005f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11f      	bne.n	8005fb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d856      	bhi.n	800602a <DMA_CheckFifoParam+0xce>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <DMA_CheckFifoParam+0x28>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005fa7 	.word	0x08005fa7
 8005f8c:	08005f95 	.word	0x08005f95
 8005f90:	0800602b 	.word	0x0800602b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d046      	beq.n	800602e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa4:	e043      	b.n	800602e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fae:	d140      	bne.n	8006032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb4:	e03d      	b.n	8006032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbe:	d121      	bne.n	8006004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d837      	bhi.n	8006036 <DMA_CheckFifoParam+0xda>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <DMA_CheckFifoParam+0x70>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fe3 	.word	0x08005fe3
 8005fd4:	08005fdd 	.word	0x08005fdd
 8005fd8:	08005ff5 	.word	0x08005ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe0:	e030      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d025      	beq.n	800603a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff2:	e022      	b.n	800603a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ffc:	d11f      	bne.n	800603e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006002:	e01c      	b.n	800603e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d903      	bls.n	8006012 <DMA_CheckFifoParam+0xb6>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d003      	beq.n	8006018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006010:	e018      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
      break;
 8006016:	e015      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
      break;
 8006028:	e00b      	b.n	8006042 <DMA_CheckFifoParam+0xe6>
      break;
 800602a:	bf00      	nop
 800602c:	e00a      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 800602e:	bf00      	nop
 8006030:	e008      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
 8006034:	e006      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;   
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006042:	bf00      	nop
    }
  } 
  
  return status; 
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e03b      	b.n	80060de <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fe f9b4 	bl	80043e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	f023 0107 	bic.w	r1, r3, #7
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68d1      	ldr	r1, [r2, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	430b      	orrs	r3, r1
 80060cc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d026      	beq.n	8006156 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d021      	beq.n	8006156 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006120:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	f043 0201 	orr.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d026      	beq.n	80061ae <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d021      	beq.n	80061ae <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006178:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2220      	movs	r2, #32
 8006180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	f043 0202 	orr.w	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d026      	beq.n	8006206 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d021      	beq.n	8006206 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2208      	movs	r2, #8
 80061d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	f043 0204 	orr.w	r2, r3, #4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006228:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2204      	movs	r2, #4
 8006230:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f853 	bl	80062de <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d024      	beq.n	800628c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01f      	beq.n	800628c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800625a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2202      	movs	r2, #2
 8006262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01f      	beq.n	80062d6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01a      	beq.n	80062d6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2210      	movs	r2, #16
 80062b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f80e 	bl	80062f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_DMA2D_ConfigLayer+0x20>
 8006324:	2302      	movs	r3, #2
 8006326:	e079      	b.n	800641c <HAL_DMA2D_ConfigLayer+0x114>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	3318      	adds	r3, #24
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006352:	4b35      	ldr	r3, [pc, #212]	; (8006428 <HAL_DMA2D_ConfigLayer+0x120>)
 8006354:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b0a      	cmp	r3, #10
 800635c:	d003      	beq.n	8006366 <HAL_DMA2D_ConfigLayer+0x5e>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b09      	cmp	r3, #9
 8006364:	d107      	bne.n	8006376 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e005      	b.n	8006382 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d120      	bne.n	80063ca <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	43db      	mvns	r3, r3
 8006392:	ea02 0103 	and.w	r1, r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	430a      	orrs	r2, r1
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b0a      	cmp	r3, #10
 80063b0:	d003      	beq.n	80063ba <HAL_DMA2D_ConfigLayer+0xb2>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	d127      	bne.n	800640a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28
 80063c8:	e01f      	b.n	800640a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	ea02 0103 	and.w	r1, r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	430a      	orrs	r2, r1
 80063e0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b0a      	cmp	r3, #10
 80063f2:	d003      	beq.n	80063fc <HAL_DMA2D_ConfigLayer+0xf4>
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d106      	bne.n	800640a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006408:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	ff03000f 	.word	0xff03000f

0800642c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	; 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e177      	b.n	8006738 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006448:	2201      	movs	r2, #1
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4013      	ands	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	429a      	cmp	r2, r3
 8006462:	f040 8166 	bne.w	8006732 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b01      	cmp	r3, #1
 8006470:	d005      	beq.n	800647e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800647a:	2b02      	cmp	r3, #2
 800647c:	d130      	bne.n	80064e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	2203      	movs	r2, #3
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43db      	mvns	r3, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4013      	ands	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064b4:	2201      	movs	r2, #1
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4013      	ands	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	f003 0201 	and.w	r2, r3, #1
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d017      	beq.n	800651c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	2203      	movs	r2, #3
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d123      	bne.n	8006570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	08da      	lsrs	r2, r3, #3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3208      	adds	r2, #8
 8006530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	220f      	movs	r2, #15
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	08da      	lsrs	r2, r3, #3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3208      	adds	r2, #8
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	2203      	movs	r2, #3
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 0203 	and.w	r2, r3, #3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80c0 	beq.w	8006732 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_GPIO_Init+0x324>)
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_GPIO_Init+0x324>)
 80065bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065c0:	6453      	str	r3, [r2, #68]	; 0x44
 80065c2:	4b63      	ldr	r3, [pc, #396]	; (8006750 <HAL_GPIO_Init+0x324>)
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ce:	4a61      	ldr	r2, [pc, #388]	; (8006754 <HAL_GPIO_Init+0x328>)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	3302      	adds	r3, #2
 80065d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	220f      	movs	r2, #15
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a58      	ldr	r2, [pc, #352]	; (8006758 <HAL_GPIO_Init+0x32c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d037      	beq.n	800666a <HAL_GPIO_Init+0x23e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a57      	ldr	r2, [pc, #348]	; (800675c <HAL_GPIO_Init+0x330>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_GPIO_Init+0x23a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a56      	ldr	r2, [pc, #344]	; (8006760 <HAL_GPIO_Init+0x334>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02b      	beq.n	8006662 <HAL_GPIO_Init+0x236>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a55      	ldr	r2, [pc, #340]	; (8006764 <HAL_GPIO_Init+0x338>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d025      	beq.n	800665e <HAL_GPIO_Init+0x232>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <HAL_GPIO_Init+0x33c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01f      	beq.n	800665a <HAL_GPIO_Init+0x22e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <HAL_GPIO_Init+0x340>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d019      	beq.n	8006656 <HAL_GPIO_Init+0x22a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a52      	ldr	r2, [pc, #328]	; (8006770 <HAL_GPIO_Init+0x344>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_GPIO_Init+0x226>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_GPIO_Init+0x348>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00d      	beq.n	800664e <HAL_GPIO_Init+0x222>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a50      	ldr	r2, [pc, #320]	; (8006778 <HAL_GPIO_Init+0x34c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <HAL_GPIO_Init+0x21e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a4f      	ldr	r2, [pc, #316]	; (800677c <HAL_GPIO_Init+0x350>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_GPIO_Init+0x21a>
 8006642:	2309      	movs	r3, #9
 8006644:	e012      	b.n	800666c <HAL_GPIO_Init+0x240>
 8006646:	230a      	movs	r3, #10
 8006648:	e010      	b.n	800666c <HAL_GPIO_Init+0x240>
 800664a:	2308      	movs	r3, #8
 800664c:	e00e      	b.n	800666c <HAL_GPIO_Init+0x240>
 800664e:	2307      	movs	r3, #7
 8006650:	e00c      	b.n	800666c <HAL_GPIO_Init+0x240>
 8006652:	2306      	movs	r3, #6
 8006654:	e00a      	b.n	800666c <HAL_GPIO_Init+0x240>
 8006656:	2305      	movs	r3, #5
 8006658:	e008      	b.n	800666c <HAL_GPIO_Init+0x240>
 800665a:	2304      	movs	r3, #4
 800665c:	e006      	b.n	800666c <HAL_GPIO_Init+0x240>
 800665e:	2303      	movs	r3, #3
 8006660:	e004      	b.n	800666c <HAL_GPIO_Init+0x240>
 8006662:	2302      	movs	r3, #2
 8006664:	e002      	b.n	800666c <HAL_GPIO_Init+0x240>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_GPIO_Init+0x240>
 800666a:	2300      	movs	r3, #0
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	f002 0203 	and.w	r2, r2, #3
 8006672:	0092      	lsls	r2, r2, #2
 8006674:	4093      	lsls	r3, r2
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4313      	orrs	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800667c:	4935      	ldr	r1, [pc, #212]	; (8006754 <HAL_GPIO_Init+0x328>)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	3302      	adds	r3, #2
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800668a:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <HAL_GPIO_Init+0x354>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	43db      	mvns	r3, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4013      	ands	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066ae:	4a34      	ldr	r2, [pc, #208]	; (8006780 <HAL_GPIO_Init+0x354>)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066b4:	4b32      	ldr	r3, [pc, #200]	; (8006780 <HAL_GPIO_Init+0x354>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066d8:	4a29      	ldr	r2, [pc, #164]	; (8006780 <HAL_GPIO_Init+0x354>)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <HAL_GPIO_Init+0x354>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	43db      	mvns	r3, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	4013      	ands	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006702:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <HAL_GPIO_Init+0x354>)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <HAL_GPIO_Init+0x354>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	43db      	mvns	r3, r3
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	4013      	ands	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800672c:	4a14      	ldr	r2, [pc, #80]	; (8006780 <HAL_GPIO_Init+0x354>)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	f67f ae84 	bls.w	8006448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	3724      	adds	r7, #36	; 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	40013800 	.word	0x40013800
 8006758:	40020000 	.word	0x40020000
 800675c:	40020400 	.word	0x40020400
 8006760:	40020800 	.word	0x40020800
 8006764:	40020c00 	.word	0x40020c00
 8006768:	40021000 	.word	0x40021000
 800676c:	40021400 	.word	0x40021400
 8006770:	40021800 	.word	0x40021800
 8006774:	40021c00 	.word	0x40021c00
 8006778:	40022000 	.word	0x40022000
 800677c:	40022400 	.word	0x40022400
 8006780:	40013c00 	.word	0x40013c00

08006784 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e0d9      	b.n	8006954 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067a0:	2201      	movs	r2, #1
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4013      	ands	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f040 80c9 	bne.w	800694e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80067bc:	4a6b      	ldr	r2, [pc, #428]	; (800696c <HAL_GPIO_DeInit+0x1e8>)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	3302      	adds	r3, #2
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0303 	and.w	r3, r3, #3
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	220f      	movs	r2, #15
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a63      	ldr	r2, [pc, #396]	; (8006970 <HAL_GPIO_DeInit+0x1ec>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d037      	beq.n	8006856 <HAL_GPIO_DeInit+0xd2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a62      	ldr	r2, [pc, #392]	; (8006974 <HAL_GPIO_DeInit+0x1f0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d031      	beq.n	8006852 <HAL_GPIO_DeInit+0xce>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a61      	ldr	r2, [pc, #388]	; (8006978 <HAL_GPIO_DeInit+0x1f4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d02b      	beq.n	800684e <HAL_GPIO_DeInit+0xca>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a60      	ldr	r2, [pc, #384]	; (800697c <HAL_GPIO_DeInit+0x1f8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d025      	beq.n	800684a <HAL_GPIO_DeInit+0xc6>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a5f      	ldr	r2, [pc, #380]	; (8006980 <HAL_GPIO_DeInit+0x1fc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01f      	beq.n	8006846 <HAL_GPIO_DeInit+0xc2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a5e      	ldr	r2, [pc, #376]	; (8006984 <HAL_GPIO_DeInit+0x200>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d019      	beq.n	8006842 <HAL_GPIO_DeInit+0xbe>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a5d      	ldr	r2, [pc, #372]	; (8006988 <HAL_GPIO_DeInit+0x204>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d013      	beq.n	800683e <HAL_GPIO_DeInit+0xba>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a5c      	ldr	r2, [pc, #368]	; (800698c <HAL_GPIO_DeInit+0x208>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00d      	beq.n	800683a <HAL_GPIO_DeInit+0xb6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a5b      	ldr	r2, [pc, #364]	; (8006990 <HAL_GPIO_DeInit+0x20c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <HAL_GPIO_DeInit+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a5a      	ldr	r2, [pc, #360]	; (8006994 <HAL_GPIO_DeInit+0x210>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d101      	bne.n	8006832 <HAL_GPIO_DeInit+0xae>
 800682e:	2309      	movs	r3, #9
 8006830:	e012      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006832:	230a      	movs	r3, #10
 8006834:	e010      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006836:	2308      	movs	r3, #8
 8006838:	e00e      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 800683a:	2307      	movs	r3, #7
 800683c:	e00c      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 800683e:	2306      	movs	r3, #6
 8006840:	e00a      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006842:	2305      	movs	r3, #5
 8006844:	e008      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006846:	2304      	movs	r3, #4
 8006848:	e006      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 800684a:	2303      	movs	r3, #3
 800684c:	e004      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 800684e:	2302      	movs	r3, #2
 8006850:	e002      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <HAL_GPIO_DeInit+0xd4>
 8006856:	2300      	movs	r3, #0
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	f002 0203 	and.w	r2, r2, #3
 800685e:	0092      	lsls	r2, r2, #2
 8006860:	4093      	lsls	r3, r2
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d132      	bne.n	80068ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006868:	4b4b      	ldr	r3, [pc, #300]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	43db      	mvns	r3, r3
 8006870:	4949      	ldr	r1, [pc, #292]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 8006872:	4013      	ands	r3, r2
 8006874:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006876:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	43db      	mvns	r3, r3
 800687e:	4946      	ldr	r1, [pc, #280]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 8006880:	4013      	ands	r3, r2
 8006882:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006884:	4b44      	ldr	r3, [pc, #272]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	43db      	mvns	r3, r3
 800688c:	4942      	ldr	r1, [pc, #264]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 800688e:	4013      	ands	r3, r2
 8006890:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006892:	4b41      	ldr	r3, [pc, #260]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43db      	mvns	r3, r3
 800689a:	493f      	ldr	r1, [pc, #252]	; (8006998 <HAL_GPIO_DeInit+0x214>)
 800689c:	4013      	ands	r3, r2
 800689e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	220f      	movs	r2, #15
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80068b0:	4a2e      	ldr	r2, [pc, #184]	; (800696c <HAL_GPIO_DeInit+0x1e8>)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	3302      	adds	r3, #2
 80068b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	43da      	mvns	r2, r3
 80068c0:	482a      	ldr	r0, [pc, #168]	; (800696c <HAL_GPIO_DeInit+0x1e8>)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	400a      	ands	r2, r1
 80068c8:	3302      	adds	r3, #2
 80068ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	2103      	movs	r1, #3
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	08da      	lsrs	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3208      	adds	r2, #8
 80068ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	220f      	movs	r2, #15
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	43db      	mvns	r3, r3
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	08d2      	lsrs	r2, r2, #3
 8006904:	4019      	ands	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3208      	adds	r2, #8
 800690a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	2103      	movs	r1, #3
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	401a      	ands	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	2101      	movs	r1, #1
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	2103      	movs	r1, #3
 8006942:	fa01 f303 	lsl.w	r3, r1, r3
 8006946:	43db      	mvns	r3, r3
 8006948:	401a      	ands	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	3301      	adds	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	f67f af22 	bls.w	80067a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40013800 	.word	0x40013800
 8006970:	40020000 	.word	0x40020000
 8006974:	40020400 	.word	0x40020400
 8006978:	40020800 	.word	0x40020800
 800697c:	40020c00 	.word	0x40020c00
 8006980:	40021000 	.word	0x40021000
 8006984:	40021400 	.word	0x40021400
 8006988:	40021800 	.word	0x40021800
 800698c:	40021c00 	.word	0x40021c00
 8006990:	40022000 	.word	0x40022000
 8006994:	40022400 	.word	0x40022400
 8006998:	40013c00 	.word	0x40013c00

0800699c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
 80069a8:	4613      	mov	r3, r2
 80069aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069ac:	787b      	ldrb	r3, [r7, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069b2:	887a      	ldrh	r2, [r7, #2]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069b8:	e003      	b.n	80069c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069ba:	887b      	ldrh	r3, [r7, #2]
 80069bc:	041a      	lsls	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	619a      	str	r2, [r3, #24]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80069ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d0:	b08f      	sub	sp, #60	; 0x3c
 80069d2:	af0a      	add	r7, sp, #40	; 0x28
 80069d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e054      	b.n	8006a8a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f00c fe7e 	bl	80136fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2203      	movs	r2, #3
 8006a04:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f005 feb4 	bl	800c78c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	687e      	ldr	r6, [r7, #4]
 8006a2c:	466d      	mov	r5, sp
 8006a2e:	f106 0410 	add.w	r4, r6, #16
 8006a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a42:	1d33      	adds	r3, r6, #4
 8006a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a46:	6838      	ldr	r0, [r7, #0]
 8006a48:	f005 fe2e 	bl	800c6a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2101      	movs	r1, #1
 8006a52:	4618      	mov	r0, r3
 8006a54:	f005 feab 	bl	800c7ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	687e      	ldr	r6, [r7, #4]
 8006a60:	466d      	mov	r5, sp
 8006a62:	f106 0410 	add.w	r4, r6, #16
 8006a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a72:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a76:	1d33      	adds	r3, r6, #4
 8006a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a7a:	6838      	ldr	r0, [r7, #0]
 8006a7c:	f006 f834 	bl	800cae8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a92 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006a92:	b590      	push	{r4, r7, lr}
 8006a94:	b089      	sub	sp, #36	; 0x24
 8006a96:	af04      	add	r7, sp, #16
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	70fb      	strb	r3, [r7, #3]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70bb      	strb	r3, [r7, #2]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_HCD_HC_Init+0x28>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e076      	b.n	8006ba8 <HAL_HCD_HC_Init+0x116>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	212c      	movs	r1, #44	; 0x2c
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	333d      	adds	r3, #61	; 0x3d
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	212c      	movs	r1, #44	; 0x2c
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	3338      	adds	r3, #56	; 0x38
 8006ae2:	787a      	ldrb	r2, [r7, #1]
 8006ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	212c      	movs	r1, #44	; 0x2c
 8006aec:	fb01 f303 	mul.w	r3, r1, r3
 8006af0:	4413      	add	r3, r2
 8006af2:	3340      	adds	r3, #64	; 0x40
 8006af4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006af6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	212c      	movs	r1, #44	; 0x2c
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	3339      	adds	r3, #57	; 0x39
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	212c      	movs	r1, #44	; 0x2c
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	333f      	adds	r3, #63	; 0x3f
 8006b18:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006b1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	78ba      	ldrb	r2, [r7, #2]
 8006b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b26:	b2d0      	uxtb	r0, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	212c      	movs	r1, #44	; 0x2c
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	333a      	adds	r3, #58	; 0x3a
 8006b34:	4602      	mov	r2, r0
 8006b36:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006b38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da09      	bge.n	8006b54 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	212c      	movs	r1, #44	; 0x2c
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	333b      	adds	r3, #59	; 0x3b
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e008      	b.n	8006b66 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	212c      	movs	r1, #44	; 0x2c
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	333b      	adds	r3, #59	; 0x3b
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	212c      	movs	r1, #44	; 0x2c
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	333c      	adds	r3, #60	; 0x3c
 8006b74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006b78:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	787c      	ldrb	r4, [r7, #1]
 8006b80:	78ba      	ldrb	r2, [r7, #2]
 8006b82:	78f9      	ldrb	r1, [r7, #3]
 8006b84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4623      	mov	r3, r4
 8006b96:	f006 f92d 	bl	800cdf4 <USB_HC_Init>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}

08006bb0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_HCD_HC_Halt+0x1e>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e00f      	b.n	8006bee <HAL_HCD_HC_Halt+0x3e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f006 fb7d 	bl	800d2de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	70fb      	strb	r3, [r7, #3]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70bb      	strb	r3, [r7, #2]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	212c      	movs	r1, #44	; 0x2c
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	333b      	adds	r3, #59	; 0x3b
 8006c20:	78ba      	ldrb	r2, [r7, #2]
 8006c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	212c      	movs	r1, #44	; 0x2c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	333f      	adds	r3, #63	; 0x3f
 8006c32:	787a      	ldrb	r2, [r7, #1]
 8006c34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006c36:	7c3b      	ldrb	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d112      	bne.n	8006c62 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	212c      	movs	r1, #44	; 0x2c
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	3342      	adds	r3, #66	; 0x42
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	212c      	movs	r1, #44	; 0x2c
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	333d      	adds	r3, #61	; 0x3d
 8006c5c:	7f3a      	ldrb	r2, [r7, #28]
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	e008      	b.n	8006c74 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	212c      	movs	r1, #44	; 0x2c
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3342      	adds	r3, #66	; 0x42
 8006c70:	2202      	movs	r2, #2
 8006c72:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	f200 80c6 	bhi.w	8006e08 <HAL_HCD_HC_SubmitRequest+0x210>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006df5 	.word	0x08006df5
 8006c8c:	08006cf9 	.word	0x08006cf9
 8006c90:	08006d77 	.word	0x08006d77
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006c94:	7c3b      	ldrb	r3, [r7, #16]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f040 80b8 	bne.w	8006e0c <HAL_HCD_HC_SubmitRequest+0x214>
 8006c9c:	78bb      	ldrb	r3, [r7, #2]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f040 80b4 	bne.w	8006e0c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006ca4:	8b3b      	ldrh	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	212c      	movs	r1, #44	; 0x2c
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3355      	adds	r3, #85	; 0x55
 8006cb8:	2201      	movs	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	212c      	movs	r1, #44	; 0x2c
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3355      	adds	r3, #85	; 0x55
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d109      	bne.n	8006ce4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	212c      	movs	r1, #44	; 0x2c
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	3342      	adds	r3, #66	; 0x42
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006ce2:	e093      	b.n	8006e0c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	212c      	movs	r1, #44	; 0x2c
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	4413      	add	r3, r2
 8006cf0:	3342      	adds	r3, #66	; 0x42
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	701a      	strb	r2, [r3, #0]
      break;
 8006cf6:	e089      	b.n	8006e0c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006cf8:	78bb      	ldrb	r3, [r7, #2]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11d      	bne.n	8006d3a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	212c      	movs	r1, #44	; 0x2c
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	3355      	adds	r3, #85	; 0x55
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	212c      	movs	r1, #44	; 0x2c
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3342      	adds	r3, #66	; 0x42
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006d24:	e073      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	3342      	adds	r3, #66	; 0x42
 8006d34:	2202      	movs	r2, #2
 8006d36:	701a      	strb	r2, [r3, #0]
      break;
 8006d38:	e069      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	212c      	movs	r1, #44	; 0x2c
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	3354      	adds	r3, #84	; 0x54
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	212c      	movs	r1, #44	; 0x2c
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	3342      	adds	r3, #66	; 0x42
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
      break;
 8006d60:	e055      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	212c      	movs	r1, #44	; 0x2c
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3342      	adds	r3, #66	; 0x42
 8006d70:	2202      	movs	r2, #2
 8006d72:	701a      	strb	r2, [r3, #0]
      break;
 8006d74:	e04b      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11d      	bne.n	8006db8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	212c      	movs	r1, #44	; 0x2c
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	3355      	adds	r3, #85	; 0x55
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3342      	adds	r3, #66	; 0x42
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006da2:	e034      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3342      	adds	r3, #66	; 0x42
 8006db2:	2202      	movs	r2, #2
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e02a      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	212c      	movs	r1, #44	; 0x2c
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3354      	adds	r3, #84	; 0x54
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d109      	bne.n	8006de0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	212c      	movs	r1, #44	; 0x2c
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3342      	adds	r3, #66	; 0x42
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
      break;
 8006dde:	e016      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	212c      	movs	r1, #44	; 0x2c
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	3342      	adds	r3, #66	; 0x42
 8006dee:	2202      	movs	r2, #2
 8006df0:	701a      	strb	r2, [r3, #0]
      break;
 8006df2:	e00c      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	212c      	movs	r1, #44	; 0x2c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	3342      	adds	r3, #66	; 0x42
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
      break;
 8006e06:	e002      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006e0c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	212c      	movs	r1, #44	; 0x2c
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	3344      	adds	r3, #68	; 0x44
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	8b3a      	ldrh	r2, [r7, #24]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	202c      	movs	r0, #44	; 0x2c
 8006e28:	fb00 f303 	mul.w	r3, r0, r3
 8006e2c:	440b      	add	r3, r1
 8006e2e:	334c      	adds	r3, #76	; 0x4c
 8006e30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	212c      	movs	r1, #44	; 0x2c
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3360      	adds	r3, #96	; 0x60
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	212c      	movs	r1, #44	; 0x2c
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	3350      	adds	r3, #80	; 0x50
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	212c      	movs	r1, #44	; 0x2c
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	3339      	adds	r3, #57	; 0x39
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	212c      	movs	r1, #44	; 0x2c
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	3361      	adds	r3, #97	; 0x61
 8006e76:	2200      	movs	r2, #0
 8006e78:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	222c      	movs	r2, #44	; 0x2c
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	3338      	adds	r3, #56	; 0x38
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	18d1      	adds	r1, r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	f006 f8d0 	bl	800d038 <USB_HC_StartXfer>
 8006e98:	4603      	mov	r3, r0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop

08006ea4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f005 fdd1 	bl	800ca62 <USB_GetMode>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	f040 80f6 	bne.w	80070b4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f005 fdb5 	bl	800ca3c <USB_ReadInterrupts>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80ec 	beq.w	80070b2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f005 fdac 	bl	800ca3c <USB_ReadInterrupts>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eee:	d104      	bne.n	8006efa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ef8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f005 fd9c 	bl	800ca3c <USB_ReadInterrupts>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0e:	d104      	bne.n	8006f1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f005 fd8c 	bl	800ca3c <USB_ReadInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f2e:	d104      	bne.n	8006f3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f005 fd7c 	bl	800ca3c <USB_ReadInterrupts>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d103      	bne.n	8006f56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2202      	movs	r2, #2
 8006f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f005 fd6e 	bl	800ca3c <USB_ReadInterrupts>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6a:	d11c      	bne.n	8006fa6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10f      	bne.n	8006fa6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006f86:	2110      	movs	r1, #16
 8006f88:	6938      	ldr	r0, [r7, #16]
 8006f8a:	f005 fc5d 	bl	800c848 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f005 fc8e 	bl	800c8b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f005 fe64 	bl	800cc68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f00c fc25 	bl	80137f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f005 fd46 	bl	800ca3c <USB_ReadInterrupts>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fba:	d102      	bne.n	8006fc2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f89e 	bl	80080fe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f005 fd38 	bl	800ca3c <USB_ReadInterrupts>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d106      	bne.n	8006fe4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f00c fbee 	bl	80137b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f005 fd27 	bl	800ca3c <USB_ReadInterrupts>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d101      	bne.n	8006ffc <HAL_HCD_IRQHandler+0x158>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <HAL_HCD_IRQHandler+0x15a>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d012      	beq.n	8007028 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0210 	bic.w	r2, r2, #16
 8007010:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ffa1 	bl	8007f5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0210 	orr.w	r2, r2, #16
 8007026:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f005 fd05 	bl	800ca3c <USB_ReadInterrupts>
 8007032:	4603      	mov	r3, r0
 8007034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703c:	d13a      	bne.n	80070b4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f006 f93a 	bl	800d2bc <USB_HC_ReadInterrupt>
 8007048:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e025      	b.n	800709c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	fa22 f303 	lsr.w	r3, r2, r3
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d018      	beq.n	8007096 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800707a:	d106      	bne.n	800708a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8ab 	bl	80071de <HCD_HC_IN_IRQHandler>
 8007088:	e005      	b.n	8007096 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fbf9 	bl	8007888 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	3301      	adds	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3d4      	bcc.n	8007050 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070ae:	615a      	str	r2, [r3, #20]
 80070b0:	e000      	b.n	80070b4 <HAL_HCD_IRQHandler+0x210>
      return;
 80070b2:	bf00      	nop
    }
  }
}
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_HCD_Start+0x16>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e013      	b.n	80070f8 <HAL_HCD_Start+0x3e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2101      	movs	r1, #1
 80070de:	4618      	mov	r0, r3
 80070e0:	f005 fe26 	bl	800cd30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f005 fb3e 	bl	800c76a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_HCD_Stop+0x16>
 8007112:	2302      	movs	r3, #2
 8007114:	e00d      	b.n	8007132 <HAL_HCD_Stop+0x32>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f006 fa14 	bl	800d550 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f005 fdc8 	bl	800ccdc <USB_ResetPort>
 800714c:	4603      	mov	r3, r0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	212c      	movs	r1, #44	; 0x2c
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	3360      	adds	r3, #96	; 0x60
 8007170:	781b      	ldrb	r3, [r3, #0]
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	212c      	movs	r1, #44	; 0x2c
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	4413      	add	r3, r2
 8007196:	3350      	adds	r3, #80	; 0x50
 8007198:	681b      	ldr	r3, [r3, #0]
}
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f005 fe0c 	bl	800cdd0 <USB_GetCurrentFrame>
 80071b8:	4603      	mov	r3, r0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f005 fde7 	bl	800cda2 <USB_GetHostSpeed>
 80071d4:	4603      	mov	r3, r0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d11a      	bne.n	8007244 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721a:	461a      	mov	r2, r3
 800721c:	2304      	movs	r3, #4
 800721e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	212c      	movs	r1, #44	; 0x2c
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	3361      	adds	r3, #97	; 0x61
 800722e:	2206      	movs	r2, #6
 8007230:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f006 f84e 	bl	800d2de <USB_HC_Halt>
 8007242:	e0af      	b.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d11b      	bne.n	8007294 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007268:	461a      	mov	r2, r3
 800726a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800726e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	212c      	movs	r1, #44	; 0x2c
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	3361      	adds	r3, #97	; 0x61
 800727e:	2207      	movs	r2, #7
 8007280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f006 f826 	bl	800d2de <USB_HC_Halt>
 8007292:	e087      	b.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d109      	bne.n	80072be <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	461a      	mov	r2, r3
 80072b8:	2320      	movs	r3, #32
 80072ba:	6093      	str	r3, [r2, #8]
 80072bc:	e072      	b.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d11a      	bne.n	800730a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e0:	461a      	mov	r2, r3
 80072e2:	2308      	movs	r3, #8
 80072e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	212c      	movs	r1, #44	; 0x2c
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	3361      	adds	r3, #97	; 0x61
 80072f4:	2205      	movs	r2, #5
 80072f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f005 ffeb 	bl	800d2de <USB_HC_Halt>
 8007308:	e04c      	b.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800731c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007320:	d11b      	bne.n	800735a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	461a      	mov	r2, r3
 8007330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007334:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	212c      	movs	r1, #44	; 0x2c
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	4413      	add	r3, r2
 8007342:	3361      	adds	r3, #97	; 0x61
 8007344:	2208      	movs	r2, #8
 8007346:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f005 ffc3 	bl	800d2de <USB_HC_Halt>
 8007358:	e024      	b.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d119      	bne.n	80073a4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4413      	add	r3, r2
 8007378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737c:	461a      	mov	r2, r3
 800737e:	2380      	movs	r3, #128	; 0x80
 8007380:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	212c      	movs	r1, #44	; 0x2c
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	4413      	add	r3, r2
 800738e:	3361      	adds	r3, #97	; 0x61
 8007390:	2206      	movs	r2, #6
 8007392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f005 ff9d 	bl	800d2de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ba:	d112      	bne.n	80073e2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f005 ff89 	bl	800d2de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d8:	461a      	mov	r2, r3
 80073da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073de:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80073e0:	e24e      	b.n	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	f040 80df 	bne.w	80075b8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d019      	beq.n	8007436 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	212c      	movs	r1, #44	; 0x2c
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	3348      	adds	r3, #72	; 0x48
 8007410:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	0159      	lsls	r1, r3, #5
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	440b      	add	r3, r1
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	202c      	movs	r0, #44	; 0x2c
 800742c:	fb00 f303 	mul.w	r3, r0, r3
 8007430:	440b      	add	r3, r1
 8007432:	3350      	adds	r3, #80	; 0x50
 8007434:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	212c      	movs	r1, #44	; 0x2c
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	4413      	add	r3, r2
 8007442:	3361      	adds	r3, #97	; 0x61
 8007444:	2201      	movs	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	212c      	movs	r1, #44	; 0x2c
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	335c      	adds	r3, #92	; 0x5c
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	461a      	mov	r2, r3
 8007468:	2301      	movs	r3, #1
 800746a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	212c      	movs	r1, #44	; 0x2c
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	4413      	add	r3, r2
 8007478:	333f      	adds	r3, #63	; 0x3f
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d009      	beq.n	8007494 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	212c      	movs	r1, #44	; 0x2c
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	4413      	add	r3, r2
 800748c:	333f      	adds	r3, #63	; 0x3f
 800748e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007490:	2b02      	cmp	r3, #2
 8007492:	d111      	bne.n	80074b8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f005 ff1d 	bl	800d2de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b0:	461a      	mov	r2, r3
 80074b2:	2310      	movs	r3, #16
 80074b4:	6093      	str	r3, [r2, #8]
 80074b6:	e03a      	b.n	800752e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	212c      	movs	r1, #44	; 0x2c
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	333f      	adds	r3, #63	; 0x3f
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d009      	beq.n	80074e0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	212c      	movs	r1, #44	; 0x2c
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	333f      	adds	r3, #63	; 0x3f
 80074da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d126      	bne.n	800752e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	212c      	movs	r1, #44	; 0x2c
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	4413      	add	r3, r2
 800750c:	3360      	adds	r3, #96	; 0x60
 800750e:	2201      	movs	r2, #1
 8007510:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	b2d9      	uxtb	r1, r3
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	202c      	movs	r0, #44	; 0x2c
 800751c:	fb00 f303 	mul.w	r3, r0, r3
 8007520:	4413      	add	r3, r2
 8007522:	3360      	adds	r3, #96	; 0x60
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f00c f96f 	bl	801380c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d12b      	bne.n	800758e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	212c      	movs	r1, #44	; 0x2c
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	3348      	adds	r3, #72	; 0x48
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	202c      	movs	r0, #44	; 0x2c
 800754c:	fb00 f202 	mul.w	r2, r0, r2
 8007550:	440a      	add	r2, r1
 8007552:	3240      	adds	r2, #64	; 0x40
 8007554:	8812      	ldrh	r2, [r2, #0]
 8007556:	fbb3 f3f2 	udiv	r3, r3, r2
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 818e 	beq.w	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	212c      	movs	r1, #44	; 0x2c
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	3354      	adds	r3, #84	; 0x54
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f083 0301 	eor.w	r3, r3, #1
 8007578:	b2d8      	uxtb	r0, r3
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	212c      	movs	r1, #44	; 0x2c
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	3354      	adds	r3, #84	; 0x54
 8007588:	4602      	mov	r2, r0
 800758a:	701a      	strb	r2, [r3, #0]
}
 800758c:	e178      	b.n	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	212c      	movs	r1, #44	; 0x2c
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	3354      	adds	r3, #84	; 0x54
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	f083 0301 	eor.w	r3, r3, #1
 80075a2:	b2d8      	uxtb	r0, r3
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	212c      	movs	r1, #44	; 0x2c
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	3354      	adds	r3, #84	; 0x54
 80075b2:	4602      	mov	r2, r0
 80075b4:	701a      	strb	r2, [r3, #0]
}
 80075b6:	e163      	b.n	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	f040 80f6 	bne.w	80077bc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	212c      	movs	r1, #44	; 0x2c
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	4413      	add	r3, r2
 80075dc:	3361      	adds	r3, #97	; 0x61
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d109      	bne.n	80075f8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	3360      	adds	r3, #96	; 0x60
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e0c9      	b.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	212c      	movs	r1, #44	; 0x2c
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	4413      	add	r3, r2
 8007604:	3361      	adds	r3, #97	; 0x61
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b05      	cmp	r3, #5
 800760a:	d109      	bne.n	8007620 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	212c      	movs	r1, #44	; 0x2c
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	3360      	adds	r3, #96	; 0x60
 800761a:	2205      	movs	r2, #5
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e0b5      	b.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	212c      	movs	r1, #44	; 0x2c
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	3361      	adds	r3, #97	; 0x61
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b06      	cmp	r3, #6
 8007632:	d009      	beq.n	8007648 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	212c      	movs	r1, #44	; 0x2c
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	4413      	add	r3, r2
 8007640:	3361      	adds	r3, #97	; 0x61
 8007642:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007644:	2b08      	cmp	r3, #8
 8007646:	d150      	bne.n	80076ea <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	212c      	movs	r1, #44	; 0x2c
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	335c      	adds	r3, #92	; 0x5c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	202c      	movs	r0, #44	; 0x2c
 8007660:	fb00 f303 	mul.w	r3, r0, r3
 8007664:	440b      	add	r3, r1
 8007666:	335c      	adds	r3, #92	; 0x5c
 8007668:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	212c      	movs	r1, #44	; 0x2c
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	335c      	adds	r3, #92	; 0x5c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d912      	bls.n	80076a4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	212c      	movs	r1, #44	; 0x2c
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	335c      	adds	r3, #92	; 0x5c
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	212c      	movs	r1, #44	; 0x2c
 8007696:	fb01 f303 	mul.w	r3, r1, r3
 800769a:	4413      	add	r3, r2
 800769c:	3360      	adds	r3, #96	; 0x60
 800769e:	2204      	movs	r2, #4
 80076a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80076a2:	e073      	b.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	212c      	movs	r1, #44	; 0x2c
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	3360      	adds	r3, #96	; 0x60
 80076b2:	2202      	movs	r2, #2
 80076b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80076e8:	e050      	b.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	212c      	movs	r1, #44	; 0x2c
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	3361      	adds	r3, #97	; 0x61
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d122      	bne.n	8007744 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	212c      	movs	r1, #44	; 0x2c
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	4413      	add	r3, r2
 800770a:	3360      	adds	r3, #96	; 0x60
 800770c:	2202      	movs	r2, #2
 800770e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007726:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800772e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e023      	b.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	212c      	movs	r1, #44	; 0x2c
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	3361      	adds	r3, #97	; 0x61
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b07      	cmp	r3, #7
 8007756:	d119      	bne.n	800778c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	212c      	movs	r1, #44	; 0x2c
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	335c      	adds	r3, #92	; 0x5c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	202c      	movs	r0, #44	; 0x2c
 8007770:	fb00 f303 	mul.w	r3, r0, r3
 8007774:	440b      	add	r3, r1
 8007776:	335c      	adds	r3, #92	; 0x5c
 8007778:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	212c      	movs	r1, #44	; 0x2c
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	3360      	adds	r3, #96	; 0x60
 8007788:	2204      	movs	r2, #4
 800778a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007798:	461a      	mov	r2, r3
 800779a:	2302      	movs	r3, #2
 800779c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	b2d9      	uxtb	r1, r3
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	202c      	movs	r0, #44	; 0x2c
 80077a8:	fb00 f303 	mul.w	r3, r0, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	3360      	adds	r3, #96	; 0x60
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f00c f829 	bl	801380c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80077ba:	e061      	b.n	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d156      	bne.n	8007880 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	212c      	movs	r1, #44	; 0x2c
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	333f      	adds	r3, #63	; 0x3f
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d111      	bne.n	800780a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	212c      	movs	r1, #44	; 0x2c
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	4413      	add	r3, r2
 80077f2:	335c      	adds	r3, #92	; 0x5c
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f005 fd6b 	bl	800d2de <USB_HC_Halt>
 8007808:	e031      	b.n	800786e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	212c      	movs	r1, #44	; 0x2c
 8007810:	fb01 f303 	mul.w	r3, r1, r3
 8007814:	4413      	add	r3, r2
 8007816:	333f      	adds	r3, #63	; 0x3f
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	212c      	movs	r1, #44	; 0x2c
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	333f      	adds	r3, #63	; 0x3f
 800782c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800782e:	2b02      	cmp	r3, #2
 8007830:	d11d      	bne.n	800786e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	212c      	movs	r1, #44	; 0x2c
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	335c      	adds	r3, #92	; 0x5c
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	212c      	movs	r1, #44	; 0x2c
 8007852:	fb01 f303 	mul.w	r3, r1, r3
 8007856:	4413      	add	r3, r2
 8007858:	3361      	adds	r3, #97	; 0x61
 800785a:	2203      	movs	r2, #3
 800785c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f005 fd38 	bl	800d2de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787a:	461a      	mov	r2, r3
 800787c:	2310      	movs	r3, #16
 800787e:	6093      	str	r3, [r2, #8]
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	d11a      	bne.n	80078ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	461a      	mov	r2, r3
 80078c6:	2304      	movs	r3, #4
 80078c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	212c      	movs	r1, #44	; 0x2c
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	3361      	adds	r3, #97	; 0x61
 80078d8:	2206      	movs	r2, #6
 80078da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f005 fcf9 	bl	800d2de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80078ec:	e331      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b20      	cmp	r3, #32
 8007902:	d12e      	bne.n	8007962 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	4413      	add	r3, r2
 800790c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007910:	461a      	mov	r2, r3
 8007912:	2320      	movs	r3, #32
 8007914:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	212c      	movs	r1, #44	; 0x2c
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	4413      	add	r3, r2
 8007922:	333d      	adds	r3, #61	; 0x3d
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b01      	cmp	r3, #1
 8007928:	f040 8313 	bne.w	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	212c      	movs	r1, #44	; 0x2c
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	333d      	adds	r3, #61	; 0x3d
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	212c      	movs	r1, #44	; 0x2c
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	3360      	adds	r3, #96	; 0x60
 800794c:	2202      	movs	r2, #2
 800794e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f005 fcbf 	bl	800d2de <USB_HC_Halt>
}
 8007960:	e2f7      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	4413      	add	r3, r2
 800796a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d112      	bne.n	80079a0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	4413      	add	r3, r2
 8007982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007986:	461a      	mov	r2, r3
 8007988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f005 fca0 	bl	800d2de <USB_HC_Halt>
}
 800799e:	e2d8      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d140      	bne.n	8007a38 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	212c      	movs	r1, #44	; 0x2c
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	335c      	adds	r3, #92	; 0x5c
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d111      	bne.n	8007a02 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	212c      	movs	r1, #44	; 0x2c
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	333d      	adds	r3, #61	; 0x3d
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fc:	461a      	mov	r2, r3
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0e:	461a      	mov	r2, r3
 8007a10:	2301      	movs	r3, #1
 8007a12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3361      	adds	r3, #97	; 0x61
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f005 fc54 	bl	800d2de <USB_HC_Halt>
}
 8007a36:	e28c      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d12c      	bne.n	8007aa8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	3361      	adds	r3, #97	; 0x61
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	212c      	movs	r1, #44	; 0x2c
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	333d      	adds	r3, #61	; 0x3d
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	212c      	movs	r1, #44	; 0x2c
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	335c      	adds	r3, #92	; 0x5c
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f005 fc25 	bl	800d2de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	6093      	str	r3, [r2, #8]
}
 8007aa6:	e254      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d11a      	bne.n	8007af4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aca:	461a      	mov	r2, r3
 8007acc:	2308      	movs	r3, #8
 8007ace:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	212c      	movs	r1, #44	; 0x2c
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	3361      	adds	r3, #97	; 0x61
 8007ade:	2205      	movs	r2, #5
 8007ae0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f005 fbf6 	bl	800d2de <USB_HC_Halt>
}
 8007af2:	e22e      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d140      	bne.n	8007b8c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	212c      	movs	r1, #44	; 0x2c
 8007b10:	fb01 f303 	mul.w	r3, r1, r3
 8007b14:	4413      	add	r3, r2
 8007b16:	335c      	adds	r3, #92	; 0x5c
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	212c      	movs	r1, #44	; 0x2c
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	4413      	add	r3, r2
 8007b28:	3361      	adds	r3, #97	; 0x61
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	212c      	movs	r1, #44	; 0x2c
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	333d      	adds	r3, #61	; 0x3d
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d112      	bne.n	8007b68 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	212c      	movs	r1, #44	; 0x2c
 8007b48:	fb01 f303 	mul.w	r3, r1, r3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	333c      	adds	r3, #60	; 0x3c
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d108      	bne.n	8007b68 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	212c      	movs	r1, #44	; 0x2c
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	333d      	adds	r3, #61	; 0x3d
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f005 fbb3 	bl	800d2de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b84:	461a      	mov	r2, r3
 8007b86:	2310      	movs	r3, #16
 8007b88:	6093      	str	r3, [r2, #8]
}
 8007b8a:	e1e2      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d164      	bne.n	8007c6c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d111      	bne.n	8007bce <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	212c      	movs	r1, #44	; 0x2c
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3361      	adds	r3, #97	; 0x61
 8007bb8:	2206      	movs	r2, #6
 8007bba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f005 fb89 	bl	800d2de <USB_HC_Halt>
 8007bcc:	e044      	b.n	8007c58 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	212c      	movs	r1, #44	; 0x2c
 8007bd4:	fb01 f303 	mul.w	r3, r1, r3
 8007bd8:	4413      	add	r3, r2
 8007bda:	335c      	adds	r3, #92	; 0x5c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	202c      	movs	r0, #44	; 0x2c
 8007be6:	fb00 f303 	mul.w	r3, r0, r3
 8007bea:	440b      	add	r3, r1
 8007bec:	335c      	adds	r3, #92	; 0x5c
 8007bee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	212c      	movs	r1, #44	; 0x2c
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	335c      	adds	r3, #92	; 0x5c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d920      	bls.n	8007c46 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	212c      	movs	r1, #44	; 0x2c
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	4413      	add	r3, r2
 8007c10:	335c      	adds	r3, #92	; 0x5c
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	212c      	movs	r1, #44	; 0x2c
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	4413      	add	r3, r2
 8007c22:	3360      	adds	r3, #96	; 0x60
 8007c24:	2204      	movs	r2, #4
 8007c26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	b2d9      	uxtb	r1, r3
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	202c      	movs	r0, #44	; 0x2c
 8007c32:	fb00 f303 	mul.w	r3, r0, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	3360      	adds	r3, #96	; 0x60
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f00b fde4 	bl	801380c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c44:	e008      	b.n	8007c58 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	212c      	movs	r1, #44	; 0x2c
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	4413      	add	r3, r2
 8007c52:	3360      	adds	r3, #96	; 0x60
 8007c54:	2202      	movs	r2, #2
 8007c56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c64:	461a      	mov	r2, r3
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	6093      	str	r3, [r2, #8]
}
 8007c6a:	e172      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c82:	d11b      	bne.n	8007cbc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	212c      	movs	r1, #44	; 0x2c
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	3361      	adds	r3, #97	; 0x61
 8007c92:	2208      	movs	r2, #8
 8007c94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	b2d2      	uxtb	r2, r2
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f005 fb1c 	bl	800d2de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb8:	6093      	str	r3, [r2, #8]
}
 8007cba:	e14a      	b.n	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f040 813f 	bne.w	8007f52 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	212c      	movs	r1, #44	; 0x2c
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	3361      	adds	r3, #97	; 0x61
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d17d      	bne.n	8007de4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	212c      	movs	r1, #44	; 0x2c
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3360      	adds	r3, #96	; 0x60
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	212c      	movs	r1, #44	; 0x2c
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	4413      	add	r3, r2
 8007d06:	333f      	adds	r3, #63	; 0x3f
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d00a      	beq.n	8007d24 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	212c      	movs	r1, #44	; 0x2c
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	333f      	adds	r3, #63	; 0x3f
 8007d1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f040 8100 	bne.w	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d113      	bne.n	8007d54 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	212c      	movs	r1, #44	; 0x2c
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	3355      	adds	r3, #85	; 0x55
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f083 0301 	eor.w	r3, r3, #1
 8007d40:	b2d8      	uxtb	r0, r3
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	212c      	movs	r1, #44	; 0x2c
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3355      	adds	r3, #85	; 0x55
 8007d50:	4602      	mov	r2, r0
 8007d52:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	f040 80e3 	bne.w	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	212c      	movs	r1, #44	; 0x2c
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	4413      	add	r3, r2
 8007d6a:	334c      	adds	r3, #76	; 0x4c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80d8 	beq.w	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	212c      	movs	r1, #44	; 0x2c
 8007d7a:	fb01 f303 	mul.w	r3, r1, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	334c      	adds	r3, #76	; 0x4c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	202c      	movs	r0, #44	; 0x2c
 8007d8a:	fb00 f202 	mul.w	r2, r0, r2
 8007d8e:	440a      	add	r2, r1
 8007d90:	3240      	adds	r2, #64	; 0x40
 8007d92:	8812      	ldrh	r2, [r2, #0]
 8007d94:	4413      	add	r3, r2
 8007d96:	3b01      	subs	r3, #1
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	202c      	movs	r0, #44	; 0x2c
 8007d9e:	fb00 f202 	mul.w	r2, r0, r2
 8007da2:	440a      	add	r2, r1
 8007da4:	3240      	adds	r2, #64	; 0x40
 8007da6:	8812      	ldrh	r2, [r2, #0]
 8007da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80b5 	beq.w	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	212c      	movs	r1, #44	; 0x2c
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	3355      	adds	r3, #85	; 0x55
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f083 0301 	eor.w	r3, r3, #1
 8007dce:	b2d8      	uxtb	r0, r3
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	212c      	movs	r1, #44	; 0x2c
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	3355      	adds	r3, #85	; 0x55
 8007dde:	4602      	mov	r2, r0
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e09f      	b.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	212c      	movs	r1, #44	; 0x2c
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	4413      	add	r3, r2
 8007df0:	3361      	adds	r3, #97	; 0x61
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d109      	bne.n	8007e0c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	212c      	movs	r1, #44	; 0x2c
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	4413      	add	r3, r2
 8007e04:	3360      	adds	r3, #96	; 0x60
 8007e06:	2202      	movs	r2, #2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e08b      	b.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	212c      	movs	r1, #44	; 0x2c
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	3361      	adds	r3, #97	; 0x61
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d109      	bne.n	8007e34 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3360      	adds	r3, #96	; 0x60
 8007e2e:	2202      	movs	r2, #2
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e077      	b.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	212c      	movs	r1, #44	; 0x2c
 8007e3a:	fb01 f303 	mul.w	r3, r1, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	3361      	adds	r3, #97	; 0x61
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d109      	bne.n	8007e5c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	212c      	movs	r1, #44	; 0x2c
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	4413      	add	r3, r2
 8007e54:	3360      	adds	r3, #96	; 0x60
 8007e56:	2205      	movs	r2, #5
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e063      	b.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	212c      	movs	r1, #44	; 0x2c
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	3361      	adds	r3, #97	; 0x61
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b06      	cmp	r3, #6
 8007e6e:	d009      	beq.n	8007e84 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	212c      	movs	r1, #44	; 0x2c
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3361      	adds	r3, #97	; 0x61
 8007e7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d14f      	bne.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	212c      	movs	r1, #44	; 0x2c
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	4413      	add	r3, r2
 8007e90:	335c      	adds	r3, #92	; 0x5c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	202c      	movs	r0, #44	; 0x2c
 8007e9c:	fb00 f303 	mul.w	r3, r0, r3
 8007ea0:	440b      	add	r3, r1
 8007ea2:	335c      	adds	r3, #92	; 0x5c
 8007ea4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	212c      	movs	r1, #44	; 0x2c
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	335c      	adds	r3, #92	; 0x5c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d912      	bls.n	8007ee0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	212c      	movs	r1, #44	; 0x2c
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	335c      	adds	r3, #92	; 0x5c
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	212c      	movs	r1, #44	; 0x2c
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3360      	adds	r3, #96	; 0x60
 8007eda:	2204      	movs	r2, #4
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e021      	b.n	8007f24 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	212c      	movs	r1, #44	; 0x2c
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	3360      	adds	r3, #96	; 0x60
 8007eee:	2202      	movs	r2, #2
 8007ef0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f08:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f10:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	461a      	mov	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f30:	461a      	mov	r2, r3
 8007f32:	2302      	movs	r3, #2
 8007f34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	b2d9      	uxtb	r1, r3
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	202c      	movs	r0, #44	; 0x2c
 8007f40:	fb00 f303 	mul.w	r3, r0, r3
 8007f44:	4413      	add	r3, r2
 8007f46:	3360      	adds	r3, #96	; 0x60
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f00b fc5d 	bl	801380c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007f52:	bf00      	nop
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b08a      	sub	sp, #40	; 0x28
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	0c5b      	lsrs	r3, r3, #17
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d004      	beq.n	8007fa0 <HCD_RXQLVL_IRQHandler+0x46>
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b05      	cmp	r3, #5
 8007f9a:	f000 80a9 	beq.w	80080f0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007f9e:	e0aa      	b.n	80080f6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80a6 	beq.w	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	212c      	movs	r1, #44	; 0x2c
 8007fae:	fb01 f303 	mul.w	r3, r1, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3344      	adds	r3, #68	; 0x44
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 809b 	beq.w	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	212c      	movs	r1, #44	; 0x2c
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	3350      	adds	r3, #80	; 0x50
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	202c      	movs	r0, #44	; 0x2c
 8007fd8:	fb00 f303 	mul.w	r3, r0, r3
 8007fdc:	440b      	add	r3, r1
 8007fde:	334c      	adds	r3, #76	; 0x4c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d87a      	bhi.n	80080dc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	212c      	movs	r1, #44	; 0x2c
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3344      	adds	r3, #68	; 0x44
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	b292      	uxth	r2, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	f004 fcc4 	bl	800c98c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	212c      	movs	r1, #44	; 0x2c
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	3344      	adds	r3, #68	; 0x44
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	441a      	add	r2, r3
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	202c      	movs	r0, #44	; 0x2c
 800801e:	fb00 f303 	mul.w	r3, r0, r3
 8008022:	440b      	add	r3, r1
 8008024:	3344      	adds	r3, #68	; 0x44
 8008026:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	212c      	movs	r1, #44	; 0x2c
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	4413      	add	r3, r2
 8008034:	3350      	adds	r3, #80	; 0x50
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	441a      	add	r2, r3
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	202c      	movs	r0, #44	; 0x2c
 8008042:	fb00 f303 	mul.w	r3, r0, r3
 8008046:	440b      	add	r3, r1
 8008048:	3350      	adds	r3, #80	; 0x50
 800804a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	4413      	add	r3, r2
 8008054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	0cdb      	lsrs	r3, r3, #19
 800805c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008060:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	212c      	movs	r1, #44	; 0x2c
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	4413      	add	r3, r2
 800806e:	3340      	adds	r3, #64	; 0x40
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4293      	cmp	r3, r2
 8008078:	d13c      	bne.n	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d039      	beq.n	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008096:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ac:	461a      	mov	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	212c      	movs	r1, #44	; 0x2c
 80080b8:	fb01 f303 	mul.w	r3, r1, r3
 80080bc:	4413      	add	r3, r2
 80080be:	3354      	adds	r3, #84	; 0x54
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f083 0301 	eor.w	r3, r3, #1
 80080c6:	b2d8      	uxtb	r0, r3
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	212c      	movs	r1, #44	; 0x2c
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	3354      	adds	r3, #84	; 0x54
 80080d6:	4602      	mov	r2, r0
 80080d8:	701a      	strb	r2, [r3, #0]
      break;
 80080da:	e00b      	b.n	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	212c      	movs	r1, #44	; 0x2c
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	3360      	adds	r3, #96	; 0x60
 80080ea:	2204      	movs	r2, #4
 80080ec:	701a      	strb	r2, [r3, #0]
      break;
 80080ee:	e001      	b.n	80080f4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80080f4:	bf00      	nop
  }
}
 80080f6:	bf00      	nop
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b086      	sub	sp, #24
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800812a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d10b      	bne.n	800814e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b01      	cmp	r3, #1
 800813e:	d102      	bne.n	8008146 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f00b fb47 	bl	80137d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f043 0302 	orr.w	r3, r3, #2
 800814c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d132      	bne.n	80081be <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f043 0308 	orr.w	r3, r3, #8
 800815e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b04      	cmp	r3, #4
 8008168:	d126      	bne.n	80081b8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d113      	bne.n	800819a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800817c:	d106      	bne.n	800818c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2102      	movs	r1, #2
 8008184:	4618      	mov	r0, r3
 8008186:	f004 fd6f 	bl	800cc68 <USB_InitFSLSPClkSel>
 800818a:	e011      	b.n	80081b0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f004 fd68 	bl	800cc68 <USB_InitFSLSPClkSel>
 8008198:	e00a      	b.n	80081b0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d106      	bne.n	80081b0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081a8:	461a      	mov	r2, r3
 80081aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80081ae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f00b fb3d 	bl	8013830 <HAL_HCD_PortEnabled_Callback>
 80081b6:	e002      	b.n	80081be <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f00b fb47 	bl	801384c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d103      	bne.n	80081d0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f043 0320 	orr.w	r3, r3, #32
 80081ce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081d6:	461a      	mov	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6013      	str	r3, [r2, #0]
}
 80081dc:	bf00      	nop
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e12b      	b.n	800844e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fc f914 	bl	8004438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2224      	movs	r2, #36	; 0x24
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008248:	f002 f846 	bl	800a2d8 <HAL_RCC_GetPCLK1Freq>
 800824c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	4a81      	ldr	r2, [pc, #516]	; (8008458 <HAL_I2C_Init+0x274>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d807      	bhi.n	8008268 <HAL_I2C_Init+0x84>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a80      	ldr	r2, [pc, #512]	; (800845c <HAL_I2C_Init+0x278>)
 800825c:	4293      	cmp	r3, r2
 800825e:	bf94      	ite	ls
 8008260:	2301      	movls	r3, #1
 8008262:	2300      	movhi	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e006      	b.n	8008276 <HAL_I2C_Init+0x92>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4a7d      	ldr	r2, [pc, #500]	; (8008460 <HAL_I2C_Init+0x27c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	bf94      	ite	ls
 8008270:	2301      	movls	r3, #1
 8008272:	2300      	movhi	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e0e7      	b.n	800844e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a78      	ldr	r2, [pc, #480]	; (8008464 <HAL_I2C_Init+0x280>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	0c9b      	lsrs	r3, r3, #18
 8008288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4a6a      	ldr	r2, [pc, #424]	; (8008458 <HAL_I2C_Init+0x274>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d802      	bhi.n	80082b8 <HAL_I2C_Init+0xd4>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	3301      	adds	r3, #1
 80082b6:	e009      	b.n	80082cc <HAL_I2C_Init+0xe8>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	4a69      	ldr	r2, [pc, #420]	; (8008468 <HAL_I2C_Init+0x284>)
 80082c4:	fba2 2303 	umull	r2, r3, r2, r3
 80082c8:	099b      	lsrs	r3, r3, #6
 80082ca:	3301      	adds	r3, #1
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80082de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	495c      	ldr	r1, [pc, #368]	; (8008458 <HAL_I2C_Init+0x274>)
 80082e8:	428b      	cmp	r3, r1
 80082ea:	d819      	bhi.n	8008320 <HAL_I2C_Init+0x13c>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	1e59      	subs	r1, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80082fa:	1c59      	adds	r1, r3, #1
 80082fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008300:	400b      	ands	r3, r1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <HAL_I2C_Init+0x138>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1e59      	subs	r1, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	fbb1 f3f3 	udiv	r3, r1, r3
 8008314:	3301      	adds	r3, #1
 8008316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831a:	e051      	b.n	80083c0 <HAL_I2C_Init+0x1dc>
 800831c:	2304      	movs	r3, #4
 800831e:	e04f      	b.n	80083c0 <HAL_I2C_Init+0x1dc>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d111      	bne.n	800834c <HAL_I2C_Init+0x168>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1e58      	subs	r0, r3, #1
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6859      	ldr	r1, [r3, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	440b      	add	r3, r1
 8008336:	fbb0 f3f3 	udiv	r3, r0, r3
 800833a:	3301      	adds	r3, #1
 800833c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008340:	2b00      	cmp	r3, #0
 8008342:	bf0c      	ite	eq
 8008344:	2301      	moveq	r3, #1
 8008346:	2300      	movne	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	e012      	b.n	8008372 <HAL_I2C_Init+0x18e>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1e58      	subs	r0, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6859      	ldr	r1, [r3, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	0099      	lsls	r1, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008362:	3301      	adds	r3, #1
 8008364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008368:	2b00      	cmp	r3, #0
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_I2C_Init+0x196>
 8008376:	2301      	movs	r3, #1
 8008378:	e022      	b.n	80083c0 <HAL_I2C_Init+0x1dc>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10e      	bne.n	80083a0 <HAL_I2C_Init+0x1bc>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1e58      	subs	r0, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	440b      	add	r3, r1
 8008390:	fbb0 f3f3 	udiv	r3, r0, r3
 8008394:	3301      	adds	r3, #1
 8008396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800839a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839e:	e00f      	b.n	80083c0 <HAL_I2C_Init+0x1dc>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	1e58      	subs	r0, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6859      	ldr	r1, [r3, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	0099      	lsls	r1, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80083b6:	3301      	adds	r3, #1
 80083b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	6809      	ldr	r1, [r1, #0]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69da      	ldr	r2, [r3, #28]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80083ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6911      	ldr	r1, [r2, #16]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68d2      	ldr	r2, [r2, #12]
 80083fa:	4311      	orrs	r1, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	430b      	orrs	r3, r1
 8008402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695a      	ldr	r2, [r3, #20]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	000186a0 	.word	0x000186a0
 800845c:	001e847f 	.word	0x001e847f
 8008460:	003d08ff 	.word	0x003d08ff
 8008464:	431bde83 	.word	0x431bde83
 8008468:	10624dd3 	.word	0x10624dd3

0800846c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e021      	b.n	80084c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2224      	movs	r2, #36	; 0x24
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0201 	bic.w	r2, r2, #1
 8008494:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fc f838 	bl	800450c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	4603      	mov	r3, r0
 80084dc:	817b      	strh	r3, [r7, #10]
 80084de:	460b      	mov	r3, r1
 80084e0:	813b      	strh	r3, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084e6:	f7fc feb9 	bl	800525c <HAL_GetTick>
 80084ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	f040 80d9 	bne.w	80086ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2319      	movs	r3, #25
 8008500:	2201      	movs	r2, #1
 8008502:	496d      	ldr	r1, [pc, #436]	; (80086b8 <HAL_I2C_Mem_Write+0x1ec>)
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fc8d 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008510:	2302      	movs	r3, #2
 8008512:	e0cc      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_I2C_Mem_Write+0x56>
 800851e:	2302      	movs	r3, #2
 8008520:	e0c5      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b01      	cmp	r3, #1
 8008536:	d007      	beq.n	8008548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2221      	movs	r2, #33	; 0x21
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2240      	movs	r2, #64	; 0x40
 8008564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a3a      	ldr	r2, [r7, #32]
 8008572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4a4d      	ldr	r2, [pc, #308]	; (80086bc <HAL_I2C_Mem_Write+0x1f0>)
 8008588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800858a:	88f8      	ldrh	r0, [r7, #6]
 800858c:	893a      	ldrh	r2, [r7, #8]
 800858e:	8979      	ldrh	r1, [r7, #10]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fac4 	bl	8008b28 <I2C_RequestMemoryWrite>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d052      	beq.n	800864c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e081      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fd0e 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d107      	bne.n	80085d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e06b      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b04      	cmp	r3, #4
 8008612:	d11b      	bne.n	800864c <HAL_I2C_Mem_Write+0x180>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008618:	2b00      	cmp	r3, #0
 800861a:	d017      	beq.n	800864c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1aa      	bne.n	80085aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fcfa 	bl	8009052 <I2C_WaitOnBTFFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	2b04      	cmp	r3, #4
 800866a:	d107      	bne.n	800867c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800867a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e016      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	e000      	b.n	80086ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80086ac:	2302      	movs	r3, #2
  }
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	00100002 	.word	0x00100002
 80086bc:	ffff0000 	.word	0xffff0000

080086c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08c      	sub	sp, #48	; 0x30
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	4608      	mov	r0, r1
 80086ca:	4611      	mov	r1, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	817b      	strh	r3, [r7, #10]
 80086d2:	460b      	mov	r3, r1
 80086d4:	813b      	strh	r3, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086da:	f7fc fdbf 	bl	800525c <HAL_GetTick>
 80086de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	f040 8208 	bne.w	8008afe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	2319      	movs	r3, #25
 80086f4:	2201      	movs	r2, #1
 80086f6:	497b      	ldr	r1, [pc, #492]	; (80088e4 <HAL_I2C_Mem_Read+0x224>)
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fb93 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
 8008706:	e1fb      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800870e:	2b01      	cmp	r3, #1
 8008710:	d101      	bne.n	8008716 <HAL_I2C_Mem_Read+0x56>
 8008712:	2302      	movs	r3, #2
 8008714:	e1f4      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b01      	cmp	r3, #1
 800872a:	d007      	beq.n	800873c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800874a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2222      	movs	r2, #34	; 0x22
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2240      	movs	r2, #64	; 0x40
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800876c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a5b      	ldr	r2, [pc, #364]	; (80088e8 <HAL_I2C_Mem_Read+0x228>)
 800877c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800877e:	88f8      	ldrh	r0, [r7, #6]
 8008780:	893a      	ldrh	r2, [r7, #8]
 8008782:	8979      	ldrh	r1, [r7, #10]
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	4603      	mov	r3, r0
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 fa60 	bl	8008c54 <I2C_RequestMemoryRead>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e1b0      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d113      	bne.n	80087ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a6:	2300      	movs	r3, #0
 80087a8:	623b      	str	r3, [r7, #32]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	623b      	str	r3, [r7, #32]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	623b      	str	r3, [r7, #32]
 80087ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e184      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d11b      	bne.n	800880e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	61fb      	str	r3, [r7, #28]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e164      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008812:	2b02      	cmp	r3, #2
 8008814:	d11b      	bne.n	800884e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	61bb      	str	r3, [r7, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	e144      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008864:	e138      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886a:	2b03      	cmp	r3, #3
 800886c:	f200 80f1 	bhi.w	8008a52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008874:	2b01      	cmp	r3, #1
 8008876:	d123      	bne.n	80088c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fc29 	bl	80090d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e139      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088be:	e10b      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d14e      	bne.n	8008966 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	2200      	movs	r2, #0
 80088d0:	4906      	ldr	r1, [pc, #24]	; (80088ec <HAL_I2C_Mem_Read+0x22c>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 faa6 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e10e      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
 80088e2:	bf00      	nop
 80088e4:	00100002 	.word	0x00100002
 80088e8:	ffff0000 	.word	0xffff0000
 80088ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894e:	3b01      	subs	r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008964:	e0b8      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2200      	movs	r2, #0
 800896e:	4966      	ldr	r1, [pc, #408]	; (8008b08 <HAL_I2C_Mem_Read+0x448>)
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fa57 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0bf      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800898e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	2200      	movs	r2, #0
 80089ca:	494f      	ldr	r1, [pc, #316]	; (8008b08 <HAL_I2C_Mem_Read+0x448>)
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fa29 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e091      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a50:	e042      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fb3c 	bl	80090d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e04c      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d118      	bne.n	8008ad8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	691a      	ldr	r2, [r3, #16]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f47f aec2 	bne.w	8008866 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e000      	b.n	8008b00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008afe:	2302      	movs	r3, #2
  }
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3728      	adds	r7, #40	; 0x28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	00010004 	.word	0x00010004

08008b0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1a:	b2db      	uxtb	r3, r3
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	4608      	mov	r0, r1
 8008b32:	4611      	mov	r1, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	817b      	strh	r3, [r7, #10]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	813b      	strh	r3, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 f960 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00d      	beq.n	8008b86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b78:	d103      	bne.n	8008b82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e05f      	b.n	8008c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b86:	897b      	ldrh	r3, [r7, #10]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	6a3a      	ldr	r2, [r7, #32]
 8008b9a:	492d      	ldr	r1, [pc, #180]	; (8008c50 <I2C_RequestMemoryWrite+0x128>)
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f998 	bl	8008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e04c      	b.n	8008c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	6a39      	ldr	r1, [r7, #32]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fa02 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d107      	bne.n	8008bea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e02b      	b.n	8008c46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d105      	bne.n	8008c00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	611a      	str	r2, [r3, #16]
 8008bfe:	e021      	b.n	8008c44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c00:	893b      	ldrh	r3, [r7, #8]
 8008c02:	0a1b      	lsrs	r3, r3, #8
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	6a39      	ldr	r1, [r7, #32]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f9dc 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d107      	bne.n	8008c36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e005      	b.n	8008c46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c3a:	893b      	ldrh	r3, [r7, #8]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	00010002 	.word	0x00010002

08008c54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	817b      	strh	r3, [r7, #10]
 8008c66:	460b      	mov	r3, r1
 8008c68:	813b      	strh	r3, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 f8c2 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00d      	beq.n	8008cc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb4:	d103      	bne.n	8008cbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e0aa      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cc2:	897b      	ldrh	r3, [r7, #10]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008cd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	6a3a      	ldr	r2, [r7, #32]
 8008cd6:	4952      	ldr	r1, [pc, #328]	; (8008e20 <I2C_RequestMemoryRead+0x1cc>)
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f8fa 	bl	8008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e097      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d00:	6a39      	ldr	r1, [r7, #32]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f964 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00d      	beq.n	8008d2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d107      	bne.n	8008d26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e076      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d105      	bne.n	8008d3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d30:	893b      	ldrh	r3, [r7, #8]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	611a      	str	r2, [r3, #16]
 8008d3a:	e021      	b.n	8008d80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d3c:	893b      	ldrh	r3, [r7, #8]
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4c:	6a39      	ldr	r1, [r7, #32]
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 f93e 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d107      	bne.n	8008d72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e050      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d76:	893b      	ldrh	r3, [r7, #8]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	6a39      	ldr	r1, [r7, #32]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f923 	bl	8008fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d107      	bne.n	8008da8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e035      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f82b 	bl	8008e24 <I2C_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de2:	d103      	bne.n	8008dec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e013      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008df0:	897b      	ldrh	r3, [r7, #10]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f043 0301 	orr.w	r3, r3, #1
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	6a3a      	ldr	r2, [r7, #32]
 8008e04:	4906      	ldr	r1, [pc, #24]	; (8008e20 <I2C_RequestMemoryRead+0x1cc>)
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f863 	bl	8008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	00010002 	.word	0x00010002

08008e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	4613      	mov	r3, r2
 8008e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e34:	e025      	b.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3c:	d021      	beq.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3e:	f7fc fa0d 	bl	800525c <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d302      	bcc.n	8008e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d116      	bne.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	f043 0220 	orr.w	r2, r3, #32
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e023      	b.n	8008eca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d10d      	bne.n	8008ea8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	43da      	mvns	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4013      	ands	r3, r2
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bf0c      	ite	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	2300      	movne	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	e00c      	b.n	8008ec2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	43da      	mvns	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bf0c      	ite	eq
 8008eba:	2301      	moveq	r3, #1
 8008ebc:	2300      	movne	r3, #0
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d0b6      	beq.n	8008e36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ee0:	e051      	b.n	8008f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef0:	d123      	bne.n	8008f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f043 0204 	orr.w	r2, r3, #4
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e046      	b.n	8008fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d021      	beq.n	8008f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f42:	f7fc f98b 	bl	800525c <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d302      	bcc.n	8008f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d116      	bne.n	8008f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	f043 0220 	orr.w	r2, r3, #32
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e020      	b.n	8008fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	0c1b      	lsrs	r3, r3, #16
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10c      	bne.n	8008faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	43da      	mvns	r2, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf14      	ite	ne
 8008fa2:	2301      	movne	r3, #1
 8008fa4:	2300      	moveq	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	e00b      	b.n	8008fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	43da      	mvns	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d18d      	bne.n	8008ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fdc:	e02d      	b.n	800903a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f8ce 	bl	8009180 <I2C_IsAcknowledgeFailed>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e02d      	b.n	800904a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d021      	beq.n	800903a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff6:	f7fc f931 	bl	800525c <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d116      	bne.n	800903a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	f043 0220 	orr.w	r2, r3, #32
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e007      	b.n	800904a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009044:	2b80      	cmp	r3, #128	; 0x80
 8009046:	d1ca      	bne.n	8008fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800905e:	e02d      	b.n	80090bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f88d 	bl	8009180 <I2C_IsAcknowledgeFailed>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e02d      	b.n	80090cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009076:	d021      	beq.n	80090bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009078:	f7fc f8f0 	bl	800525c <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	429a      	cmp	r2, r3
 8009086:	d302      	bcc.n	800908e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d116      	bne.n	80090bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a8:	f043 0220 	orr.w	r2, r3, #32
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e007      	b.n	80090cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d1ca      	bne.n	8009060 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090e0:	e042      	b.n	8009168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b10      	cmp	r3, #16
 80090ee:	d119      	bne.n	8009124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0210 	mvn.w	r2, #16
 80090f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e029      	b.n	8009178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009124:	f7fc f89a 	bl	800525c <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	429a      	cmp	r2, r3
 8009132:	d302      	bcc.n	800913a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d116      	bne.n	8009168 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2220      	movs	r2, #32
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	f043 0220 	orr.w	r2, r3, #32
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e007      	b.n	8009178 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009172:	2b40      	cmp	r3, #64	; 0x40
 8009174:	d1b5      	bne.n	80090e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009196:	d11b      	bne.n	80091d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f043 0204 	orr.w	r2, r3, #4
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d129      	bne.n	8009248 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2224      	movs	r2, #36	; 0x24
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 0210 	bic.w	r2, r2, #16
 800921a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009248:	2302      	movs	r3, #2
  }
}
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b20      	cmp	r3, #32
 800926e:	d12a      	bne.n	80092c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2224      	movs	r2, #36	; 0x24
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0201 	bic.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009290:	89fb      	ldrh	r3, [r7, #14]
 8009292:	f023 030f 	bic.w	r3, r3, #15
 8009296:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	b29a      	uxth	r2, r3
 800929c:	89fb      	ldrh	r3, [r7, #14]
 800929e:	4313      	orrs	r3, r2
 80092a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	89fa      	ldrh	r2, [r7, #14]
 80092a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2220      	movs	r2, #32
 80092be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e000      	b.n	80092c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80092c6:	2302      	movs	r3, #2
  }
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e0bf      	b.n	8009466 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fb f92c 	bl	8004558 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009316:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6999      	ldr	r1, [r3, #24]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800932c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6899      	ldr	r1, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4b4a      	ldr	r3, [pc, #296]	; (8009470 <HAL_LTDC_Init+0x19c>)
 8009348:	400b      	ands	r3, r1
 800934a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	041b      	lsls	r3, r3, #16
 8009352:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6899      	ldr	r1, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68d9      	ldr	r1, [r3, #12]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b3e      	ldr	r3, [pc, #248]	; (8009470 <HAL_LTDC_Init+0x19c>)
 8009376:	400b      	ands	r3, r1
 8009378:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68d9      	ldr	r1, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a1a      	ldr	r2, [r3, #32]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6919      	ldr	r1, [r3, #16]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b33      	ldr	r3, [pc, #204]	; (8009470 <HAL_LTDC_Init+0x19c>)
 80093a4:	400b      	ands	r3, r1
 80093a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6919      	ldr	r1, [r3, #16]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6959      	ldr	r1, [r3, #20]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <HAL_LTDC_Init+0x19c>)
 80093d2:	400b      	ands	r3, r1
 80093d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	041b      	lsls	r3, r3, #16
 80093dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6959      	ldr	r1, [r3, #20]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009404:	041b      	lsls	r3, r3, #16
 8009406:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009416:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0206 	orr.w	r2, r2, #6
 8009442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0201 	orr.w	r2, r2, #1
 8009452:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	f000f800 	.word	0xf000f800

08009474 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d023      	beq.n	80094de <HAL_LTDC_IRQHandler+0x6a>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01e      	beq.n	80094de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0204 	bic.w	r2, r2, #4
 80094ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2204      	movs	r2, #4
 80094b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094be:	f043 0201 	orr.w	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2204      	movs	r2, #4
 80094cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f86f 	bl	80095bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d023      	beq.n	8009530 <HAL_LTDC_IRQHandler+0xbc>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01e      	beq.n	8009530 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0202 	bic.w	r2, r2, #2
 8009500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2202      	movs	r2, #2
 8009508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009510:	f043 0202 	orr.w	r2, r3, #2
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2204      	movs	r2, #4
 800951e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f846 	bl	80095bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d01b      	beq.n	8009572 <HAL_LTDC_IRQHandler+0xfe>
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d016      	beq.n	8009572 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2201      	movs	r2, #1
 800955a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f82f 	bl	80095d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01b      	beq.n	80095b4 <HAL_LTDC_IRQHandler+0x140>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f003 0308 	and.w	r3, r3, #8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d016      	beq.n	80095b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0208 	bic.w	r2, r2, #8
 8009594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2208      	movs	r2, #8
 800959c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f818 	bl	80095e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80095f8:	b5b0      	push	{r4, r5, r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_LTDC_ConfigLayer+0x1a>
 800960e:	2302      	movs	r3, #2
 8009610:	e02c      	b.n	800966c <HAL_LTDC_ConfigLayer+0x74>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2134      	movs	r1, #52	; 0x34
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4614      	mov	r4, r2
 8009636:	461d      	mov	r5, r3
 8009638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800963a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800963c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800963e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 f83b 	bl	80096c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2201      	movs	r2, #1
 8009658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bdb0      	pop	{r4, r5, r7, pc}

08009674 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <HAL_LTDC_EnableDither+0x16>
 8009686:	2302      	movs	r3, #2
 8009688:	e016      	b.n	80096b8 <HAL_LTDC_EnableDither+0x44>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <HAL_LTDC_EnableDither+0x50>)
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <HAL_LTDC_EnableDither+0x50>)
 80096a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40016800 	.word	0x40016800

080096c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b089      	sub	sp, #36	; 0x24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e4:	4413      	add	r3, r2
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	01db      	lsls	r3, r3, #7
 80096f4:	4413      	add	r3, r2
 80096f6:	3384      	adds	r3, #132	; 0x84
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	4611      	mov	r1, r2
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	01d2      	lsls	r2, r2, #7
 8009704:	440a      	add	r2, r1
 8009706:	3284      	adds	r2, #132	; 0x84
 8009708:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800970c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	0c1b      	lsrs	r3, r3, #16
 800971a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800971e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009720:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4619      	mov	r1, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	01db      	lsls	r3, r3, #7
 800972c:	440b      	add	r3, r1
 800972e:	3384      	adds	r3, #132	; 0x84
 8009730:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009736:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009746:	4413      	add	r3, r2
 8009748:	041b      	lsls	r3, r3, #16
 800974a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	01db      	lsls	r3, r3, #7
 8009756:	4413      	add	r3, r2
 8009758:	3384      	adds	r3, #132	; 0x84
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	4611      	mov	r1, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	01d2      	lsls	r2, r2, #7
 8009766:	440a      	add	r2, r1
 8009768:	3284      	adds	r2, #132	; 0x84
 800976a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800976e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800977e:	4413      	add	r3, r2
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	01db      	lsls	r3, r3, #7
 800978c:	440b      	add	r3, r1
 800978e:	3384      	adds	r3, #132	; 0x84
 8009790:	4619      	mov	r1, r3
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4313      	orrs	r3, r2
 8009796:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	01db      	lsls	r3, r3, #7
 80097a2:	4413      	add	r3, r2
 80097a4:	3384      	adds	r3, #132	; 0x84
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	4611      	mov	r1, r2
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	01d2      	lsls	r2, r2, #7
 80097b2:	440a      	add	r2, r1
 80097b4:	3284      	adds	r2, #132	; 0x84
 80097b6:	f023 0307 	bic.w	r3, r3, #7
 80097ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	01db      	lsls	r3, r3, #7
 80097c6:	4413      	add	r3, r2
 80097c8:	3384      	adds	r3, #132	; 0x84
 80097ca:	461a      	mov	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80097e2:	041b      	lsls	r3, r3, #16
 80097e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	061b      	lsls	r3, r3, #24
 80097ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	01db      	lsls	r3, r3, #7
 80097f8:	4413      	add	r3, r2
 80097fa:	3384      	adds	r3, #132	; 0x84
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	01db      	lsls	r3, r3, #7
 8009808:	4413      	add	r3, r2
 800980a:	3384      	adds	r3, #132	; 0x84
 800980c:	461a      	mov	r2, r3
 800980e:	2300      	movs	r3, #0
 8009810:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009818:	461a      	mov	r2, r3
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	431a      	orrs	r2, r3
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	431a      	orrs	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	01db      	lsls	r3, r3, #7
 800982c:	440b      	add	r3, r1
 800982e:	3384      	adds	r3, #132	; 0x84
 8009830:	4619      	mov	r1, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	4313      	orrs	r3, r2
 8009836:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	01db      	lsls	r3, r3, #7
 8009842:	4413      	add	r3, r2
 8009844:	3384      	adds	r3, #132	; 0x84
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	4611      	mov	r1, r2
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	01d2      	lsls	r2, r2, #7
 8009852:	440a      	add	r2, r1
 8009854:	3284      	adds	r2, #132	; 0x84
 8009856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800985a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	01db      	lsls	r3, r3, #7
 8009866:	4413      	add	r3, r2
 8009868:	3384      	adds	r3, #132	; 0x84
 800986a:	461a      	mov	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	01db      	lsls	r3, r3, #7
 800987c:	4413      	add	r3, r2
 800987e:	3384      	adds	r3, #132	; 0x84
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	6812      	ldr	r2, [r2, #0]
 8009886:	4611      	mov	r1, r2
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	01d2      	lsls	r2, r2, #7
 800988c:	440a      	add	r2, r1
 800988e:	3284      	adds	r2, #132	; 0x84
 8009890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009894:	f023 0307 	bic.w	r3, r3, #7
 8009898:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	69da      	ldr	r2, [r3, #28]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	6809      	ldr	r1, [r1, #0]
 80098a6:	4608      	mov	r0, r1
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	01c9      	lsls	r1, r1, #7
 80098ac:	4401      	add	r1, r0
 80098ae:	3184      	adds	r1, #132	; 0x84
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	01db      	lsls	r3, r3, #7
 80098be:	4413      	add	r3, r2
 80098c0:	3384      	adds	r3, #132	; 0x84
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	01db      	lsls	r3, r3, #7
 80098ce:	4413      	add	r3, r2
 80098d0:	3384      	adds	r3, #132	; 0x84
 80098d2:	461a      	mov	r2, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	01db      	lsls	r3, r3, #7
 80098e2:	4413      	add	r3, r2
 80098e4:	3384      	adds	r3, #132	; 0x84
 80098e6:	461a      	mov	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80098f6:	2304      	movs	r3, #4
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e01b      	b.n	8009934 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d102      	bne.n	800990a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009904:	2303      	movs	r3, #3
 8009906:	61fb      	str	r3, [r7, #28]
 8009908:	e014      	b.n	8009934 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b04      	cmp	r3, #4
 8009910:	d00b      	beq.n	800992a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009916:	2b02      	cmp	r3, #2
 8009918:	d007      	beq.n	800992a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800991e:	2b03      	cmp	r3, #3
 8009920:	d003      	beq.n	800992a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009926:	2b07      	cmp	r3, #7
 8009928:	d102      	bne.n	8009930 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800992a:	2302      	movs	r3, #2
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	e001      	b.n	8009934 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009930:	2301      	movs	r3, #1
 8009932:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	01db      	lsls	r3, r3, #7
 800993e:	4413      	add	r3, r2
 8009940:	3384      	adds	r3, #132	; 0x84
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	4611      	mov	r1, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	01d2      	lsls	r2, r2, #7
 800994e:	440a      	add	r2, r1
 8009950:	3284      	adds	r2, #132	; 0x84
 8009952:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009956:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	fb02 f303 	mul.w	r3, r2, r3
 8009962:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6859      	ldr	r1, [r3, #4]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	1acb      	subs	r3, r1, r3
 800996e:	69f9      	ldr	r1, [r7, #28]
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	6809      	ldr	r1, [r1, #0]
 800997a:	4608      	mov	r0, r1
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	01c9      	lsls	r1, r1, #7
 8009980:	4401      	add	r1, r0
 8009982:	3184      	adds	r1, #132	; 0x84
 8009984:	4313      	orrs	r3, r2
 8009986:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	01db      	lsls	r3, r3, #7
 8009992:	4413      	add	r3, r2
 8009994:	3384      	adds	r3, #132	; 0x84
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	4611      	mov	r1, r2
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	01d2      	lsls	r2, r2, #7
 80099a2:	440a      	add	r2, r1
 80099a4:	3284      	adds	r2, #132	; 0x84
 80099a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	01db      	lsls	r3, r3, #7
 80099ba:	4413      	add	r3, r2
 80099bc:	3384      	adds	r3, #132	; 0x84
 80099be:	461a      	mov	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	01db      	lsls	r3, r3, #7
 80099d0:	4413      	add	r3, r2
 80099d2:	3384      	adds	r3, #132	; 0x84
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	4611      	mov	r1, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	01d2      	lsls	r2, r2, #7
 80099e0:	440a      	add	r2, r1
 80099e2:	3284      	adds	r2, #132	; 0x84
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	6013      	str	r3, [r2, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3724      	adds	r7, #36	; 0x24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e267      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d075      	beq.n	8009b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a16:	4b88      	ldr	r3, [pc, #544]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d00c      	beq.n	8009a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a22:	4b85      	ldr	r3, [pc, #532]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a2a:	2b08      	cmp	r3, #8
 8009a2c:	d112      	bne.n	8009a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a2e:	4b82      	ldr	r3, [pc, #520]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a3a:	d10b      	bne.n	8009a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a3c:	4b7e      	ldr	r3, [pc, #504]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d05b      	beq.n	8009b00 <HAL_RCC_OscConfig+0x108>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d157      	bne.n	8009b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e242      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5c:	d106      	bne.n	8009a6c <HAL_RCC_OscConfig+0x74>
 8009a5e:	4b76      	ldr	r3, [pc, #472]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a75      	ldr	r2, [pc, #468]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	e01d      	b.n	8009aa8 <HAL_RCC_OscConfig+0xb0>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a74:	d10c      	bne.n	8009a90 <HAL_RCC_OscConfig+0x98>
 8009a76:	4b70      	ldr	r3, [pc, #448]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a6f      	ldr	r2, [pc, #444]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	4b6d      	ldr	r3, [pc, #436]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6c      	ldr	r2, [pc, #432]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e00b      	b.n	8009aa8 <HAL_RCC_OscConfig+0xb0>
 8009a90:	4b69      	ldr	r3, [pc, #420]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a68      	ldr	r2, [pc, #416]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	4b66      	ldr	r3, [pc, #408]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a65      	ldr	r2, [pc, #404]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d013      	beq.n	8009ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ab0:	f7fb fbd4 	bl	800525c <HAL_GetTick>
 8009ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ab6:	e008      	b.n	8009aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ab8:	f7fb fbd0 	bl	800525c <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b64      	cmp	r3, #100	; 0x64
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e207      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aca:	4b5b      	ldr	r3, [pc, #364]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0f0      	beq.n	8009ab8 <HAL_RCC_OscConfig+0xc0>
 8009ad6:	e014      	b.n	8009b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ad8:	f7fb fbc0 	bl	800525c <HAL_GetTick>
 8009adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ade:	e008      	b.n	8009af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ae0:	f7fb fbbc 	bl	800525c <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b64      	cmp	r3, #100	; 0x64
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e1f3      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009af2:	4b51      	ldr	r3, [pc, #324]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1f0      	bne.n	8009ae0 <HAL_RCC_OscConfig+0xe8>
 8009afe:	e000      	b.n	8009b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d063      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 030c 	and.w	r3, r3, #12
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b1a:	4b47      	ldr	r3, [pc, #284]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d11c      	bne.n	8009b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b26:	4b44      	ldr	r3, [pc, #272]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d116      	bne.n	8009b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b32:	4b41      	ldr	r3, [pc, #260]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <HAL_RCC_OscConfig+0x152>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d001      	beq.n	8009b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e1c7      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b4a:	4b3b      	ldr	r3, [pc, #236]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4937      	ldr	r1, [pc, #220]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b5e:	e03a      	b.n	8009bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d020      	beq.n	8009baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b68:	4b34      	ldr	r3, [pc, #208]	; (8009c3c <HAL_RCC_OscConfig+0x244>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6e:	f7fb fb75 	bl	800525c <HAL_GetTick>
 8009b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b76:	f7fb fb71 	bl	800525c <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e1a8      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b88:	4b2b      	ldr	r3, [pc, #172]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f0      	beq.n	8009b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b94:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4925      	ldr	r1, [pc, #148]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	600b      	str	r3, [r1, #0]
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <HAL_RCC_OscConfig+0x244>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb0:	f7fb fb54 	bl	800525c <HAL_GetTick>
 8009bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bb6:	e008      	b.n	8009bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bb8:	f7fb fb50 	bl	800525c <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d901      	bls.n	8009bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e187      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1f0      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0308 	and.w	r3, r3, #8
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d036      	beq.n	8009c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d016      	beq.n	8009c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bea:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <HAL_RCC_OscConfig+0x248>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf0:	f7fb fb34 	bl	800525c <HAL_GetTick>
 8009bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bf6:	e008      	b.n	8009c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bf8:	f7fb fb30 	bl	800525c <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e167      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c0a:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <HAL_RCC_OscConfig+0x240>)
 8009c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0f0      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x200>
 8009c16:	e01b      	b.n	8009c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <HAL_RCC_OscConfig+0x248>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c1e:	f7fb fb1d 	bl	800525c <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c24:	e00e      	b.n	8009c44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c26:	f7fb fb19 	bl	800525c <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d907      	bls.n	8009c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e150      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	42470000 	.word	0x42470000
 8009c40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c44:	4b88      	ldr	r3, [pc, #544]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1ea      	bne.n	8009c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 8097 	beq.w	8009d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c62:	4b81      	ldr	r3, [pc, #516]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10f      	bne.n	8009c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]
 8009c72:	4b7d      	ldr	r3, [pc, #500]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	4a7c      	ldr	r2, [pc, #496]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c7e:	4b7a      	ldr	r3, [pc, #488]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c86:	60bb      	str	r3, [r7, #8]
 8009c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c8e:	4b77      	ldr	r3, [pc, #476]	; (8009e6c <HAL_RCC_OscConfig+0x474>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d118      	bne.n	8009ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c9a:	4b74      	ldr	r3, [pc, #464]	; (8009e6c <HAL_RCC_OscConfig+0x474>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a73      	ldr	r2, [pc, #460]	; (8009e6c <HAL_RCC_OscConfig+0x474>)
 8009ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ca6:	f7fb fad9 	bl	800525c <HAL_GetTick>
 8009caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cac:	e008      	b.n	8009cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cae:	f7fb fad5 	bl	800525c <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e10c      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cc0:	4b6a      	ldr	r3, [pc, #424]	; (8009e6c <HAL_RCC_OscConfig+0x474>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0f0      	beq.n	8009cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d106      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x2ea>
 8009cd4:	4b64      	ldr	r3, [pc, #400]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd8:	4a63      	ldr	r2, [pc, #396]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce0:	e01c      	b.n	8009d1c <HAL_RCC_OscConfig+0x324>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d10c      	bne.n	8009d04 <HAL_RCC_OscConfig+0x30c>
 8009cea:	4b5f      	ldr	r3, [pc, #380]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cee:	4a5e      	ldr	r2, [pc, #376]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cf0:	f043 0304 	orr.w	r3, r3, #4
 8009cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf6:	4b5c      	ldr	r3, [pc, #368]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	4a5b      	ldr	r2, [pc, #364]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	6713      	str	r3, [r2, #112]	; 0x70
 8009d02:	e00b      	b.n	8009d1c <HAL_RCC_OscConfig+0x324>
 8009d04:	4b58      	ldr	r3, [pc, #352]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d08:	4a57      	ldr	r2, [pc, #348]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d10:	4b55      	ldr	r3, [pc, #340]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d14:	4a54      	ldr	r2, [pc, #336]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d16:	f023 0304 	bic.w	r3, r3, #4
 8009d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d015      	beq.n	8009d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d24:	f7fb fa9a 	bl	800525c <HAL_GetTick>
 8009d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d2a:	e00a      	b.n	8009d42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d2c:	f7fb fa96 	bl	800525c <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e0cb      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d42:	4b49      	ldr	r3, [pc, #292]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0ee      	beq.n	8009d2c <HAL_RCC_OscConfig+0x334>
 8009d4e:	e014      	b.n	8009d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d50:	f7fb fa84 	bl	800525c <HAL_GetTick>
 8009d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d56:	e00a      	b.n	8009d6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d58:	f7fb fa80 	bl	800525c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e0b5      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d6e:	4b3e      	ldr	r3, [pc, #248]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1ee      	bne.n	8009d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d105      	bne.n	8009d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d80:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d84:	4a38      	ldr	r2, [pc, #224]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80a1 	beq.w	8009ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d96:	4b34      	ldr	r3, [pc, #208]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 030c 	and.w	r3, r3, #12
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d05c      	beq.n	8009e5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d141      	bne.n	8009e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009daa:	4b31      	ldr	r3, [pc, #196]	; (8009e70 <HAL_RCC_OscConfig+0x478>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009db0:	f7fb fa54 	bl	800525c <HAL_GetTick>
 8009db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009db6:	e008      	b.n	8009dca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009db8:	f7fb fa50 	bl	800525c <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e087      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dca:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1f0      	bne.n	8009db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69da      	ldr	r2, [r3, #28]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	019b      	lsls	r3, r3, #6
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	085b      	lsrs	r3, r3, #1
 8009dee:	3b01      	subs	r3, #1
 8009df0:	041b      	lsls	r3, r3, #16
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	061b      	lsls	r3, r3, #24
 8009dfa:	491b      	ldr	r1, [pc, #108]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e00:	4b1b      	ldr	r3, [pc, #108]	; (8009e70 <HAL_RCC_OscConfig+0x478>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e06:	f7fb fa29 	bl	800525c <HAL_GetTick>
 8009e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e0c:	e008      	b.n	8009e20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e0e:	f7fb fa25 	bl	800525c <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d901      	bls.n	8009e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e05c      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e20:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0f0      	beq.n	8009e0e <HAL_RCC_OscConfig+0x416>
 8009e2c:	e054      	b.n	8009ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e2e:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <HAL_RCC_OscConfig+0x478>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e34:	f7fb fa12 	bl	800525c <HAL_GetTick>
 8009e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e3a:	e008      	b.n	8009e4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e3c:	f7fb fa0e 	bl	800525c <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e045      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e4e:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <HAL_RCC_OscConfig+0x470>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1f0      	bne.n	8009e3c <HAL_RCC_OscConfig+0x444>
 8009e5a:	e03d      	b.n	8009ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e038      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
 8009e68:	40023800 	.word	0x40023800
 8009e6c:	40007000 	.word	0x40007000
 8009e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e74:	4b1b      	ldr	r3, [pc, #108]	; (8009ee4 <HAL_RCC_OscConfig+0x4ec>)
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d028      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d121      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d11a      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d111      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	085b      	lsrs	r3, r3, #1
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d107      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d001      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	40023800 	.word	0x40023800

08009ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e0cc      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009efc:	4b68      	ldr	r3, [pc, #416]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 030f 	and.w	r3, r3, #15
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d90c      	bls.n	8009f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f0a:	4b65      	ldr	r3, [pc, #404]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f12:	4b63      	ldr	r3, [pc, #396]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 030f 	and.w	r3, r3, #15
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d001      	beq.n	8009f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e0b8      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0302 	and.w	r3, r3, #2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d020      	beq.n	8009f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f3c:	4b59      	ldr	r3, [pc, #356]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	4a58      	ldr	r2, [pc, #352]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f54:	4b53      	ldr	r3, [pc, #332]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4a52      	ldr	r2, [pc, #328]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f60:	4b50      	ldr	r3, [pc, #320]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	494d      	ldr	r1, [pc, #308]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d044      	beq.n	800a008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d107      	bne.n	8009f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f86:	4b47      	ldr	r3, [pc, #284]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d119      	bne.n	8009fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e07f      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d003      	beq.n	8009fa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d107      	bne.n	8009fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fa6:	4b3f      	ldr	r3, [pc, #252]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d109      	bne.n	8009fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e06f      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fb6:	4b3b      	ldr	r3, [pc, #236]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e067      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fc6:	4b37      	ldr	r3, [pc, #220]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f023 0203 	bic.w	r2, r3, #3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4934      	ldr	r1, [pc, #208]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fd8:	f7fb f940 	bl	800525c <HAL_GetTick>
 8009fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fde:	e00a      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fe0:	f7fb f93c 	bl	800525c <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e04f      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ff6:	4b2b      	ldr	r3, [pc, #172]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 020c 	and.w	r2, r3, #12
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	429a      	cmp	r2, r3
 800a006:	d1eb      	bne.n	8009fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a008:	4b25      	ldr	r3, [pc, #148]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d20c      	bcs.n	800a030 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a016:	4b22      	ldr	r3, [pc, #136]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a01e:	4b20      	ldr	r3, [pc, #128]	; (800a0a0 <HAL_RCC_ClockConfig+0x1b8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d001      	beq.n	800a030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e032      	b.n	800a096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a03c:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4916      	ldr	r1, [pc, #88]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a05a:	4b12      	ldr	r3, [pc, #72]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	490e      	ldr	r1, [pc, #56]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a06e:	f000 f821 	bl	800a0b4 <HAL_RCC_GetSysClockFreq>
 800a072:	4602      	mov	r2, r0
 800a074:	4b0b      	ldr	r3, [pc, #44]	; (800a0a4 <HAL_RCC_ClockConfig+0x1bc>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	091b      	lsrs	r3, r3, #4
 800a07a:	f003 030f 	and.w	r3, r3, #15
 800a07e:	490a      	ldr	r1, [pc, #40]	; (800a0a8 <HAL_RCC_ClockConfig+0x1c0>)
 800a080:	5ccb      	ldrb	r3, [r1, r3]
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <HAL_RCC_ClockConfig+0x1c4>)
 800a088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fa fcfe 	bl	8004a90 <HAL_InitTick>

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40023c00 	.word	0x40023c00
 800a0a4:	40023800 	.word	0x40023800
 800a0a8:	080757d4 	.word	0x080757d4
 800a0ac:	200000a0 	.word	0x200000a0
 800a0b0:	200000a4 	.word	0x200000a4

0800a0b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b094      	sub	sp, #80	; 0x50
 800a0ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	647b      	str	r3, [r7, #68]	; 0x44
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0cc:	4b79      	ldr	r3, [pc, #484]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 030c 	and.w	r3, r3, #12
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d00d      	beq.n	800a0f4 <HAL_RCC_GetSysClockFreq+0x40>
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	f200 80e1 	bhi.w	800a2a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x34>
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d003      	beq.n	800a0ee <HAL_RCC_GetSysClockFreq+0x3a>
 800a0e6:	e0db      	b.n	800a2a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0e8:	4b73      	ldr	r3, [pc, #460]	; (800a2b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a0ec:	e0db      	b.n	800a2a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0ee:	4b73      	ldr	r3, [pc, #460]	; (800a2bc <HAL_RCC_GetSysClockFreq+0x208>)
 800a0f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0f2:	e0d8      	b.n	800a2a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0f4:	4b6f      	ldr	r3, [pc, #444]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0fe:	4b6d      	ldr	r3, [pc, #436]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d063      	beq.n	800a1d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a10a:	4b6a      	ldr	r3, [pc, #424]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	099b      	lsrs	r3, r3, #6
 800a110:	2200      	movs	r2, #0
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
 800a114:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11c:	633b      	str	r3, [r7, #48]	; 0x30
 800a11e:	2300      	movs	r3, #0
 800a120:	637b      	str	r3, [r7, #52]	; 0x34
 800a122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a126:	4622      	mov	r2, r4
 800a128:	462b      	mov	r3, r5
 800a12a:	f04f 0000 	mov.w	r0, #0
 800a12e:	f04f 0100 	mov.w	r1, #0
 800a132:	0159      	lsls	r1, r3, #5
 800a134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a138:	0150      	lsls	r0, r2, #5
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4621      	mov	r1, r4
 800a140:	1a51      	subs	r1, r2, r1
 800a142:	6139      	str	r1, [r7, #16]
 800a144:	4629      	mov	r1, r5
 800a146:	eb63 0301 	sbc.w	r3, r3, r1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	f04f 0300 	mov.w	r3, #0
 800a154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a158:	4659      	mov	r1, fp
 800a15a:	018b      	lsls	r3, r1, #6
 800a15c:	4651      	mov	r1, sl
 800a15e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a162:	4651      	mov	r1, sl
 800a164:	018a      	lsls	r2, r1, #6
 800a166:	4651      	mov	r1, sl
 800a168:	ebb2 0801 	subs.w	r8, r2, r1
 800a16c:	4659      	mov	r1, fp
 800a16e:	eb63 0901 	sbc.w	r9, r3, r1
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a17e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a186:	4690      	mov	r8, r2
 800a188:	4699      	mov	r9, r3
 800a18a:	4623      	mov	r3, r4
 800a18c:	eb18 0303 	adds.w	r3, r8, r3
 800a190:	60bb      	str	r3, [r7, #8]
 800a192:	462b      	mov	r3, r5
 800a194:	eb49 0303 	adc.w	r3, r9, r3
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	024b      	lsls	r3, r1, #9
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	024a      	lsls	r2, r1, #9
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1c4:	f7f6 fd0a 	bl	8000bdc <__aeabi_uldivmod>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d0:	e058      	b.n	800a284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d2:	4b38      	ldr	r3, [pc, #224]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	099b      	lsrs	r3, r3, #6
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	4611      	mov	r1, r2
 800a1de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a1e2:	623b      	str	r3, [r7, #32]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	f04f 0000 	mov.w	r0, #0
 800a1f4:	f04f 0100 	mov.w	r1, #0
 800a1f8:	0159      	lsls	r1, r3, #5
 800a1fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1fe:	0150      	lsls	r0, r2, #5
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4641      	mov	r1, r8
 800a206:	ebb2 0a01 	subs.w	sl, r2, r1
 800a20a:	4649      	mov	r1, r9
 800a20c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a210:	f04f 0200 	mov.w	r2, #0
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a21c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a224:	ebb2 040a 	subs.w	r4, r2, sl
 800a228:	eb63 050b 	sbc.w	r5, r3, fp
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	f04f 0300 	mov.w	r3, #0
 800a234:	00eb      	lsls	r3, r5, #3
 800a236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a23a:	00e2      	lsls	r2, r4, #3
 800a23c:	4614      	mov	r4, r2
 800a23e:	461d      	mov	r5, r3
 800a240:	4643      	mov	r3, r8
 800a242:	18e3      	adds	r3, r4, r3
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	464b      	mov	r3, r9
 800a248:	eb45 0303 	adc.w	r3, r5, r3
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a25a:	4629      	mov	r1, r5
 800a25c:	028b      	lsls	r3, r1, #10
 800a25e:	4621      	mov	r1, r4
 800a260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a264:	4621      	mov	r1, r4
 800a266:	028a      	lsls	r2, r1, #10
 800a268:	4610      	mov	r0, r2
 800a26a:	4619      	mov	r1, r3
 800a26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a26e:	2200      	movs	r2, #0
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	61fa      	str	r2, [r7, #28]
 800a274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a278:	f7f6 fcb0 	bl	8000bdc <__aeabi_uldivmod>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4613      	mov	r3, r2
 800a282:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a284:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	0c1b      	lsrs	r3, r3, #16
 800a28a:	f003 0303 	and.w	r3, r3, #3
 800a28e:	3301      	adds	r3, #1
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a298:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a29e:	e002      	b.n	800a2a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2a0:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a2a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3750      	adds	r7, #80	; 0x50
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2b2:	bf00      	nop
 800a2b4:	40023800 	.word	0x40023800
 800a2b8:	00f42400 	.word	0x00f42400
 800a2bc:	007a1200 	.word	0x007a1200

0800a2c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	200000a0 	.word	0x200000a0

0800a2d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a2dc:	f7ff fff0 	bl	800a2c0 <HAL_RCC_GetHCLKFreq>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	0a9b      	lsrs	r3, r3, #10
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	4903      	ldr	r1, [pc, #12]	; (800a2fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2ee:	5ccb      	ldrb	r3, [r1, r3]
 800a2f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	40023800 	.word	0x40023800
 800a2fc:	080757e4 	.word	0x080757e4

0800a300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a304:	f7ff ffdc 	bl	800a2c0 <HAL_RCC_GetHCLKFreq>
 800a308:	4602      	mov	r2, r0
 800a30a:	4b05      	ldr	r3, [pc, #20]	; (800a320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	0b5b      	lsrs	r3, r3, #13
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	4903      	ldr	r1, [pc, #12]	; (800a324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a316:	5ccb      	ldrb	r3, [r1, r3]
 800a318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40023800 	.word	0x40023800
 800a324:	080757e4 	.word	0x080757e4

0800a328 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	220f      	movs	r2, #15
 800a336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a338:	4b12      	ldr	r3, [pc, #72]	; (800a384 <HAL_RCC_GetClockConfig+0x5c>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0203 	and.w	r2, r3, #3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a344:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <HAL_RCC_GetClockConfig+0x5c>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <HAL_RCC_GetClockConfig+0x5c>)
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <HAL_RCC_GetClockConfig+0x5c>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	08db      	lsrs	r3, r3, #3
 800a362:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <HAL_RCC_GetClockConfig+0x60>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 020f 	and.w	r2, r3, #15
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	601a      	str	r2, [r3, #0]
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40023800 	.word	0x40023800
 800a388:	40023c00 	.word	0x40023c00

0800a38c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d105      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d075      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a3c0:	4b91      	ldr	r3, [pc, #580]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3c6:	f7fa ff49 	bl	800525c <HAL_GetTick>
 800a3ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3cc:	e008      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3ce:	f7fa ff45 	bl	800525c <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d901      	bls.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e189      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3e0:	4b8a      	ldr	r3, [pc, #552]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1f0      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d009      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	019a      	lsls	r2, r3, #6
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	071b      	lsls	r3, r3, #28
 800a404:	4981      	ldr	r1, [pc, #516]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a406:	4313      	orrs	r3, r2
 800a408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01f      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a418:	4b7c      	ldr	r3, [pc, #496]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a41e:	0f1b      	lsrs	r3, r3, #28
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	019a      	lsls	r2, r3, #6
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	061b      	lsls	r3, r3, #24
 800a432:	431a      	orrs	r2, r3
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	071b      	lsls	r3, r3, #28
 800a438:	4974      	ldr	r1, [pc, #464]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a440:	4b72      	ldr	r3, [pc, #456]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a446:	f023 021f 	bic.w	r2, r3, #31
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	3b01      	subs	r3, #1
 800a450:	496e      	ldr	r1, [pc, #440]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00d      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	019a      	lsls	r2, r3, #6
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	061b      	lsls	r3, r3, #24
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	071b      	lsls	r3, r3, #28
 800a478:	4964      	ldr	r1, [pc, #400]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a480:	4b61      	ldr	r3, [pc, #388]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a482:	2201      	movs	r2, #1
 800a484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a486:	f7fa fee9 	bl	800525c <HAL_GetTick>
 800a48a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a48c:	e008      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a48e:	f7fa fee5 	bl	800525c <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e129      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a4a0:	4b5a      	ldr	r3, [pc, #360]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0f0      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d079      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a4c4:	4b52      	ldr	r3, [pc, #328]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4ca:	f7fa fec7 	bl	800525c <HAL_GetTick>
 800a4ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4d0:	e008      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a4d2:	f7fa fec3 	bl	800525c <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d901      	bls.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e107      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4e4:	4b49      	ldr	r3, [pc, #292]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4f0:	d0ef      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d020      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4fe:	4b43      	ldr	r3, [pc, #268]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a504:	0f1b      	lsrs	r3, r3, #28
 800a506:	f003 0307 	and.w	r3, r3, #7
 800a50a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	019a      	lsls	r2, r3, #6
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	431a      	orrs	r2, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	071b      	lsls	r3, r3, #28
 800a51e:	493b      	ldr	r1, [pc, #236]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a520:	4313      	orrs	r3, r2
 800a522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a526:	4b39      	ldr	r3, [pc, #228]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	3b01      	subs	r3, #1
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	4934      	ldr	r1, [pc, #208]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a54c:	4b2f      	ldr	r3, [pc, #188]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	0e1b      	lsrs	r3, r3, #24
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	019a      	lsls	r2, r3, #6
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	061b      	lsls	r3, r3, #24
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	071b      	lsls	r3, r3, #28
 800a56c:	4927      	ldr	r1, [pc, #156]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a574:	4b25      	ldr	r3, [pc, #148]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	4922      	ldr	r1, [pc, #136]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a584:	4313      	orrs	r3, r2
 800a586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a58a:	4b21      	ldr	r3, [pc, #132]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a590:	f7fa fe64 	bl	800525c <HAL_GetTick>
 800a594:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a596:	e008      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a598:	f7fa fe60 	bl	800525c <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e0a4      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5aa:	4b18      	ldr	r3, [pc, #96]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b6:	d1ef      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 808b 	beq.w	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	4b10      	ldr	r3, [pc, #64]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	4a0f      	ldr	r2, [pc, #60]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a0b      	ldr	r2, [pc, #44]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5ee:	f7fa fe35 	bl	800525c <HAL_GetTick>
 800a5f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5f4:	e010      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a5f6:	f7fa fe31 	bl	800525c <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	2b02      	cmp	r3, #2
 800a602:	d909      	bls.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e075      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a608:	42470068 	.word	0x42470068
 800a60c:	40023800 	.word	0x40023800
 800a610:	42470070 	.word	0x42470070
 800a614:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a618:	4b38      	ldr	r3, [pc, #224]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0e8      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a624:	4b36      	ldr	r3, [pc, #216]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a62c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d02f      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d028      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a642:	4b2f      	ldr	r3, [pc, #188]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a64a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a64c:	4b2d      	ldr	r3, [pc, #180]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a64e:	2201      	movs	r2, #1
 800a650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a652:	4b2c      	ldr	r3, [pc, #176]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a658:	4a29      	ldr	r2, [pc, #164]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a65e:	4b28      	ldr	r3, [pc, #160]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b01      	cmp	r3, #1
 800a668:	d114      	bne.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a66a:	f7fa fdf7 	bl	800525c <HAL_GetTick>
 800a66e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a670:	e00a      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a672:	f7fa fdf3 	bl	800525c <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a680:	4293      	cmp	r3, r2
 800a682:	d901      	bls.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e035      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a688:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0ee      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a69c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6a0:	d10d      	bne.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a6a2:	4b17      	ldr	r3, [pc, #92]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b6:	4912      	ldr	r1, [pc, #72]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	608b      	str	r3, [r1, #8]
 800a6bc:	e005      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	4a0f      	ldr	r2, [pc, #60]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a6c8:	6093      	str	r3, [r2, #8]
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d6:	490a      	ldr	r1, [pc, #40]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a6ee:	4b06      	ldr	r3, [pc, #24]	; (800a708 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a6f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40007000 	.word	0x40007000
 800a700:	40023800 	.word	0x40023800
 800a704:	42470e40 	.word	0x42470e40
 800a708:	424711e0 	.word	0x424711e0

0800a70c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e025      	b.n	800a76c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d106      	bne.n	800a73a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fa f9a1 	bl	8004a7c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2202      	movs	r2, #2
 800a73e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f001 fe91 	bl	800c474 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	461a      	mov	r2, r3
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	f001 fee6 	bl	800c52e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a786:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d101      	bne.n	800a792 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a78e:	2302      	movs	r3, #2
 800a790:	e021      	b.n	800a7d6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d002      	beq.n	800a79e <HAL_SDRAM_SendCommand+0x2a>
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	d118      	bne.n	800a7d0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 ff26 	bl	800c600 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d104      	bne.n	800a7c6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2205      	movs	r2, #5
 800a7c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7c4:	e006      	b.n	800a7d4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a7ce:	e001      	b.n	800a7d4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d101      	bne.n	800a7f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e016      	b.n	800a826 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10f      	bne.n	800a824 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f001 ff31 	bl	800c67a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	e000      	b.n	800a826 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e07b      	b.n	800a938 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b00      	cmp	r3, #0
 800a846:	d108      	bne.n	800a85a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a850:	d009      	beq.n	800a866 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	61da      	str	r2, [r3, #28]
 800a858:	e005      	b.n	800a866 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	d106      	bne.n	800a886 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7f9 ff99 	bl	80047b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2202      	movs	r2, #2
 800a88a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a89c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ea:	ea42 0103 	orr.w	r1, r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	0c1b      	lsrs	r3, r3, #16
 800a904:	f003 0104 	and.w	r1, r3, #4
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	f003 0210 	and.w	r2, r3, #16
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a926:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e01a      	b.n	800a988 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a968:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7f9 ff6c 	bl	8004848 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	4613      	mov	r3, r2
 800a99e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_SPI_Transmit+0x22>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e126      	b.n	800ac00 <HAL_SPI_Transmit+0x270>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9ba:	f7fa fc4f 	bl	800525c <HAL_GetTick>
 800a9be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d002      	beq.n	800a9d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9d4:	e10b      	b.n	800abee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <HAL_SPI_Transmit+0x52>
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a9e6:	e102      	b.n	800abee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	88fa      	ldrh	r2, [r7, #6]
 800aa00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	88fa      	ldrh	r2, [r7, #6]
 800aa06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa2e:	d10f      	bne.n	800aa50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d007      	beq.n	800aa6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa76:	d14b      	bne.n	800ab10 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <HAL_SPI_Transmit+0xf6>
 800aa80:	8afb      	ldrh	r3, [r7, #22]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d13e      	bne.n	800ab04 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	881a      	ldrh	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa96:	1c9a      	adds	r2, r3, #2
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aaaa:	e02b      	b.n	800ab04 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d112      	bne.n	800aae0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	881a      	ldrh	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	1c9a      	adds	r2, r3, #2
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	86da      	strh	r2, [r3, #54]	; 0x36
 800aade:	e011      	b.n	800ab04 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aae0:	f7fa fbbc 	bl	800525c <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d803      	bhi.n	800aaf8 <HAL_SPI_Transmit+0x168>
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d102      	bne.n	800aafe <HAL_SPI_Transmit+0x16e>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab02:	e074      	b.n	800abee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1ce      	bne.n	800aaac <HAL_SPI_Transmit+0x11c>
 800ab0e:	e04c      	b.n	800abaa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_SPI_Transmit+0x18e>
 800ab18:	8afb      	ldrh	r3, [r7, #22]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d140      	bne.n	800aba0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	330c      	adds	r3, #12
 800ab28:	7812      	ldrb	r2, [r2, #0]
 800ab2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ab44:	e02c      	b.n	800aba0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d113      	bne.n	800ab7c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	330c      	adds	r3, #12
 800ab5e:	7812      	ldrb	r2, [r2, #0]
 800ab60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	3b01      	subs	r3, #1
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	86da      	strh	r2, [r3, #54]	; 0x36
 800ab7a:	e011      	b.n	800aba0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab7c:	f7fa fb6e 	bl	800525c <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d803      	bhi.n	800ab94 <HAL_SPI_Transmit+0x204>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d102      	bne.n	800ab9a <HAL_SPI_Transmit+0x20a>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab9e:	e026      	b.n	800abee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1cd      	bne.n	800ab46 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 fbda 	bl	800b368 <SPI_EndRxTxTransaction>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2220      	movs	r2, #32
 800abbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abc8:	2300      	movs	r3, #0
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	613b      	str	r3, [r7, #16]
 800abdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	77fb      	strb	r3, [r7, #31]
 800abea:	e000      	b.n	800abee <HAL_SPI_Transmit+0x25e>
  }

error:
 800abec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800abfe:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3720      	adds	r7, #32
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	4613      	mov	r3, r2
 800ac16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac24:	d112      	bne.n	800ac4c <HAL_SPI_Receive+0x44>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10e      	bne.n	800ac4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2204      	movs	r2, #4
 800ac32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 f8f1 	bl	800ae2a <HAL_SPI_TransmitReceive>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	e0ea      	b.n	800ae22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_SPI_Receive+0x52>
 800ac56:	2302      	movs	r3, #2
 800ac58:	e0e3      	b.n	800ae22 <HAL_SPI_Receive+0x21a>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac62:	f7fa fafb 	bl	800525c <HAL_GetTick>
 800ac66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d002      	beq.n	800ac7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ac74:	2302      	movs	r3, #2
 800ac76:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac78:	e0ca      	b.n	800ae10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <HAL_SPI_Receive+0x7e>
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac8a:	e0c1      	b.n	800ae10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2204      	movs	r2, #4
 800ac90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	88fa      	ldrh	r2, [r7, #6]
 800aca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	88fa      	ldrh	r2, [r7, #6]
 800acaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acd2:	d10f      	bne.n	800acf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ace2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfe:	2b40      	cmp	r3, #64	; 0x40
 800ad00:	d007      	beq.n	800ad12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d162      	bne.n	800ade0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ad1a:	e02e      	b.n	800ad7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d115      	bne.n	800ad56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f103 020c 	add.w	r2, r3, #12
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	7812      	ldrb	r2, [r2, #0]
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad54:	e011      	b.n	800ad7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad56:	f7fa fa81 	bl	800525c <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d803      	bhi.n	800ad6e <HAL_SPI_Receive+0x166>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6c:	d102      	bne.n	800ad74 <HAL_SPI_Receive+0x16c>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800ad74:	2303      	movs	r3, #3
 800ad76:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ad78:	e04a      	b.n	800ae10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1cb      	bne.n	800ad1c <HAL_SPI_Receive+0x114>
 800ad84:	e031      	b.n	800adea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f003 0301 	and.w	r3, r3, #1
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d113      	bne.n	800adbc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9e:	b292      	uxth	r2, r2
 800ada0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	1c9a      	adds	r2, r3, #2
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3b01      	subs	r3, #1
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adba:	e011      	b.n	800ade0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adbc:	f7fa fa4e 	bl	800525c <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d803      	bhi.n	800add4 <HAL_SPI_Receive+0x1cc>
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add2:	d102      	bne.n	800adda <HAL_SPI_Receive+0x1d2>
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800adde:	e017      	b.n	800ae10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1cd      	bne.n	800ad86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 fa54 	bl	800b29c <SPI_EndRxTransaction>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2220      	movs	r2, #32
 800adfe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	75fb      	strb	r3, [r7, #23]
 800ae0c:	e000      	b.n	800ae10 <HAL_SPI_Receive+0x208>
  }

error :
 800ae0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b08c      	sub	sp, #48	; 0x30
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
 800ae36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d101      	bne.n	800ae50 <HAL_SPI_TransmitReceive+0x26>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e18a      	b.n	800b166 <HAL_SPI_TransmitReceive+0x33c>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae58:	f7fa fa00 	bl	800525c <HAL_GetTick>
 800ae5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae6e:	887b      	ldrh	r3, [r7, #2]
 800ae70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d00f      	beq.n	800ae9a <HAL_SPI_TransmitReceive+0x70>
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae80:	d107      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d103      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x68>
 800ae8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d003      	beq.n	800ae9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ae92:	2302      	movs	r3, #2
 800ae94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae98:	e15b      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <HAL_SPI_TransmitReceive+0x82>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <HAL_SPI_TransmitReceive+0x82>
 800aea6:	887b      	ldrh	r3, [r7, #2]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d103      	bne.n	800aeb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aeb2:	e14e      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d003      	beq.n	800aec8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2205      	movs	r2, #5
 800aec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	887a      	ldrh	r2, [r7, #2]
 800aed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	887a      	ldrh	r2, [r7, #2]
 800aede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	887a      	ldrh	r2, [r7, #2]
 800aeea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	887a      	ldrh	r2, [r7, #2]
 800aef0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af08:	2b40      	cmp	r3, #64	; 0x40
 800af0a:	d007      	beq.n	800af1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af24:	d178      	bne.n	800b018 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <HAL_SPI_TransmitReceive+0x10a>
 800af2e:	8b7b      	ldrh	r3, [r7, #26]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d166      	bne.n	800b002 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af38:	881a      	ldrh	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	1c9a      	adds	r2, r3, #2
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af4e:	b29b      	uxth	r3, r3
 800af50:	3b01      	subs	r3, #1
 800af52:	b29a      	uxth	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af58:	e053      	b.n	800b002 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b02      	cmp	r3, #2
 800af66:	d11b      	bne.n	800afa0 <HAL_SPI_TransmitReceive+0x176>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d016      	beq.n	800afa0 <HAL_SPI_TransmitReceive+0x176>
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	2b01      	cmp	r3, #1
 800af76:	d113      	bne.n	800afa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	881a      	ldrh	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	1c9a      	adds	r2, r3, #2
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d119      	bne.n	800afe2 <HAL_SPI_TransmitReceive+0x1b8>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d014      	beq.n	800afe2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc2:	b292      	uxth	r2, r2
 800afc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afca:	1c9a      	adds	r2, r3, #2
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	3b01      	subs	r3, #1
 800afd8:	b29a      	uxth	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800afde:	2301      	movs	r3, #1
 800afe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800afe2:	f7fa f93b 	bl	800525c <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afee:	429a      	cmp	r2, r3
 800aff0:	d807      	bhi.n	800b002 <HAL_SPI_TransmitReceive+0x1d8>
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff8:	d003      	beq.n	800b002 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b000:	e0a7      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b006:	b29b      	uxth	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1a6      	bne.n	800af5a <HAL_SPI_TransmitReceive+0x130>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b010:	b29b      	uxth	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1a1      	bne.n	800af5a <HAL_SPI_TransmitReceive+0x130>
 800b016:	e07c      	b.n	800b112 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <HAL_SPI_TransmitReceive+0x1fc>
 800b020:	8b7b      	ldrh	r3, [r7, #26]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d16b      	bne.n	800b0fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	330c      	adds	r3, #12
 800b030:	7812      	ldrb	r2, [r2, #0]
 800b032:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b042:	b29b      	uxth	r3, r3
 800b044:	3b01      	subs	r3, #1
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b04c:	e057      	b.n	800b0fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d11c      	bne.n	800b096 <HAL_SPI_TransmitReceive+0x26c>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b060:	b29b      	uxth	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d017      	beq.n	800b096 <HAL_SPI_TransmitReceive+0x26c>
 800b066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d114      	bne.n	800b096 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	7812      	ldrb	r2, [r2, #0]
 800b078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d119      	bne.n	800b0d8 <HAL_SPI_TransmitReceive+0x2ae>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d014      	beq.n	800b0d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	b2d2      	uxtb	r2, r2
 800b0ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0d8:	f7fa f8c0 	bl	800525c <HAL_GetTick>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d803      	bhi.n	800b0f0 <HAL_SPI_TransmitReceive+0x2c6>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ee:	d102      	bne.n	800b0f6 <HAL_SPI_TransmitReceive+0x2cc>
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d103      	bne.n	800b0fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b0fc:	e029      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b102:	b29b      	uxth	r3, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1a2      	bne.n	800b04e <HAL_SPI_TransmitReceive+0x224>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d19d      	bne.n	800b04e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 f926 	bl	800b368 <SPI_EndRxTxTransaction>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2220      	movs	r2, #32
 800b12c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b12e:	e010      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10b      	bne.n	800b150 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b138:	2300      	movs	r3, #0
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	e000      	b.n	800b152 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b150:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b166:	4618      	mov	r0, r3
 800b168:	3730      	adds	r7, #48	; 0x30
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b17c:	b2db      	uxtb	r3, r3
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	4613      	mov	r3, r2
 800b19a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b19c:	f7fa f85e 	bl	800525c <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1ac:	f7fa f856 	bl	800525c <HAL_GetTick>
 800b1b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1b2:	4b39      	ldr	r3, [pc, #228]	; (800b298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	015b      	lsls	r3, r3, #5
 800b1b8:	0d1b      	lsrs	r3, r3, #20
 800b1ba:	69fa      	ldr	r2, [r7, #28]
 800b1bc:	fb02 f303 	mul.w	r3, r2, r3
 800b1c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1c2:	e054      	b.n	800b26e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ca:	d050      	beq.n	800b26e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1cc:	f7fa f846 	bl	800525c <HAL_GetTick>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d902      	bls.n	800b1e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d13d      	bne.n	800b25e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b1f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1fa:	d111      	bne.n	800b220 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b204:	d004      	beq.n	800b210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b20e:	d107      	bne.n	800b220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b21e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b228:	d10f      	bne.n	800b24a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e017      	b.n	800b28e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4013      	ands	r3, r2
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	bf0c      	ite	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	2300      	movne	r3, #0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	461a      	mov	r2, r3
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d19b      	bne.n	800b1c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200000a0 	.word	0x200000a0

0800b29c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2b0:	d111      	bne.n	800b2d6 <SPI_EndRxTransaction+0x3a>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ba:	d004      	beq.n	800b2c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2c4:	d107      	bne.n	800b2d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2de:	d12a      	bne.n	800b336 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e8:	d012      	beq.n	800b310 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2180      	movs	r1, #128	; 0x80
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff ff49 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d02d      	beq.n	800b35c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b304:	f043 0220 	orr.w	r2, r3, #32
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e026      	b.n	800b35e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2200      	movs	r2, #0
 800b318:	2101      	movs	r1, #1
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7ff ff36 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d01a      	beq.n	800b35c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32a:	f043 0220 	orr.w	r2, r3, #32
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e013      	b.n	800b35e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2200      	movs	r2, #0
 800b33e:	2101      	movs	r1, #1
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff ff23 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d007      	beq.n	800b35c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b350:	f043 0220 	orr.w	r2, r3, #32
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e000      	b.n	800b35e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af02      	add	r7, sp, #8
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b374:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <SPI_EndRxTxTransaction+0x7c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a1b      	ldr	r2, [pc, #108]	; (800b3e8 <SPI_EndRxTxTransaction+0x80>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	0d5b      	lsrs	r3, r3, #21
 800b380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b392:	d112      	bne.n	800b3ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2200      	movs	r2, #0
 800b39c:	2180      	movs	r1, #128	; 0x80
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7ff fef4 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d016      	beq.n	800b3d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ae:	f043 0220 	orr.w	r2, r3, #32
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e00f      	b.n	800b3da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d0:	2b80      	cmp	r3, #128	; 0x80
 800b3d2:	d0f2      	beq.n	800b3ba <SPI_EndRxTxTransaction+0x52>
 800b3d4:	e000      	b.n	800b3d8 <SPI_EndRxTxTransaction+0x70>
        break;
 800b3d6:	bf00      	nop
  }

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200000a0 	.word	0x200000a0
 800b3e8:	165e9f81 	.word	0x165e9f81

0800b3ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e041      	b.n	800b482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7f9 fa36 	bl	8004884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3304      	adds	r3, #4
 800b428:	4619      	mov	r1, r3
 800b42a:	4610      	mov	r0, r2
 800b42c:	f000 fa96 	bl	800b95c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d001      	beq.n	800b4a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e04e      	b.n	800b542 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68da      	ldr	r2, [r3, #12]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0201 	orr.w	r2, r2, #1
 800b4ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a23      	ldr	r2, [pc, #140]	; (800b550 <HAL_TIM_Base_Start_IT+0xc4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d022      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ce:	d01d      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a1f      	ldr	r2, [pc, #124]	; (800b554 <HAL_TIM_Base_Start_IT+0xc8>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d018      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <HAL_TIM_Base_Start_IT+0xcc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d013      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a1c      	ldr	r2, [pc, #112]	; (800b55c <HAL_TIM_Base_Start_IT+0xd0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00e      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a1b      	ldr	r2, [pc, #108]	; (800b560 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d009      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a19      	ldr	r2, [pc, #100]	; (800b564 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d004      	beq.n	800b50c <HAL_TIM_Base_Start_IT+0x80>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a18      	ldr	r2, [pc, #96]	; (800b568 <HAL_TIM_Base_Start_IT+0xdc>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d111      	bne.n	800b530 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b06      	cmp	r3, #6
 800b51c:	d010      	beq.n	800b540 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f042 0201 	orr.w	r2, r2, #1
 800b52c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52e:	e007      	b.n	800b540 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f042 0201 	orr.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40010000 	.word	0x40010000
 800b554:	40000400 	.word	0x40000400
 800b558:	40000800 	.word	0x40000800
 800b55c:	40000c00 	.word	0x40000c00
 800b560:	40010400 	.word	0x40010400
 800b564:	40014000 	.word	0x40014000
 800b568:	40001800 	.word	0x40001800

0800b56c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0302 	and.w	r3, r3, #2
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d122      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d11b      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f06f 0202 	mvn.w	r2, #2
 800b598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f003 0303 	and.w	r3, r3, #3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f9b5 	bl	800b91e <HAL_TIM_IC_CaptureCallback>
 800b5b4:	e005      	b.n	800b5c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f9a7 	bl	800b90a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f9b8 	bl	800b932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d122      	bne.n	800b61c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d11b      	bne.n	800b61c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0204 	mvn.w	r2, #4
 800b5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f98b 	bl	800b91e <HAL_TIM_IC_CaptureCallback>
 800b608:	e005      	b.n	800b616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f97d 	bl	800b90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f98e 	bl	800b932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0308 	and.w	r3, r3, #8
 800b626:	2b08      	cmp	r3, #8
 800b628:	d122      	bne.n	800b670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 0308 	and.w	r3, r3, #8
 800b634:	2b08      	cmp	r3, #8
 800b636:	d11b      	bne.n	800b670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f06f 0208 	mvn.w	r2, #8
 800b640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2204      	movs	r2, #4
 800b646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f961 	bl	800b91e <HAL_TIM_IC_CaptureCallback>
 800b65c:	e005      	b.n	800b66a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f953 	bl	800b90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f964 	bl	800b932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0310 	and.w	r3, r3, #16
 800b67a:	2b10      	cmp	r3, #16
 800b67c:	d122      	bne.n	800b6c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f003 0310 	and.w	r3, r3, #16
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d11b      	bne.n	800b6c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f06f 0210 	mvn.w	r2, #16
 800b694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2208      	movs	r2, #8
 800b69a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f937 	bl	800b91e <HAL_TIM_IC_CaptureCallback>
 800b6b0:	e005      	b.n	800b6be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f929 	bl	800b90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f93a 	bl	800b932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d10e      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d107      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f06f 0201 	mvn.w	r2, #1
 800b6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7f7 f9a4 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fa:	2b80      	cmp	r3, #128	; 0x80
 800b6fc:	d10e      	bne.n	800b71c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b708:	2b80      	cmp	r3, #128	; 0x80
 800b70a:	d107      	bne.n	800b71c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fae0 	bl	800bcdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d10e      	bne.n	800b748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b734:	2b40      	cmp	r3, #64	; 0x40
 800b736:	d107      	bne.n	800b748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f8ff 	bl	800b946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	f003 0320 	and.w	r3, r3, #32
 800b752:	2b20      	cmp	r3, #32
 800b754:	d10e      	bne.n	800b774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f003 0320 	and.w	r3, r3, #32
 800b760:	2b20      	cmp	r3, #32
 800b762:	d107      	bne.n	800b774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f06f 0220 	mvn.w	r2, #32
 800b76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 faaa 	bl	800bcc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_TIM_ConfigClockSource+0x1c>
 800b794:	2302      	movs	r3, #2
 800b796:	e0b4      	b.n	800b902 <HAL_TIM_ConfigClockSource+0x186>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b7b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d0:	d03e      	beq.n	800b850 <HAL_TIM_ConfigClockSource+0xd4>
 800b7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d6:	f200 8087 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7de:	f000 8086 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x172>
 800b7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e6:	d87f      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e8:	2b70      	cmp	r3, #112	; 0x70
 800b7ea:	d01a      	beq.n	800b822 <HAL_TIM_ConfigClockSource+0xa6>
 800b7ec:	2b70      	cmp	r3, #112	; 0x70
 800b7ee:	d87b      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f0:	2b60      	cmp	r3, #96	; 0x60
 800b7f2:	d050      	beq.n	800b896 <HAL_TIM_ConfigClockSource+0x11a>
 800b7f4:	2b60      	cmp	r3, #96	; 0x60
 800b7f6:	d877      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f8:	2b50      	cmp	r3, #80	; 0x50
 800b7fa:	d03c      	beq.n	800b876 <HAL_TIM_ConfigClockSource+0xfa>
 800b7fc:	2b50      	cmp	r3, #80	; 0x50
 800b7fe:	d873      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b800:	2b40      	cmp	r3, #64	; 0x40
 800b802:	d058      	beq.n	800b8b6 <HAL_TIM_ConfigClockSource+0x13a>
 800b804:	2b40      	cmp	r3, #64	; 0x40
 800b806:	d86f      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b808:	2b30      	cmp	r3, #48	; 0x30
 800b80a:	d064      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b80c:	2b30      	cmp	r3, #48	; 0x30
 800b80e:	d86b      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b810:	2b20      	cmp	r3, #32
 800b812:	d060      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b814:	2b20      	cmp	r3, #32
 800b816:	d867      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d05c      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b81c:	2b10      	cmp	r3, #16
 800b81e:	d05a      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x15a>
 800b820:	e062      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	6899      	ldr	r1, [r3, #8]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f000 f9ad 	bl	800bb90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	609a      	str	r2, [r3, #8]
      break;
 800b84e:	e04f      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	6899      	ldr	r1, [r3, #8]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f000 f996 	bl	800bb90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b872:	609a      	str	r2, [r3, #8]
      break;
 800b874:	e03c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6818      	ldr	r0, [r3, #0]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	6859      	ldr	r1, [r3, #4]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	461a      	mov	r2, r3
 800b884:	f000 f90a 	bl	800ba9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2150      	movs	r1, #80	; 0x50
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f963 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b894:	e02c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6859      	ldr	r1, [r3, #4]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f000 f929 	bl	800bafa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2160      	movs	r1, #96	; 0x60
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 f953 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8b4:	e01c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	6859      	ldr	r1, [r3, #4]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f000 f8ea 	bl	800ba9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2140      	movs	r1, #64	; 0x40
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 f943 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8d4:	e00c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	f000 f93a 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8e6:	e003      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ec:	e000      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b912:	bf00      	nop
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b932:	b480      	push	{r7}
 800b934:	b083      	sub	sp, #12
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b93a:	bf00      	nop
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b94e:	bf00      	nop
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
	...

0800b95c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a40      	ldr	r2, [pc, #256]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d013      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97a:	d00f      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a3d      	ldr	r2, [pc, #244]	; (800ba74 <TIM_Base_SetConfig+0x118>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00b      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a3c      	ldr	r2, [pc, #240]	; (800ba78 <TIM_Base_SetConfig+0x11c>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d007      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a3b      	ldr	r2, [pc, #236]	; (800ba7c <TIM_Base_SetConfig+0x120>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d003      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a3a      	ldr	r2, [pc, #232]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d108      	bne.n	800b9ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2f      	ldr	r2, [pc, #188]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d02b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9bc:	d027      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a2c      	ldr	r2, [pc, #176]	; (800ba74 <TIM_Base_SetConfig+0x118>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d023      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a2b      	ldr	r2, [pc, #172]	; (800ba78 <TIM_Base_SetConfig+0x11c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d01f      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a2a      	ldr	r2, [pc, #168]	; (800ba7c <TIM_Base_SetConfig+0x120>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d01b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a29      	ldr	r2, [pc, #164]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d017      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a28      	ldr	r2, [pc, #160]	; (800ba84 <TIM_Base_SetConfig+0x128>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d013      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a27      	ldr	r2, [pc, #156]	; (800ba88 <TIM_Base_SetConfig+0x12c>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d00f      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a26      	ldr	r2, [pc, #152]	; (800ba8c <TIM_Base_SetConfig+0x130>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a25      	ldr	r2, [pc, #148]	; (800ba90 <TIM_Base_SetConfig+0x134>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d007      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a24      	ldr	r2, [pc, #144]	; (800ba94 <TIM_Base_SetConfig+0x138>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d003      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a23      	ldr	r2, [pc, #140]	; (800ba98 <TIM_Base_SetConfig+0x13c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d108      	bne.n	800ba20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a0a      	ldr	r2, [pc, #40]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d003      	beq.n	800ba54 <TIM_Base_SetConfig+0xf8>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d103      	bne.n	800ba5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	691a      	ldr	r2, [r3, #16]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	615a      	str	r2, [r3, #20]
}
 800ba62:	bf00      	nop
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	40010000 	.word	0x40010000
 800ba74:	40000400 	.word	0x40000400
 800ba78:	40000800 	.word	0x40000800
 800ba7c:	40000c00 	.word	0x40000c00
 800ba80:	40010400 	.word	0x40010400
 800ba84:	40014000 	.word	0x40014000
 800ba88:	40014400 	.word	0x40014400
 800ba8c:	40014800 	.word	0x40014800
 800ba90:	40001800 	.word	0x40001800
 800ba94:	40001c00 	.word	0x40001c00
 800ba98:	40002000 	.word	0x40002000

0800ba9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f023 0201 	bic.w	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	011b      	lsls	r3, r3, #4
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f023 030a 	bic.w	r3, r3, #10
 800bad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4313      	orrs	r3, r2
 800bae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	621a      	str	r2, [r3, #32]
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b087      	sub	sp, #28
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	f023 0210 	bic.w	r2, r3, #16
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	031b      	lsls	r3, r3, #12
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	621a      	str	r2, [r3, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b085      	sub	sp, #20
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	f043 0307 	orr.w	r3, r3, #7
 800bb7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	609a      	str	r2, [r3, #8]
}
 800bb84:	bf00      	nop
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	021a      	lsls	r2, r3, #8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	609a      	str	r2, [r3, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	371c      	adds	r7, #28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e05a      	b.n	800bc9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a21      	ldr	r2, [pc, #132]	; (800bcac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d022      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc34:	d01d      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a1d      	ldr	r2, [pc, #116]	; (800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d018      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a1b      	ldr	r2, [pc, #108]	; (800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d013      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a1a      	ldr	r2, [pc, #104]	; (800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d00e      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a18      	ldr	r2, [pc, #96]	; (800bcbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d009      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a17      	ldr	r2, [pc, #92]	; (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d004      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d10c      	bne.n	800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40010000 	.word	0x40010000
 800bcb0:	40000400 	.word	0x40000400
 800bcb4:	40000800 	.word	0x40000800
 800bcb8:	40000c00 	.word	0x40000c00
 800bcbc:	40010400 	.word	0x40010400
 800bcc0:	40014000 	.word	0x40014000
 800bcc4:	40001800 	.word	0x40001800

0800bcc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e03f      	b.n	800bd82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7f8 fdd6 	bl	80048c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2224      	movs	r2, #36	; 0x24
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f929 	bl	800bf8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	691a      	ldr	r2, [r3, #16]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	695a      	ldr	r2, [r3, #20]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68da      	ldr	r2, [r3, #12]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b08a      	sub	sp, #40	; 0x28
 800bd8e:	af02      	add	r7, sp, #8
 800bd90:	60f8      	str	r0, [r7, #12]
 800bd92:	60b9      	str	r1, [r7, #8]
 800bd94:	603b      	str	r3, [r7, #0]
 800bd96:	4613      	mov	r3, r2
 800bd98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d17c      	bne.n	800bea4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <HAL_UART_Transmit+0x2c>
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e075      	b.n	800bea6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_UART_Transmit+0x3e>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e06e      	b.n	800bea6 <HAL_UART_Transmit+0x11c>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2221      	movs	r2, #33	; 0x21
 800bdda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdde:	f7f9 fa3d 	bl	800525c <HAL_GetTick>
 800bde2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	88fa      	ldrh	r2, [r7, #6]
 800bde8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	88fa      	ldrh	r2, [r7, #6]
 800bdee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf8:	d108      	bne.n	800be0c <HAL_UART_Transmit+0x82>
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d104      	bne.n	800be0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	e003      	b.n	800be14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800be1c:	e02a      	b.n	800be74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	2180      	movs	r1, #128	; 0x80
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f840 	bl	800beae <UART_WaitOnFlagUntilTimeout>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	e036      	b.n	800bea6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	3302      	adds	r3, #2
 800be52:	61bb      	str	r3, [r7, #24]
 800be54:	e007      	b.n	800be66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	781a      	ldrb	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	3301      	adds	r3, #1
 800be64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1cf      	bne.n	800be1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	9300      	str	r3, [sp, #0]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	2140      	movs	r1, #64	; 0x40
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f810 	bl	800beae <UART_WaitOnFlagUntilTimeout>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e006      	b.n	800bea6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2220      	movs	r2, #32
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e000      	b.n	800bea6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3720      	adds	r7, #32
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b090      	sub	sp, #64	; 0x40
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	603b      	str	r3, [r7, #0]
 800beba:	4613      	mov	r3, r2
 800bebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bebe:	e050      	b.n	800bf62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec6:	d04c      	beq.n	800bf62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <UART_WaitOnFlagUntilTimeout+0x30>
 800bece:	f7f9 f9c5 	bl	800525c <HAL_GetTick>
 800bed2:	4602      	mov	r2, r0
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beda:	429a      	cmp	r2, r3
 800bedc:	d241      	bcs.n	800bf62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	e853 3f00 	ldrex	r3, [r3]
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	330c      	adds	r3, #12
 800befc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800befe:	637a      	str	r2, [r7, #52]	; 0x34
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf06:	e841 2300 	strex	r3, r2, [r1]
 800bf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1e5      	bne.n	800bede <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3314      	adds	r3, #20
 800bf18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	e853 3f00 	ldrex	r3, [r3]
 800bf20:	613b      	str	r3, [r7, #16]
   return(result);
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f023 0301 	bic.w	r3, r3, #1
 800bf28:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3314      	adds	r3, #20
 800bf30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf32:	623a      	str	r2, [r7, #32]
 800bf34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	69f9      	ldr	r1, [r7, #28]
 800bf38:	6a3a      	ldr	r2, [r7, #32]
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e5      	bne.n	800bf12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2220      	movs	r2, #32
 800bf4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2220      	movs	r2, #32
 800bf52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e00f      	b.n	800bf82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	bf0c      	ite	eq
 800bf72:	2301      	moveq	r3, #1
 800bf74:	2300      	movne	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d09f      	beq.n	800bec0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3740      	adds	r7, #64	; 0x40
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf90:	b0c0      	sub	sp, #256	; 0x100
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa8:	68d9      	ldr	r1, [r3, #12]
 800bfaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	ea40 0301 	orr.w	r3, r0, r1
 800bfb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bfb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bfe4:	f021 010c 	bic.w	r1, r1, #12
 800bfe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bff2:	430b      	orrs	r3, r1
 800bff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c006:	6999      	ldr	r1, [r3, #24]
 800c008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	ea40 0301 	orr.w	r3, r0, r1
 800c012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	4b8f      	ldr	r3, [pc, #572]	; (800c258 <UART_SetConfig+0x2cc>)
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d005      	beq.n	800c02c <UART_SetConfig+0xa0>
 800c020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	4b8d      	ldr	r3, [pc, #564]	; (800c25c <UART_SetConfig+0x2d0>)
 800c028:	429a      	cmp	r2, r3
 800c02a:	d104      	bne.n	800c036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c02c:	f7fe f968 	bl	800a300 <HAL_RCC_GetPCLK2Freq>
 800c030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c034:	e003      	b.n	800c03e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c036:	f7fe f94f 	bl	800a2d8 <HAL_RCC_GetPCLK1Freq>
 800c03a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c048:	f040 810c 	bne.w	800c264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c050:	2200      	movs	r2, #0
 800c052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c05a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	1891      	adds	r1, r2, r2
 800c064:	65b9      	str	r1, [r7, #88]	; 0x58
 800c066:	415b      	adcs	r3, r3
 800c068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c06a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c06e:	4621      	mov	r1, r4
 800c070:	eb12 0801 	adds.w	r8, r2, r1
 800c074:	4629      	mov	r1, r5
 800c076:	eb43 0901 	adc.w	r9, r3, r1
 800c07a:	f04f 0200 	mov.w	r2, #0
 800c07e:	f04f 0300 	mov.w	r3, #0
 800c082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c08a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c08e:	4690      	mov	r8, r2
 800c090:	4699      	mov	r9, r3
 800c092:	4623      	mov	r3, r4
 800c094:	eb18 0303 	adds.w	r3, r8, r3
 800c098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c09c:	462b      	mov	r3, r5
 800c09e:	eb49 0303 	adc.w	r3, r9, r3
 800c0a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c0b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c0b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	18db      	adds	r3, r3, r3
 800c0be:	653b      	str	r3, [r7, #80]	; 0x50
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	eb42 0303 	adc.w	r3, r2, r3
 800c0c6:	657b      	str	r3, [r7, #84]	; 0x54
 800c0c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c0cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c0d0:	f7f4 fd84 	bl	8000bdc <__aeabi_uldivmod>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4b61      	ldr	r3, [pc, #388]	; (800c260 <UART_SetConfig+0x2d4>)
 800c0da:	fba3 2302 	umull	r2, r3, r3, r2
 800c0de:	095b      	lsrs	r3, r3, #5
 800c0e0:	011c      	lsls	r4, r3, #4
 800c0e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c0f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	1891      	adds	r1, r2, r2
 800c0fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800c0fc:	415b      	adcs	r3, r3
 800c0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c104:	4641      	mov	r1, r8
 800c106:	eb12 0a01 	adds.w	sl, r2, r1
 800c10a:	4649      	mov	r1, r9
 800c10c:	eb43 0b01 	adc.w	fp, r3, r1
 800c110:	f04f 0200 	mov.w	r2, #0
 800c114:	f04f 0300 	mov.w	r3, #0
 800c118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c11c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c124:	4692      	mov	sl, r2
 800c126:	469b      	mov	fp, r3
 800c128:	4643      	mov	r3, r8
 800c12a:	eb1a 0303 	adds.w	r3, sl, r3
 800c12e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c132:	464b      	mov	r3, r9
 800c134:	eb4b 0303 	adc.w	r3, fp, r3
 800c138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c14c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c150:	460b      	mov	r3, r1
 800c152:	18db      	adds	r3, r3, r3
 800c154:	643b      	str	r3, [r7, #64]	; 0x40
 800c156:	4613      	mov	r3, r2
 800c158:	eb42 0303 	adc.w	r3, r2, r3
 800c15c:	647b      	str	r3, [r7, #68]	; 0x44
 800c15e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c166:	f7f4 fd39 	bl	8000bdc <__aeabi_uldivmod>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	4b3b      	ldr	r3, [pc, #236]	; (800c260 <UART_SetConfig+0x2d4>)
 800c172:	fba3 2301 	umull	r2, r3, r3, r1
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	2264      	movs	r2, #100	; 0x64
 800c17a:	fb02 f303 	mul.w	r3, r2, r3
 800c17e:	1acb      	subs	r3, r1, r3
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c186:	4b36      	ldr	r3, [pc, #216]	; (800c260 <UART_SetConfig+0x2d4>)
 800c188:	fba3 2302 	umull	r2, r3, r3, r2
 800c18c:	095b      	lsrs	r3, r3, #5
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c194:	441c      	add	r4, r3
 800c196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c1a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c1a8:	4642      	mov	r2, r8
 800c1aa:	464b      	mov	r3, r9
 800c1ac:	1891      	adds	r1, r2, r2
 800c1ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1b0:	415b      	adcs	r3, r3
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	1851      	adds	r1, r2, r1
 800c1bc:	6339      	str	r1, [r7, #48]	; 0x30
 800c1be:	4649      	mov	r1, r9
 800c1c0:	414b      	adcs	r3, r1
 800c1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c4:	f04f 0200 	mov.w	r2, #0
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	00cb      	lsls	r3, r1, #3
 800c1d4:	4651      	mov	r1, sl
 800c1d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1da:	4651      	mov	r1, sl
 800c1dc:	00ca      	lsls	r2, r1, #3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	189b      	adds	r3, r3, r2
 800c1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	460a      	mov	r2, r1
 800c1f0:	eb42 0303 	adc.w	r3, r2, r3
 800c1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c20c:	460b      	mov	r3, r1
 800c20e:	18db      	adds	r3, r3, r3
 800c210:	62bb      	str	r3, [r7, #40]	; 0x28
 800c212:	4613      	mov	r3, r2
 800c214:	eb42 0303 	adc.w	r3, r2, r3
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c21a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c21e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c222:	f7f4 fcdb 	bl	8000bdc <__aeabi_uldivmod>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <UART_SetConfig+0x2d4>)
 800c22c:	fba3 1302 	umull	r1, r3, r3, r2
 800c230:	095b      	lsrs	r3, r3, #5
 800c232:	2164      	movs	r1, #100	; 0x64
 800c234:	fb01 f303 	mul.w	r3, r1, r3
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	3332      	adds	r3, #50	; 0x32
 800c23e:	4a08      	ldr	r2, [pc, #32]	; (800c260 <UART_SetConfig+0x2d4>)
 800c240:	fba2 2303 	umull	r2, r3, r2, r3
 800c244:	095b      	lsrs	r3, r3, #5
 800c246:	f003 0207 	and.w	r2, r3, #7
 800c24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4422      	add	r2, r4
 800c252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c254:	e105      	b.n	800c462 <UART_SetConfig+0x4d6>
 800c256:	bf00      	nop
 800c258:	40011000 	.word	0x40011000
 800c25c:	40011400 	.word	0x40011400
 800c260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c268:	2200      	movs	r2, #0
 800c26a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c26e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c276:	4642      	mov	r2, r8
 800c278:	464b      	mov	r3, r9
 800c27a:	1891      	adds	r1, r2, r2
 800c27c:	6239      	str	r1, [r7, #32]
 800c27e:	415b      	adcs	r3, r3
 800c280:	627b      	str	r3, [r7, #36]	; 0x24
 800c282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c286:	4641      	mov	r1, r8
 800c288:	1854      	adds	r4, r2, r1
 800c28a:	4649      	mov	r1, r9
 800c28c:	eb43 0501 	adc.w	r5, r3, r1
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	00eb      	lsls	r3, r5, #3
 800c29a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c29e:	00e2      	lsls	r2, r4, #3
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	461d      	mov	r5, r3
 800c2a4:	4643      	mov	r3, r8
 800c2a6:	18e3      	adds	r3, r4, r3
 800c2a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2ac:	464b      	mov	r3, r9
 800c2ae:	eb45 0303 	adc.w	r3, r5, r3
 800c2b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	f04f 0300 	mov.w	r3, #0
 800c2ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	008b      	lsls	r3, r1, #2
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2dc:	4621      	mov	r1, r4
 800c2de:	008a      	lsls	r2, r1, #2
 800c2e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c2e4:	f7f4 fc7a 	bl	8000bdc <__aeabi_uldivmod>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4b60      	ldr	r3, [pc, #384]	; (800c470 <UART_SetConfig+0x4e4>)
 800c2ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c2f2:	095b      	lsrs	r3, r3, #5
 800c2f4:	011c      	lsls	r4, r3, #4
 800c2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c308:	4642      	mov	r2, r8
 800c30a:	464b      	mov	r3, r9
 800c30c:	1891      	adds	r1, r2, r2
 800c30e:	61b9      	str	r1, [r7, #24]
 800c310:	415b      	adcs	r3, r3
 800c312:	61fb      	str	r3, [r7, #28]
 800c314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c318:	4641      	mov	r1, r8
 800c31a:	1851      	adds	r1, r2, r1
 800c31c:	6139      	str	r1, [r7, #16]
 800c31e:	4649      	mov	r1, r9
 800c320:	414b      	adcs	r3, r1
 800c322:	617b      	str	r3, [r7, #20]
 800c324:	f04f 0200 	mov.w	r2, #0
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c330:	4659      	mov	r1, fp
 800c332:	00cb      	lsls	r3, r1, #3
 800c334:	4651      	mov	r1, sl
 800c336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c33a:	4651      	mov	r1, sl
 800c33c:	00ca      	lsls	r2, r1, #3
 800c33e:	4610      	mov	r0, r2
 800c340:	4619      	mov	r1, r3
 800c342:	4603      	mov	r3, r0
 800c344:	4642      	mov	r2, r8
 800c346:	189b      	adds	r3, r3, r2
 800c348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c34c:	464b      	mov	r3, r9
 800c34e:	460a      	mov	r2, r1
 800c350:	eb42 0303 	adc.w	r3, r2, r3
 800c354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	67bb      	str	r3, [r7, #120]	; 0x78
 800c362:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c364:	f04f 0200 	mov.w	r2, #0
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c370:	4649      	mov	r1, r9
 800c372:	008b      	lsls	r3, r1, #2
 800c374:	4641      	mov	r1, r8
 800c376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c37a:	4641      	mov	r1, r8
 800c37c:	008a      	lsls	r2, r1, #2
 800c37e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c382:	f7f4 fc2b 	bl	8000bdc <__aeabi_uldivmod>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4b39      	ldr	r3, [pc, #228]	; (800c470 <UART_SetConfig+0x4e4>)
 800c38c:	fba3 1302 	umull	r1, r3, r3, r2
 800c390:	095b      	lsrs	r3, r3, #5
 800c392:	2164      	movs	r1, #100	; 0x64
 800c394:	fb01 f303 	mul.w	r3, r1, r3
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	3332      	adds	r3, #50	; 0x32
 800c39e:	4a34      	ldr	r2, [pc, #208]	; (800c470 <UART_SetConfig+0x4e4>)
 800c3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a4:	095b      	lsrs	r3, r3, #5
 800c3a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3aa:	441c      	add	r4, r3
 800c3ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	673b      	str	r3, [r7, #112]	; 0x70
 800c3b4:	677a      	str	r2, [r7, #116]	; 0x74
 800c3b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	464b      	mov	r3, r9
 800c3be:	1891      	adds	r1, r2, r2
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	415b      	adcs	r3, r3
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3ca:	4641      	mov	r1, r8
 800c3cc:	1851      	adds	r1, r2, r1
 800c3ce:	6039      	str	r1, [r7, #0]
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	414b      	adcs	r3, r1
 800c3d4:	607b      	str	r3, [r7, #4]
 800c3d6:	f04f 0200 	mov.w	r2, #0
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3e2:	4659      	mov	r1, fp
 800c3e4:	00cb      	lsls	r3, r1, #3
 800c3e6:	4651      	mov	r1, sl
 800c3e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3ec:	4651      	mov	r1, sl
 800c3ee:	00ca      	lsls	r2, r1, #3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	4642      	mov	r2, r8
 800c3f8:	189b      	adds	r3, r3, r2
 800c3fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3fc:	464b      	mov	r3, r9
 800c3fe:	460a      	mov	r2, r1
 800c400:	eb42 0303 	adc.w	r3, r2, r3
 800c404:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	663b      	str	r3, [r7, #96]	; 0x60
 800c410:	667a      	str	r2, [r7, #100]	; 0x64
 800c412:	f04f 0200 	mov.w	r2, #0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c41e:	4649      	mov	r1, r9
 800c420:	008b      	lsls	r3, r1, #2
 800c422:	4641      	mov	r1, r8
 800c424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c428:	4641      	mov	r1, r8
 800c42a:	008a      	lsls	r2, r1, #2
 800c42c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c430:	f7f4 fbd4 	bl	8000bdc <__aeabi_uldivmod>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <UART_SetConfig+0x4e4>)
 800c43a:	fba3 1302 	umull	r1, r3, r3, r2
 800c43e:	095b      	lsrs	r3, r3, #5
 800c440:	2164      	movs	r1, #100	; 0x64
 800c442:	fb01 f303 	mul.w	r3, r1, r3
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	011b      	lsls	r3, r3, #4
 800c44a:	3332      	adds	r3, #50	; 0x32
 800c44c:	4a08      	ldr	r2, [pc, #32]	; (800c470 <UART_SetConfig+0x4e4>)
 800c44e:	fba2 2303 	umull	r2, r3, r2, r3
 800c452:	095b      	lsrs	r3, r3, #5
 800c454:	f003 020f 	and.w	r2, r3, #15
 800c458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4422      	add	r2, r4
 800c460:	609a      	str	r2, [r3, #8]
}
 800c462:	bf00      	nop
 800c464:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c468:	46bd      	mov	sp, r7
 800c46a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c46e:	bf00      	nop
 800c470:	51eb851f 	.word	0x51eb851f

0800c474 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d123      	bne.n	800c4ce <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c48e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	6851      	ldr	r1, [r2, #4]
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	6892      	ldr	r2, [r2, #8]
 800c49a:	4311      	orrs	r1, r2
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	68d2      	ldr	r2, [r2, #12]
 800c4a0:	4311      	orrs	r1, r2
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	6912      	ldr	r2, [r2, #16]
 800c4a6:	4311      	orrs	r1, r2
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	6952      	ldr	r2, [r2, #20]
 800c4ac:	4311      	orrs	r1, r2
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	6992      	ldr	r2, [r2, #24]
 800c4b2:	4311      	orrs	r1, r2
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	69d2      	ldr	r2, [r2, #28]
 800c4b8:	4311      	orrs	r1, r2
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	6a12      	ldr	r2, [r2, #32]
 800c4be:	4311      	orrs	r1, r2
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	e028      	b.n	800c520 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	69d9      	ldr	r1, [r3, #28]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	4319      	orrs	r1, r3
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e4:	430b      	orrs	r3, r1
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c4f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	6851      	ldr	r1, [r2, #4]
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	6892      	ldr	r2, [r2, #8]
 800c500:	4311      	orrs	r1, r2
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	68d2      	ldr	r2, [r2, #12]
 800c506:	4311      	orrs	r1, r2
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	6912      	ldr	r2, [r2, #16]
 800c50c:	4311      	orrs	r1, r2
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	6952      	ldr	r2, [r2, #20]
 800c512:	4311      	orrs	r1, r2
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	6992      	ldr	r2, [r2, #24]
 800c518:	430a      	orrs	r2, r1
 800c51a:	431a      	orrs	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d128      	bne.n	800c592 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	1e59      	subs	r1, r3, #1
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	3b01      	subs	r3, #1
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	4319      	orrs	r1, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	4319      	orrs	r1, r3
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	3b01      	subs	r3, #1
 800c568:	031b      	lsls	r3, r3, #12
 800c56a:	4319      	orrs	r1, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	3b01      	subs	r3, #1
 800c572:	041b      	lsls	r3, r3, #16
 800c574:	4319      	orrs	r1, r3
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	051b      	lsls	r3, r3, #20
 800c57e:	4319      	orrs	r1, r3
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	3b01      	subs	r3, #1
 800c586:	061b      	lsls	r3, r3, #24
 800c588:	430b      	orrs	r3, r1
 800c58a:	431a      	orrs	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	609a      	str	r2, [r3, #8]
 800c590:	e02f      	b.n	800c5f2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c59a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	68d2      	ldr	r2, [r2, #12]
 800c5a2:	3a01      	subs	r2, #1
 800c5a4:	0311      	lsls	r1, r2, #12
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	6952      	ldr	r2, [r2, #20]
 800c5aa:	3a01      	subs	r2, #1
 800c5ac:	0512      	lsls	r2, r2, #20
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	1e59      	subs	r1, r3, #1
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	011b      	lsls	r3, r3, #4
 800c5cc:	4319      	orrs	r1, r3
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	4319      	orrs	r1, r3
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	041b      	lsls	r3, r3, #16
 800c5e0:	4319      	orrs	r1, r3
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	061b      	lsls	r3, r3, #24
 800c5ea:	430b      	orrs	r3, r1
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	0d9b      	lsrs	r3, r3, #22
 800c616:	059b      	lsls	r3, r3, #22
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	6811      	ldr	r1, [r2, #0]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	6852      	ldr	r2, [r2, #4]
 800c620:	4311      	orrs	r1, r2
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	6892      	ldr	r2, [r2, #8]
 800c626:	3a01      	subs	r2, #1
 800c628:	0152      	lsls	r2, r2, #5
 800c62a:	4311      	orrs	r1, r2
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	68d2      	ldr	r2, [r2, #12]
 800c630:	0252      	lsls	r2, r2, #9
 800c632:	430a      	orrs	r2, r1
 800c634:	431a      	orrs	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800c63a:	f7f8 fe0f 	bl	800525c <HAL_GetTick>
 800c63e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c640:	e010      	b.n	800c664 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d00c      	beq.n	800c664 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d007      	beq.n	800c660 <FMC_SDRAM_SendCommand+0x60>
 800c650:	f7f8 fe04 	bl	800525c <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d201      	bcs.n	800c664 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e006      	b.n	800c672 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b20      	cmp	r3, #32
 800c66e:	d0e8      	beq.n	800c642 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800c68c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	0052      	lsls	r2, r2, #1
 800c694:	431a      	orrs	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	f107 001c 	add.w	r0, r7, #28
 800c6b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d122      	bne.n	800c706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d105      	bne.n	800c6fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f9c0 	bl	800ca80 <USB_CoreReset>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
 800c704:	e01a      	b.n	800c73c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f9b4 	bl	800ca80 <USB_CoreReset>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	639a      	str	r2, [r3, #56]	; 0x38
 800c72e:	e005      	b.n	800c73c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d10b      	bne.n	800c75a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f043 0206 	orr.w	r2, r3, #6
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	f043 0220 	orr.w	r2, r3, #32
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c766:	b004      	add	sp, #16
 800c768:	4770      	bx	lr

0800c76a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f043 0201 	orr.w	r2, r3, #1
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f023 0201 	bic.w	r2, r3, #1
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7ca:	78fb      	ldrb	r3, [r7, #3]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d115      	bne.n	800c7fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f7f8 fd49 	bl	8005274 <HAL_Delay>
      ms++;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f93a 	bl	800ca62 <USB_GetMode>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d01e      	beq.n	800c832 <USB_SetCurrentMode+0x84>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b31      	cmp	r3, #49	; 0x31
 800c7f8:	d9f0      	bls.n	800c7dc <USB_SetCurrentMode+0x2e>
 800c7fa:	e01a      	b.n	800c832 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d115      	bne.n	800c82e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c80e:	2001      	movs	r0, #1
 800c810:	f7f8 fd30 	bl	8005274 <HAL_Delay>
      ms++;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3301      	adds	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f921 	bl	800ca62 <USB_GetMode>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d005      	beq.n	800c832 <USB_SetCurrentMode+0x84>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2b31      	cmp	r3, #49	; 0x31
 800c82a:	d9f0      	bls.n	800c80e <USB_SetCurrentMode+0x60>
 800c82c:	e001      	b.n	800c832 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e005      	b.n	800c83e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b32      	cmp	r3, #50	; 0x32
 800c836:	d101      	bne.n	800c83c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e000      	b.n	800c83e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3301      	adds	r3, #1
 800c85a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4a13      	ldr	r2, [pc, #76]	; (800c8ac <USB_FlushTxFifo+0x64>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d901      	bls.n	800c868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e01b      	b.n	800c8a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	daf2      	bge.n	800c856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	019b      	lsls	r3, r3, #6
 800c878:	f043 0220 	orr.w	r2, r3, #32
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	3301      	adds	r3, #1
 800c884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4a08      	ldr	r2, [pc, #32]	; (800c8ac <USB_FlushTxFifo+0x64>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d901      	bls.n	800c892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e006      	b.n	800c8a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b20      	cmp	r3, #32
 800c89c:	d0f0      	beq.n	800c880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	00030d40 	.word	0x00030d40

0800c8b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	4a11      	ldr	r2, [pc, #68]	; (800c90c <USB_FlushRxFifo+0x5c>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d901      	bls.n	800c8ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e018      	b.n	800c900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	daf2      	bge.n	800c8bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2210      	movs	r2, #16
 800c8de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4a08      	ldr	r2, [pc, #32]	; (800c90c <USB_FlushRxFifo+0x5c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d901      	bls.n	800c8f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e006      	b.n	800c900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	691b      	ldr	r3, [r3, #16]
 800c8f6:	f003 0310 	and.w	r3, r3, #16
 800c8fa:	2b10      	cmp	r3, #16
 800c8fc:	d0f0      	beq.n	800c8e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	00030d40 	.word	0x00030d40

0800c910 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c910:	b480      	push	{r7}
 800c912:	b089      	sub	sp, #36	; 0x24
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4611      	mov	r1, r2
 800c91c:	461a      	mov	r2, r3
 800c91e:	460b      	mov	r3, r1
 800c920:	71fb      	strb	r3, [r7, #7]
 800c922:	4613      	mov	r3, r2
 800c924:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c92e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c932:	2b00      	cmp	r3, #0
 800c934:	d123      	bne.n	800c97e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c936:	88bb      	ldrh	r3, [r7, #4]
 800c938:	3303      	adds	r3, #3
 800c93a:	089b      	lsrs	r3, r3, #2
 800c93c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c93e:	2300      	movs	r3, #0
 800c940:	61bb      	str	r3, [r7, #24]
 800c942:	e018      	b.n	800c976 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	031a      	lsls	r2, r3, #12
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c950:	461a      	mov	r2, r3
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	3301      	adds	r3, #1
 800c95c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	3301      	adds	r3, #1
 800c962:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	3301      	adds	r3, #1
 800c968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	3301      	adds	r3, #1
 800c96e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	3301      	adds	r3, #1
 800c974:	61bb      	str	r3, [r7, #24]
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d3e2      	bcc.n	800c944 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3724      	adds	r7, #36	; 0x24
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b08b      	sub	sp, #44	; 0x2c
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4613      	mov	r3, r2
 800c998:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	089b      	lsrs	r3, r3, #2
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	f003 0303 	and.w	r3, r3, #3
 800c9b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	623b      	str	r3, [r7, #32]
 800c9b6:	e014      	b.n	800c9e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	3301      	adds	r3, #1
 800c9da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c9dc:	6a3b      	ldr	r3, [r7, #32]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	623b      	str	r3, [r7, #32]
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d3e6      	bcc.n	800c9b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c9ea:	8bfb      	ldrh	r3, [r7, #30]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01e      	beq.n	800ca2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f107 0310 	add.w	r3, r7, #16
 800ca00:	6812      	ldr	r2, [r2, #0]
 800ca02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	701a      	strb	r2, [r3, #0]
      i++;
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	3301      	adds	r3, #1
 800ca20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca22:	8bfb      	ldrh	r3, [r7, #30]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca28:	8bfb      	ldrh	r3, [r7, #30]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1ea      	bne.n	800ca04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	372c      	adds	r7, #44	; 0x2c
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4013      	ands	r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca54:	68fb      	ldr	r3, [r7, #12]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	f003 0301 	and.w	r3, r3, #1
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
	...

0800ca80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4a13      	ldr	r2, [pc, #76]	; (800cae4 <USB_CoreReset+0x64>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d901      	bls.n	800ca9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	e01b      	b.n	800cad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	daf2      	bge.n	800ca8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	f043 0201 	orr.w	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4a09      	ldr	r2, [pc, #36]	; (800cae4 <USB_CoreReset+0x64>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d901      	bls.n	800cac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e006      	b.n	800cad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d0f0      	beq.n	800cab6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	00030d40 	.word	0x00030d40

0800cae8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cae8:	b084      	sub	sp, #16
 800caea:	b580      	push	{r7, lr}
 800caec:	b086      	sub	sp, #24
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800caf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb08:	461a      	mov	r2, r3
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d018      	beq.n	800cb70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d10a      	bne.n	800cb5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb52:	f043 0304 	orr.w	r3, r3, #4
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	e014      	b.n	800cb84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb68:	f023 0304 	bic.w	r3, r3, #4
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	e009      	b.n	800cb84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb7e:	f023 0304 	bic.w	r3, r3, #4
 800cb82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb84:	2110      	movs	r1, #16
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff fe5e 	bl	800c848 <USB_FlushTxFifo>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff fe8a 	bl	800c8b0 <USB_FlushRxFifo>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d001      	beq.n	800cba6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cba6:	2300      	movs	r3, #0
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	e015      	b.n	800cbd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbb8:	461a      	mov	r2, r3
 800cbba:	f04f 33ff 	mov.w	r3, #4294967295
 800cbbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbcc:	461a      	mov	r2, r3
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	613b      	str	r3, [r7, #16]
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d3e5      	bcc.n	800cbac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a13      	ldr	r2, [pc, #76]	; (800cc54 <USB_HostInit+0x16c>)
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a13      	ldr	r2, [pc, #76]	; (800cc58 <USB_HostInit+0x170>)
 800cc0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc10:	e009      	b.n	800cc26 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2280      	movs	r2, #128	; 0x80
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <USB_HostInit+0x174>)
 800cc1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <USB_HostInit+0x178>)
 800cc22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d105      	bne.n	800cc38 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	f043 0210 	orr.w	r2, r3, #16
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <USB_HostInit+0x17c>)
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc50:	b004      	add	sp, #16
 800cc52:	4770      	bx	lr
 800cc54:	01000200 	.word	0x01000200
 800cc58:	00e00300 	.word	0x00e00300
 800cc5c:	00600080 	.word	0x00600080
 800cc60:	004000e0 	.word	0x004000e0
 800cc64:	a3200008 	.word	0xa3200008

0800cc68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc86:	f023 0303 	bic.w	r3, r3, #3
 800cc8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cca0:	4313      	orrs	r3, r2
 800cca2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cca4:	78fb      	ldrb	r3, [r7, #3]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d107      	bne.n	800ccba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ccb6:	6053      	str	r3, [r2, #4]
 800ccb8:	e009      	b.n	800ccce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccba:	78fb      	ldrb	r3, [r7, #3]
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d106      	bne.n	800ccce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f241 7370 	movw	r3, #6000	; 0x1770
 800cccc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ccfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cd0c:	2064      	movs	r0, #100	; 0x64
 800cd0e:	f7f8 fab1 	bl	8005274 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd20:	200a      	movs	r0, #10
 800cd22:	f7f8 faa7 	bl	8005274 <HAL_Delay>

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d109      	bne.n	800cd74 <USB_DriveVbus+0x44>
 800cd60:	78fb      	ldrb	r3, [r7, #3]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d106      	bne.n	800cd74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd7e:	d109      	bne.n	800cd94 <USB_DriveVbus+0x64>
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b085      	sub	sp, #20
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	0c5b      	lsrs	r3, r3, #17
 800cdc0:	f003 0303 	and.w	r3, r3, #3
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	b29b      	uxth	r3, r3
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3714      	adds	r7, #20
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
	...

0800cdf4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	4611      	mov	r1, r2
 800ce00:	461a      	mov	r2, r3
 800ce02:	4603      	mov	r3, r0
 800ce04:	70fb      	strb	r3, [r7, #3]
 800ce06:	460b      	mov	r3, r1
 800ce08:	70bb      	strb	r3, [r7, #2]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	015a      	lsls	r2, r3, #5
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce22:	461a      	mov	r2, r3
 800ce24:	f04f 33ff 	mov.w	r3, #4294967295
 800ce28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d87e      	bhi.n	800cf30 <USB_HC_Init+0x13c>
 800ce32:	a201      	add	r2, pc, #4	; (adr r2, 800ce38 <USB_HC_Init+0x44>)
 800ce34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce38:	0800ce49 	.word	0x0800ce49
 800ce3c:	0800cef3 	.word	0x0800cef3
 800ce40:	0800ce49 	.word	0x0800ce49
 800ce44:	0800ceb5 	.word	0x0800ceb5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce54:	461a      	mov	r2, r3
 800ce56:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	da10      	bge.n	800ce86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	015a      	lsls	r2, r3, #5
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	78fa      	ldrb	r2, [r7, #3]
 800ce74:	0151      	lsls	r1, r2, #5
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	440a      	add	r2, r1
 800ce7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ce84:	e057      	b.n	800cf36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d051      	beq.n	800cf36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	78fa      	ldrb	r2, [r7, #3]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	693a      	ldr	r2, [r7, #16]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ceb0:	60d3      	str	r3, [r2, #12]
      break;
 800ceb2:	e040      	b.n	800cf36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cec0:	461a      	mov	r2, r3
 800cec2:	f240 639d 	movw	r3, #1693	; 0x69d
 800cec6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cec8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	da34      	bge.n	800cf3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	78fa      	ldrb	r2, [r7, #3]
 800cee0:	0151      	lsls	r1, r2, #5
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	440a      	add	r2, r1
 800cee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceee:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cef0:	e023      	b.n	800cf3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cef2:	78fb      	ldrb	r3, [r7, #3]
 800cef4:	015a      	lsls	r2, r3, #5
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	4413      	add	r3, r2
 800cefa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cefe:	461a      	mov	r2, r3
 800cf00:	f240 2325 	movw	r3, #549	; 0x225
 800cf04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da17      	bge.n	800cf3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	78fa      	ldrb	r2, [r7, #3]
 800cf1e:	0151      	lsls	r1, r2, #5
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	440a      	add	r2, r1
 800cf24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf2e:	e006      	b.n	800cf3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	77fb      	strb	r3, [r7, #31]
      break;
 800cf34:	e004      	b.n	800cf40 <USB_HC_Init+0x14c>
      break;
 800cf36:	bf00      	nop
 800cf38:	e002      	b.n	800cf40 <USB_HC_Init+0x14c>
      break;
 800cf3a:	bf00      	nop
 800cf3c:	e000      	b.n	800cf40 <USB_HC_Init+0x14c>
      break;
 800cf3e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800cf40:	78fb      	ldrb	r3, [r7, #3]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	0151      	lsls	r1, r2, #5
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	440a      	add	r2, r1
 800cf56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf5a:	f043 0302 	orr.w	r3, r3, #2
 800cf5e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	f003 030f 	and.w	r3, r3, #15
 800cf6e:	2101      	movs	r1, #1
 800cf70:	fa01 f303 	lsl.w	r3, r1, r3
 800cf74:	6939      	ldr	r1, [r7, #16]
 800cf76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cf8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	da03      	bge.n	800cf9a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cf92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf96:	61bb      	str	r3, [r7, #24]
 800cf98:	e001      	b.n	800cf9e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff feff 	bl	800cda2 <USB_GetHostSpeed>
 800cfa4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cfa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d106      	bne.n	800cfbc <USB_HC_Init+0x1c8>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d003      	beq.n	800cfbc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cfb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e001      	b.n	800cfc0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfc0:	787b      	ldrb	r3, [r7, #1]
 800cfc2:	059b      	lsls	r3, r3, #22
 800cfc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfc8:	78bb      	ldrb	r3, [r7, #2]
 800cfca:	02db      	lsls	r3, r3, #11
 800cfcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cfd6:	049b      	lsls	r3, r3, #18
 800cfd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cfe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfe4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	0159      	lsls	r1, r3, #5
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	440b      	add	r3, r1
 800cff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cffc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800cffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d002:	2b03      	cmp	r3, #3
 800d004:	d003      	beq.n	800d00e <USB_HC_Init+0x21a>
 800d006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d10f      	bne.n	800d02e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d00e:	78fb      	ldrb	r3, [r7, #3]
 800d010:	015a      	lsls	r2, r3, #5
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	4413      	add	r3, r2
 800d016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	78fa      	ldrb	r2, [r7, #3]
 800d01e:	0151      	lsls	r1, r2, #5
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	440a      	add	r2, r1
 800d024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d02c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d02e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3720      	adds	r7, #32
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	; 0x30
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	785b      	ldrb	r3, [r3, #1]
 800d04e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d054:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d02d      	beq.n	800d0be <USB_HC_StartXfer+0x86>
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	791b      	ldrb	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d129      	bne.n	800d0be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d06a:	79fb      	ldrb	r3, [r7, #7]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d117      	bne.n	800d0a0 <USB_HC_StartXfer+0x68>
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	79db      	ldrb	r3, [r3, #7]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <USB_HC_StartXfer+0x48>
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	79db      	ldrb	r3, [r3, #7]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d10f      	bne.n	800d0a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	015a      	lsls	r2, r3, #5
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	4413      	add	r3, r2
 800d088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	69fa      	ldr	r2, [r7, #28]
 800d090:	0151      	lsls	r1, r2, #5
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	440a      	add	r2, r1
 800d096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d09e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10b      	bne.n	800d0be <USB_HC_StartXfer+0x86>
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	795b      	ldrb	r3, [r3, #5]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d107      	bne.n	800d0be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 fa0f 	bl	800d4d8 <USB_DoPing>
      return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e0f8      	b.n	800d2b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d018      	beq.n	800d0f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	8912      	ldrh	r2, [r2, #8]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	8912      	ldrh	r2, [r2, #8]
 800d0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d0dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0de:	8b7b      	ldrh	r3, [r7, #26]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d90b      	bls.n	800d0fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d0e4:	8b7b      	ldrh	r3, [r7, #26]
 800d0e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d0e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	8912      	ldrh	r2, [r2, #8]
 800d0ee:	fb03 f202 	mul.w	r2, r3, r2
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	611a      	str	r2, [r3, #16]
 800d0f6:	e001      	b.n	800d0fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	78db      	ldrb	r3, [r3, #3]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d007      	beq.n	800d114 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	8912      	ldrh	r2, [r2, #8]
 800d10a:	fb03 f202 	mul.w	r2, r3, r2
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	611a      	str	r2, [r3, #16]
 800d112:	e003      	b.n	800d11c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	695a      	ldr	r2, [r3, #20]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d126:	04d9      	lsls	r1, r3, #19
 800d128:	4b63      	ldr	r3, [pc, #396]	; (800d2b8 <USB_HC_StartXfer+0x280>)
 800d12a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d12c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	7a9b      	ldrb	r3, [r3, #10]
 800d132:	075b      	lsls	r3, r3, #29
 800d134:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d138:	69f9      	ldr	r1, [r7, #28]
 800d13a:	0148      	lsls	r0, r1, #5
 800d13c:	6a39      	ldr	r1, [r7, #32]
 800d13e:	4401      	add	r1, r0
 800d140:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d144:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d146:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d009      	beq.n	800d162 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	68d9      	ldr	r1, [r3, #12]
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d15e:	460a      	mov	r2, r1
 800d160:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bf0c      	ite	eq
 800d172:	2301      	moveq	r3, #1
 800d174:	2300      	movne	r3, #0
 800d176:	b2db      	uxtb	r3, r3
 800d178:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	015a      	lsls	r2, r3, #5
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	4413      	add	r3, r2
 800d182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	0151      	lsls	r1, r2, #5
 800d18c:	6a3a      	ldr	r2, [r7, #32]
 800d18e:	440a      	add	r2, r1
 800d190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d194:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d198:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	015a      	lsls	r2, r3, #5
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	7e7b      	ldrb	r3, [r7, #25]
 800d1aa:	075b      	lsls	r3, r3, #29
 800d1ac:	69f9      	ldr	r1, [r7, #28]
 800d1ae:	0148      	lsls	r0, r1, #5
 800d1b0:	6a39      	ldr	r1, [r7, #32]
 800d1b2:	4401      	add	r1, r0
 800d1b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	015a      	lsls	r2, r3, #5
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	78db      	ldrb	r3, [r3, #3]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d004      	beq.n	800d1e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1e2:	613b      	str	r3, [r7, #16]
 800d1e4:	e003      	b.n	800d1ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	015a      	lsls	r2, r3, #5
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d202:	461a      	mov	r2, r3
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	e04e      	b.n	800d2b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	78db      	ldrb	r3, [r3, #3]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d149      	bne.n	800d2ae <USB_HC_StartXfer+0x276>
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	695b      	ldr	r3, [r3, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d045      	beq.n	800d2ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	79db      	ldrb	r3, [r3, #7]
 800d226:	2b03      	cmp	r3, #3
 800d228:	d830      	bhi.n	800d28c <USB_HC_StartXfer+0x254>
 800d22a:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <USB_HC_StartXfer+0x1f8>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d241 	.word	0x0800d241
 800d234:	0800d265 	.word	0x0800d265
 800d238:	0800d241 	.word	0x0800d241
 800d23c:	0800d265 	.word	0x0800d265
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	3303      	adds	r3, #3
 800d246:	089b      	lsrs	r3, r3, #2
 800d248:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d24a:	8afa      	ldrh	r2, [r7, #22]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	b29b      	uxth	r3, r3
 800d252:	429a      	cmp	r2, r3
 800d254:	d91c      	bls.n	800d290 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	f043 0220 	orr.w	r2, r3, #32
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	619a      	str	r2, [r3, #24]
        }
        break;
 800d262:	e015      	b.n	800d290 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	3303      	adds	r3, #3
 800d26a:	089b      	lsrs	r3, r3, #2
 800d26c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d26e:	8afa      	ldrh	r2, [r7, #22]
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d90a      	bls.n	800d294 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	619a      	str	r2, [r3, #24]
        }
        break;
 800d28a:	e003      	b.n	800d294 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d28c:	bf00      	nop
 800d28e:	e002      	b.n	800d296 <USB_HC_StartXfer+0x25e>
        break;
 800d290:	bf00      	nop
 800d292:	e000      	b.n	800d296 <USB_HC_StartXfer+0x25e>
        break;
 800d294:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	68d9      	ldr	r1, [r3, #12]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	785a      	ldrb	r2, [r3, #1]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	9000      	str	r0, [sp, #0]
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff fb31 	bl	800c910 <USB_WritePacket>
  }

  return HAL_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3728      	adds	r7, #40	; 0x28
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	1ff80000 	.word	0x1ff80000

0800d2bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	b29b      	uxth	r3, r3
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b089      	sub	sp, #36	; 0x24
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d2ee:	78fb      	ldrb	r3, [r7, #3]
 800d2f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	015a      	lsls	r2, r3, #5
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	0c9b      	lsrs	r3, r3, #18
 800d306:	f003 0303 	and.w	r3, r3, #3
 800d30a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	015a      	lsls	r2, r3, #5
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	4413      	add	r3, r2
 800d314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	0fdb      	lsrs	r3, r3, #31
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	f003 0320 	and.w	r3, r3, #32
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d104      	bne.n	800d338 <USB_HC_Halt+0x5a>
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	e0c8      	b.n	800d4ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <USB_HC_Halt+0x66>
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d163      	bne.n	800d40c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	015a      	lsls	r2, r3, #5
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	4413      	add	r3, r2
 800d34c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	69ba      	ldr	r2, [r7, #24]
 800d354:	0151      	lsls	r1, r2, #5
 800d356:	69fa      	ldr	r2, [r7, #28]
 800d358:	440a      	add	r2, r1
 800d35a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d35e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d362:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	f003 0320 	and.w	r3, r3, #32
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f040 80ab 	bne.w	800d4c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d133      	bne.n	800d3e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4413      	add	r3, r2
 800d386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	69ba      	ldr	r2, [r7, #24]
 800d38e:	0151      	lsls	r1, r2, #5
 800d390:	69fa      	ldr	r2, [r7, #28]
 800d392:	440a      	add	r2, r1
 800d394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d39c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	015a      	lsls	r2, r3, #5
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	0151      	lsls	r1, r2, #5
 800d3b0:	69fa      	ldr	r2, [r7, #28]
 800d3b2:	440a      	add	r2, r1
 800d3b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3ca:	d81d      	bhi.n	800d408 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3e2:	d0ec      	beq.n	800d3be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d3e4:	e070      	b.n	800d4c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	015a      	lsls	r2, r3, #5
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69ba      	ldr	r2, [r7, #24]
 800d3f6:	0151      	lsls	r1, r2, #5
 800d3f8:	69fa      	ldr	r2, [r7, #28]
 800d3fa:	440a      	add	r2, r1
 800d3fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d404:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d406:	e05f      	b.n	800d4c8 <USB_HC_Halt+0x1ea>
            break;
 800d408:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d40a:	e05d      	b.n	800d4c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	4413      	add	r3, r2
 800d414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	69ba      	ldr	r2, [r7, #24]
 800d41c:	0151      	lsls	r1, r2, #5
 800d41e:	69fa      	ldr	r2, [r7, #28]
 800d420:	440a      	add	r2, r1
 800d422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d42a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d133      	bne.n	800d4a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	4413      	add	r3, r2
 800d444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	0151      	lsls	r1, r2, #5
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	440a      	add	r2, r1
 800d452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d45a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	4413      	add	r3, r2
 800d464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	69ba      	ldr	r2, [r7, #24]
 800d46c:	0151      	lsls	r1, r2, #5
 800d46e:	69fa      	ldr	r2, [r7, #28]
 800d470:	440a      	add	r2, r1
 800d472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d47a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3301      	adds	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d488:	d81d      	bhi.n	800d4c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	015a      	lsls	r2, r3, #5
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	4413      	add	r3, r2
 800d492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a0:	d0ec      	beq.n	800d47c <USB_HC_Halt+0x19e>
 800d4a2:	e011      	b.n	800d4c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	e000      	b.n	800d4c8 <USB_HC_Halt+0x1ea>
          break;
 800d4c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3724      	adds	r7, #36	; 0x24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
	...

0800d4d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d4e8:	78fb      	ldrb	r3, [r7, #3]
 800d4ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	04da      	lsls	r2, r3, #19
 800d4f4:	4b15      	ldr	r3, [pc, #84]	; (800d54c <USB_DoPing+0x74>)
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	693a      	ldr	r2, [r7, #16]
 800d4fa:	0151      	lsls	r1, r2, #5
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	440a      	add	r2, r1
 800d500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d508:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	4413      	add	r3, r2
 800d512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d520:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d528:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	015a      	lsls	r2, r3, #5
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	4413      	add	r3, r2
 800d532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d536:	461a      	mov	r2, r3
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	1ff80000 	.word	0x1ff80000

0800d550 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff f911 	bl	800c78c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d56a:	2110      	movs	r1, #16
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff f96b 	bl	800c848 <USB_FlushTxFifo>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff f997 	bl	800c8b0 <USB_FlushRxFifo>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d58c:	2300      	movs	r3, #0
 800d58e:	61bb      	str	r3, [r7, #24]
 800d590:	e01f      	b.n	800d5d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	015a      	lsls	r2, r3, #5
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	4413      	add	r3, r2
 800d59a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	61bb      	str	r3, [r7, #24]
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	2b0f      	cmp	r3, #15
 800d5d6:	d9dc      	bls.n	800d592 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	61bb      	str	r3, [r7, #24]
 800d5dc:	e034      	b.n	800d648 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	015a      	lsls	r2, r3, #5
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d604:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	015a      	lsls	r2, r3, #5
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	4413      	add	r3, r2
 800d60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d612:	461a      	mov	r2, r3
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3301      	adds	r3, #1
 800d61c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d624:	d80c      	bhi.n	800d640 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	015a      	lsls	r2, r3, #5
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	4413      	add	r3, r2
 800d62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d63c:	d0ec      	beq.n	800d618 <USB_StopHost+0xc8>
 800d63e:	e000      	b.n	800d642 <USB_StopHost+0xf2>
        break;
 800d640:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	3301      	adds	r3, #1
 800d646:	61bb      	str	r3, [r7, #24]
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	2b0f      	cmp	r3, #15
 800d64c:	d9c7      	bls.n	800d5de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d654:	461a      	mov	r2, r3
 800d656:	f04f 33ff 	mov.w	r3, #4294967295
 800d65a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f04f 32ff 	mov.w	r2, #4294967295
 800d662:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff f880 	bl	800c76a <USB_EnableGlobalInt>

  return ret;
 800d66a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3720      	adds	r7, #32
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b089      	sub	sp, #36	; 0x24
 800d678:	af04      	add	r7, sp, #16
 800d67a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d67c:	2301      	movs	r3, #1
 800d67e:	2202      	movs	r2, #2
 800d680:	2102      	movs	r1, #2
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fcb2 	bl	800dfec <USBH_FindInterface>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	2bff      	cmp	r3, #255	; 0xff
 800d690:	d002      	beq.n	800d698 <USBH_CDC_InterfaceInit+0x24>
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d901      	bls.n	800d69c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d698:	2302      	movs	r3, #2
 800d69a:	e13d      	b.n	800d918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fc87 	bl	800dfb4 <USBH_SelectInterface>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d6aa:	7bbb      	ldrb	r3, [r7, #14]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	e131      	b.n	800d918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d6ba:	2050      	movs	r0, #80	; 0x50
 800d6bc:	f006 fafc 	bl	8013cb8 <malloc>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e11f      	b.n	800d918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d6d8:	2250      	movs	r2, #80	; 0x50
 800d6da:	2100      	movs	r1, #0
 800d6dc:	68b8      	ldr	r0, [r7, #8]
 800d6de:	f006 fb09 	bl	8013cf4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	211a      	movs	r1, #26
 800d6e8:	fb01 f303 	mul.w	r3, r1, r3
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	b25b      	sxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	da15      	bge.n	800d726 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	211a      	movs	r1, #26
 800d700:	fb01 f303 	mul.w	r3, r1, r3
 800d704:	4413      	add	r3, r2
 800d706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d70a:	781a      	ldrb	r2, [r3, #0]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	211a      	movs	r1, #26
 800d716:	fb01 f303 	mul.w	r3, r1, r3
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d720:	881a      	ldrh	r2, [r3, #0]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	785b      	ldrb	r3, [r3, #1]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f002 f984 	bl	800fa3a <USBH_AllocPipe>
 800d732:	4603      	mov	r3, r0
 800d734:	461a      	mov	r2, r3
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	7819      	ldrb	r1, [r3, #0]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	7858      	ldrb	r0, [r3, #1]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	8952      	ldrh	r2, [r2, #10]
 800d752:	9202      	str	r2, [sp, #8]
 800d754:	2203      	movs	r2, #3
 800d756:	9201      	str	r2, [sp, #4]
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	4623      	mov	r3, r4
 800d75c:	4602      	mov	r2, r0
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f002 f93c 	bl	800f9dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2200      	movs	r2, #0
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f006 f9f5 	bl	8013b5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d772:	2300      	movs	r3, #0
 800d774:	2200      	movs	r2, #0
 800d776:	210a      	movs	r1, #10
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 fc37 	bl	800dfec <USBH_FindInterface>
 800d77e:	4603      	mov	r3, r0
 800d780:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	2bff      	cmp	r3, #255	; 0xff
 800d786:	d002      	beq.n	800d78e <USBH_CDC_InterfaceInit+0x11a>
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d901      	bls.n	800d792 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d78e:	2302      	movs	r3, #2
 800d790:	e0c2      	b.n	800d918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	211a      	movs	r1, #26
 800d798:	fb01 f303 	mul.w	r3, r1, r3
 800d79c:	4413      	add	r3, r2
 800d79e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	b25b      	sxtb	r3, r3
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	da16      	bge.n	800d7d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	211a      	movs	r1, #26
 800d7b0:	fb01 f303 	mul.w	r3, r1, r3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7ba:	781a      	ldrb	r2, [r3, #0]
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	211a      	movs	r1, #26
 800d7c6:	fb01 f303 	mul.w	r3, r1, r3
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d7d0:	881a      	ldrh	r2, [r3, #0]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	835a      	strh	r2, [r3, #26]
 800d7d6:	e015      	b.n	800d804 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	211a      	movs	r1, #26
 800d7de:	fb01 f303 	mul.w	r3, r1, r3
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	211a      	movs	r1, #26
 800d7f4:	fb01 f303 	mul.w	r3, r1, r3
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d7fe:	881a      	ldrh	r2, [r3, #0]
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d804:	7bfb      	ldrb	r3, [r7, #15]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	211a      	movs	r1, #26
 800d80a:	fb01 f303 	mul.w	r3, r1, r3
 800d80e:	4413      	add	r3, r2
 800d810:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	b25b      	sxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	da16      	bge.n	800d84a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	211a      	movs	r1, #26
 800d822:	fb01 f303 	mul.w	r3, r1, r3
 800d826:	4413      	add	r3, r2
 800d828:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d82c:	781a      	ldrb	r2, [r3, #0]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	211a      	movs	r1, #26
 800d838:	fb01 f303 	mul.w	r3, r1, r3
 800d83c:	4413      	add	r3, r2
 800d83e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d842:	881a      	ldrh	r2, [r3, #0]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	835a      	strh	r2, [r3, #26]
 800d848:	e015      	b.n	800d876 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	211a      	movs	r1, #26
 800d850:	fb01 f303 	mul.w	r3, r1, r3
 800d854:	4413      	add	r3, r2
 800d856:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d85a:	781a      	ldrb	r2, [r3, #0]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	211a      	movs	r1, #26
 800d866:	fb01 f303 	mul.w	r3, r1, r3
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d870:	881a      	ldrh	r2, [r3, #0]
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	7b9b      	ldrb	r3, [r3, #14]
 800d87a:	4619      	mov	r1, r3
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f002 f8dc 	bl	800fa3a <USBH_AllocPipe>
 800d882:	4603      	mov	r3, r0
 800d884:	461a      	mov	r2, r3
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	7bdb      	ldrb	r3, [r3, #15]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f002 f8d2 	bl	800fa3a <USBH_AllocPipe>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	7b59      	ldrb	r1, [r3, #13]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	7b98      	ldrb	r0, [r3, #14]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	8b12      	ldrh	r2, [r2, #24]
 800d8b6:	9202      	str	r2, [sp, #8]
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	9201      	str	r2, [sp, #4]
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	4623      	mov	r3, r4
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f002 f88a 	bl	800f9dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	7b19      	ldrb	r1, [r3, #12]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	7bd8      	ldrb	r0, [r3, #15]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	8b52      	ldrh	r2, [r2, #26]
 800d8e0:	9202      	str	r2, [sp, #8]
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	9201      	str	r2, [sp, #4]
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f002 f875 	bl	800f9dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	7b5b      	ldrb	r3, [r3, #13]
 800d8fe:	2200      	movs	r2, #0
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f006 f92a 	bl	8013b5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	7b1b      	ldrb	r3, [r3, #12]
 800d90c:	2200      	movs	r2, #0
 800d90e:	4619      	mov	r1, r3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f006 f923 	bl	8013b5c <USBH_LL_SetToggle>

  return USBH_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd90      	pop	{r4, r7, pc}

0800d920 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d92e:	69db      	ldr	r3, [r3, #28]
 800d930:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00e      	beq.n	800d958 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f002 f86a 	bl	800fa1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	4619      	mov	r1, r3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f002 f895 	bl	800fa7c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	7b1b      	ldrb	r3, [r3, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00e      	beq.n	800d97e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	7b1b      	ldrb	r3, [r3, #12]
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f002 f857 	bl	800fa1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	7b1b      	ldrb	r3, [r3, #12]
 800d970:	4619      	mov	r1, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f002 f882 	bl	800fa7c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	7b5b      	ldrb	r3, [r3, #13]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00e      	beq.n	800d9a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	7b5b      	ldrb	r3, [r3, #13]
 800d98a:	4619      	mov	r1, r3
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f002 f844 	bl	800fa1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	7b5b      	ldrb	r3, [r3, #13]
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f002 f86f 	bl	800fa7c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00b      	beq.n	800d9c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f006 f985 	bl	8013cc8 <free>
    phost->pActiveClass->pData = 0U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9e0:	69db      	ldr	r3, [r3, #28]
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3340      	adds	r3, #64	; 0x40
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f8b1 	bl	800db52 <GetLineCoding>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d9f4:	7afb      	ldrb	r3, [r7, #11]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da00:	2102      	movs	r1, #2
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800da06:	7afb      	ldrb	r3, [r7, #11]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800da18:	2301      	movs	r3, #1
 800da1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da26:	69db      	ldr	r3, [r3, #28]
 800da28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800da30:	2b04      	cmp	r3, #4
 800da32:	d877      	bhi.n	800db24 <USBH_CDC_Process+0x114>
 800da34:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <USBH_CDC_Process+0x2c>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800da51 	.word	0x0800da51
 800da40:	0800da57 	.word	0x0800da57
 800da44:	0800da87 	.word	0x0800da87
 800da48:	0800dafb 	.word	0x0800dafb
 800da4c:	0800db09 	.word	0x0800db09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
      break;
 800da54:	e06d      	b.n	800db32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f897 	bl	800db90 <SetLineCoding>
 800da62:	4603      	mov	r3, r0
 800da64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d104      	bne.n	800da76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800da74:	e058      	b.n	800db28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800da76:	7bbb      	ldrb	r3, [r7, #14]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d055      	beq.n	800db28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2204      	movs	r2, #4
 800da80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800da84:	e050      	b.n	800db28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	3340      	adds	r3, #64	; 0x40
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f860 	bl	800db52 <GetLineCoding>
 800da92:	4603      	mov	r3, r0
 800da94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d126      	bne.n	800daea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daae:	791b      	ldrb	r3, [r3, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d13b      	bne.n	800db2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dabe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d133      	bne.n	800db2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dace:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d12b      	bne.n	800db2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dadc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dade:	429a      	cmp	r2, r3
 800dae0:	d124      	bne.n	800db2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f982 	bl	800ddec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dae8:	e020      	b.n	800db2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800daea:	7bbb      	ldrb	r3, [r7, #14]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d01d      	beq.n	800db2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2204      	movs	r2, #4
 800daf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800daf8:	e018      	b.n	800db2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f867 	bl	800dbce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f8f6 	bl	800dcf2 <CDC_ProcessReception>
      break;
 800db06:	e014      	b.n	800db32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800db08:	2100      	movs	r1, #0
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f001 f957 	bl	800edbe <USBH_ClrFeature>
 800db10:	4603      	mov	r3, r0
 800db12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800db14:	7bbb      	ldrb	r3, [r7, #14]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800db22:	e005      	b.n	800db30 <USBH_CDC_Process+0x120>

    default:
      break;
 800db24:	bf00      	nop
 800db26:	e004      	b.n	800db32 <USBH_CDC_Process+0x122>
      break;
 800db28:	bf00      	nop
 800db2a:	e002      	b.n	800db32 <USBH_CDC_Process+0x122>
      break;
 800db2c:	bf00      	nop
 800db2e:	e000      	b.n	800db32 <USBH_CDC_Process+0x122>
      break;
 800db30:	bf00      	nop

  }

  return status;
 800db32:	7bfb      	ldrb	r3, [r7, #15]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b082      	sub	sp, #8
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	22a1      	movs	r2, #161	; 0xa1
 800db60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2221      	movs	r2, #33	; 0x21
 800db66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2207      	movs	r2, #7
 800db78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	2207      	movs	r2, #7
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f001 fbe9 	bl	800f358 <USBH_CtlReq>
 800db86:	4603      	mov	r3, r0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2221      	movs	r2, #33	; 0x21
 800db9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2207      	movs	r2, #7
 800dbb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2207      	movs	r2, #7
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f001 fbca 	bl	800f358 <USBH_CtlReq>
 800dbc4:	4603      	mov	r3, r0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af02      	add	r7, sp, #8
 800dbd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d002      	beq.n	800dbf4 <CDC_ProcessTransmission+0x26>
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d023      	beq.n	800dc3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800dbf2:	e07a      	b.n	800dcea <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	8b12      	ldrh	r2, [r2, #24]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d90b      	bls.n	800dc18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	69d9      	ldr	r1, [r3, #28]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8b1a      	ldrh	r2, [r3, #24]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	7b5b      	ldrb	r3, [r3, #13]
 800dc0c:	2001      	movs	r0, #1
 800dc0e:	9000      	str	r0, [sp, #0]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f001 fea0 	bl	800f956 <USBH_BulkSendData>
 800dc16:	e00b      	b.n	800dc30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	7b5b      	ldrb	r3, [r3, #13]
 800dc26:	2001      	movs	r0, #1
 800dc28:	9000      	str	r0, [sp, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f001 fe93 	bl	800f956 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2202      	movs	r2, #2
 800dc34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dc38:	e057      	b.n	800dcea <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	7b5b      	ldrb	r3, [r3, #13]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f005 ff61 	bl	8013b08 <USBH_LL_GetURBState>
 800dc46:	4603      	mov	r3, r0
 800dc48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800dc4a:	7afb      	ldrb	r3, [r7, #11]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d136      	bne.n	800dcbe <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	8b12      	ldrh	r2, [r2, #24]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d90e      	bls.n	800dc7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	8b12      	ldrh	r2, [r2, #24]
 800dc64:	1a9a      	subs	r2, r3, r2
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	8b12      	ldrh	r2, [r2, #24]
 800dc72:	441a      	add	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	61da      	str	r2, [r3, #28]
 800dc78:	e002      	b.n	800dc80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dc90:	e006      	b.n	800dca0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f892 	bl	800ddc4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2204      	movs	r2, #4
 800dca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f002 fab0 	bl	801021c <osMessageQueuePut>
      break;
 800dcbc:	e014      	b.n	800dce8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d111      	bne.n	800dce8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2204      	movs	r2, #4
 800dcd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dce0:	2300      	movs	r3, #0
 800dce2:	2200      	movs	r2, #0
 800dce4:	f002 fa9a 	bl	801021c <osMessageQueuePut>
      break;
 800dce8:	bf00      	nop
  }
}
 800dcea:	bf00      	nop
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b086      	sub	sp, #24
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd04:	2300      	movs	r3, #0
 800dd06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d002      	beq.n	800dd18 <CDC_ProcessReception+0x26>
 800dd12:	2b04      	cmp	r3, #4
 800dd14:	d00e      	beq.n	800dd34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dd16:	e051      	b.n	800ddbc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	6a19      	ldr	r1, [r3, #32]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	8b5a      	ldrh	r2, [r3, #26]
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	7b1b      	ldrb	r3, [r3, #12]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f001 fe3b 	bl	800f9a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dd32:	e043      	b.n	800ddbc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	7b1b      	ldrb	r3, [r3, #12]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f005 fee4 	bl	8013b08 <USBH_LL_GetURBState>
 800dd40:	4603      	mov	r3, r0
 800dd42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dd44:	7cfb      	ldrb	r3, [r7, #19]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d137      	bne.n	800ddba <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	7b1b      	ldrb	r3, [r3, #12]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f005 fe47 	bl	80139e4 <USBH_LL_GetLastXferSize>
 800dd56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d016      	beq.n	800dd90 <CDC_ProcessReception+0x9e>
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	8b5b      	ldrh	r3, [r3, #26]
 800dd66:	461a      	mov	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d910      	bls.n	800dd90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1ad2      	subs	r2, r2, r3
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	6a1a      	ldr	r2, [r3, #32]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	441a      	add	r2, r3
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	2203      	movs	r2, #3
 800dd8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dd8e:	e006      	b.n	800dd9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 f81d 	bl	800ddd8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2204      	movs	r2, #4
 800dda2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f002 fa31 	bl	801021c <osMessageQueuePut>
      break;
 800ddba:	bf00      	nop
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800de14:	2302      	movs	r3, #2
 800de16:	e044      	b.n	800dea2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	79fa      	ldrb	r2, [r7, #7]
 800de1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 f841 	bl	800deb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d003      	beq.n	800de64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800de64:	2200      	movs	r2, #0
 800de66:	2104      	movs	r1, #4
 800de68:	2010      	movs	r0, #16
 800de6a:	f002 f963 	bl	8010134 <osMessageQueueNew>
 800de6e:	4602      	mov	r2, r0
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800de76:	4b0d      	ldr	r3, [pc, #52]	; (800deac <USBH_Init+0xac>)
 800de78:	4a0d      	ldr	r2, [pc, #52]	; (800deb0 <USBH_Init+0xb0>)
 800de7a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800de7c:	4b0b      	ldr	r3, [pc, #44]	; (800deac <USBH_Init+0xac>)
 800de7e:	2280      	movs	r2, #128	; 0x80
 800de80:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <USBH_Init+0xac>)
 800de84:	2218      	movs	r2, #24
 800de86:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800de88:	4a08      	ldr	r2, [pc, #32]	; (800deac <USBH_Init+0xac>)
 800de8a:	68f9      	ldr	r1, [r7, #12]
 800de8c:	4809      	ldr	r0, [pc, #36]	; (800deb4 <USBH_Init+0xb4>)
 800de8e:	f001 fec5 	bl	800fc1c <osThreadNew>
 800de92:	4602      	mov	r2, r0
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f005 fce4 	bl	8013868 <USBH_LL_Init>

  return USBH_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	200007b8 	.word	0x200007b8
 800deb0:	08014650 	.word	0x08014650
 800deb4:	0800eb35 	.word	0x0800eb35

0800deb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	e009      	b.n	800dede <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	33e0      	adds	r3, #224	; 0xe0
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	2200      	movs	r2, #0
 800ded6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3301      	adds	r3, #1
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b0f      	cmp	r3, #15
 800dee2:	d9f2      	bls.n	800deca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e009      	b.n	800defe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800def4:	2200      	movs	r2, #0
 800def6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3301      	adds	r3, #1
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df04:	d3f1      	bcc.n	800deea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2240      	movs	r2, #64	; 0x40
 800df2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d016      	beq.n	800dfa2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10e      	bne.n	800df9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800df84:	1c59      	adds	r1, r3, #1
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	33de      	adds	r3, #222	; 0xde
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800df96:	2300      	movs	r3, #0
 800df98:	73fb      	strb	r3, [r7, #15]
 800df9a:	e004      	b.n	800dfa6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800df9c:	2302      	movs	r3, #2
 800df9e:	73fb      	strb	r3, [r7, #15]
 800dfa0:	e001      	b.n	800dfa6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800dfa2:	2302      	movs	r3, #2
 800dfa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800dfca:	78fa      	ldrb	r2, [r7, #3]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d204      	bcs.n	800dfda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	78fa      	ldrb	r2, [r7, #3]
 800dfd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800dfd8:	e001      	b.n	800dfde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dfda:	2302      	movs	r3, #2
 800dfdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	4608      	mov	r0, r1
 800dff6:	4611      	mov	r1, r2
 800dff8:	461a      	mov	r2, r3
 800dffa:	4603      	mov	r3, r0
 800dffc:	70fb      	strb	r3, [r7, #3]
 800dffe:	460b      	mov	r3, r1
 800e000:	70bb      	strb	r3, [r7, #2]
 800e002:	4613      	mov	r3, r2
 800e004:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e014:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e016:	e025      	b.n	800e064 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	221a      	movs	r2, #26
 800e01c:	fb02 f303 	mul.w	r3, r2, r3
 800e020:	3308      	adds	r3, #8
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	4413      	add	r3, r2
 800e026:	3302      	adds	r3, #2
 800e028:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	795b      	ldrb	r3, [r3, #5]
 800e02e:	78fa      	ldrb	r2, [r7, #3]
 800e030:	429a      	cmp	r2, r3
 800e032:	d002      	beq.n	800e03a <USBH_FindInterface+0x4e>
 800e034:	78fb      	ldrb	r3, [r7, #3]
 800e036:	2bff      	cmp	r3, #255	; 0xff
 800e038:	d111      	bne.n	800e05e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e03e:	78ba      	ldrb	r2, [r7, #2]
 800e040:	429a      	cmp	r2, r3
 800e042:	d002      	beq.n	800e04a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e044:	78bb      	ldrb	r3, [r7, #2]
 800e046:	2bff      	cmp	r3, #255	; 0xff
 800e048:	d109      	bne.n	800e05e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e04e:	787a      	ldrb	r2, [r7, #1]
 800e050:	429a      	cmp	r2, r3
 800e052:	d002      	beq.n	800e05a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e054:	787b      	ldrb	r3, [r7, #1]
 800e056:	2bff      	cmp	r3, #255	; 0xff
 800e058:	d101      	bne.n	800e05e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	e006      	b.n	800e06c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	3301      	adds	r3, #1
 800e062:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e064:	7dfb      	ldrb	r3, [r7, #23]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d9d6      	bls.n	800e018 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e06a:	23ff      	movs	r3, #255	; 0xff
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	371c      	adds	r7, #28
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f005 fc37 	bl	80138f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e086:	2101      	movs	r1, #1
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f005 fd50 	bl	8013b2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af04      	add	r7, sp, #16
 800e09e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d102      	bne.n	800e0ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2203      	movs	r2, #3
 800e0b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b0b      	cmp	r3, #11
 800e0c2:	f200 8247 	bhi.w	800e554 <USBH_Process+0x4bc>
 800e0c6:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <USBH_Process+0x34>)
 800e0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0cc:	0800e0fd 	.word	0x0800e0fd
 800e0d0:	0800e14b 	.word	0x0800e14b
 800e0d4:	0800e1cf 	.word	0x0800e1cf
 800e0d8:	0800e4d3 	.word	0x0800e4d3
 800e0dc:	0800e555 	.word	0x0800e555
 800e0e0:	0800e28f 	.word	0x0800e28f
 800e0e4:	0800e45d 	.word	0x0800e45d
 800e0e8:	0800e2e1 	.word	0x0800e2e1
 800e0ec:	0800e31d 	.word	0x0800e31d
 800e0f0:	0800e357 	.word	0x0800e357
 800e0f4:	0800e3b5 	.word	0x0800e3b5
 800e0f8:	0800e4bb 	.word	0x0800e4bb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 8227 	beq.w	800e558 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e110:	20c8      	movs	r0, #200	; 0xc8
 800e112:	f005 fd53 	bl	8013bbc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f005 fc49 	bl	80139ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e140:	2300      	movs	r3, #0
 800e142:	2200      	movs	r2, #0
 800e144:	f002 f86a 	bl	801021c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800e148:	e206      	b.n	800e558 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e150:	2b01      	cmp	r3, #1
 800e152:	d107      	bne.n	800e164 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2202      	movs	r2, #2
 800e160:	701a      	strb	r2, [r3, #0]
 800e162:	e025      	b.n	800e1b0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e16a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e16e:	d914      	bls.n	800e19a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e176:	3301      	adds	r3, #1
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e186:	2b03      	cmp	r3, #3
 800e188:	d903      	bls.n	800e192 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	220d      	movs	r2, #13
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e00e      	b.n	800e1b0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	e00a      	b.n	800e1b0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e1a0:	f103 020a 	add.w	r2, r3, #10
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e1aa:	200a      	movs	r0, #10
 800e1ac:	f005 fd06 	bl	8013bbc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f002 f828 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e1cc:	e1cb      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1de:	2104      	movs	r1, #4
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e1e4:	2064      	movs	r0, #100	; 0x64
 800e1e6:	f005 fce9 	bl	8013bbc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f005 fbb8 	bl	8013960 <USBH_LL_GetSpeed>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2205      	movs	r2, #5
 800e1fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e200:	2100      	movs	r1, #0
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f001 fc19 	bl	800fa3a <USBH_AllocPipe>
 800e208:	4603      	mov	r3, r0
 800e20a:	461a      	mov	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e210:	2180      	movs	r1, #128	; 0x80
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 fc11 	bl	800fa3a <USBH_AllocPipe>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7919      	ldrb	r1, [r3, #4]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e234:	b292      	uxth	r2, r2
 800e236:	9202      	str	r2, [sp, #8]
 800e238:	2200      	movs	r2, #0
 800e23a:	9201      	str	r2, [sp, #4]
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	4603      	mov	r3, r0
 800e240:	2280      	movs	r2, #128	; 0x80
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f001 fbca 	bl	800f9dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	7959      	ldrb	r1, [r3, #5]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e25c:	b292      	uxth	r2, r2
 800e25e:	9202      	str	r2, [sp, #8]
 800e260:	2200      	movs	r2, #0
 800e262:	9201      	str	r2, [sp, #4]
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	4603      	mov	r3, r0
 800e268:	2200      	movs	r2, #0
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fbb6 	bl	800f9dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e284:	2300      	movs	r3, #0
 800e286:	2200      	movs	r2, #0
 800e288:	f001 ffc8 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e28c:	e16b      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f96e 	bl	800e570 <USBH_HandleEnum>
 800e294:	4603      	mov	r3, r0
 800e296:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e298:	7bbb      	ldrb	r3, [r7, #14]
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 815d 	bne.w	800e55c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d103      	bne.n	800e2bc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2208      	movs	r2, #8
 800e2b8:	701a      	strb	r2, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2207      	movs	r2, #7
 800e2c0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2205      	movs	r2, #5
 800e2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f001 ff9f 	bl	801021c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800e2de:	e13d      	b.n	800e55c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f000 813a 	beq.w	800e560 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2208      	movs	r2, #8
 800e2fc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2205      	movs	r2, #5
 800e302:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e312:	2300      	movs	r3, #0
 800e314:	2200      	movs	r2, #0
 800e316:	f001 ff81 	bl	801021c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800e31a:	e121      	b.n	800e560 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e322:	b29b      	uxth	r3, r3
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fd02 	bl	800ed30 <USBH_SetCfg>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2209      	movs	r2, #9
 800e336:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e34c:	2300      	movs	r3, #0
 800e34e:	2200      	movs	r2, #0
 800e350:	f001 ff64 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e354:	e107      	b.n	800e566 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e35c:	f003 0320 	and.w	r3, r3, #32
 800e360:	2b00      	cmp	r3, #0
 800e362:	d015      	beq.n	800e390 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e364:	2101      	movs	r1, #1
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fd05 	bl	800ed76 <USBH_SetFeature>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e370:	7bbb      	ldrb	r3, [r7, #14]
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d103      	bne.n	800e380 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	220a      	movs	r2, #10
 800e37c:	701a      	strb	r2, [r3, #0]
 800e37e:	e00a      	b.n	800e396 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e380:	7bbb      	ldrb	r3, [r7, #14]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b03      	cmp	r3, #3
 800e386:	d106      	bne.n	800e396 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	220a      	movs	r2, #10
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	e002      	b.n	800e396 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	220a      	movs	r2, #10
 800e394:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f001 ff35 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e3b2:	e0d8      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d03f      	beq.n	800e43e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]
 800e3ca:	e016      	b.n	800e3fa <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e3cc:	7bfa      	ldrb	r2, [r7, #15]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	32de      	adds	r2, #222	; 0xde
 800e3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d6:	791a      	ldrb	r2, [r3, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d108      	bne.n	800e3f4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e3e2:	7bfa      	ldrb	r2, [r7, #15]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	32de      	adds	r2, #222	; 0xde
 800e3e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e3f2:	e005      	b.n	800e400 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	73fb      	strb	r3, [r7, #15]
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d0e5      	beq.n	800e3cc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e406:	2b00      	cmp	r3, #0
 800e408:	d016      	beq.n	800e438 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	4798      	blx	r3
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d109      	bne.n	800e430 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2206      	movs	r2, #6
 800e420:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e428:	2103      	movs	r1, #3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	4798      	blx	r3
 800e42e:	e006      	b.n	800e43e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	220d      	movs	r2, #13
 800e434:	701a      	strb	r2, [r3, #0]
 800e436:	e002      	b.n	800e43e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	220d      	movs	r2, #13
 800e43c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e452:	2300      	movs	r3, #0
 800e454:	2200      	movs	r2, #0
 800e456:	f001 fee1 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e45a:	e084      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d017      	beq.n	800e496 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	4798      	blx	r3
 800e472:	4603      	mov	r3, r0
 800e474:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e476:	7bbb      	ldrb	r3, [r7, #14]
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d103      	bne.n	800e486 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	220b      	movs	r2, #11
 800e482:	701a      	strb	r2, [r3, #0]
 800e484:	e00a      	b.n	800e49c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800e486:	7bbb      	ldrb	r3, [r7, #14]
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d106      	bne.n	800e49c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	220d      	movs	r2, #13
 800e492:	701a      	strb	r2, [r3, #0]
 800e494:	e002      	b.n	800e49c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	220d      	movs	r2, #13
 800e49a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2205      	movs	r2, #5
 800e4a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f001 feb2 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e4b8:	e055      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d04f      	beq.n	800e564 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4ca:	695b      	ldr	r3, [r3, #20]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	4798      	blx	r3
      }
      break;
 800e4d0:	e048      	b.n	800e564 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7ff fcec 	bl	800deb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d009      	beq.n	800e4fe <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e50e:	2105      	movs	r1, #5
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d107      	bne.n	800e530 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7ff fda5 	bl	800e078 <USBH_Start>
 800e52e:	e002      	b.n	800e536 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f005 f9df 	bl	80138f4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e54a:	2300      	movs	r3, #0
 800e54c:	2200      	movs	r2, #0
 800e54e:	f001 fe65 	bl	801021c <osMessageQueuePut>
#endif
#endif
      break;
 800e552:	e008      	b.n	800e566 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800e554:	bf00      	nop
 800e556:	e006      	b.n	800e566 <USBH_Process+0x4ce>
      break;
 800e558:	bf00      	nop
 800e55a:	e004      	b.n	800e566 <USBH_Process+0x4ce>
      break;
 800e55c:	bf00      	nop
 800e55e:	e002      	b.n	800e566 <USBH_Process+0x4ce>
    break;
 800e560:	bf00      	nop
 800e562:	e000      	b.n	800e566 <USBH_Process+0x4ce>
      break;
 800e564:	bf00      	nop
  }
  return USBH_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b088      	sub	sp, #32
 800e574:	af04      	add	r7, sp, #16
 800e576:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e578:	2301      	movs	r3, #1
 800e57a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e57c:	2301      	movs	r3, #1
 800e57e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	785b      	ldrb	r3, [r3, #1]
 800e584:	2b07      	cmp	r3, #7
 800e586:	f200 8208 	bhi.w	800e99a <USBH_HandleEnum+0x42a>
 800e58a:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <USBH_HandleEnum+0x20>)
 800e58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e590:	0800e5b1 	.word	0x0800e5b1
 800e594:	0800e66f 	.word	0x0800e66f
 800e598:	0800e6d9 	.word	0x0800e6d9
 800e59c:	0800e767 	.word	0x0800e767
 800e5a0:	0800e7d1 	.word	0x0800e7d1
 800e5a4:	0800e841 	.word	0x0800e841
 800e5a8:	0800e8dd 	.word	0x0800e8dd
 800e5ac:	0800e95b 	.word	0x0800e95b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e5b0:	2108      	movs	r1, #8
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 faec 	bl	800eb90 <USBH_Get_DevDesc>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d130      	bne.n	800e624 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	7919      	ldrb	r1, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e5e6:	b292      	uxth	r2, r2
 800e5e8:	9202      	str	r2, [sp, #8]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	9201      	str	r2, [sp, #4]
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2280      	movs	r2, #128	; 0x80
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 f9f1 	bl	800f9dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7959      	ldrb	r1, [r3, #5]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e60e:	b292      	uxth	r2, r2
 800e610:	9202      	str	r2, [sp, #8]
 800e612:	2200      	movs	r2, #0
 800e614:	9201      	str	r2, [sp, #4]
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	4603      	mov	r3, r0
 800e61a:	2200      	movs	r2, #0
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f001 f9dd 	bl	800f9dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e622:	e1bc      	b.n	800e99e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e624:	7bbb      	ldrb	r3, [r7, #14]
 800e626:	2b03      	cmp	r3, #3
 800e628:	f040 81b9 	bne.w	800e99e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e632:	3301      	adds	r3, #1
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e642:	2b03      	cmp	r3, #3
 800e644:	d903      	bls.n	800e64e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	220d      	movs	r2, #13
 800e64a:	701a      	strb	r2, [r3, #0]
      break;
 800e64c:	e1a7      	b.n	800e99e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	795b      	ldrb	r3, [r3, #5]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 fa11 	bl	800fa7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	791b      	ldrb	r3, [r3, #4]
 800e65e:	4619      	mov	r1, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f001 fa0b 	bl	800fa7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	701a      	strb	r2, [r3, #0]
      break;
 800e66c:	e197      	b.n	800e99e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e66e:	2112      	movs	r1, #18
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fa8d 	bl	800eb90 <USBH_Get_DevDesc>
 800e676:	4603      	mov	r3, r0
 800e678:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d103      	bne.n	800e688 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2202      	movs	r2, #2
 800e684:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e686:	e18c      	b.n	800e9a2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e688:	7bbb      	ldrb	r3, [r7, #14]
 800e68a:	2b03      	cmp	r3, #3
 800e68c:	f040 8189 	bne.w	800e9a2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e696:	3301      	adds	r3, #1
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d903      	bls.n	800e6b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	220d      	movs	r2, #13
 800e6ae:	701a      	strb	r2, [r3, #0]
      break;
 800e6b0:	e177      	b.n	800e9a2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	795b      	ldrb	r3, [r3, #5]
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f001 f9df 	bl	800fa7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	791b      	ldrb	r3, [r3, #4]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f001 f9d9 	bl	800fa7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	701a      	strb	r2, [r3, #0]
      break;
 800e6d6:	e164      	b.n	800e9a2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e6d8:	2101      	movs	r1, #1
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fb04 	bl	800ece8 <USBH_SetAddress>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e6e4:	7bbb      	ldrb	r3, [r7, #14]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d132      	bne.n	800e750 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e6ea:	2002      	movs	r0, #2
 800e6ec:	f005 fa66 	bl	8013bbc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2203      	movs	r2, #3
 800e6fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	7919      	ldrb	r1, [r3, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e712:	b292      	uxth	r2, r2
 800e714:	9202      	str	r2, [sp, #8]
 800e716:	2200      	movs	r2, #0
 800e718:	9201      	str	r2, [sp, #4]
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	4603      	mov	r3, r0
 800e71e:	2280      	movs	r2, #128	; 0x80
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f001 f95b 	bl	800f9dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	7959      	ldrb	r1, [r3, #5]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e73a:	b292      	uxth	r2, r2
 800e73c:	9202      	str	r2, [sp, #8]
 800e73e:	2200      	movs	r2, #0
 800e740:	9201      	str	r2, [sp, #4]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	4603      	mov	r3, r0
 800e746:	2200      	movs	r2, #0
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f001 f947 	bl	800f9dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e74e:	e12a      	b.n	800e9a6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e750:	7bbb      	ldrb	r3, [r7, #14]
 800e752:	2b03      	cmp	r3, #3
 800e754:	f040 8127 	bne.w	800e9a6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	220d      	movs	r2, #13
 800e75c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	705a      	strb	r2, [r3, #1]
      break;
 800e764:	e11f      	b.n	800e9a6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e766:	2109      	movs	r1, #9
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fa39 	bl	800ebe0 <USBH_Get_CfgDesc>
 800e76e:	4603      	mov	r3, r0
 800e770:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d103      	bne.n	800e780 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2204      	movs	r2, #4
 800e77c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e77e:	e114      	b.n	800e9aa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	2b03      	cmp	r3, #3
 800e784:	f040 8111 	bne.w	800e9aa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e78e:	3301      	adds	r3, #1
 800e790:	b2da      	uxtb	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	d903      	bls.n	800e7aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	220d      	movs	r2, #13
 800e7a6:	701a      	strb	r2, [r3, #0]
      break;
 800e7a8:	e0ff      	b.n	800e9aa <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	795b      	ldrb	r3, [r3, #5]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 f963 	bl	800fa7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	791b      	ldrb	r3, [r3, #4]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f001 f95d 	bl	800fa7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	701a      	strb	r2, [r3, #0]
      break;
 800e7ce:	e0ec      	b.n	800e9aa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fa01 	bl	800ebe0 <USBH_Get_CfgDesc>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e7e2:	7bbb      	ldrb	r3, [r7, #14]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d103      	bne.n	800e7f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2205      	movs	r2, #5
 800e7ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e7ee:	e0de      	b.n	800e9ae <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7f0:	7bbb      	ldrb	r3, [r7, #14]
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	f040 80db 	bne.w	800e9ae <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7fe:	3301      	adds	r3, #1
 800e800:	b2da      	uxtb	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e80e:	2b03      	cmp	r3, #3
 800e810:	d903      	bls.n	800e81a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	220d      	movs	r2, #13
 800e816:	701a      	strb	r2, [r3, #0]
      break;
 800e818:	e0c9      	b.n	800e9ae <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	795b      	ldrb	r3, [r3, #5]
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 f92b 	bl	800fa7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	791b      	ldrb	r3, [r3, #4]
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f001 f925 	bl	800fa7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
      break;
 800e83e:	e0b6      	b.n	800e9ae <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e846:	2b00      	cmp	r3, #0
 800e848:	d036      	beq.n	800e8b8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e856:	23ff      	movs	r3, #255	; 0xff
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 f9e5 	bl	800ec28 <USBH_Get_StringDesc>
 800e85e:	4603      	mov	r3, r0
 800e860:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e862:	7bbb      	ldrb	r3, [r7, #14]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d111      	bne.n	800e88c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2206      	movs	r2, #6
 800e86c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2205      	movs	r2, #5
 800e872:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e882:	2300      	movs	r3, #0
 800e884:	2200      	movs	r2, #0
 800e886:	f001 fcc9 	bl	801021c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e88a:	e092      	b.n	800e9b2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e88c:	7bbb      	ldrb	r3, [r7, #14]
 800e88e:	2b03      	cmp	r3, #3
 800e890:	f040 808f 	bne.w	800e9b2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2206      	movs	r2, #6
 800e898:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2205      	movs	r2, #5
 800e89e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f001 fcb3 	bl	801021c <osMessageQueuePut>
      break;
 800e8b6:	e07c      	b.n	800e9b2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2206      	movs	r2, #6
 800e8bc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2205      	movs	r2, #5
 800e8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f001 fca1 	bl	801021c <osMessageQueuePut>
      break;
 800e8da:	e06a      	b.n	800e9b2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d027      	beq.n	800e936 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e8f2:	23ff      	movs	r3, #255	; 0xff
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f997 	bl	800ec28 <USBH_Get_StringDesc>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e8fe:	7bbb      	ldrb	r3, [r7, #14]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d103      	bne.n	800e90c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2207      	movs	r2, #7
 800e908:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e90a:	e054      	b.n	800e9b6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e90c:	7bbb      	ldrb	r3, [r7, #14]
 800e90e:	2b03      	cmp	r3, #3
 800e910:	d151      	bne.n	800e9b6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2207      	movs	r2, #7
 800e916:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2205      	movs	r2, #5
 800e91c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e92c:	2300      	movs	r3, #0
 800e92e:	2200      	movs	r2, #0
 800e930:	f001 fc74 	bl	801021c <osMessageQueuePut>
      break;
 800e934:	e03f      	b.n	800e9b6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2207      	movs	r2, #7
 800e93a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2205      	movs	r2, #5
 800e940:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e950:	2300      	movs	r3, #0
 800e952:	2200      	movs	r2, #0
 800e954:	f001 fc62 	bl	801021c <osMessageQueuePut>
      break;
 800e958:	e02d      	b.n	800e9b6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e960:	2b00      	cmp	r3, #0
 800e962:	d017      	beq.n	800e994 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e970:	23ff      	movs	r3, #255	; 0xff
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f958 	bl	800ec28 <USBH_Get_StringDesc>
 800e978:	4603      	mov	r3, r0
 800e97a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e986:	e018      	b.n	800e9ba <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e988:	7bbb      	ldrb	r3, [r7, #14]
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d115      	bne.n	800e9ba <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	73fb      	strb	r3, [r7, #15]
      break;
 800e992:	e012      	b.n	800e9ba <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	73fb      	strb	r3, [r7, #15]
      break;
 800e998:	e00f      	b.n	800e9ba <USBH_HandleEnum+0x44a>

    default:
      break;
 800e99a:	bf00      	nop
 800e99c:	e00e      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e99e:	bf00      	nop
 800e9a0:	e00c      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9a2:	bf00      	nop
 800e9a4:	e00a      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9a6:	bf00      	nop
 800e9a8:	e008      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9aa:	bf00      	nop
 800e9ac:	e006      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9ae:	bf00      	nop
 800e9b0:	e004      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9b2:	bf00      	nop
 800e9b4:	e002      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9b6:	bf00      	nop
 800e9b8:	e000      	b.n	800e9bc <USBH_HandleEnum+0x44c>
      break;
 800e9ba:	bf00      	nop
  }
  return Status;
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop

0800e9c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e9da:	bf00      	nop
 800e9dc:	370c      	adds	r7, #12
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f804 	bl	800ea0a <USBH_HandleSof>
}
 800ea02:	bf00      	nop
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b0b      	cmp	r3, #11
 800ea1a:	d10a      	bne.n	800ea32 <USBH_HandleSof+0x28>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d005      	beq.n	800ea32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea2c:	699b      	ldr	r3, [r3, #24]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	4798      	blx	r3
  }
}
 800ea32:	bf00      	nop
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ea5e:	2300      	movs	r3, #0
 800ea60:	2200      	movs	r2, #0
 800ea62:	f001 fbdb 	bl	801021c <osMessageQueuePut>
#endif
#endif

  return;
 800ea66:	bf00      	nop
}
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b083      	sub	sp, #12
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ea7e:	bf00      	nop
}
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eabe:	2300      	movs	r3, #0
 800eac0:	2200      	movs	r2, #0
 800eac2:	f001 fbab 	bl	801021c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f004 ff1a 	bl	801392a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	791b      	ldrb	r3, [r3, #4]
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 ffbd 	bl	800fa7c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	795b      	ldrb	r3, [r3, #5]
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 ffb7 	bl	800fa7c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eb22:	2300      	movs	r3, #0
 800eb24:	2200      	movs	r2, #0
 800eb26:	f001 fb79 	bl	801021c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800eb48:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f001 fbc5 	bl	80102dc <osMessageQueueGet>
 800eb52:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1f0      	bne.n	800eb3c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f7ff fa9c 	bl	800e098 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800eb60:	e7ec      	b.n	800eb3c <USBH_Process_OS+0x8>

0800eb62 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b082      	sub	sp, #8
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eb7e:	2300      	movs	r3, #0
 800eb80:	2200      	movs	r2, #0
 800eb82:	f001 fb4b 	bl	801021c <osMessageQueuePut>
#endif

  return USBH_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af02      	add	r7, sp, #8
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800eba2:	78fb      	ldrb	r3, [r7, #3]
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebae:	2100      	movs	r1, #0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f864 	bl	800ec7e <USBH_GetDescriptor>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10a      	bne.n	800ebd6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebcc:	78fa      	ldrb	r2, [r7, #3]
 800ebce:	b292      	uxth	r2, r2
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	f000 f918 	bl	800ee06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af02      	add	r7, sp, #8
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	331c      	adds	r3, #28
 800ebf0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ebf2:	887b      	ldrh	r3, [r7, #2]
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f83d 	bl	800ec7e <USBH_GetDescriptor>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d107      	bne.n	800ec1e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ec0e:	887b      	ldrh	r3, [r7, #2]
 800ec10:	461a      	mov	r2, r3
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f987 	bl	800ef28 <USBH_ParseCfgDesc>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b088      	sub	sp, #32
 800ec2c:	af02      	add	r7, sp, #8
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	607a      	str	r2, [r7, #4]
 800ec32:	461a      	mov	r2, r3
 800ec34:	460b      	mov	r3, r1
 800ec36:	72fb      	strb	r3, [r7, #11]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ec3c:	7afb      	ldrb	r3, [r7, #11]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ec44:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ec4c:	893b      	ldrh	r3, [r7, #8]
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	460b      	mov	r3, r1
 800ec52:	2100      	movs	r1, #0
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f812 	bl	800ec7e <USBH_GetDescriptor>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d107      	bne.n	800ec74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec6a:	893a      	ldrh	r2, [r7, #8]
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 fb24 	bl	800f2bc <USBH_ParseStringDesc>
  }

  return status;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3718      	adds	r7, #24
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	607b      	str	r3, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	72fb      	strb	r3, [r7, #11]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	789b      	ldrb	r3, [r3, #2]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d11c      	bne.n	800ecd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ec98:	7afb      	ldrb	r3, [r7, #11]
 800ec9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2206      	movs	r2, #6
 800eca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	893a      	ldrh	r2, [r7, #8]
 800ecae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ecb0:	893b      	ldrh	r3, [r7, #8]
 800ecb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ecb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecba:	d104      	bne.n	800ecc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f240 4209 	movw	r2, #1033	; 0x409
 800ecc2:	829a      	strh	r2, [r3, #20]
 800ecc4:	e002      	b.n	800eccc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	8b3a      	ldrh	r2, [r7, #24]
 800ecd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ecd2:	8b3b      	ldrh	r3, [r7, #24]
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f000 fb3d 	bl	800f358 <USBH_CtlReq>
 800ecde:	4603      	mov	r3, r0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	789b      	ldrb	r3, [r3, #2]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d10f      	bne.n	800ed1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2205      	movs	r2, #5
 800ed06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ed08:	78fb      	ldrb	r3, [r7, #3]
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	2100      	movs	r1, #0
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fb19 	bl	800f358 <USBH_CtlReq>
 800ed26:	4603      	mov	r3, r0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	789b      	ldrb	r3, [r3, #2]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d10e      	bne.n	800ed62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2209      	movs	r2, #9
 800ed4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	887a      	ldrh	r2, [r7, #2]
 800ed54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ed62:	2200      	movs	r2, #0
 800ed64:	2100      	movs	r1, #0
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 faf6 	bl	800f358 <USBH_CtlReq>
 800ed6c:	4603      	mov	r3, r0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b082      	sub	sp, #8
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	789b      	ldrb	r3, [r3, #2]
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d10f      	bne.n	800edaa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2203      	movs	r2, #3
 800ed94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ed96:	78fb      	ldrb	r3, [r7, #3]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800edaa:	2200      	movs	r2, #0
 800edac:	2100      	movs	r1, #0
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 fad2 	bl	800f358 <USBH_CtlReq>
 800edb4:	4603      	mov	r3, r0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	460b      	mov	r3, r1
 800edc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	789b      	ldrb	r3, [r3, #2]
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d10f      	bne.n	800edf2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2202      	movs	r2, #2
 800edd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800edf2:	2200      	movs	r2, #0
 800edf4:	2100      	movs	r1, #0
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 faae 	bl	800f358 <USBH_CtlReq>
 800edfc:	4603      	mov	r3, r0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ee06:	b480      	push	{r7}
 800ee08:	b085      	sub	sp, #20
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	60f8      	str	r0, [r7, #12]
 800ee0e:	60b9      	str	r1, [r7, #8]
 800ee10:	4613      	mov	r3, r2
 800ee12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	785a      	ldrb	r2, [r3, #1]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	3302      	adds	r3, #2
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	3303      	adds	r3, #3
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	021b      	lsls	r3, r3, #8
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	791a      	ldrb	r2, [r3, #4]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	795a      	ldrb	r2, [r3, #5]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	799a      	ldrb	r2, [r3, #6]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	79da      	ldrb	r2, [r3, #7]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	79db      	ldrb	r3, [r3, #7]
 800ee64:	2b20      	cmp	r3, #32
 800ee66:	dc11      	bgt.n	800ee8c <USBH_ParseDevDesc+0x86>
 800ee68:	2b08      	cmp	r3, #8
 800ee6a:	db16      	blt.n	800ee9a <USBH_ParseDevDesc+0x94>
 800ee6c:	3b08      	subs	r3, #8
 800ee6e:	2201      	movs	r2, #1
 800ee70:	fa02 f303 	lsl.w	r3, r2, r3
 800ee74:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ee78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bf14      	ite	ne
 800ee80:	2301      	movne	r3, #1
 800ee82:	2300      	moveq	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <USBH_ParseDevDesc+0x8a>
 800ee8a:	e006      	b.n	800ee9a <USBH_ParseDevDesc+0x94>
 800ee8c:	2b40      	cmp	r3, #64	; 0x40
 800ee8e:	d104      	bne.n	800ee9a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	79da      	ldrb	r2, [r3, #7]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	71da      	strb	r2, [r3, #7]
      break;
 800ee98:	e003      	b.n	800eea2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2240      	movs	r2, #64	; 0x40
 800ee9e:	71da      	strb	r2, [r3, #7]
      break;
 800eea0:	bf00      	nop
  }

  if (length > 8U)
 800eea2:	88fb      	ldrh	r3, [r7, #6]
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	d939      	bls.n	800ef1c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	3308      	adds	r3, #8
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	3309      	adds	r3, #9
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	021b      	lsls	r3, r3, #8
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4313      	orrs	r3, r2
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	330a      	adds	r3, #10
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	330b      	adds	r3, #11
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	021b      	lsls	r3, r3, #8
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	4313      	orrs	r3, r2
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	330c      	adds	r3, #12
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	330d      	adds	r3, #13
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	021b      	lsls	r3, r3, #8
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4313      	orrs	r3, r2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	7b9a      	ldrb	r2, [r3, #14]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	7bda      	ldrb	r2, [r3, #15]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	7c1a      	ldrb	r2, [r3, #16]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	7c5a      	ldrb	r2, [r3, #17]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	745a      	strb	r2, [r3, #17]
  }
}
 800ef1c:	bf00      	nop
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08c      	sub	sp, #48	; 0x30
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	4613      	mov	r3, r2
 800ef34:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ef3c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	781a      	ldrb	r2, [r3, #0]
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	785a      	ldrb	r2, [r3, #1]
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	3302      	adds	r3, #2
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	3303      	adds	r3, #3
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef84:	bf28      	it	cs
 800ef86:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	791a      	ldrb	r2, [r3, #4]
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	795a      	ldrb	r2, [r3, #5]
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	799a      	ldrb	r2, [r3, #6]
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	79da      	ldrb	r2, [r3, #7]
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	7a1a      	ldrb	r2, [r3, #8]
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b09      	cmp	r3, #9
 800efbe:	d002      	beq.n	800efc6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	2209      	movs	r2, #9
 800efc4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800efc6:	88fb      	ldrh	r3, [r7, #6]
 800efc8:	2b09      	cmp	r3, #9
 800efca:	f240 809d 	bls.w	800f108 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800efce:	2309      	movs	r3, #9
 800efd0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800efd6:	e081      	b.n	800f0dc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800efd8:	f107 0316 	add.w	r3, r7, #22
 800efdc:	4619      	mov	r1, r3
 800efde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efe0:	f000 f99f 	bl	800f322 <USBH_GetNextDesc>
 800efe4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	785b      	ldrb	r3, [r3, #1]
 800efea:	2b04      	cmp	r3, #4
 800efec:	d176      	bne.n	800f0dc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800efee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	2b09      	cmp	r3, #9
 800eff4:	d002      	beq.n	800effc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800eff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff8:	2209      	movs	r2, #9
 800effa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800effc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f000:	221a      	movs	r2, #26
 800f002:	fb02 f303 	mul.w	r3, r2, r3
 800f006:	3308      	adds	r3, #8
 800f008:	6a3a      	ldr	r2, [r7, #32]
 800f00a:	4413      	add	r3, r2
 800f00c:	3302      	adds	r3, #2
 800f00e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f012:	69f8      	ldr	r0, [r7, #28]
 800f014:	f000 f87e 	bl	800f114 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f018:	2300      	movs	r3, #0
 800f01a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f01e:	2300      	movs	r3, #0
 800f020:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f022:	e043      	b.n	800f0ac <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f024:	f107 0316 	add.w	r3, r7, #22
 800f028:	4619      	mov	r1, r3
 800f02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f02c:	f000 f979 	bl	800f322 <USBH_GetNextDesc>
 800f030:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	785b      	ldrb	r3, [r3, #1]
 800f036:	2b05      	cmp	r3, #5
 800f038:	d138      	bne.n	800f0ac <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	795b      	ldrb	r3, [r3, #5]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d10f      	bne.n	800f062 <USBH_ParseCfgDesc+0x13a>
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	799b      	ldrb	r3, [r3, #6]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d10b      	bne.n	800f062 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	79db      	ldrb	r3, [r3, #7]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10f      	bne.n	800f072 <USBH_ParseCfgDesc+0x14a>
 800f052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b09      	cmp	r3, #9
 800f058:	d00b      	beq.n	800f072 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	2209      	movs	r2, #9
 800f05e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f060:	e007      	b.n	800f072 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800f062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	2b07      	cmp	r3, #7
 800f068:	d004      	beq.n	800f074 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	2207      	movs	r2, #7
 800f06e:	701a      	strb	r2, [r3, #0]
 800f070:	e000      	b.n	800f074 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f072:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f078:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f07c:	3201      	adds	r2, #1
 800f07e:	00d2      	lsls	r2, r2, #3
 800f080:	211a      	movs	r1, #26
 800f082:	fb01 f303 	mul.w	r3, r1, r3
 800f086:	4413      	add	r3, r2
 800f088:	3308      	adds	r3, #8
 800f08a:	6a3a      	ldr	r2, [r7, #32]
 800f08c:	4413      	add	r3, r2
 800f08e:	3304      	adds	r3, #4
 800f090:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f094:	69b9      	ldr	r1, [r7, #24]
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f000 f86b 	bl	800f172 <USBH_ParseEPDesc>
 800f09c:	4603      	mov	r3, r0
 800f09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f0a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	791b      	ldrb	r3, [r3, #4]
 800f0b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d204      	bcs.n	800f0c2 <USBH_ParseCfgDesc+0x19a>
 800f0b8:	6a3b      	ldr	r3, [r7, #32]
 800f0ba:	885a      	ldrh	r2, [r3, #2]
 800f0bc:	8afb      	ldrh	r3, [r7, #22]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d8b0      	bhi.n	800f024 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	791b      	ldrb	r3, [r3, #4]
 800f0c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d201      	bcs.n	800f0d2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	e01c      	b.n	800f10c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800f0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d805      	bhi.n	800f0f0 <USBH_ParseCfgDesc+0x1c8>
 800f0e4:	6a3b      	ldr	r3, [r7, #32]
 800f0e6:	885a      	ldrh	r2, [r3, #2]
 800f0e8:	8afb      	ldrh	r3, [r7, #22]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	f63f af74 	bhi.w	800efd8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	791b      	ldrb	r3, [r3, #4]
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	bf28      	it	cs
 800f0f8:	2302      	movcs	r3, #2
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f100:	429a      	cmp	r2, r3
 800f102:	d201      	bcs.n	800f108 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800f104:	2303      	movs	r3, #3
 800f106:	e001      	b.n	800f10c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800f108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3730      	adds	r7, #48	; 0x30
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	781a      	ldrb	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	785a      	ldrb	r2, [r3, #1]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	789a      	ldrb	r2, [r3, #2]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	78da      	ldrb	r2, [r3, #3]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	791a      	ldrb	r2, [r3, #4]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	795a      	ldrb	r2, [r3, #5]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	799a      	ldrb	r2, [r3, #6]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	79da      	ldrb	r2, [r3, #7]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	7a1a      	ldrb	r2, [r3, #8]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	721a      	strb	r2, [r3, #8]
}
 800f166:	bf00      	nop
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800f172:	b480      	push	{r7}
 800f174:	b087      	sub	sp, #28
 800f176:	af00      	add	r7, sp, #0
 800f178:	60f8      	str	r0, [r7, #12]
 800f17a:	60b9      	str	r1, [r7, #8]
 800f17c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	785a      	ldrb	r2, [r3, #1]
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	789a      	ldrb	r2, [r3, #2]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	78da      	ldrb	r2, [r3, #3]
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3304      	adds	r3, #4
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	3305      	adds	r3, #5
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	799a      	ldrb	r2, [r3, #6]
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	889b      	ldrh	r3, [r3, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d102      	bne.n	800f1d4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	75fb      	strb	r3, [r7, #23]
 800f1d2:	e033      	b.n	800f23c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	889b      	ldrh	r3, [r3, #4]
 800f1d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f1dc:	f023 0307 	bic.w	r3, r3, #7
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	889b      	ldrh	r3, [r3, #4]
 800f1ea:	b21a      	sxth	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	b299      	uxth	r1, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	3305      	adds	r3, #5
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	021b      	lsls	r3, r3, #8
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	430b      	orrs	r3, r1
 800f202:	b29b      	uxth	r3, r3
 800f204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d110      	bne.n	800f22e <USBH_ParseEPDesc+0xbc>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3304      	adds	r3, #4
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	b299      	uxth	r1, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	3305      	adds	r3, #5
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	b29b      	uxth	r3, r3
 800f220:	430b      	orrs	r3, r1
 800f222:	b29b      	uxth	r3, r3
 800f224:	b21b      	sxth	r3, r3
 800f226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f22a:	b21b      	sxth	r3, r3
 800f22c:	e001      	b.n	800f232 <USBH_ParseEPDesc+0xc0>
 800f22e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f232:	4313      	orrs	r3, r2
 800f234:	b21b      	sxth	r3, r3
 800f236:	b29a      	uxth	r2, r3
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f242:	2b00      	cmp	r3, #0
 800f244:	d116      	bne.n	800f274 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	78db      	ldrb	r3, [r3, #3]
 800f24a:	f003 0303 	and.w	r3, r3, #3
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d005      	beq.n	800f25e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	78db      	ldrb	r3, [r3, #3]
 800f256:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d127      	bne.n	800f2ae <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	799b      	ldrb	r3, [r3, #6]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d003      	beq.n	800f26e <USBH_ParseEPDesc+0xfc>
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	799b      	ldrb	r3, [r3, #6]
 800f26a:	2b10      	cmp	r3, #16
 800f26c:	d91f      	bls.n	800f2ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f26e:	2303      	movs	r3, #3
 800f270:	75fb      	strb	r3, [r7, #23]
 800f272:	e01c      	b.n	800f2ae <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	78db      	ldrb	r3, [r3, #3]
 800f278:	f003 0303 	and.w	r3, r3, #3
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d10a      	bne.n	800f296 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	799b      	ldrb	r3, [r3, #6]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <USBH_ParseEPDesc+0x11e>
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	799b      	ldrb	r3, [r3, #6]
 800f28c:	2b10      	cmp	r3, #16
 800f28e:	d90e      	bls.n	800f2ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f290:	2303      	movs	r3, #3
 800f292:	75fb      	strb	r3, [r7, #23]
 800f294:	e00b      	b.n	800f2ae <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	78db      	ldrb	r3, [r3, #3]
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d105      	bne.n	800f2ae <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	799b      	ldrb	r3, [r3, #6]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d101      	bne.n	800f2ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	371c      	adds	r7, #28
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b087      	sub	sp, #28
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	2b03      	cmp	r3, #3
 800f2d2:	d120      	bne.n	800f316 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	1e9a      	subs	r2, r3, #2
 800f2da:	88fb      	ldrh	r3, [r7, #6]
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	bf28      	it	cs
 800f2e0:	4613      	movcs	r3, r2
 800f2e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	82fb      	strh	r3, [r7, #22]
 800f2ee:	e00b      	b.n	800f308 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f2f0:	8afb      	ldrh	r3, [r7, #22]
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	781a      	ldrb	r2, [r3, #0]
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	3301      	adds	r3, #1
 800f300:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f302:	8afb      	ldrh	r3, [r7, #22]
 800f304:	3302      	adds	r3, #2
 800f306:	82fb      	strh	r3, [r7, #22]
 800f308:	8afa      	ldrh	r2, [r7, #22]
 800f30a:	8abb      	ldrh	r3, [r7, #20]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d3ef      	bcc.n	800f2f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2200      	movs	r2, #0
 800f314:	701a      	strb	r2, [r3, #0]
  }
}
 800f316:	bf00      	nop
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f322:	b480      	push	{r7}
 800f324:	b085      	sub	sp, #20
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	881a      	ldrh	r2, [r3, #0]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	b29b      	uxth	r3, r3
 800f336:	4413      	add	r3, r2
 800f338:	b29a      	uxth	r2, r3
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4413      	add	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f34a:	68fb      	ldr	r3, [r7, #12]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3714      	adds	r7, #20
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	4613      	mov	r3, r2
 800f364:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f366:	2301      	movs	r3, #1
 800f368:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	789b      	ldrb	r3, [r3, #2]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d002      	beq.n	800f378 <USBH_CtlReq+0x20>
 800f372:	2b02      	cmp	r3, #2
 800f374:	d01d      	beq.n	800f3b2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f376:	e043      	b.n	800f400 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	88fa      	ldrh	r2, [r7, #6]
 800f382:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2201      	movs	r2, #1
 800f388:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2202      	movs	r2, #2
 800f38e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f390:	2301      	movs	r3, #1
 800f392:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2203      	movs	r2, #3
 800f398:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f000 ff36 	bl	801021c <osMessageQueuePut>
      break;
 800f3b0:	e026      	b.n	800f400 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f000 f82a 	bl	800f40c <USBH_HandleControl>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d002      	beq.n	800f3c8 <USBH_CtlReq+0x70>
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d106      	bne.n	800f3d6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	761a      	strb	r2, [r3, #24]
 800f3d4:	e005      	b.n	800f3e2 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f3d6:	7dfb      	ldrb	r3, [r7, #23]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d102      	bne.n	800f3e2 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2203      	movs	r2, #3
 800f3e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f000 ff0f 	bl	801021c <osMessageQueuePut>
      break;
 800f3fe:	bf00      	nop
  }
  return status;
 800f400:	7dfb      	ldrb	r3, [r7, #23]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af02      	add	r7, sp, #8
 800f412:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f414:	2301      	movs	r3, #1
 800f416:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f418:	2300      	movs	r3, #0
 800f41a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7e1b      	ldrb	r3, [r3, #24]
 800f420:	3b01      	subs	r3, #1
 800f422:	2b0a      	cmp	r3, #10
 800f424:	f200 8229 	bhi.w	800f87a <USBH_HandleControl+0x46e>
 800f428:	a201      	add	r2, pc, #4	; (adr r2, 800f430 <USBH_HandleControl+0x24>)
 800f42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42e:	bf00      	nop
 800f430:	0800f45d 	.word	0x0800f45d
 800f434:	0800f477 	.word	0x0800f477
 800f438:	0800f519 	.word	0x0800f519
 800f43c:	0800f53f 	.word	0x0800f53f
 800f440:	0800f5cb 	.word	0x0800f5cb
 800f444:	0800f5f5 	.word	0x0800f5f5
 800f448:	0800f6b7 	.word	0x0800f6b7
 800f44c:	0800f6d9 	.word	0x0800f6d9
 800f450:	0800f76b 	.word	0x0800f76b
 800f454:	0800f791 	.word	0x0800f791
 800f458:	0800f823 	.word	0x0800f823
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f103 0110 	add.w	r1, r3, #16
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	795b      	ldrb	r3, [r3, #5]
 800f466:	461a      	mov	r2, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa17 	bl	800f89c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2202      	movs	r2, #2
 800f472:	761a      	strb	r2, [r3, #24]
      break;
 800f474:	e20c      	b.n	800f890 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	795b      	ldrb	r3, [r3, #5]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f004 fb43 	bl	8013b08 <USBH_LL_GetURBState>
 800f482:	4603      	mov	r3, r0
 800f484:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d12c      	bne.n	800f4e6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	7c1b      	ldrb	r3, [r3, #16]
 800f490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f494:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8adb      	ldrh	r3, [r3, #22]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00a      	beq.n	800f4b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f49e:	7b7b      	ldrb	r3, [r7, #13]
 800f4a0:	2b80      	cmp	r3, #128	; 0x80
 800f4a2:	d103      	bne.n	800f4ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	761a      	strb	r2, [r3, #24]
 800f4aa:	e00d      	b.n	800f4c8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2205      	movs	r2, #5
 800f4b0:	761a      	strb	r2, [r3, #24]
 800f4b2:	e009      	b.n	800f4c8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f4b4:	7b7b      	ldrb	r3, [r7, #13]
 800f4b6:	2b80      	cmp	r3, #128	; 0x80
 800f4b8:	d103      	bne.n	800f4c2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2209      	movs	r2, #9
 800f4be:	761a      	strb	r2, [r3, #24]
 800f4c0:	e002      	b.n	800f4c8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2207      	movs	r2, #7
 800f4c6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f4dc:	2300      	movs	r3, #0
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f000 fe9c 	bl	801021c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f4e4:	e1cb      	b.n	800f87e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	2b04      	cmp	r3, #4
 800f4ea:	d003      	beq.n	800f4f4 <USBH_HandleControl+0xe8>
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	f040 81c5 	bne.w	800f87e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	220b      	movs	r2, #11
 800f4f8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2203      	movs	r2, #3
 800f4fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f50e:	2300      	movs	r3, #0
 800f510:	2200      	movs	r2, #0
 800f512:	f000 fe83 	bl	801021c <osMessageQueuePut>
      break;
 800f516:	e1b2      	b.n	800f87e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6899      	ldr	r1, [r3, #8]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	899a      	ldrh	r2, [r3, #12]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	791b      	ldrb	r3, [r3, #4]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f9f2 	bl	800f91a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2204      	movs	r2, #4
 800f53a:	761a      	strb	r2, [r3, #24]
      break;
 800f53c:	e1a8      	b.n	800f890 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	791b      	ldrb	r3, [r3, #4]
 800f542:	4619      	mov	r1, r3
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f004 fadf 	bl	8013b08 <USBH_LL_GetURBState>
 800f54a:	4603      	mov	r3, r0
 800f54c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f54e:	7bbb      	ldrb	r3, [r7, #14]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d110      	bne.n	800f576 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2209      	movs	r2, #9
 800f558:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2203      	movs	r2, #3
 800f55e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f56e:	2300      	movs	r3, #0
 800f570:	2200      	movs	r2, #0
 800f572:	f000 fe53 	bl	801021c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f576:	7bbb      	ldrb	r3, [r7, #14]
 800f578:	2b05      	cmp	r3, #5
 800f57a:	d110      	bne.n	800f59e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f57c:	2303      	movs	r3, #3
 800f57e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2203      	movs	r2, #3
 800f584:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f594:	2300      	movs	r3, #0
 800f596:	2200      	movs	r2, #0
 800f598:	f000 fe40 	bl	801021c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f59c:	e171      	b.n	800f882 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f59e:	7bbb      	ldrb	r3, [r7, #14]
 800f5a0:	2b04      	cmp	r3, #4
 800f5a2:	f040 816e 	bne.w	800f882 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	220b      	movs	r2, #11
 800f5aa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2203      	movs	r2, #3
 800f5b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f000 fe2a 	bl	801021c <osMessageQueuePut>
      break;
 800f5c8:	e15b      	b.n	800f882 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6899      	ldr	r1, [r3, #8]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	899a      	ldrh	r2, [r3, #12]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	795b      	ldrb	r3, [r3, #5]
 800f5d6:	2001      	movs	r0, #1
 800f5d8:	9000      	str	r0, [sp, #0]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f978 	bl	800f8d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2206      	movs	r2, #6
 800f5f0:	761a      	strb	r2, [r3, #24]
      break;
 800f5f2:	e14d      	b.n	800f890 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	795b      	ldrb	r3, [r3, #5]
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f004 fa84 	bl	8013b08 <USBH_LL_GetURBState>
 800f600:	4603      	mov	r3, r0
 800f602:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f604:	7bbb      	ldrb	r3, [r7, #14]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d111      	bne.n	800f62e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2207      	movs	r2, #7
 800f60e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2203      	movs	r2, #3
 800f614:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f624:	2300      	movs	r3, #0
 800f626:	2200      	movs	r2, #0
 800f628:	f000 fdf8 	bl	801021c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f62c:	e12b      	b.n	800f886 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	2b05      	cmp	r3, #5
 800f632:	d113      	bne.n	800f65c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	220c      	movs	r2, #12
 800f638:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f63a:	2303      	movs	r3, #3
 800f63c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2203      	movs	r2, #3
 800f642:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f652:	2300      	movs	r3, #0
 800f654:	2200      	movs	r2, #0
 800f656:	f000 fde1 	bl	801021c <osMessageQueuePut>
      break;
 800f65a:	e114      	b.n	800f886 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f65c:	7bbb      	ldrb	r3, [r7, #14]
 800f65e:	2b02      	cmp	r3, #2
 800f660:	d111      	bne.n	800f686 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2205      	movs	r2, #5
 800f666:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2203      	movs	r2, #3
 800f66c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f67c:	2300      	movs	r3, #0
 800f67e:	2200      	movs	r2, #0
 800f680:	f000 fdcc 	bl	801021c <osMessageQueuePut>
      break;
 800f684:	e0ff      	b.n	800f886 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f686:	7bbb      	ldrb	r3, [r7, #14]
 800f688:	2b04      	cmp	r3, #4
 800f68a:	f040 80fc 	bne.w	800f886 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	220b      	movs	r2, #11
 800f692:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f694:	2302      	movs	r3, #2
 800f696:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2203      	movs	r2, #3
 800f69c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f000 fdb4 	bl	801021c <osMessageQueuePut>
      break;
 800f6b4:	e0e7      	b.n	800f886 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	791b      	ldrb	r3, [r3, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f92b 	bl	800f91a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2208      	movs	r2, #8
 800f6d4:	761a      	strb	r2, [r3, #24]

      break;
 800f6d6:	e0db      	b.n	800f890 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	791b      	ldrb	r3, [r3, #4]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f004 fa12 	bl	8013b08 <USBH_LL_GetURBState>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d113      	bne.n	800f716 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	220d      	movs	r2, #13
 800f6f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2203      	movs	r2, #3
 800f6fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f70c:	2300      	movs	r3, #0
 800f70e:	2200      	movs	r2, #0
 800f710:	f000 fd84 	bl	801021c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f714:	e0b9      	b.n	800f88a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f716:	7bbb      	ldrb	r3, [r7, #14]
 800f718:	2b04      	cmp	r3, #4
 800f71a:	d111      	bne.n	800f740 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	220b      	movs	r2, #11
 800f720:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2203      	movs	r2, #3
 800f726:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f736:	2300      	movs	r3, #0
 800f738:	2200      	movs	r2, #0
 800f73a:	f000 fd6f 	bl	801021c <osMessageQueuePut>
      break;
 800f73e:	e0a4      	b.n	800f88a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800f740:	7bbb      	ldrb	r3, [r7, #14]
 800f742:	2b05      	cmp	r3, #5
 800f744:	f040 80a1 	bne.w	800f88a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800f748:	2303      	movs	r3, #3
 800f74a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2203      	movs	r2, #3
 800f750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f760:	2300      	movs	r3, #0
 800f762:	2200      	movs	r2, #0
 800f764:	f000 fd5a 	bl	801021c <osMessageQueuePut>
      break;
 800f768:	e08f      	b.n	800f88a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	795b      	ldrb	r3, [r3, #5]
 800f76e:	2201      	movs	r2, #1
 800f770:	9200      	str	r2, [sp, #0]
 800f772:	2200      	movs	r2, #0
 800f774:	2100      	movs	r1, #0
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f8aa 	bl	800f8d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f782:	b29a      	uxth	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	220a      	movs	r2, #10
 800f78c:	761a      	strb	r2, [r3, #24]
      break;
 800f78e:	e07f      	b.n	800f890 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	795b      	ldrb	r3, [r3, #5]
 800f794:	4619      	mov	r1, r3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f004 f9b6 	bl	8013b08 <USBH_LL_GetURBState>
 800f79c:	4603      	mov	r3, r0
 800f79e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f7a0:	7bbb      	ldrb	r3, [r7, #14]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d113      	bne.n	800f7ce <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	220d      	movs	r2, #13
 800f7ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2203      	movs	r2, #3
 800f7b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f000 fd28 	bl	801021c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f7cc:	e05f      	b.n	800f88e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d111      	bne.n	800f7f8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2209      	movs	r2, #9
 800f7d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2203      	movs	r2, #3
 800f7de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f000 fd13 	bl	801021c <osMessageQueuePut>
      break;
 800f7f6:	e04a      	b.n	800f88e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	2b04      	cmp	r3, #4
 800f7fc:	d147      	bne.n	800f88e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	220b      	movs	r2, #11
 800f802:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2203      	movs	r2, #3
 800f808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f818:	2300      	movs	r3, #0
 800f81a:	2200      	movs	r2, #0
 800f81c:	f000 fcfe 	bl	801021c <osMessageQueuePut>
      break;
 800f820:	e035      	b.n	800f88e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	7e5b      	ldrb	r3, [r3, #25]
 800f826:	3301      	adds	r3, #1
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	765a      	strb	r2, [r3, #25]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	7e5b      	ldrb	r3, [r3, #25]
 800f832:	2b02      	cmp	r3, #2
 800f834:	d806      	bhi.n	800f844 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2201      	movs	r2, #1
 800f83a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f842:	e025      	b.n	800f890 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f84a:	2106      	movs	r1, #6
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	795b      	ldrb	r3, [r3, #5]
 800f85a:	4619      	mov	r1, r3
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f90d 	bl	800fa7c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	791b      	ldrb	r3, [r3, #4]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f907 	bl	800fa7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f874:	2302      	movs	r3, #2
 800f876:	73fb      	strb	r3, [r7, #15]
      break;
 800f878:	e00a      	b.n	800f890 <USBH_HandleControl+0x484>

    default:
      break;
 800f87a:	bf00      	nop
 800f87c:	e008      	b.n	800f890 <USBH_HandleControl+0x484>
      break;
 800f87e:	bf00      	nop
 800f880:	e006      	b.n	800f890 <USBH_HandleControl+0x484>
      break;
 800f882:	bf00      	nop
 800f884:	e004      	b.n	800f890 <USBH_HandleControl+0x484>
      break;
 800f886:	bf00      	nop
 800f888:	e002      	b.n	800f890 <USBH_HandleControl+0x484>
      break;
 800f88a:	bf00      	nop
 800f88c:	e000      	b.n	800f890 <USBH_HandleControl+0x484>
      break;
 800f88e:	bf00      	nop
  }

  return status;
 800f890:	7bfb      	ldrb	r3, [r7, #15]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop

0800f89c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b088      	sub	sp, #32
 800f8a0:	af04      	add	r7, sp, #16
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f8aa:	79f9      	ldrb	r1, [r7, #7]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	9303      	str	r3, [sp, #12]
 800f8b0:	2308      	movs	r3, #8
 800f8b2:	9302      	str	r3, [sp, #8]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	2300      	movs	r3, #0
 800f8be:	2200      	movs	r2, #0
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f004 f8f0 	bl	8013aa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3710      	adds	r7, #16
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b088      	sub	sp, #32
 800f8d4:	af04      	add	r7, sp, #16
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	4611      	mov	r1, r2
 800f8dc:	461a      	mov	r2, r3
 800f8de:	460b      	mov	r3, r1
 800f8e0:	80fb      	strh	r3, [r7, #6]
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f8f4:	7979      	ldrb	r1, [r7, #5]
 800f8f6:	7e3b      	ldrb	r3, [r7, #24]
 800f8f8:	9303      	str	r3, [sp, #12]
 800f8fa:	88fb      	ldrh	r3, [r7, #6]
 800f8fc:	9302      	str	r3, [sp, #8]
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	2301      	movs	r3, #1
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	2300      	movs	r3, #0
 800f908:	2200      	movs	r2, #0
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f004 f8cb 	bl	8013aa6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b088      	sub	sp, #32
 800f91e:	af04      	add	r7, sp, #16
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	60b9      	str	r1, [r7, #8]
 800f924:	4611      	mov	r1, r2
 800f926:	461a      	mov	r2, r3
 800f928:	460b      	mov	r3, r1
 800f92a:	80fb      	strh	r3, [r7, #6]
 800f92c:	4613      	mov	r3, r2
 800f92e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f930:	7979      	ldrb	r1, [r7, #5]
 800f932:	2300      	movs	r3, #0
 800f934:	9303      	str	r3, [sp, #12]
 800f936:	88fb      	ldrh	r3, [r7, #6]
 800f938:	9302      	str	r3, [sp, #8]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	2301      	movs	r3, #1
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	2300      	movs	r3, #0
 800f944:	2201      	movs	r2, #1
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f004 f8ad 	bl	8013aa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f94c:	2300      	movs	r3, #0

}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b088      	sub	sp, #32
 800f95a:	af04      	add	r7, sp, #16
 800f95c:	60f8      	str	r0, [r7, #12]
 800f95e:	60b9      	str	r1, [r7, #8]
 800f960:	4611      	mov	r1, r2
 800f962:	461a      	mov	r2, r3
 800f964:	460b      	mov	r3, r1
 800f966:	80fb      	strh	r3, [r7, #6]
 800f968:	4613      	mov	r3, r2
 800f96a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f976:	2300      	movs	r3, #0
 800f978:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f97a:	7979      	ldrb	r1, [r7, #5]
 800f97c:	7e3b      	ldrb	r3, [r7, #24]
 800f97e:	9303      	str	r3, [sp, #12]
 800f980:	88fb      	ldrh	r3, [r7, #6]
 800f982:	9302      	str	r3, [sp, #8]
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	9301      	str	r3, [sp, #4]
 800f988:	2301      	movs	r3, #1
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	2302      	movs	r3, #2
 800f98e:	2200      	movs	r2, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f004 f888 	bl	8013aa6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af04      	add	r7, sp, #16
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	80fb      	strh	r3, [r7, #6]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f9b6:	7979      	ldrb	r1, [r7, #5]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9303      	str	r3, [sp, #12]
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	9302      	str	r3, [sp, #8]
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	9301      	str	r3, [sp, #4]
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	2302      	movs	r3, #2
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f004 f86a 	bl	8013aa6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af04      	add	r7, sp, #16
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	70fb      	strb	r3, [r7, #3]
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	70bb      	strb	r3, [r7, #2]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f9f6:	7878      	ldrb	r0, [r7, #1]
 800f9f8:	78ba      	ldrb	r2, [r7, #2]
 800f9fa:	78f9      	ldrb	r1, [r7, #3]
 800f9fc:	8b3b      	ldrh	r3, [r7, #24]
 800f9fe:	9302      	str	r3, [sp, #8]
 800fa00:	7d3b      	ldrb	r3, [r7, #20]
 800fa02:	9301      	str	r3, [sp, #4]
 800fa04:	7c3b      	ldrb	r3, [r7, #16]
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	4603      	mov	r3, r0
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f003 fffd 	bl	8013a0a <USBH_LL_OpenPipe>

  return USBH_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b082      	sub	sp, #8
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	460b      	mov	r3, r1
 800fa24:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800fa26:	78fb      	ldrb	r3, [r7, #3]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f004 f81c 	bl	8013a68 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	460b      	mov	r3, r1
 800fa44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f836 	bl	800fab8 <USBH_GetFreePipe>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fa50:	89fb      	ldrh	r3, [r7, #14]
 800fa52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00a      	beq.n	800fa70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800fa5a:	78fa      	ldrb	r2, [r7, #3]
 800fa5c:	89fb      	ldrh	r3, [r7, #14]
 800fa5e:	f003 030f 	and.w	r3, r3, #15
 800fa62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	33e0      	adds	r3, #224	; 0xe0
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	440b      	add	r3, r1
 800fa6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fa70:	89fb      	ldrh	r3, [r7, #14]
 800fa72:	b2db      	uxtb	r3, r3
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3710      	adds	r7, #16
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	460b      	mov	r3, r1
 800fa86:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800fa88:	78fb      	ldrb	r3, [r7, #3]
 800fa8a:	2b0f      	cmp	r3, #15
 800fa8c:	d80d      	bhi.n	800faaa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	33e0      	adds	r3, #224	; 0xe0
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	33e0      	adds	r3, #224	; 0xe0
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	440b      	add	r3, r1
 800faa8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fac0:	2300      	movs	r3, #0
 800fac2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800fac4:	2300      	movs	r3, #0
 800fac6:	73fb      	strb	r3, [r7, #15]
 800fac8:	e00f      	b.n	800faea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800faca:	7bfb      	ldrb	r3, [r7, #15]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	33e0      	adds	r3, #224	; 0xe0
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4413      	add	r3, r2
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d102      	bne.n	800fae4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	e007      	b.n	800faf4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	3301      	adds	r3, #1
 800fae8:	73fb      	strb	r3, [r7, #15]
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b0f      	cmp	r3, #15
 800faee:	d9ec      	bls.n	800faca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800faf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3714      	adds	r7, #20
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <__NVIC_SetPriority>:
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4603      	mov	r3, r0
 800fb08:	6039      	str	r1, [r7, #0]
 800fb0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fb0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	db0a      	blt.n	800fb2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	490c      	ldr	r1, [pc, #48]	; (800fb4c <__NVIC_SetPriority+0x4c>)
 800fb1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb1e:	0112      	lsls	r2, r2, #4
 800fb20:	b2d2      	uxtb	r2, r2
 800fb22:	440b      	add	r3, r1
 800fb24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fb28:	e00a      	b.n	800fb40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	4908      	ldr	r1, [pc, #32]	; (800fb50 <__NVIC_SetPriority+0x50>)
 800fb30:	79fb      	ldrb	r3, [r7, #7]
 800fb32:	f003 030f 	and.w	r3, r3, #15
 800fb36:	3b04      	subs	r3, #4
 800fb38:	0112      	lsls	r2, r2, #4
 800fb3a:	b2d2      	uxtb	r2, r2
 800fb3c:	440b      	add	r3, r1
 800fb3e:	761a      	strb	r2, [r3, #24]
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr
 800fb4c:	e000e100 	.word	0xe000e100
 800fb50:	e000ed00 	.word	0xe000ed00

0800fb54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fb58:	4b05      	ldr	r3, [pc, #20]	; (800fb70 <SysTick_Handler+0x1c>)
 800fb5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fb5c:	f002 fb58 	bl	8012210 <xTaskGetSchedulerState>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d001      	beq.n	800fb6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fb66:	f003 faf7 	bl	8013158 <xPortSysTickHandler>
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	e000e010 	.word	0xe000e010

0800fb74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fb78:	2100      	movs	r1, #0
 800fb7a:	f06f 0004 	mvn.w	r0, #4
 800fb7e:	f7ff ffbf 	bl	800fb00 <__NVIC_SetPriority>
#endif
}
 800fb82:	bf00      	nop
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb8e:	f3ef 8305 	mrs	r3, IPSR
 800fb92:	603b      	str	r3, [r7, #0]
  return(result);
 800fb94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fb9a:	f06f 0305 	mvn.w	r3, #5
 800fb9e:	607b      	str	r3, [r7, #4]
 800fba0:	e00c      	b.n	800fbbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fba2:	4b0a      	ldr	r3, [pc, #40]	; (800fbcc <osKernelInitialize+0x44>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d105      	bne.n	800fbb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fbaa:	4b08      	ldr	r3, [pc, #32]	; (800fbcc <osKernelInitialize+0x44>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	607b      	str	r3, [r7, #4]
 800fbb4:	e002      	b.n	800fbbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fbbc:	687b      	ldr	r3, [r7, #4]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	370c      	adds	r7, #12
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	200007dc 	.word	0x200007dc

0800fbd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbd6:	f3ef 8305 	mrs	r3, IPSR
 800fbda:	603b      	str	r3, [r7, #0]
  return(result);
 800fbdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d003      	beq.n	800fbea <osKernelStart+0x1a>
    stat = osErrorISR;
 800fbe2:	f06f 0305 	mvn.w	r3, #5
 800fbe6:	607b      	str	r3, [r7, #4]
 800fbe8:	e010      	b.n	800fc0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fbea:	4b0b      	ldr	r3, [pc, #44]	; (800fc18 <osKernelStart+0x48>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d109      	bne.n	800fc06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fbf2:	f7ff ffbf 	bl	800fb74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fbf6:	4b08      	ldr	r3, [pc, #32]	; (800fc18 <osKernelStart+0x48>)
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fbfc:	f001 fe9a 	bl	8011934 <vTaskStartScheduler>
      stat = osOK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	607b      	str	r3, [r7, #4]
 800fc04:	e002      	b.n	800fc0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fc06:	f04f 33ff 	mov.w	r3, #4294967295
 800fc0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc0c:	687b      	ldr	r3, [r7, #4]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	200007dc 	.word	0x200007dc

0800fc1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08e      	sub	sp, #56	; 0x38
 800fc20:	af04      	add	r7, sp, #16
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc2c:	f3ef 8305 	mrs	r3, IPSR
 800fc30:	617b      	str	r3, [r7, #20]
  return(result);
 800fc32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d17e      	bne.n	800fd36 <osThreadNew+0x11a>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d07b      	beq.n	800fd36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fc3e:	2380      	movs	r3, #128	; 0x80
 800fc40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fc42:	2318      	movs	r3, #24
 800fc44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fc46:	2300      	movs	r3, #0
 800fc48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d045      	beq.n	800fce2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <osThreadNew+0x48>
        name = attr->name;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d008      	beq.n	800fc8a <osThreadNew+0x6e>
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	2b38      	cmp	r3, #56	; 0x38
 800fc7c:	d805      	bhi.n	800fc8a <osThreadNew+0x6e>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <osThreadNew+0x72>
        return (NULL);
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	e054      	b.n	800fd38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	695b      	ldr	r3, [r3, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	089b      	lsrs	r3, r3, #2
 800fc9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00e      	beq.n	800fcc4 <osThreadNew+0xa8>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	2b5f      	cmp	r3, #95	; 0x5f
 800fcac:	d90a      	bls.n	800fcc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d006      	beq.n	800fcc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	695b      	ldr	r3, [r3, #20]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <osThreadNew+0xa8>
        mem = 1;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	61bb      	str	r3, [r7, #24]
 800fcc2:	e010      	b.n	800fce6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10c      	bne.n	800fce6 <osThreadNew+0xca>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d108      	bne.n	800fce6 <osThreadNew+0xca>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d104      	bne.n	800fce6 <osThreadNew+0xca>
          mem = 0;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	61bb      	str	r3, [r7, #24]
 800fce0:	e001      	b.n	800fce6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d110      	bne.n	800fd0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fcf4:	9202      	str	r2, [sp, #8]
 800fcf6:	9301      	str	r3, [sp, #4]
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	6a3a      	ldr	r2, [r7, #32]
 800fd00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	f001 fc3e 	bl	8011584 <xTaskCreateStatic>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	613b      	str	r3, [r7, #16]
 800fd0c:	e013      	b.n	800fd36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d110      	bne.n	800fd36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	f107 0310 	add.w	r3, r7, #16
 800fd1c:	9301      	str	r3, [sp, #4]
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f001 fc89 	bl	801163e <xTaskCreate>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d001      	beq.n	800fd36 <osThreadNew+0x11a>
            hTask = NULL;
 800fd32:	2300      	movs	r3, #0
 800fd34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fd36:	693b      	ldr	r3, [r7, #16]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3728      	adds	r7, #40	; 0x28
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd48:	f3ef 8305 	mrs	r3, IPSR
 800fd4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d003      	beq.n	800fd5c <osDelay+0x1c>
    stat = osErrorISR;
 800fd54:	f06f 0305 	mvn.w	r3, #5
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	e007      	b.n	800fd6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d002      	beq.n	800fd6c <osDelay+0x2c>
      vTaskDelay(ticks);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f001 fdb0 	bl	80118cc <vTaskDelay>
    }
  }

  return (stat);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b084      	sub	sp, #16
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f003 f80c 	bl	8012d9c <pvTimerGetTimerID>
 800fd84:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <TimerCallback+0x22>
    callb->func (callb->arg);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	6852      	ldr	r2, [r2, #4]
 800fd94:	4610      	mov	r0, r2
 800fd96:	4798      	blx	r3
  }
}
 800fd98:	bf00      	nop
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b08c      	sub	sp, #48	; 0x30
 800fda4:	af02      	add	r7, sp, #8
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	607a      	str	r2, [r7, #4]
 800fdaa:	603b      	str	r3, [r7, #0]
 800fdac:	460b      	mov	r3, r1
 800fdae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdb4:	f3ef 8305 	mrs	r3, IPSR
 800fdb8:	613b      	str	r3, [r7, #16]
  return(result);
 800fdba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d163      	bne.n	800fe88 <osTimerNew+0xe8>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d060      	beq.n	800fe88 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800fdc6:	2008      	movs	r0, #8
 800fdc8:	f003 fa56 	bl	8013278 <pvPortMalloc>
 800fdcc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d059      	beq.n	800fe88 <osTimerNew+0xe8>
      callb->func = func;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d102      	bne.n	800fdec <osTimerNew+0x4c>
        reload = pdFALSE;
 800fde6:	2300      	movs	r3, #0
 800fde8:	61fb      	str	r3, [r7, #28]
 800fdea:	e001      	b.n	800fdf0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800fdec:	2301      	movs	r3, #1
 800fdee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800fdf0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdf4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01c      	beq.n	800fe3a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <osTimerNew+0x6e>
          name = attr->name;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d006      	beq.n	800fe24 <osTimerNew+0x84>
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	2b2b      	cmp	r3, #43	; 0x2b
 800fe1c:	d902      	bls.n	800fe24 <osTimerNew+0x84>
          mem = 1;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	e00c      	b.n	800fe3e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d108      	bne.n	800fe3e <osTimerNew+0x9e>
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d104      	bne.n	800fe3e <osTimerNew+0x9e>
            mem = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	61bb      	str	r3, [r7, #24]
 800fe38:	e001      	b.n	800fe3e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d10c      	bne.n	800fe5e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	4b12      	ldr	r3, [pc, #72]	; (800fe94 <osTimerNew+0xf4>)
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	2101      	movs	r1, #1
 800fe54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe56:	f002 fc22 	bl	801269e <xTimerCreateStatic>
 800fe5a:	6238      	str	r0, [r7, #32]
 800fe5c:	e00b      	b.n	800fe76 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d108      	bne.n	800fe76 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800fe64:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <osTimerNew+0xf4>)
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	69fa      	ldr	r2, [r7, #28]
 800fe6c:	2101      	movs	r1, #1
 800fe6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe70:	f002 fbf4 	bl	801265c <xTimerCreate>
 800fe74:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d105      	bne.n	800fe88 <osTimerNew+0xe8>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d002      	beq.n	800fe88 <osTimerNew+0xe8>
        vPortFree (callb);
 800fe82:	6978      	ldr	r0, [r7, #20]
 800fe84:	f003 fac8 	bl	8013418 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800fe88:	6a3b      	ldr	r3, [r7, #32]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3728      	adds	r7, #40	; 0x28
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	0800fd77 	.word	0x0800fd77

0800fe98 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b088      	sub	sp, #32
 800fe9c:	af02      	add	r7, sp, #8
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fea6:	f3ef 8305 	mrs	r3, IPSR
 800feaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800feac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <osTimerStart+0x22>
    stat = osErrorISR;
 800feb2:	f06f 0305 	mvn.w	r3, #5
 800feb6:	617b      	str	r3, [r7, #20]
 800feb8:	e017      	b.n	800feea <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d103      	bne.n	800fec8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800fec0:	f06f 0303 	mvn.w	r3, #3
 800fec4:	617b      	str	r3, [r7, #20]
 800fec6:	e010      	b.n	800feea <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800fec8:	2300      	movs	r3, #0
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	2300      	movs	r3, #0
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	2104      	movs	r1, #4
 800fed2:	6938      	ldr	r0, [r7, #16]
 800fed4:	f002 fc5c 	bl	8012790 <xTimerGenericCommand>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d102      	bne.n	800fee4 <osTimerStart+0x4c>
      stat = osOK;
 800fede:	2300      	movs	r3, #0
 800fee0:	617b      	str	r3, [r7, #20]
 800fee2:	e002      	b.n	800feea <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800fee4:	f06f 0302 	mvn.w	r3, #2
 800fee8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800feea:	697b      	ldr	r3, [r7, #20]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b08a      	sub	sp, #40	; 0x28
 800fef8:	af02      	add	r7, sp, #8
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ff00:	2300      	movs	r3, #0
 800ff02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff04:	f3ef 8305 	mrs	r3, IPSR
 800ff08:	613b      	str	r3, [r7, #16]
  return(result);
 800ff0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d175      	bne.n	800fffc <osSemaphoreNew+0x108>
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d072      	beq.n	800fffc <osSemaphoreNew+0x108>
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d86e      	bhi.n	800fffc <osSemaphoreNew+0x108>
    mem = -1;
 800ff1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d015      	beq.n	800ff56 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <osSemaphoreNew+0x4c>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	2b4f      	cmp	r3, #79	; 0x4f
 800ff38:	d902      	bls.n	800ff40 <osSemaphoreNew+0x4c>
        mem = 1;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	61bb      	str	r3, [r7, #24]
 800ff3e:	e00c      	b.n	800ff5a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d108      	bne.n	800ff5a <osSemaphoreNew+0x66>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d104      	bne.n	800ff5a <osSemaphoreNew+0x66>
          mem = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	61bb      	str	r3, [r7, #24]
 800ff54:	e001      	b.n	800ff5a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff60:	d04c      	beq.n	800fffc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d128      	bne.n	800ffba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d10a      	bne.n	800ff84 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	2203      	movs	r2, #3
 800ff74:	9200      	str	r2, [sp, #0]
 800ff76:	2200      	movs	r2, #0
 800ff78:	2100      	movs	r1, #0
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	f000 fb5c 	bl	8010638 <xQueueGenericCreateStatic>
 800ff80:	61f8      	str	r0, [r7, #28]
 800ff82:	e005      	b.n	800ff90 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ff84:	2203      	movs	r2, #3
 800ff86:	2100      	movs	r1, #0
 800ff88:	2001      	movs	r0, #1
 800ff8a:	f000 fbcd 	bl	8010728 <xQueueGenericCreate>
 800ff8e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d022      	beq.n	800ffdc <osSemaphoreNew+0xe8>
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01f      	beq.n	800ffdc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	69f8      	ldr	r0, [r7, #28]
 800ffa4:	f000 fc88 	bl	80108b8 <xQueueGenericSend>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d016      	beq.n	800ffdc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ffae:	69f8      	ldr	r0, [r7, #28]
 800ffb0:	f001 f914 	bl	80111dc <vQueueDelete>
            hSemaphore = NULL;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	e010      	b.n	800ffdc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d108      	bne.n	800ffd2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	68b9      	ldr	r1, [r7, #8]
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 fc0a 	bl	80107e2 <xQueueCreateCountingSemaphoreStatic>
 800ffce:	61f8      	str	r0, [r7, #28]
 800ffd0:	e004      	b.n	800ffdc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ffd2:	68b9      	ldr	r1, [r7, #8]
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f000 fc3b 	bl	8010850 <xQueueCreateCountingSemaphore>
 800ffda:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00c      	beq.n	800fffc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d003      	beq.n	800fff0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	617b      	str	r3, [r7, #20]
 800ffee:	e001      	b.n	800fff4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fff0:	2300      	movs	r3, #0
 800fff2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fff4:	6979      	ldr	r1, [r7, #20]
 800fff6:	69f8      	ldr	r0, [r7, #28]
 800fff8:	f001 fa3c 	bl	8011474 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fffc:	69fb      	ldr	r3, [r7, #28]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3720      	adds	r7, #32
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010008:	b580      	push	{r7, lr}
 801000a:	b086      	sub	sp, #24
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d103      	bne.n	8010028 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010020:	f06f 0303 	mvn.w	r3, #3
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	e039      	b.n	801009c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010028:	f3ef 8305 	mrs	r3, IPSR
 801002c:	60fb      	str	r3, [r7, #12]
  return(result);
 801002e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010030:	2b00      	cmp	r3, #0
 8010032:	d022      	beq.n	801007a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d003      	beq.n	8010042 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801003a:	f06f 0303 	mvn.w	r3, #3
 801003e:	617b      	str	r3, [r7, #20]
 8010040:	e02c      	b.n	801009c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010042:	2300      	movs	r3, #0
 8010044:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	461a      	mov	r2, r3
 801004c:	2100      	movs	r1, #0
 801004e:	6938      	ldr	r0, [r7, #16]
 8010050:	f001 f844 	bl	80110dc <xQueueReceiveFromISR>
 8010054:	4603      	mov	r3, r0
 8010056:	2b01      	cmp	r3, #1
 8010058:	d003      	beq.n	8010062 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801005a:	f06f 0302 	mvn.w	r3, #2
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	e01c      	b.n	801009c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d019      	beq.n	801009c <osSemaphoreAcquire+0x94>
 8010068:	4b0f      	ldr	r3, [pc, #60]	; (80100a8 <osSemaphoreAcquire+0xa0>)
 801006a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	e010      	b.n	801009c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6938      	ldr	r0, [r7, #16]
 801007e:	f000 ff21 	bl	8010ec4 <xQueueSemaphoreTake>
 8010082:	4603      	mov	r3, r0
 8010084:	2b01      	cmp	r3, #1
 8010086:	d009      	beq.n	801009c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d003      	beq.n	8010096 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801008e:	f06f 0301 	mvn.w	r3, #1
 8010092:	617b      	str	r3, [r7, #20]
 8010094:	e002      	b.n	801009c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010096:	f06f 0302 	mvn.w	r3, #2
 801009a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801009c:	697b      	ldr	r3, [r7, #20]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3718      	adds	r7, #24
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	e000ed04 	.word	0xe000ed04

080100ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d103      	bne.n	80100ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80100c2:	f06f 0303 	mvn.w	r3, #3
 80100c6:	617b      	str	r3, [r7, #20]
 80100c8:	e02c      	b.n	8010124 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100ca:	f3ef 8305 	mrs	r3, IPSR
 80100ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80100d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d01a      	beq.n	801010c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80100da:	f107 0308 	add.w	r3, r7, #8
 80100de:	4619      	mov	r1, r3
 80100e0:	6938      	ldr	r0, [r7, #16]
 80100e2:	f000 fd82 	bl	8010bea <xQueueGiveFromISR>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d003      	beq.n	80100f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80100ec:	f06f 0302 	mvn.w	r3, #2
 80100f0:	617b      	str	r3, [r7, #20]
 80100f2:	e017      	b.n	8010124 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d014      	beq.n	8010124 <osSemaphoreRelease+0x78>
 80100fa:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <osSemaphoreRelease+0x84>)
 80100fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	e00b      	b.n	8010124 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801010c:	2300      	movs	r3, #0
 801010e:	2200      	movs	r2, #0
 8010110:	2100      	movs	r1, #0
 8010112:	6938      	ldr	r0, [r7, #16]
 8010114:	f000 fbd0 	bl	80108b8 <xQueueGenericSend>
 8010118:	4603      	mov	r3, r0
 801011a:	2b01      	cmp	r3, #1
 801011c:	d002      	beq.n	8010124 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801011e:	f06f 0302 	mvn.w	r3, #2
 8010122:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010124:	697b      	ldr	r3, [r7, #20]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	e000ed04 	.word	0xe000ed04

08010134 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010134:	b580      	push	{r7, lr}
 8010136:	b08a      	sub	sp, #40	; 0x28
 8010138:	af02      	add	r7, sp, #8
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010140:	2300      	movs	r3, #0
 8010142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010144:	f3ef 8305 	mrs	r3, IPSR
 8010148:	613b      	str	r3, [r7, #16]
  return(result);
 801014a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801014c:	2b00      	cmp	r3, #0
 801014e:	d15f      	bne.n	8010210 <osMessageQueueNew+0xdc>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d05c      	beq.n	8010210 <osMessageQueueNew+0xdc>
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d059      	beq.n	8010210 <osMessageQueueNew+0xdc>
    mem = -1;
 801015c:	f04f 33ff 	mov.w	r3, #4294967295
 8010160:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d029      	beq.n	80101bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d012      	beq.n	8010196 <osMessageQueueNew+0x62>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	2b4f      	cmp	r3, #79	; 0x4f
 8010176:	d90e      	bls.n	8010196 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00a      	beq.n	8010196 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	695a      	ldr	r2, [r3, #20]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	68b9      	ldr	r1, [r7, #8]
 8010188:	fb01 f303 	mul.w	r3, r1, r3
 801018c:	429a      	cmp	r2, r3
 801018e:	d302      	bcc.n	8010196 <osMessageQueueNew+0x62>
        mem = 1;
 8010190:	2301      	movs	r3, #1
 8010192:	61bb      	str	r3, [r7, #24]
 8010194:	e014      	b.n	80101c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d110      	bne.n	80101c0 <osMessageQueueNew+0x8c>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10c      	bne.n	80101c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d108      	bne.n	80101c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <osMessageQueueNew+0x8c>
          mem = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	61bb      	str	r3, [r7, #24]
 80101ba:	e001      	b.n	80101c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d10b      	bne.n	80101de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	691a      	ldr	r2, [r3, #16]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	2100      	movs	r1, #0
 80101d0:	9100      	str	r1, [sp, #0]
 80101d2:	68b9      	ldr	r1, [r7, #8]
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f000 fa2f 	bl	8010638 <xQueueGenericCreateStatic>
 80101da:	61f8      	str	r0, [r7, #28]
 80101dc:	e008      	b.n	80101f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d105      	bne.n	80101f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80101e4:	2200      	movs	r2, #0
 80101e6:	68b9      	ldr	r1, [r7, #8]
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f000 fa9d 	bl	8010728 <xQueueGenericCreate>
 80101ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00c      	beq.n	8010210 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d003      	beq.n	8010204 <osMessageQueueNew+0xd0>
        name = attr->name;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	617b      	str	r3, [r7, #20]
 8010202:	e001      	b.n	8010208 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010204:	2300      	movs	r3, #0
 8010206:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010208:	6979      	ldr	r1, [r7, #20]
 801020a:	69f8      	ldr	r0, [r7, #28]
 801020c:	f001 f932 	bl	8011474 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010210:	69fb      	ldr	r3, [r7, #28]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3720      	adds	r7, #32
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	4613      	mov	r3, r2
 801022a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010230:	2300      	movs	r3, #0
 8010232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010234:	f3ef 8305 	mrs	r3, IPSR
 8010238:	617b      	str	r3, [r7, #20]
  return(result);
 801023a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801023c:	2b00      	cmp	r3, #0
 801023e:	d028      	beq.n	8010292 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d005      	beq.n	8010252 <osMessageQueuePut+0x36>
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d002      	beq.n	8010252 <osMessageQueuePut+0x36>
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d003      	beq.n	801025a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010252:	f06f 0303 	mvn.w	r3, #3
 8010256:	61fb      	str	r3, [r7, #28]
 8010258:	e038      	b.n	80102cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801025a:	2300      	movs	r3, #0
 801025c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801025e:	f107 0210 	add.w	r2, r7, #16
 8010262:	2300      	movs	r3, #0
 8010264:	68b9      	ldr	r1, [r7, #8]
 8010266:	69b8      	ldr	r0, [r7, #24]
 8010268:	f000 fc24 	bl	8010ab4 <xQueueGenericSendFromISR>
 801026c:	4603      	mov	r3, r0
 801026e:	2b01      	cmp	r3, #1
 8010270:	d003      	beq.n	801027a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010272:	f06f 0302 	mvn.w	r3, #2
 8010276:	61fb      	str	r3, [r7, #28]
 8010278:	e028      	b.n	80102cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d025      	beq.n	80102cc <osMessageQueuePut+0xb0>
 8010280:	4b15      	ldr	r3, [pc, #84]	; (80102d8 <osMessageQueuePut+0xbc>)
 8010282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010286:	601a      	str	r2, [r3, #0]
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	e01c      	b.n	80102cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <osMessageQueuePut+0x82>
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d103      	bne.n	80102a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801029e:	f06f 0303 	mvn.w	r3, #3
 80102a2:	61fb      	str	r3, [r7, #28]
 80102a4:	e012      	b.n	80102cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80102a6:	2300      	movs	r3, #0
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	68b9      	ldr	r1, [r7, #8]
 80102ac:	69b8      	ldr	r0, [r7, #24]
 80102ae:	f000 fb03 	bl	80108b8 <xQueueGenericSend>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d009      	beq.n	80102cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d003      	beq.n	80102c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80102be:	f06f 0301 	mvn.w	r3, #1
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	e002      	b.n	80102cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80102c6:	f06f 0302 	mvn.w	r3, #2
 80102ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80102cc:	69fb      	ldr	r3, [r7, #28]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	e000ed04 	.word	0xe000ed04

080102dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
 80102e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80102ee:	2300      	movs	r3, #0
 80102f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102f2:	f3ef 8305 	mrs	r3, IPSR
 80102f6:	617b      	str	r3, [r7, #20]
  return(result);
 80102f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d028      	beq.n	8010350 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d005      	beq.n	8010310 <osMessageQueueGet+0x34>
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d002      	beq.n	8010310 <osMessageQueueGet+0x34>
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010310:	f06f 0303 	mvn.w	r3, #3
 8010314:	61fb      	str	r3, [r7, #28]
 8010316:	e037      	b.n	8010388 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010318:	2300      	movs	r3, #0
 801031a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801031c:	f107 0310 	add.w	r3, r7, #16
 8010320:	461a      	mov	r2, r3
 8010322:	68b9      	ldr	r1, [r7, #8]
 8010324:	69b8      	ldr	r0, [r7, #24]
 8010326:	f000 fed9 	bl	80110dc <xQueueReceiveFromISR>
 801032a:	4603      	mov	r3, r0
 801032c:	2b01      	cmp	r3, #1
 801032e:	d003      	beq.n	8010338 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010330:	f06f 0302 	mvn.w	r3, #2
 8010334:	61fb      	str	r3, [r7, #28]
 8010336:	e027      	b.n	8010388 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d024      	beq.n	8010388 <osMessageQueueGet+0xac>
 801033e:	4b15      	ldr	r3, [pc, #84]	; (8010394 <osMessageQueueGet+0xb8>)
 8010340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	e01b      	b.n	8010388 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d002      	beq.n	801035c <osMessageQueueGet+0x80>
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d103      	bne.n	8010364 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801035c:	f06f 0303 	mvn.w	r3, #3
 8010360:	61fb      	str	r3, [r7, #28]
 8010362:	e011      	b.n	8010388 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010364:	683a      	ldr	r2, [r7, #0]
 8010366:	68b9      	ldr	r1, [r7, #8]
 8010368:	69b8      	ldr	r0, [r7, #24]
 801036a:	f000 fccb 	bl	8010d04 <xQueueReceive>
 801036e:	4603      	mov	r3, r0
 8010370:	2b01      	cmp	r3, #1
 8010372:	d009      	beq.n	8010388 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d003      	beq.n	8010382 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801037a:	f06f 0301 	mvn.w	r3, #1
 801037e:	61fb      	str	r3, [r7, #28]
 8010380:	e002      	b.n	8010388 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010382:	f06f 0302 	mvn.w	r3, #2
 8010386:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010388:	69fb      	ldr	r3, [r7, #28]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3720      	adds	r7, #32
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	e000ed04 	.word	0xe000ed04

08010398 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010398:	b480      	push	{r7}
 801039a:	b085      	sub	sp, #20
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4a07      	ldr	r2, [pc, #28]	; (80103c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80103a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	4a06      	ldr	r2, [pc, #24]	; (80103c8 <vApplicationGetIdleTaskMemory+0x30>)
 80103ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2280      	movs	r2, #128	; 0x80
 80103b4:	601a      	str	r2, [r3, #0]
}
 80103b6:	bf00      	nop
 80103b8:	3714      	adds	r7, #20
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	200007e0 	.word	0x200007e0
 80103c8:	20000840 	.word	0x20000840

080103cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80103cc:	b480      	push	{r7}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	4a07      	ldr	r2, [pc, #28]	; (80103f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80103dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	4a06      	ldr	r2, [pc, #24]	; (80103fc <vApplicationGetTimerTaskMemory+0x30>)
 80103e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103ea:	601a      	str	r2, [r3, #0]
}
 80103ec:	bf00      	nop
 80103ee:	3714      	adds	r7, #20
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	20000a40 	.word	0x20000a40
 80103fc:	20000aa0 	.word	0x20000aa0

08010400 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f103 0208 	add.w	r2, r3, #8
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f04f 32ff 	mov.w	r2, #4294967295
 8010418:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f103 0208 	add.w	r2, r3, #8
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f103 0208 	add.w	r2, r3, #8
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010434:	bf00      	nop
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801044e:	bf00      	nop
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801045a:	b480      	push	{r7}
 801045c:	b085      	sub	sp, #20
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	689a      	ldr	r2, [r3, #8]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	683a      	ldr	r2, [r7, #0]
 801047e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	683a      	ldr	r2, [r7, #0]
 8010484:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	601a      	str	r2, [r3, #0]
}
 8010496:	bf00      	nop
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104a2:	b480      	push	{r7}
 80104a4:	b085      	sub	sp, #20
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
 80104aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b8:	d103      	bne.n	80104c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	691b      	ldr	r3, [r3, #16]
 80104be:	60fb      	str	r3, [r7, #12]
 80104c0:	e00c      	b.n	80104dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	3308      	adds	r3, #8
 80104c6:	60fb      	str	r3, [r7, #12]
 80104c8:	e002      	b.n	80104d0 <vListInsert+0x2e>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	60fb      	str	r3, [r7, #12]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d2f6      	bcs.n	80104ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	685a      	ldr	r2, [r3, #4]
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	683a      	ldr	r2, [r7, #0]
 80104ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	683a      	ldr	r2, [r7, #0]
 80104f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	601a      	str	r2, [r3, #0]
}
 8010508:	bf00      	nop
 801050a:	3714      	adds	r7, #20
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010514:	b480      	push	{r7}
 8010516:	b085      	sub	sp, #20
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	6892      	ldr	r2, [r2, #8]
 801052a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	6852      	ldr	r2, [r2, #4]
 8010534:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	429a      	cmp	r2, r3
 801053e:	d103      	bne.n	8010548 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	689a      	ldr	r2, [r3, #8]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	1e5a      	subs	r2, r3, #1
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010592:	f002 fd4f 	bl	8013034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801059e:	68f9      	ldr	r1, [r7, #12]
 80105a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80105a2:	fb01 f303 	mul.w	r3, r1, r3
 80105a6:	441a      	add	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2200      	movs	r2, #0
 80105b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105c2:	3b01      	subs	r3, #1
 80105c4:	68f9      	ldr	r1, [r7, #12]
 80105c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80105c8:	fb01 f303 	mul.w	r3, r1, r3
 80105cc:	441a      	add	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	22ff      	movs	r2, #255	; 0xff
 80105d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	22ff      	movs	r2, #255	; 0xff
 80105de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d114      	bne.n	8010612 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	691b      	ldr	r3, [r3, #16]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d01a      	beq.n	8010626 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	3310      	adds	r3, #16
 80105f4:	4618      	mov	r0, r3
 80105f6:	f001 fc4b 	bl	8011e90 <xTaskRemoveFromEventList>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d012      	beq.n	8010626 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010600:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <xQueueGenericReset+0xcc>)
 8010602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010606:	601a      	str	r2, [r3, #0]
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	f3bf 8f6f 	isb	sy
 8010610:	e009      	b.n	8010626 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3310      	adds	r3, #16
 8010616:	4618      	mov	r0, r3
 8010618:	f7ff fef2 	bl	8010400 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3324      	adds	r3, #36	; 0x24
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff feed 	bl	8010400 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010626:	f002 fd35 	bl	8013094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801062a:	2301      	movs	r3, #1
}
 801062c:	4618      	mov	r0, r3
 801062e:	3710      	adds	r7, #16
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	e000ed04 	.word	0xe000ed04

08010638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08e      	sub	sp, #56	; 0x38
 801063c:	af02      	add	r7, sp, #8
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
 8010644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10a      	bne.n	8010662 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801065e:	bf00      	nop
 8010660:	e7fe      	b.n	8010660 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10a      	bne.n	801067e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066c:	f383 8811 	msr	BASEPRI, r3
 8010670:	f3bf 8f6f 	isb	sy
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	627b      	str	r3, [r7, #36]	; 0x24
}
 801067a:	bf00      	nop
 801067c:	e7fe      	b.n	801067c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <xQueueGenericCreateStatic+0x52>
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d001      	beq.n	801068e <xQueueGenericCreateStatic+0x56>
 801068a:	2301      	movs	r3, #1
 801068c:	e000      	b.n	8010690 <xQueueGenericCreateStatic+0x58>
 801068e:	2300      	movs	r3, #0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10a      	bne.n	80106aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	623b      	str	r3, [r7, #32]
}
 80106a6:	bf00      	nop
 80106a8:	e7fe      	b.n	80106a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d102      	bne.n	80106b6 <xQueueGenericCreateStatic+0x7e>
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <xQueueGenericCreateStatic+0x82>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <xQueueGenericCreateStatic+0x84>
 80106ba:	2300      	movs	r3, #0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10a      	bne.n	80106d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	61fb      	str	r3, [r7, #28]
}
 80106d2:	bf00      	nop
 80106d4:	e7fe      	b.n	80106d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80106d6:	2350      	movs	r3, #80	; 0x50
 80106d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	2b50      	cmp	r3, #80	; 0x50
 80106de:	d00a      	beq.n	80106f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	61bb      	str	r3, [r7, #24]
}
 80106f2:	bf00      	nop
 80106f4:	e7fe      	b.n	80106f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80106f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00d      	beq.n	801071e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	2201      	movs	r2, #1
 8010706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801070a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	4613      	mov	r3, r2
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	68b9      	ldr	r1, [r7, #8]
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f000 f83f 	bl	801079c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010720:	4618      	mov	r0, r3
 8010722:	3730      	adds	r7, #48	; 0x30
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08a      	sub	sp, #40	; 0x28
 801072c:	af02      	add	r7, sp, #8
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	4613      	mov	r3, r2
 8010734:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d10a      	bne.n	8010752 <xQueueGenericCreate+0x2a>
	__asm volatile
 801073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	613b      	str	r3, [r7, #16]
}
 801074e:	bf00      	nop
 8010750:	e7fe      	b.n	8010750 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	fb02 f303 	mul.w	r3, r2, r3
 801075a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	3350      	adds	r3, #80	; 0x50
 8010760:	4618      	mov	r0, r3
 8010762:	f002 fd89 	bl	8013278 <pvPortMalloc>
 8010766:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d011      	beq.n	8010792 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	3350      	adds	r3, #80	; 0x50
 8010776:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	2200      	movs	r2, #0
 801077c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010780:	79fa      	ldrb	r2, [r7, #7]
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	4613      	mov	r3, r2
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	68b9      	ldr	r1, [r7, #8]
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f000 f805 	bl	801079c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010792:	69bb      	ldr	r3, [r7, #24]
	}
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	60b9      	str	r1, [r7, #8]
 80107a6:	607a      	str	r2, [r7, #4]
 80107a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d103      	bne.n	80107b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	69ba      	ldr	r2, [r7, #24]
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	e002      	b.n	80107be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80107b8:	69bb      	ldr	r3, [r7, #24]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80107be:	69bb      	ldr	r3, [r7, #24]
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80107ca:	2101      	movs	r1, #1
 80107cc:	69b8      	ldr	r0, [r7, #24]
 80107ce:	f7ff fecb 	bl	8010568 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	78fa      	ldrb	r2, [r7, #3]
 80107d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80107da:	bf00      	nop
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b08a      	sub	sp, #40	; 0x28
 80107e6:	af02      	add	r7, sp, #8
 80107e8:	60f8      	str	r0, [r7, #12]
 80107ea:	60b9      	str	r1, [r7, #8]
 80107ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d10a      	bne.n	801080a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80107f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	61bb      	str	r3, [r7, #24]
}
 8010806:	bf00      	nop
 8010808:	e7fe      	b.n	8010808 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	429a      	cmp	r2, r3
 8010810:	d90a      	bls.n	8010828 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010816:	f383 8811 	msr	BASEPRI, r3
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	f3bf 8f4f 	dsb	sy
 8010822:	617b      	str	r3, [r7, #20]
}
 8010824:	bf00      	nop
 8010826:	e7fe      	b.n	8010826 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010828:	2302      	movs	r3, #2
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	2100      	movs	r1, #0
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7ff ff00 	bl	8010638 <xQueueGenericCreateStatic>
 8010838:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010846:	69fb      	ldr	r3, [r7, #28]
	}
 8010848:	4618      	mov	r0, r3
 801084a:	3720      	adds	r7, #32
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010850:	b580      	push	{r7, lr}
 8010852:	b086      	sub	sp, #24
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10a      	bne.n	8010876 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	613b      	str	r3, [r7, #16]
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	429a      	cmp	r2, r3
 801087c:	d90a      	bls.n	8010894 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801087e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010882:	f383 8811 	msr	BASEPRI, r3
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	60fb      	str	r3, [r7, #12]
}
 8010890:	bf00      	nop
 8010892:	e7fe      	b.n	8010892 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010894:	2202      	movs	r2, #2
 8010896:	2100      	movs	r1, #0
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff ff45 	bl	8010728 <xQueueGenericCreate>
 801089e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d002      	beq.n	80108ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108ac:	697b      	ldr	r3, [r7, #20]
	}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3718      	adds	r7, #24
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08e      	sub	sp, #56	; 0x38
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
 80108c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80108c6:	2300      	movs	r3, #0
 80108c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d10a      	bne.n	80108ea <xQueueGenericSend+0x32>
	__asm volatile
 80108d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80108e6:	bf00      	nop
 80108e8:	e7fe      	b.n	80108e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d103      	bne.n	80108f8 <xQueueGenericSend+0x40>
 80108f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <xQueueGenericSend+0x44>
 80108f8:	2301      	movs	r3, #1
 80108fa:	e000      	b.n	80108fe <xQueueGenericSend+0x46>
 80108fc:	2300      	movs	r3, #0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d10a      	bne.n	8010918 <xQueueGenericSend+0x60>
	__asm volatile
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010914:	bf00      	nop
 8010916:	e7fe      	b.n	8010916 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b02      	cmp	r3, #2
 801091c:	d103      	bne.n	8010926 <xQueueGenericSend+0x6e>
 801091e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010922:	2b01      	cmp	r3, #1
 8010924:	d101      	bne.n	801092a <xQueueGenericSend+0x72>
 8010926:	2301      	movs	r3, #1
 8010928:	e000      	b.n	801092c <xQueueGenericSend+0x74>
 801092a:	2300      	movs	r3, #0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10a      	bne.n	8010946 <xQueueGenericSend+0x8e>
	__asm volatile
 8010930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010934:	f383 8811 	msr	BASEPRI, r3
 8010938:	f3bf 8f6f 	isb	sy
 801093c:	f3bf 8f4f 	dsb	sy
 8010940:	623b      	str	r3, [r7, #32]
}
 8010942:	bf00      	nop
 8010944:	e7fe      	b.n	8010944 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010946:	f001 fc63 	bl	8012210 <xTaskGetSchedulerState>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d102      	bne.n	8010956 <xQueueGenericSend+0x9e>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <xQueueGenericSend+0xa2>
 8010956:	2301      	movs	r3, #1
 8010958:	e000      	b.n	801095c <xQueueGenericSend+0xa4>
 801095a:	2300      	movs	r3, #0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10a      	bne.n	8010976 <xQueueGenericSend+0xbe>
	__asm volatile
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	61fb      	str	r3, [r7, #28]
}
 8010972:	bf00      	nop
 8010974:	e7fe      	b.n	8010974 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010976:	f002 fb5d 	bl	8013034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801097e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010982:	429a      	cmp	r2, r3
 8010984:	d302      	bcc.n	801098c <xQueueGenericSend+0xd4>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2b02      	cmp	r3, #2
 801098a:	d129      	bne.n	80109e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801098c:	683a      	ldr	r2, [r7, #0]
 801098e:	68b9      	ldr	r1, [r7, #8]
 8010990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010992:	f000 fc5e 	bl	8011252 <prvCopyDataToQueue>
 8010996:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801099c:	2b00      	cmp	r3, #0
 801099e:	d010      	beq.n	80109c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	3324      	adds	r3, #36	; 0x24
 80109a4:	4618      	mov	r0, r3
 80109a6:	f001 fa73 	bl	8011e90 <xTaskRemoveFromEventList>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d013      	beq.n	80109d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80109b0:	4b3f      	ldr	r3, [pc, #252]	; (8010ab0 <xQueueGenericSend+0x1f8>)
 80109b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b6:	601a      	str	r2, [r3, #0]
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	e00a      	b.n	80109d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80109c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d007      	beq.n	80109d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80109c8:	4b39      	ldr	r3, [pc, #228]	; (8010ab0 <xQueueGenericSend+0x1f8>)
 80109ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ce:	601a      	str	r2, [r3, #0]
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80109d8:	f002 fb5c 	bl	8013094 <vPortExitCritical>
				return pdPASS;
 80109dc:	2301      	movs	r3, #1
 80109de:	e063      	b.n	8010aa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d103      	bne.n	80109ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80109e6:	f002 fb55 	bl	8013094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80109ea:	2300      	movs	r3, #0
 80109ec:	e05c      	b.n	8010aa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d106      	bne.n	8010a02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109f4:	f107 0314 	add.w	r3, r7, #20
 80109f8:	4618      	mov	r0, r3
 80109fa:	f001 faad 	bl	8011f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109fe:	2301      	movs	r3, #1
 8010a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a02:	f002 fb47 	bl	8013094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a06:	f000 fffb 	bl	8011a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a0a:	f002 fb13 	bl	8013034 <vPortEnterCritical>
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a14:	b25b      	sxtb	r3, r3
 8010a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1a:	d103      	bne.n	8010a24 <xQueueGenericSend+0x16c>
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a2a:	b25b      	sxtb	r3, r3
 8010a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a30:	d103      	bne.n	8010a3a <xQueueGenericSend+0x182>
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a3a:	f002 fb2b 	bl	8013094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a3e:	1d3a      	adds	r2, r7, #4
 8010a40:	f107 0314 	add.w	r3, r7, #20
 8010a44:	4611      	mov	r1, r2
 8010a46:	4618      	mov	r0, r3
 8010a48:	f001 fa9c 	bl	8011f84 <xTaskCheckForTimeOut>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d124      	bne.n	8010a9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a54:	f000 fcf5 	bl	8011442 <prvIsQueueFull>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d018      	beq.n	8010a90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	3310      	adds	r3, #16
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	4611      	mov	r1, r2
 8010a66:	4618      	mov	r0, r3
 8010a68:	f001 f9c2 	bl	8011df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6e:	f000 fc80 	bl	8011372 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a72:	f000 ffd3 	bl	8011a1c <xTaskResumeAll>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f47f af7c 	bne.w	8010976 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010a7e:	4b0c      	ldr	r3, [pc, #48]	; (8010ab0 <xQueueGenericSend+0x1f8>)
 8010a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a84:	601a      	str	r2, [r3, #0]
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	e772      	b.n	8010976 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a92:	f000 fc6e 	bl	8011372 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a96:	f000 ffc1 	bl	8011a1c <xTaskResumeAll>
 8010a9a:	e76c      	b.n	8010976 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a9e:	f000 fc68 	bl	8011372 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010aa2:	f000 ffbb 	bl	8011a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3738      	adds	r7, #56	; 0x38
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	e000ed04 	.word	0xe000ed04

08010ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b090      	sub	sp, #64	; 0x40
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
 8010ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10a      	bne.n	8010ae2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad0:	f383 8811 	msr	BASEPRI, r3
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010ade:	bf00      	nop
 8010ae0:	e7fe      	b.n	8010ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d103      	bne.n	8010af0 <xQueueGenericSendFromISR+0x3c>
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d101      	bne.n	8010af4 <xQueueGenericSendFromISR+0x40>
 8010af0:	2301      	movs	r3, #1
 8010af2:	e000      	b.n	8010af6 <xQueueGenericSendFromISR+0x42>
 8010af4:	2300      	movs	r3, #0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10a      	bne.n	8010b10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b0c:	bf00      	nop
 8010b0e:	e7fe      	b.n	8010b0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d103      	bne.n	8010b1e <xQueueGenericSendFromISR+0x6a>
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d101      	bne.n	8010b22 <xQueueGenericSendFromISR+0x6e>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e000      	b.n	8010b24 <xQueueGenericSendFromISR+0x70>
 8010b22:	2300      	movs	r3, #0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d10a      	bne.n	8010b3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2c:	f383 8811 	msr	BASEPRI, r3
 8010b30:	f3bf 8f6f 	isb	sy
 8010b34:	f3bf 8f4f 	dsb	sy
 8010b38:	623b      	str	r3, [r7, #32]
}
 8010b3a:	bf00      	nop
 8010b3c:	e7fe      	b.n	8010b3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b3e:	f002 fb5b 	bl	80131f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b42:	f3ef 8211 	mrs	r2, BASEPRI
 8010b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	61fa      	str	r2, [r7, #28]
 8010b58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010b5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d302      	bcc.n	8010b70 <xQueueGenericSendFromISR+0xbc>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	d12f      	bne.n	8010bd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	68b9      	ldr	r1, [r7, #8]
 8010b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b86:	f000 fb64 	bl	8011252 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b92:	d112      	bne.n	8010bba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d016      	beq.n	8010bca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	3324      	adds	r3, #36	; 0x24
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 f975 	bl	8011e90 <xTaskRemoveFromEventList>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00e      	beq.n	8010bca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00b      	beq.n	8010bca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	601a      	str	r2, [r3, #0]
 8010bb8:	e007      	b.n	8010bca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	b25a      	sxtb	r2, r3
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010bce:	e001      	b.n	8010bd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010bde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3740      	adds	r7, #64	; 0x40
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b08e      	sub	sp, #56	; 0x38
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d10a      	bne.n	8010c14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	623b      	str	r3, [r7, #32]
}
 8010c10:	bf00      	nop
 8010c12:	e7fe      	b.n	8010c12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00a      	beq.n	8010c32 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	61fb      	str	r3, [r7, #28]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <xQueueGiveFromISR+0x58>
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d101      	bne.n	8010c46 <xQueueGiveFromISR+0x5c>
 8010c42:	2301      	movs	r3, #1
 8010c44:	e000      	b.n	8010c48 <xQueueGiveFromISR+0x5e>
 8010c46:	2300      	movs	r3, #0
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	61bb      	str	r3, [r7, #24]
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c62:	f002 fac9 	bl	80131f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010c66:	f3ef 8211 	mrs	r2, BASEPRI
 8010c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6e:	f383 8811 	msr	BASEPRI, r3
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	617a      	str	r2, [r7, #20]
 8010c7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010c7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d22b      	bcs.n	8010cea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9e:	1c5a      	adds	r2, r3, #1
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cac:	d112      	bne.n	8010cd4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d016      	beq.n	8010ce4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	3324      	adds	r3, #36	; 0x24
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f001 f8e8 	bl	8011e90 <xTaskRemoveFromEventList>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00e      	beq.n	8010ce4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00b      	beq.n	8010ce4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	e007      	b.n	8010ce4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cd8:	3301      	adds	r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	b25a      	sxtb	r2, r3
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8010ce8:	e001      	b.n	8010cee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	637b      	str	r3, [r7, #52]	; 0x34
 8010cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f383 8811 	msr	BASEPRI, r3
}
 8010cf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3738      	adds	r7, #56	; 0x38
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08c      	sub	sp, #48	; 0x30
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d10:	2300      	movs	r3, #0
 8010d12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d10a      	bne.n	8010d34 <xQueueReceive+0x30>
	__asm volatile
 8010d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	623b      	str	r3, [r7, #32]
}
 8010d30:	bf00      	nop
 8010d32:	e7fe      	b.n	8010d32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d103      	bne.n	8010d42 <xQueueReceive+0x3e>
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d101      	bne.n	8010d46 <xQueueReceive+0x42>
 8010d42:	2301      	movs	r3, #1
 8010d44:	e000      	b.n	8010d48 <xQueueReceive+0x44>
 8010d46:	2300      	movs	r3, #0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10a      	bne.n	8010d62 <xQueueReceive+0x5e>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	61fb      	str	r3, [r7, #28]
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d62:	f001 fa55 	bl	8012210 <xTaskGetSchedulerState>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <xQueueReceive+0x6e>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d101      	bne.n	8010d76 <xQueueReceive+0x72>
 8010d72:	2301      	movs	r3, #1
 8010d74:	e000      	b.n	8010d78 <xQueueReceive+0x74>
 8010d76:	2300      	movs	r3, #0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10a      	bne.n	8010d92 <xQueueReceive+0x8e>
	__asm volatile
 8010d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d80:	f383 8811 	msr	BASEPRI, r3
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	61bb      	str	r3, [r7, #24]
}
 8010d8e:	bf00      	nop
 8010d90:	e7fe      	b.n	8010d90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d92:	f002 f94f 	bl	8013034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d01f      	beq.n	8010de2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010da2:	68b9      	ldr	r1, [r7, #8]
 8010da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da6:	f000 fabe 	bl	8011326 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dac:	1e5a      	subs	r2, r3, #1
 8010dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	691b      	ldr	r3, [r3, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00f      	beq.n	8010dda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbc:	3310      	adds	r3, #16
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f001 f866 	bl	8011e90 <xTaskRemoveFromEventList>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d007      	beq.n	8010dda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010dca:	4b3d      	ldr	r3, [pc, #244]	; (8010ec0 <xQueueReceive+0x1bc>)
 8010dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dd0:	601a      	str	r2, [r3, #0]
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010dda:	f002 f95b 	bl	8013094 <vPortExitCritical>
				return pdPASS;
 8010dde:	2301      	movs	r3, #1
 8010de0:	e069      	b.n	8010eb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d103      	bne.n	8010df0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010de8:	f002 f954 	bl	8013094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dec:	2300      	movs	r3, #0
 8010dee:	e062      	b.n	8010eb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010df6:	f107 0310 	add.w	r3, r7, #16
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f001 f8ac 	bl	8011f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e00:	2301      	movs	r3, #1
 8010e02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e04:	f002 f946 	bl	8013094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e08:	f000 fdfa 	bl	8011a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e0c:	f002 f912 	bl	8013034 <vPortEnterCritical>
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e16:	b25b      	sxtb	r3, r3
 8010e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1c:	d103      	bne.n	8010e26 <xQueueReceive+0x122>
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e2c:	b25b      	sxtb	r3, r3
 8010e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e32:	d103      	bne.n	8010e3c <xQueueReceive+0x138>
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	2200      	movs	r2, #0
 8010e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e3c:	f002 f92a 	bl	8013094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e40:	1d3a      	adds	r2, r7, #4
 8010e42:	f107 0310 	add.w	r3, r7, #16
 8010e46:	4611      	mov	r1, r2
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f001 f89b 	bl	8011f84 <xTaskCheckForTimeOut>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d123      	bne.n	8010e9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e56:	f000 fade 	bl	8011416 <prvIsQueueEmpty>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d017      	beq.n	8010e90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e62:	3324      	adds	r3, #36	; 0x24
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 ffc1 	bl	8011df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e70:	f000 fa7f 	bl	8011372 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e74:	f000 fdd2 	bl	8011a1c <xTaskResumeAll>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d189      	bne.n	8010d92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010e7e:	4b10      	ldr	r3, [pc, #64]	; (8010ec0 <xQueueReceive+0x1bc>)
 8010e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e84:	601a      	str	r2, [r3, #0]
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	e780      	b.n	8010d92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e92:	f000 fa6e 	bl	8011372 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e96:	f000 fdc1 	bl	8011a1c <xTaskResumeAll>
 8010e9a:	e77a      	b.n	8010d92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e9e:	f000 fa68 	bl	8011372 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ea2:	f000 fdbb 	bl	8011a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ea8:	f000 fab5 	bl	8011416 <prvIsQueueEmpty>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f43f af6f 	beq.w	8010d92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010eb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3730      	adds	r7, #48	; 0x30
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	e000ed04 	.word	0xe000ed04

08010ec4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b08e      	sub	sp, #56	; 0x38
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d10a      	bne.n	8010ef6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	623b      	str	r3, [r7, #32]
}
 8010ef2:	bf00      	nop
 8010ef4:	e7fe      	b.n	8010ef4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00a      	beq.n	8010f14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	61fb      	str	r3, [r7, #28]
}
 8010f10:	bf00      	nop
 8010f12:	e7fe      	b.n	8010f12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f14:	f001 f97c 	bl	8012210 <xTaskGetSchedulerState>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d102      	bne.n	8010f24 <xQueueSemaphoreTake+0x60>
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d101      	bne.n	8010f28 <xQueueSemaphoreTake+0x64>
 8010f24:	2301      	movs	r3, #1
 8010f26:	e000      	b.n	8010f2a <xQueueSemaphoreTake+0x66>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10a      	bne.n	8010f44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
 8010f3e:	61bb      	str	r3, [r7, #24]
}
 8010f40:	bf00      	nop
 8010f42:	e7fe      	b.n	8010f42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f44:	f002 f876 	bl	8013034 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d024      	beq.n	8010f9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f56:	1e5a      	subs	r2, r3, #1
 8010f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d104      	bne.n	8010f6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010f64:	f001 faca 	bl	80124fc <pvTaskIncrementMutexHeldCount>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f70:	691b      	ldr	r3, [r3, #16]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00f      	beq.n	8010f96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f78:	3310      	adds	r3, #16
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f000 ff88 	bl	8011e90 <xTaskRemoveFromEventList>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d007      	beq.n	8010f96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f86:	4b54      	ldr	r3, [pc, #336]	; (80110d8 <xQueueSemaphoreTake+0x214>)
 8010f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f96:	f002 f87d 	bl	8013094 <vPortExitCritical>
				return pdPASS;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e097      	b.n	80110ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d111      	bne.n	8010fc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00a      	beq.n	8010fc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	617b      	str	r3, [r7, #20]
}
 8010fbc:	bf00      	nop
 8010fbe:	e7fe      	b.n	8010fbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010fc0:	f002 f868 	bl	8013094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e082      	b.n	80110ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fce:	f107 030c 	add.w	r3, r7, #12
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f000 ffc0 	bl	8011f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fdc:	f002 f85a 	bl	8013094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fe0:	f000 fd0e 	bl	8011a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fe4:	f002 f826 	bl	8013034 <vPortEnterCritical>
 8010fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fee:	b25b      	sxtb	r3, r3
 8010ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff4:	d103      	bne.n	8010ffe <xQueueSemaphoreTake+0x13a>
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011004:	b25b      	sxtb	r3, r3
 8011006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100a:	d103      	bne.n	8011014 <xQueueSemaphoreTake+0x150>
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	2200      	movs	r2, #0
 8011010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011014:	f002 f83e 	bl	8013094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011018:	463a      	mov	r2, r7
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	4611      	mov	r1, r2
 8011020:	4618      	mov	r0, r3
 8011022:	f000 ffaf 	bl	8011f84 <xTaskCheckForTimeOut>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d132      	bne.n	8011092 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801102c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801102e:	f000 f9f2 	bl	8011416 <prvIsQueueEmpty>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d026      	beq.n	8011086 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d109      	bne.n	8011054 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011040:	f001 fff8 	bl	8013034 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	4618      	mov	r0, r3
 801104a:	f001 f8ff 	bl	801224c <xTaskPriorityInherit>
 801104e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011050:	f002 f820 	bl	8013094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	3324      	adds	r3, #36	; 0x24
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	4611      	mov	r1, r2
 801105c:	4618      	mov	r0, r3
 801105e:	f000 fec7 	bl	8011df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011064:	f000 f985 	bl	8011372 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011068:	f000 fcd8 	bl	8011a1c <xTaskResumeAll>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	f47f af68 	bne.w	8010f44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011074:	4b18      	ldr	r3, [pc, #96]	; (80110d8 <xQueueSemaphoreTake+0x214>)
 8011076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	e75e      	b.n	8010f44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011088:	f000 f973 	bl	8011372 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801108c:	f000 fcc6 	bl	8011a1c <xTaskResumeAll>
 8011090:	e758      	b.n	8010f44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011094:	f000 f96d 	bl	8011372 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011098:	f000 fcc0 	bl	8011a1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801109c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801109e:	f000 f9ba 	bl	8011416 <prvIsQueueEmpty>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f43f af4d 	beq.w	8010f44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d00d      	beq.n	80110cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80110b0:	f001 ffc0 	bl	8013034 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80110b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110b6:	f000 f8b4 	bl	8011222 <prvGetDisinheritPriorityAfterTimeout>
 80110ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110c2:	4618      	mov	r0, r3
 80110c4:	f001 f998 	bl	80123f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80110c8:	f001 ffe4 	bl	8013094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3738      	adds	r7, #56	; 0x38
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b08e      	sub	sp, #56	; 0x38
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d10a      	bne.n	8011108 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80110f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f6:	f383 8811 	msr	BASEPRI, r3
 80110fa:	f3bf 8f6f 	isb	sy
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	623b      	str	r3, [r7, #32]
}
 8011104:	bf00      	nop
 8011106:	e7fe      	b.n	8011106 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d103      	bne.n	8011116 <xQueueReceiveFromISR+0x3a>
 801110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <xQueueReceiveFromISR+0x3e>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <xQueueReceiveFromISR+0x40>
 801111a:	2300      	movs	r3, #0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10a      	bne.n	8011136 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	61fb      	str	r3, [r7, #28]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011136:	f002 f85f 	bl	80131f8 <vPortValidateInterruptPriority>
	__asm volatile
 801113a:	f3ef 8211 	mrs	r2, BASEPRI
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	61ba      	str	r2, [r7, #24]
 8011150:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011152:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801115a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115e:	2b00      	cmp	r3, #0
 8011160:	d02f      	beq.n	80111c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801116c:	68b9      	ldr	r1, [r7, #8]
 801116e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011170:	f000 f8d9 	bl	8011326 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	1e5a      	subs	r2, r3, #1
 8011178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801117a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801117c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011184:	d112      	bne.n	80111ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011188:	691b      	ldr	r3, [r3, #16]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d016      	beq.n	80111bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	3310      	adds	r3, #16
 8011192:	4618      	mov	r0, r3
 8011194:	f000 fe7c 	bl	8011e90 <xTaskRemoveFromEventList>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00e      	beq.n	80111bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00b      	beq.n	80111bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2201      	movs	r2, #1
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	e007      	b.n	80111bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111b0:	3301      	adds	r3, #1
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	b25a      	sxtb	r2, r3
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80111bc:	2301      	movs	r3, #1
 80111be:	637b      	str	r3, [r7, #52]	; 0x34
 80111c0:	e001      	b.n	80111c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80111c2:	2300      	movs	r3, #0
 80111c4:	637b      	str	r3, [r7, #52]	; 0x34
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	f383 8811 	msr	BASEPRI, r3
}
 80111d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80111d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3738      	adds	r7, #56	; 0x38
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d10a      	bne.n	8011204 <vQueueDelete+0x28>
	__asm volatile
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	60bb      	str	r3, [r7, #8]
}
 8011200:	bf00      	nop
 8011202:	e7fe      	b.n	8011202 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f000 f95f 	bl	80114c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011210:	2b00      	cmp	r3, #0
 8011212:	d102      	bne.n	801121a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	f002 f8ff 	bl	8013418 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801121a:	bf00      	nop
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011222:	b480      	push	{r7}
 8011224:	b085      	sub	sp, #20
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801122e:	2b00      	cmp	r3, #0
 8011230:	d006      	beq.n	8011240 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801123c:	60fb      	str	r3, [r7, #12]
 801123e:	e001      	b.n	8011244 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011240:	2300      	movs	r3, #0
 8011242:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011244:	68fb      	ldr	r3, [r7, #12]
	}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b086      	sub	sp, #24
 8011256:	af00      	add	r7, sp, #0
 8011258:	60f8      	str	r0, [r7, #12]
 801125a:	60b9      	str	r1, [r7, #8]
 801125c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801125e:	2300      	movs	r3, #0
 8011260:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011266:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10d      	bne.n	801128c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d14d      	bne.n	8011314 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	4618      	mov	r0, r3
 801127e:	f001 f84d 	bl	801231c <xTaskPriorityDisinherit>
 8011282:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2200      	movs	r2, #0
 8011288:	609a      	str	r2, [r3, #8]
 801128a:	e043      	b.n	8011314 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d119      	bne.n	80112c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	6858      	ldr	r0, [r3, #4]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801129a:	461a      	mov	r2, r3
 801129c:	68b9      	ldr	r1, [r7, #8]
 801129e:	f002 fd1b 	bl	8013cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	685a      	ldr	r2, [r3, #4]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112aa:	441a      	add	r2, r3
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d32b      	bcc.n	8011314 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	605a      	str	r2, [r3, #4]
 80112c4:	e026      	b.n	8011314 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	68d8      	ldr	r0, [r3, #12]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ce:	461a      	mov	r2, r3
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	f002 fd01 	bl	8013cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	68da      	ldr	r2, [r3, #12]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112de:	425b      	negs	r3, r3
 80112e0:	441a      	add	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	68da      	ldr	r2, [r3, #12]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d207      	bcs.n	8011302 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	689a      	ldr	r2, [r3, #8]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fa:	425b      	negs	r3, r3
 80112fc:	441a      	add	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d105      	bne.n	8011314 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d002      	beq.n	8011314 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	3b01      	subs	r3, #1
 8011312:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	1c5a      	adds	r2, r3, #1
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801131c:	697b      	ldr	r3, [r7, #20]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b082      	sub	sp, #8
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011334:	2b00      	cmp	r3, #0
 8011336:	d018      	beq.n	801136a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68da      	ldr	r2, [r3, #12]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011340:	441a      	add	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	68da      	ldr	r2, [r3, #12]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	429a      	cmp	r2, r3
 8011350:	d303      	bcc.n	801135a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68d9      	ldr	r1, [r3, #12]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011362:	461a      	mov	r2, r3
 8011364:	6838      	ldr	r0, [r7, #0]
 8011366:	f002 fcb7 	bl	8013cd8 <memcpy>
	}
}
 801136a:	bf00      	nop
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b084      	sub	sp, #16
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801137a:	f001 fe5b 	bl	8013034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011384:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011386:	e011      	b.n	80113ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	d012      	beq.n	80113b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	3324      	adds	r3, #36	; 0x24
 8011394:	4618      	mov	r0, r3
 8011396:	f000 fd7b 	bl	8011e90 <xTaskRemoveFromEventList>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d001      	beq.n	80113a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80113a0:	f000 fe52 	bl	8012048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	dce9      	bgt.n	8011388 <prvUnlockQueue+0x16>
 80113b4:	e000      	b.n	80113b8 <prvUnlockQueue+0x46>
					break;
 80113b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	22ff      	movs	r2, #255	; 0xff
 80113bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80113c0:	f001 fe68 	bl	8013094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80113c4:	f001 fe36 	bl	8013034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113d0:	e011      	b.n	80113f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	691b      	ldr	r3, [r3, #16]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d012      	beq.n	8011400 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	3310      	adds	r3, #16
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 fd56 	bl	8011e90 <xTaskRemoveFromEventList>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80113ea:	f000 fe2d 	bl	8012048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80113ee:	7bbb      	ldrb	r3, [r7, #14]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	dce9      	bgt.n	80113d2 <prvUnlockQueue+0x60>
 80113fe:	e000      	b.n	8011402 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011400:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	22ff      	movs	r2, #255	; 0xff
 8011406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801140a:	f001 fe43 	bl	8013094 <vPortExitCritical>
}
 801140e:	bf00      	nop
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b084      	sub	sp, #16
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801141e:	f001 fe09 	bl	8013034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801142a:	2301      	movs	r3, #1
 801142c:	60fb      	str	r3, [r7, #12]
 801142e:	e001      	b.n	8011434 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011430:	2300      	movs	r3, #0
 8011432:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011434:	f001 fe2e 	bl	8013094 <vPortExitCritical>

	return xReturn;
 8011438:	68fb      	ldr	r3, [r7, #12]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801144a:	f001 fdf3 	bl	8013034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011456:	429a      	cmp	r2, r3
 8011458:	d102      	bne.n	8011460 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801145a:	2301      	movs	r3, #1
 801145c:	60fb      	str	r3, [r7, #12]
 801145e:	e001      	b.n	8011464 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011460:	2300      	movs	r3, #0
 8011462:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011464:	f001 fe16 	bl	8013094 <vPortExitCritical>

	return xReturn;
 8011468:	68fb      	ldr	r3, [r7, #12]
}
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
	...

08011474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011474:	b480      	push	{r7}
 8011476:	b085      	sub	sp, #20
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801147e:	2300      	movs	r3, #0
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	e014      	b.n	80114ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011484:	4a0f      	ldr	r2, [pc, #60]	; (80114c4 <vQueueAddToRegistry+0x50>)
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d10b      	bne.n	80114a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011490:	490c      	ldr	r1, [pc, #48]	; (80114c4 <vQueueAddToRegistry+0x50>)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	683a      	ldr	r2, [r7, #0]
 8011496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801149a:	4a0a      	ldr	r2, [pc, #40]	; (80114c4 <vQueueAddToRegistry+0x50>)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	00db      	lsls	r3, r3, #3
 80114a0:	4413      	add	r3, r2
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80114a6:	e006      	b.n	80114b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	3301      	adds	r3, #1
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2b07      	cmp	r3, #7
 80114b2:	d9e7      	bls.n	8011484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80114b4:	bf00      	nop
 80114b6:	bf00      	nop
 80114b8:	3714      	adds	r7, #20
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20000ea0 	.word	0x20000ea0

080114c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
 80114d4:	e016      	b.n	8011504 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80114d6:	4a10      	ldr	r2, [pc, #64]	; (8011518 <vQueueUnregisterQueue+0x50>)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	00db      	lsls	r3, r3, #3
 80114dc:	4413      	add	r3, r2
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d10b      	bne.n	80114fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80114e6:	4a0c      	ldr	r2, [pc, #48]	; (8011518 <vQueueUnregisterQueue+0x50>)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2100      	movs	r1, #0
 80114ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80114f0:	4a09      	ldr	r2, [pc, #36]	; (8011518 <vQueueUnregisterQueue+0x50>)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	00db      	lsls	r3, r3, #3
 80114f6:	4413      	add	r3, r2
 80114f8:	2200      	movs	r2, #0
 80114fa:	605a      	str	r2, [r3, #4]
				break;
 80114fc:	e006      	b.n	801150c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3301      	adds	r3, #1
 8011502:	60fb      	str	r3, [r7, #12]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b07      	cmp	r3, #7
 8011508:	d9e5      	bls.n	80114d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801150a:	bf00      	nop
 801150c:	bf00      	nop
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	20000ea0 	.word	0x20000ea0

0801151c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801152c:	f001 fd82 	bl	8013034 <vPortEnterCritical>
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011536:	b25b      	sxtb	r3, r3
 8011538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153c:	d103      	bne.n	8011546 <vQueueWaitForMessageRestricted+0x2a>
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801154c:	b25b      	sxtb	r3, r3
 801154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011552:	d103      	bne.n	801155c <vQueueWaitForMessageRestricted+0x40>
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	2200      	movs	r2, #0
 8011558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801155c:	f001 fd9a 	bl	8013094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011564:	2b00      	cmp	r3, #0
 8011566:	d106      	bne.n	8011576 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	3324      	adds	r3, #36	; 0x24
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	68b9      	ldr	r1, [r7, #8]
 8011570:	4618      	mov	r0, r3
 8011572:	f000 fc61 	bl	8011e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011576:	6978      	ldr	r0, [r7, #20]
 8011578:	f7ff fefb 	bl	8011372 <prvUnlockQueue>
	}
 801157c:	bf00      	nop
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011584:	b580      	push	{r7, lr}
 8011586:	b08e      	sub	sp, #56	; 0x38
 8011588:	af04      	add	r7, sp, #16
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	623b      	str	r3, [r7, #32]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10a      	bne.n	80115ca <xTaskCreateStatic+0x46>
	__asm volatile
 80115b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	61fb      	str	r3, [r7, #28]
}
 80115c6:	bf00      	nop
 80115c8:	e7fe      	b.n	80115c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80115ca:	2360      	movs	r3, #96	; 0x60
 80115cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	2b60      	cmp	r3, #96	; 0x60
 80115d2:	d00a      	beq.n	80115ea <xTaskCreateStatic+0x66>
	__asm volatile
 80115d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	61bb      	str	r3, [r7, #24]
}
 80115e6:	bf00      	nop
 80115e8:	e7fe      	b.n	80115e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80115ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d01e      	beq.n	8011630 <xTaskCreateStatic+0xac>
 80115f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d01b      	beq.n	8011630 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80115f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80115fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011600:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	2202      	movs	r2, #2
 8011606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801160a:	2300      	movs	r3, #0
 801160c:	9303      	str	r3, [sp, #12]
 801160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011610:	9302      	str	r3, [sp, #8]
 8011612:	f107 0314 	add.w	r3, r7, #20
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	68b9      	ldr	r1, [r7, #8]
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f000 f850 	bl	80116c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801162a:	f000 f8df 	bl	80117ec <prvAddNewTaskToReadyList>
 801162e:	e001      	b.n	8011634 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011630:	2300      	movs	r3, #0
 8011632:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011634:	697b      	ldr	r3, [r7, #20]
	}
 8011636:	4618      	mov	r0, r3
 8011638:	3728      	adds	r7, #40	; 0x28
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801163e:	b580      	push	{r7, lr}
 8011640:	b08c      	sub	sp, #48	; 0x30
 8011642:	af04      	add	r7, sp, #16
 8011644:	60f8      	str	r0, [r7, #12]
 8011646:	60b9      	str	r1, [r7, #8]
 8011648:	603b      	str	r3, [r7, #0]
 801164a:	4613      	mov	r3, r2
 801164c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801164e:	88fb      	ldrh	r3, [r7, #6]
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4618      	mov	r0, r3
 8011654:	f001 fe10 	bl	8013278 <pvPortMalloc>
 8011658:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00e      	beq.n	801167e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011660:	2060      	movs	r0, #96	; 0x60
 8011662:	f001 fe09 	bl	8013278 <pvPortMalloc>
 8011666:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	631a      	str	r2, [r3, #48]	; 0x30
 8011674:	e005      	b.n	8011682 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011676:	6978      	ldr	r0, [r7, #20]
 8011678:	f001 fece 	bl	8013418 <vPortFree>
 801167c:	e001      	b.n	8011682 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801167e:	2300      	movs	r3, #0
 8011680:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d017      	beq.n	80116b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	2200      	movs	r2, #0
 801168c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011690:	88fa      	ldrh	r2, [r7, #6]
 8011692:	2300      	movs	r3, #0
 8011694:	9303      	str	r3, [sp, #12]
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	9302      	str	r3, [sp, #8]
 801169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	68b9      	ldr	r1, [r7, #8]
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f000 f80e 	bl	80116c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116ac:	69f8      	ldr	r0, [r7, #28]
 80116ae:	f000 f89d 	bl	80117ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116b2:	2301      	movs	r3, #1
 80116b4:	61bb      	str	r3, [r7, #24]
 80116b6:	e002      	b.n	80116be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116b8:	f04f 33ff 	mov.w	r3, #4294967295
 80116bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116be:	69bb      	ldr	r3, [r7, #24]
	}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3720      	adds	r7, #32
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b088      	sub	sp, #32
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80116d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	461a      	mov	r2, r3
 80116e0:	21a5      	movs	r1, #165	; 0xa5
 80116e2:	f002 fb07 	bl	8013cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80116e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80116f0:	3b01      	subs	r3, #1
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	f023 0307 	bic.w	r3, r3, #7
 80116fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	f003 0307 	and.w	r3, r3, #7
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00a      	beq.n	8011720 <prvInitialiseNewTask+0x58>
	__asm volatile
 801170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170e:	f383 8811 	msr	BASEPRI, r3
 8011712:	f3bf 8f6f 	isb	sy
 8011716:	f3bf 8f4f 	dsb	sy
 801171a:	617b      	str	r3, [r7, #20]
}
 801171c:	bf00      	nop
 801171e:	e7fe      	b.n	801171e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d01f      	beq.n	8011766 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011726:	2300      	movs	r3, #0
 8011728:	61fb      	str	r3, [r7, #28]
 801172a:	e012      	b.n	8011752 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801172c:	68ba      	ldr	r2, [r7, #8]
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	4413      	add	r3, r2
 8011732:	7819      	ldrb	r1, [r3, #0]
 8011734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	4413      	add	r3, r2
 801173a:	3334      	adds	r3, #52	; 0x34
 801173c:	460a      	mov	r2, r1
 801173e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011740:	68ba      	ldr	r2, [r7, #8]
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	4413      	add	r3, r2
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d006      	beq.n	801175a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	3301      	adds	r3, #1
 8011750:	61fb      	str	r3, [r7, #28]
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	2b0f      	cmp	r3, #15
 8011756:	d9e9      	bls.n	801172c <prvInitialiseNewTask+0x64>
 8011758:	e000      	b.n	801175c <prvInitialiseNewTask+0x94>
			{
				break;
 801175a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011764:	e003      	b.n	801176e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	2200      	movs	r2, #0
 801176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011770:	2b37      	cmp	r3, #55	; 0x37
 8011772:	d901      	bls.n	8011778 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011774:	2337      	movs	r3, #55	; 0x37
 8011776:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801177c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011782:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011786:	2200      	movs	r2, #0
 8011788:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178c:	3304      	adds	r3, #4
 801178e:	4618      	mov	r0, r3
 8011790:	f7fe fe56 	bl	8010440 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011796:	3318      	adds	r3, #24
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe fe51 	bl	8010440 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80117b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b6:	2200      	movs	r2, #0
 80117b8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117bc:	2200      	movs	r2, #0
 80117be:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c2:	2200      	movs	r2, #0
 80117c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117c8:	683a      	ldr	r2, [r7, #0]
 80117ca:	68f9      	ldr	r1, [r7, #12]
 80117cc:	69b8      	ldr	r0, [r7, #24]
 80117ce:	f001 fb05 	bl	8012ddc <pxPortInitialiseStack>
 80117d2:	4602      	mov	r2, r0
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80117d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d002      	beq.n	80117e4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117e4:	bf00      	nop
 80117e6:	3720      	adds	r7, #32
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117f4:	f001 fc1e 	bl	8013034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117f8:	4b2d      	ldr	r3, [pc, #180]	; (80118b0 <prvAddNewTaskToReadyList+0xc4>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3301      	adds	r3, #1
 80117fe:	4a2c      	ldr	r2, [pc, #176]	; (80118b0 <prvAddNewTaskToReadyList+0xc4>)
 8011800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011802:	4b2c      	ldr	r3, [pc, #176]	; (80118b4 <prvAddNewTaskToReadyList+0xc8>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d109      	bne.n	801181e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801180a:	4a2a      	ldr	r2, [pc, #168]	; (80118b4 <prvAddNewTaskToReadyList+0xc8>)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011810:	4b27      	ldr	r3, [pc, #156]	; (80118b0 <prvAddNewTaskToReadyList+0xc4>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d110      	bne.n	801183a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011818:	f000 fc3c 	bl	8012094 <prvInitialiseTaskLists>
 801181c:	e00d      	b.n	801183a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801181e:	4b26      	ldr	r3, [pc, #152]	; (80118b8 <prvAddNewTaskToReadyList+0xcc>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d109      	bne.n	801183a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011826:	4b23      	ldr	r3, [pc, #140]	; (80118b4 <prvAddNewTaskToReadyList+0xc8>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011830:	429a      	cmp	r2, r3
 8011832:	d802      	bhi.n	801183a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011834:	4a1f      	ldr	r2, [pc, #124]	; (80118b4 <prvAddNewTaskToReadyList+0xc8>)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801183a:	4b20      	ldr	r3, [pc, #128]	; (80118bc <prvAddNewTaskToReadyList+0xd0>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	3301      	adds	r3, #1
 8011840:	4a1e      	ldr	r2, [pc, #120]	; (80118bc <prvAddNewTaskToReadyList+0xd0>)
 8011842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011844:	4b1d      	ldr	r3, [pc, #116]	; (80118bc <prvAddNewTaskToReadyList+0xd0>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011850:	4b1b      	ldr	r3, [pc, #108]	; (80118c0 <prvAddNewTaskToReadyList+0xd4>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	429a      	cmp	r2, r3
 8011856:	d903      	bls.n	8011860 <prvAddNewTaskToReadyList+0x74>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185c:	4a18      	ldr	r2, [pc, #96]	; (80118c0 <prvAddNewTaskToReadyList+0xd4>)
 801185e:	6013      	str	r3, [r2, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011864:	4613      	mov	r3, r2
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	4413      	add	r3, r2
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4a15      	ldr	r2, [pc, #84]	; (80118c4 <prvAddNewTaskToReadyList+0xd8>)
 801186e:	441a      	add	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3304      	adds	r3, #4
 8011874:	4619      	mov	r1, r3
 8011876:	4610      	mov	r0, r2
 8011878:	f7fe fdef 	bl	801045a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801187c:	f001 fc0a 	bl	8013094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011880:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <prvAddNewTaskToReadyList+0xcc>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00e      	beq.n	80118a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011888:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <prvAddNewTaskToReadyList+0xc8>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011892:	429a      	cmp	r2, r3
 8011894:	d207      	bcs.n	80118a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011896:	4b0c      	ldr	r3, [pc, #48]	; (80118c8 <prvAddNewTaskToReadyList+0xdc>)
 8011898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	200013b4 	.word	0x200013b4
 80118b4:	20000ee0 	.word	0x20000ee0
 80118b8:	200013c0 	.word	0x200013c0
 80118bc:	200013d0 	.word	0x200013d0
 80118c0:	200013bc 	.word	0x200013bc
 80118c4:	20000ee4 	.word	0x20000ee4
 80118c8:	e000ed04 	.word	0xe000ed04

080118cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118d4:	2300      	movs	r3, #0
 80118d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d017      	beq.n	801190e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118de:	4b13      	ldr	r3, [pc, #76]	; (801192c <vTaskDelay+0x60>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00a      	beq.n	80118fc <vTaskDelay+0x30>
	__asm volatile
 80118e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	60bb      	str	r3, [r7, #8]
}
 80118f8:	bf00      	nop
 80118fa:	e7fe      	b.n	80118fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80118fc:	f000 f880 	bl	8011a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011900:	2100      	movs	r1, #0
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 fe0e 	bl	8012524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011908:	f000 f888 	bl	8011a1c <xTaskResumeAll>
 801190c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d107      	bne.n	8011924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011914:	4b06      	ldr	r3, [pc, #24]	; (8011930 <vTaskDelay+0x64>)
 8011916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801191a:	601a      	str	r2, [r3, #0]
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	200013dc 	.word	0x200013dc
 8011930:	e000ed04 	.word	0xe000ed04

08011934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b08a      	sub	sp, #40	; 0x28
 8011938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801193a:	2300      	movs	r3, #0
 801193c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801193e:	2300      	movs	r3, #0
 8011940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011942:	463a      	mov	r2, r7
 8011944:	1d39      	adds	r1, r7, #4
 8011946:	f107 0308 	add.w	r3, r7, #8
 801194a:	4618      	mov	r0, r3
 801194c:	f7fe fd24 	bl	8010398 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011950:	6839      	ldr	r1, [r7, #0]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	9202      	str	r2, [sp, #8]
 8011958:	9301      	str	r3, [sp, #4]
 801195a:	2300      	movs	r3, #0
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	2300      	movs	r3, #0
 8011960:	460a      	mov	r2, r1
 8011962:	4921      	ldr	r1, [pc, #132]	; (80119e8 <vTaskStartScheduler+0xb4>)
 8011964:	4821      	ldr	r0, [pc, #132]	; (80119ec <vTaskStartScheduler+0xb8>)
 8011966:	f7ff fe0d 	bl	8011584 <xTaskCreateStatic>
 801196a:	4603      	mov	r3, r0
 801196c:	4a20      	ldr	r2, [pc, #128]	; (80119f0 <vTaskStartScheduler+0xbc>)
 801196e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011970:	4b1f      	ldr	r3, [pc, #124]	; (80119f0 <vTaskStartScheduler+0xbc>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011978:	2301      	movs	r3, #1
 801197a:	617b      	str	r3, [r7, #20]
 801197c:	e001      	b.n	8011982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801197e:	2300      	movs	r3, #0
 8011980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d102      	bne.n	801198e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011988:	f000 fe20 	bl	80125cc <xTimerCreateTimerTask>
 801198c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b01      	cmp	r3, #1
 8011992:	d116      	bne.n	80119c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	613b      	str	r3, [r7, #16]
}
 80119a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80119a8:	4b12      	ldr	r3, [pc, #72]	; (80119f4 <vTaskStartScheduler+0xc0>)
 80119aa:	f04f 32ff 	mov.w	r2, #4294967295
 80119ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119b0:	4b11      	ldr	r3, [pc, #68]	; (80119f8 <vTaskStartScheduler+0xc4>)
 80119b2:	2201      	movs	r2, #1
 80119b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80119b6:	4b11      	ldr	r3, [pc, #68]	; (80119fc <vTaskStartScheduler+0xc8>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119bc:	f001 fa98 	bl	8012ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119c0:	e00e      	b.n	80119e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c8:	d10a      	bne.n	80119e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80119ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ce:	f383 8811 	msr	BASEPRI, r3
 80119d2:	f3bf 8f6f 	isb	sy
 80119d6:	f3bf 8f4f 	dsb	sy
 80119da:	60fb      	str	r3, [r7, #12]
}
 80119dc:	bf00      	nop
 80119de:	e7fe      	b.n	80119de <vTaskStartScheduler+0xaa>
}
 80119e0:	bf00      	nop
 80119e2:	3718      	adds	r7, #24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	0801465c 	.word	0x0801465c
 80119ec:	08012061 	.word	0x08012061
 80119f0:	200013d8 	.word	0x200013d8
 80119f4:	200013d4 	.word	0x200013d4
 80119f8:	200013c0 	.word	0x200013c0
 80119fc:	200013b8 	.word	0x200013b8

08011a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a00:	b480      	push	{r7}
 8011a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011a04:	4b04      	ldr	r3, [pc, #16]	; (8011a18 <vTaskSuspendAll+0x18>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	4a03      	ldr	r2, [pc, #12]	; (8011a18 <vTaskSuspendAll+0x18>)
 8011a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011a0e:	bf00      	nop
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr
 8011a18:	200013dc 	.word	0x200013dc

08011a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a26:	2300      	movs	r3, #0
 8011a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a2a:	4b42      	ldr	r3, [pc, #264]	; (8011b34 <xTaskResumeAll+0x118>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d10a      	bne.n	8011a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8011a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a36:	f383 8811 	msr	BASEPRI, r3
 8011a3a:	f3bf 8f6f 	isb	sy
 8011a3e:	f3bf 8f4f 	dsb	sy
 8011a42:	603b      	str	r3, [r7, #0]
}
 8011a44:	bf00      	nop
 8011a46:	e7fe      	b.n	8011a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a48:	f001 faf4 	bl	8013034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a4c:	4b39      	ldr	r3, [pc, #228]	; (8011b34 <xTaskResumeAll+0x118>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	4a38      	ldr	r2, [pc, #224]	; (8011b34 <xTaskResumeAll+0x118>)
 8011a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a56:	4b37      	ldr	r3, [pc, #220]	; (8011b34 <xTaskResumeAll+0x118>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d162      	bne.n	8011b24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a5e:	4b36      	ldr	r3, [pc, #216]	; (8011b38 <xTaskResumeAll+0x11c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d05e      	beq.n	8011b24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a66:	e02f      	b.n	8011ac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a68:	4b34      	ldr	r3, [pc, #208]	; (8011b3c <xTaskResumeAll+0x120>)
 8011a6a:	68db      	ldr	r3, [r3, #12]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3318      	adds	r3, #24
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fd4d 	bl	8010514 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fe fd48 	bl	8010514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a88:	4b2d      	ldr	r3, [pc, #180]	; (8011b40 <xTaskResumeAll+0x124>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d903      	bls.n	8011a98 <xTaskResumeAll+0x7c>
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a94:	4a2a      	ldr	r2, [pc, #168]	; (8011b40 <xTaskResumeAll+0x124>)
 8011a96:	6013      	str	r3, [r2, #0]
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4413      	add	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4a27      	ldr	r2, [pc, #156]	; (8011b44 <xTaskResumeAll+0x128>)
 8011aa6:	441a      	add	r2, r3
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	3304      	adds	r3, #4
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7fe fcd3 	bl	801045a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab8:	4b23      	ldr	r3, [pc, #140]	; (8011b48 <xTaskResumeAll+0x12c>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d302      	bcc.n	8011ac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011ac2:	4b22      	ldr	r3, [pc, #136]	; (8011b4c <xTaskResumeAll+0x130>)
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ac8:	4b1c      	ldr	r3, [pc, #112]	; (8011b3c <xTaskResumeAll+0x120>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d1cb      	bne.n	8011a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011ad6:	f000 fb7b 	bl	80121d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011ada:	4b1d      	ldr	r3, [pc, #116]	; (8011b50 <xTaskResumeAll+0x134>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d010      	beq.n	8011b08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011ae6:	f000 f847 	bl	8011b78 <xTaskIncrementTick>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011af0:	4b16      	ldr	r3, [pc, #88]	; (8011b4c <xTaskResumeAll+0x130>)
 8011af2:	2201      	movs	r2, #1
 8011af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	3b01      	subs	r3, #1
 8011afa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1f1      	bne.n	8011ae6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011b02:	4b13      	ldr	r3, [pc, #76]	; (8011b50 <xTaskResumeAll+0x134>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011b08:	4b10      	ldr	r3, [pc, #64]	; (8011b4c <xTaskResumeAll+0x130>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d009      	beq.n	8011b24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b10:	2301      	movs	r3, #1
 8011b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b14:	4b0f      	ldr	r3, [pc, #60]	; (8011b54 <xTaskResumeAll+0x138>)
 8011b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	f3bf 8f4f 	dsb	sy
 8011b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b24:	f001 fab6 	bl	8013094 <vPortExitCritical>

	return xAlreadyYielded;
 8011b28:	68bb      	ldr	r3, [r7, #8]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	200013dc 	.word	0x200013dc
 8011b38:	200013b4 	.word	0x200013b4
 8011b3c:	20001374 	.word	0x20001374
 8011b40:	200013bc 	.word	0x200013bc
 8011b44:	20000ee4 	.word	0x20000ee4
 8011b48:	20000ee0 	.word	0x20000ee0
 8011b4c:	200013c8 	.word	0x200013c8
 8011b50:	200013c4 	.word	0x200013c4
 8011b54:	e000ed04 	.word	0xe000ed04

08011b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b5e:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <xTaskGetTickCount+0x1c>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b64:	687b      	ldr	r3, [r7, #4]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	370c      	adds	r7, #12
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	200013b8 	.word	0x200013b8

08011b78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b82:	4b4f      	ldr	r3, [pc, #316]	; (8011cc0 <xTaskIncrementTick+0x148>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f040 808f 	bne.w	8011caa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b8c:	4b4d      	ldr	r3, [pc, #308]	; (8011cc4 <xTaskIncrementTick+0x14c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	3301      	adds	r3, #1
 8011b92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b94:	4a4b      	ldr	r2, [pc, #300]	; (8011cc4 <xTaskIncrementTick+0x14c>)
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d120      	bne.n	8011be2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ba0:	4b49      	ldr	r3, [pc, #292]	; (8011cc8 <xTaskIncrementTick+0x150>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00a      	beq.n	8011bc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8011baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	603b      	str	r3, [r7, #0]
}
 8011bbc:	bf00      	nop
 8011bbe:	e7fe      	b.n	8011bbe <xTaskIncrementTick+0x46>
 8011bc0:	4b41      	ldr	r3, [pc, #260]	; (8011cc8 <xTaskIncrementTick+0x150>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	60fb      	str	r3, [r7, #12]
 8011bc6:	4b41      	ldr	r3, [pc, #260]	; (8011ccc <xTaskIncrementTick+0x154>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a3f      	ldr	r2, [pc, #252]	; (8011cc8 <xTaskIncrementTick+0x150>)
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	4a3f      	ldr	r2, [pc, #252]	; (8011ccc <xTaskIncrementTick+0x154>)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6013      	str	r3, [r2, #0]
 8011bd4:	4b3e      	ldr	r3, [pc, #248]	; (8011cd0 <xTaskIncrementTick+0x158>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	4a3d      	ldr	r2, [pc, #244]	; (8011cd0 <xTaskIncrementTick+0x158>)
 8011bdc:	6013      	str	r3, [r2, #0]
 8011bde:	f000 faf7 	bl	80121d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011be2:	4b3c      	ldr	r3, [pc, #240]	; (8011cd4 <xTaskIncrementTick+0x15c>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	693a      	ldr	r2, [r7, #16]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d349      	bcc.n	8011c80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bec:	4b36      	ldr	r3, [pc, #216]	; (8011cc8 <xTaskIncrementTick+0x150>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d104      	bne.n	8011c00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bf6:	4b37      	ldr	r3, [pc, #220]	; (8011cd4 <xTaskIncrementTick+0x15c>)
 8011bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfc:	601a      	str	r2, [r3, #0]
					break;
 8011bfe:	e03f      	b.n	8011c80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c00:	4b31      	ldr	r3, [pc, #196]	; (8011cc8 <xTaskIncrementTick+0x150>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011c10:	693a      	ldr	r2, [r7, #16]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d203      	bcs.n	8011c20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011c18:	4a2e      	ldr	r2, [pc, #184]	; (8011cd4 <xTaskIncrementTick+0x15c>)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011c1e:	e02f      	b.n	8011c80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	3304      	adds	r3, #4
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fe fc75 	bl	8010514 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d004      	beq.n	8011c3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	3318      	adds	r3, #24
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fc6c 	bl	8010514 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c40:	4b25      	ldr	r3, [pc, #148]	; (8011cd8 <xTaskIncrementTick+0x160>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d903      	bls.n	8011c50 <xTaskIncrementTick+0xd8>
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4c:	4a22      	ldr	r2, [pc, #136]	; (8011cd8 <xTaskIncrementTick+0x160>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4a1f      	ldr	r2, [pc, #124]	; (8011cdc <xTaskIncrementTick+0x164>)
 8011c5e:	441a      	add	r2, r3
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7fe fbf7 	bl	801045a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c70:	4b1b      	ldr	r3, [pc, #108]	; (8011ce0 <xTaskIncrementTick+0x168>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d3b8      	bcc.n	8011bec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c7e:	e7b5      	b.n	8011bec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c80:	4b17      	ldr	r3, [pc, #92]	; (8011ce0 <xTaskIncrementTick+0x168>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c86:	4915      	ldr	r1, [pc, #84]	; (8011cdc <xTaskIncrementTick+0x164>)
 8011c88:	4613      	mov	r3, r2
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	4413      	add	r3, r2
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	440b      	add	r3, r1
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d901      	bls.n	8011c9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011c9c:	4b11      	ldr	r3, [pc, #68]	; (8011ce4 <xTaskIncrementTick+0x16c>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d007      	beq.n	8011cb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	617b      	str	r3, [r7, #20]
 8011ca8:	e004      	b.n	8011cb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011caa:	4b0f      	ldr	r3, [pc, #60]	; (8011ce8 <xTaskIncrementTick+0x170>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	4a0d      	ldr	r2, [pc, #52]	; (8011ce8 <xTaskIncrementTick+0x170>)
 8011cb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011cb4:	697b      	ldr	r3, [r7, #20]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	200013dc 	.word	0x200013dc
 8011cc4:	200013b8 	.word	0x200013b8
 8011cc8:	2000136c 	.word	0x2000136c
 8011ccc:	20001370 	.word	0x20001370
 8011cd0:	200013cc 	.word	0x200013cc
 8011cd4:	200013d4 	.word	0x200013d4
 8011cd8:	200013bc 	.word	0x200013bc
 8011cdc:	20000ee4 	.word	0x20000ee4
 8011ce0:	20000ee0 	.word	0x20000ee0
 8011ce4:	200013c8 	.word	0x200013c8
 8011ce8:	200013c4 	.word	0x200013c4

08011cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cf2:	4b3a      	ldr	r3, [pc, #232]	; (8011ddc <vTaskSwitchContext+0xf0>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d003      	beq.n	8011d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cfa:	4b39      	ldr	r3, [pc, #228]	; (8011de0 <vTaskSwitchContext+0xf4>)
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d00:	e068      	b.n	8011dd4 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011d02:	4b37      	ldr	r3, [pc, #220]	; (8011de0 <vTaskSwitchContext+0xf4>)
 8011d04:	2200      	movs	r2, #0
 8011d06:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011d08:	4b36      	ldr	r3, [pc, #216]	; (8011de4 <vTaskSwitchContext+0xf8>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d0e:	613b      	str	r3, [r7, #16]
 8011d10:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011d14:	60fb      	str	r3, [r7, #12]
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d111      	bne.n	8011d44 <vTaskSwitchContext+0x58>
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	3304      	adds	r3, #4
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d10b      	bne.n	8011d44 <vTaskSwitchContext+0x58>
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	3308      	adds	r3, #8
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d105      	bne.n	8011d44 <vTaskSwitchContext+0x58>
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	330c      	adds	r3, #12
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d008      	beq.n	8011d56 <vTaskSwitchContext+0x6a>
 8011d44:	4b27      	ldr	r3, [pc, #156]	; (8011de4 <vTaskSwitchContext+0xf8>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	4b26      	ldr	r3, [pc, #152]	; (8011de4 <vTaskSwitchContext+0xf8>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3334      	adds	r3, #52	; 0x34
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7ef f8cc 	bl	8000eee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d56:	4b24      	ldr	r3, [pc, #144]	; (8011de8 <vTaskSwitchContext+0xfc>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	617b      	str	r3, [r7, #20]
 8011d5c:	e010      	b.n	8011d80 <vTaskSwitchContext+0x94>
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <vTaskSwitchContext+0x8e>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	607b      	str	r3, [r7, #4]
}
 8011d76:	bf00      	nop
 8011d78:	e7fe      	b.n	8011d78 <vTaskSwitchContext+0x8c>
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	617b      	str	r3, [r7, #20]
 8011d80:	491a      	ldr	r1, [pc, #104]	; (8011dec <vTaskSwitchContext+0x100>)
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	4613      	mov	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4413      	add	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	440b      	add	r3, r1
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d0e4      	beq.n	8011d5e <vTaskSwitchContext+0x72>
 8011d94:	697a      	ldr	r2, [r7, #20]
 8011d96:	4613      	mov	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4413      	add	r3, r2
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	4a13      	ldr	r2, [pc, #76]	; (8011dec <vTaskSwitchContext+0x100>)
 8011da0:	4413      	add	r3, r2
 8011da2:	60bb      	str	r3, [r7, #8]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	685a      	ldr	r2, [r3, #4]
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	605a      	str	r2, [r3, #4]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	685a      	ldr	r2, [r3, #4]
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	3308      	adds	r3, #8
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d104      	bne.n	8011dc4 <vTaskSwitchContext+0xd8>
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	605a      	str	r2, [r3, #4]
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	4a06      	ldr	r2, [pc, #24]	; (8011de4 <vTaskSwitchContext+0xf8>)
 8011dcc:	6013      	str	r3, [r2, #0]
 8011dce:	4a06      	ldr	r2, [pc, #24]	; (8011de8 <vTaskSwitchContext+0xfc>)
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	6013      	str	r3, [r2, #0]
}
 8011dd4:	bf00      	nop
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	200013dc 	.word	0x200013dc
 8011de0:	200013c8 	.word	0x200013c8
 8011de4:	20000ee0 	.word	0x20000ee0
 8011de8:	200013bc 	.word	0x200013bc
 8011dec:	20000ee4 	.word	0x20000ee4

08011df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b084      	sub	sp, #16
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10a      	bne.n	8011e16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	60fb      	str	r3, [r7, #12]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e16:	4b07      	ldr	r3, [pc, #28]	; (8011e34 <vTaskPlaceOnEventList+0x44>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	3318      	adds	r3, #24
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7fe fb3f 	bl	80104a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e24:	2101      	movs	r1, #1
 8011e26:	6838      	ldr	r0, [r7, #0]
 8011e28:	f000 fb7c 	bl	8012524 <prvAddCurrentTaskToDelayedList>
}
 8011e2c:	bf00      	nop
 8011e2e:	3710      	adds	r7, #16
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	20000ee0 	.word	0x20000ee0

08011e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10a      	bne.n	8011e60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	617b      	str	r3, [r7, #20]
}
 8011e5c:	bf00      	nop
 8011e5e:	e7fe      	b.n	8011e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e60:	4b0a      	ldr	r3, [pc, #40]	; (8011e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3318      	adds	r3, #24
 8011e66:	4619      	mov	r1, r3
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f7fe faf6 	bl	801045a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011e74:	f04f 33ff 	mov.w	r3, #4294967295
 8011e78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e7a:	6879      	ldr	r1, [r7, #4]
 8011e7c:	68b8      	ldr	r0, [r7, #8]
 8011e7e:	f000 fb51 	bl	8012524 <prvAddCurrentTaskToDelayedList>
	}
 8011e82:	bf00      	nop
 8011e84:	3718      	adds	r7, #24
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20000ee0 	.word	0x20000ee0

08011e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d10a      	bne.n	8011ebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eaa:	f383 8811 	msr	BASEPRI, r3
 8011eae:	f3bf 8f6f 	isb	sy
 8011eb2:	f3bf 8f4f 	dsb	sy
 8011eb6:	60fb      	str	r3, [r7, #12]
}
 8011eb8:	bf00      	nop
 8011eba:	e7fe      	b.n	8011eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	3318      	adds	r3, #24
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fe fb27 	bl	8010514 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ec6:	4b1e      	ldr	r3, [pc, #120]	; (8011f40 <xTaskRemoveFromEventList+0xb0>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d11d      	bne.n	8011f0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe fb1e 	bl	8010514 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011edc:	4b19      	ldr	r3, [pc, #100]	; (8011f44 <xTaskRemoveFromEventList+0xb4>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d903      	bls.n	8011eec <xTaskRemoveFromEventList+0x5c>
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee8:	4a16      	ldr	r2, [pc, #88]	; (8011f44 <xTaskRemoveFromEventList+0xb4>)
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4413      	add	r3, r2
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	4a13      	ldr	r2, [pc, #76]	; (8011f48 <xTaskRemoveFromEventList+0xb8>)
 8011efa:	441a      	add	r2, r3
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	3304      	adds	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	4610      	mov	r0, r2
 8011f04:	f7fe faa9 	bl	801045a <vListInsertEnd>
 8011f08:	e005      	b.n	8011f16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	3318      	adds	r3, #24
 8011f0e:	4619      	mov	r1, r3
 8011f10:	480e      	ldr	r0, [pc, #56]	; (8011f4c <xTaskRemoveFromEventList+0xbc>)
 8011f12:	f7fe faa2 	bl	801045a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <xTaskRemoveFromEventList+0xc0>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d905      	bls.n	8011f30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f24:	2301      	movs	r3, #1
 8011f26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f28:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <xTaskRemoveFromEventList+0xc4>)
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	601a      	str	r2, [r3, #0]
 8011f2e:	e001      	b.n	8011f34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011f30:	2300      	movs	r3, #0
 8011f32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f34:	697b      	ldr	r3, [r7, #20]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3718      	adds	r7, #24
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	200013dc 	.word	0x200013dc
 8011f44:	200013bc 	.word	0x200013bc
 8011f48:	20000ee4 	.word	0x20000ee4
 8011f4c:	20001374 	.word	0x20001374
 8011f50:	20000ee0 	.word	0x20000ee0
 8011f54:	200013c8 	.word	0x200013c8

08011f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f60:	4b06      	ldr	r3, [pc, #24]	; (8011f7c <vTaskInternalSetTimeOutState+0x24>)
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f68:	4b05      	ldr	r3, [pc, #20]	; (8011f80 <vTaskInternalSetTimeOutState+0x28>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	605a      	str	r2, [r3, #4]
}
 8011f70:	bf00      	nop
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr
 8011f7c:	200013cc 	.word	0x200013cc
 8011f80:	200013b8 	.word	0x200013b8

08011f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b088      	sub	sp, #32
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10a      	bne.n	8011faa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f98:	f383 8811 	msr	BASEPRI, r3
 8011f9c:	f3bf 8f6f 	isb	sy
 8011fa0:	f3bf 8f4f 	dsb	sy
 8011fa4:	613b      	str	r3, [r7, #16]
}
 8011fa6:	bf00      	nop
 8011fa8:	e7fe      	b.n	8011fa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10a      	bne.n	8011fc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	60fb      	str	r3, [r7, #12]
}
 8011fc2:	bf00      	nop
 8011fc4:	e7fe      	b.n	8011fc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011fc6:	f001 f835 	bl	8013034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011fca:	4b1d      	ldr	r3, [pc, #116]	; (8012040 <xTaskCheckForTimeOut+0xbc>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	69ba      	ldr	r2, [r7, #24]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe2:	d102      	bne.n	8011fea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	61fb      	str	r3, [r7, #28]
 8011fe8:	e023      	b.n	8012032 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	4b15      	ldr	r3, [pc, #84]	; (8012044 <xTaskCheckForTimeOut+0xc0>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d007      	beq.n	8012006 <xTaskCheckForTimeOut+0x82>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	69ba      	ldr	r2, [r7, #24]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d302      	bcc.n	8012006 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012000:	2301      	movs	r3, #1
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	e015      	b.n	8012032 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	697a      	ldr	r2, [r7, #20]
 801200c:	429a      	cmp	r2, r3
 801200e:	d20b      	bcs.n	8012028 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	1ad2      	subs	r2, r2, r3
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ff ff9b 	bl	8011f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012022:	2300      	movs	r3, #0
 8012024:	61fb      	str	r3, [r7, #28]
 8012026:	e004      	b.n	8012032 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	2200      	movs	r2, #0
 801202c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801202e:	2301      	movs	r3, #1
 8012030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012032:	f001 f82f 	bl	8013094 <vPortExitCritical>

	return xReturn;
 8012036:	69fb      	ldr	r3, [r7, #28]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3720      	adds	r7, #32
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	200013b8 	.word	0x200013b8
 8012044:	200013cc 	.word	0x200013cc

08012048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012048:	b480      	push	{r7}
 801204a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801204c:	4b03      	ldr	r3, [pc, #12]	; (801205c <vTaskMissedYield+0x14>)
 801204e:	2201      	movs	r2, #1
 8012050:	601a      	str	r2, [r3, #0]
}
 8012052:	bf00      	nop
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	200013c8 	.word	0x200013c8

08012060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012068:	f000 f854 	bl	8012114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801206c:	4b07      	ldr	r3, [pc, #28]	; (801208c <prvIdleTask+0x2c>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2b01      	cmp	r3, #1
 8012072:	d907      	bls.n	8012084 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012074:	4b06      	ldr	r3, [pc, #24]	; (8012090 <prvIdleTask+0x30>)
 8012076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801207a:	601a      	str	r2, [r3, #0]
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012084:	f7ee ff2c 	bl	8000ee0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012088:	e7ee      	b.n	8012068 <prvIdleTask+0x8>
 801208a:	bf00      	nop
 801208c:	20000ee4 	.word	0x20000ee4
 8012090:	e000ed04 	.word	0xe000ed04

08012094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801209a:	2300      	movs	r3, #0
 801209c:	607b      	str	r3, [r7, #4]
 801209e:	e00c      	b.n	80120ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	4613      	mov	r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	4413      	add	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4a12      	ldr	r2, [pc, #72]	; (80120f4 <prvInitialiseTaskLists+0x60>)
 80120ac:	4413      	add	r3, r2
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe f9a6 	bl	8010400 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	3301      	adds	r3, #1
 80120b8:	607b      	str	r3, [r7, #4]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b37      	cmp	r3, #55	; 0x37
 80120be:	d9ef      	bls.n	80120a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80120c0:	480d      	ldr	r0, [pc, #52]	; (80120f8 <prvInitialiseTaskLists+0x64>)
 80120c2:	f7fe f99d 	bl	8010400 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80120c6:	480d      	ldr	r0, [pc, #52]	; (80120fc <prvInitialiseTaskLists+0x68>)
 80120c8:	f7fe f99a 	bl	8010400 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80120cc:	480c      	ldr	r0, [pc, #48]	; (8012100 <prvInitialiseTaskLists+0x6c>)
 80120ce:	f7fe f997 	bl	8010400 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80120d2:	480c      	ldr	r0, [pc, #48]	; (8012104 <prvInitialiseTaskLists+0x70>)
 80120d4:	f7fe f994 	bl	8010400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80120d8:	480b      	ldr	r0, [pc, #44]	; (8012108 <prvInitialiseTaskLists+0x74>)
 80120da:	f7fe f991 	bl	8010400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80120de:	4b0b      	ldr	r3, [pc, #44]	; (801210c <prvInitialiseTaskLists+0x78>)
 80120e0:	4a05      	ldr	r2, [pc, #20]	; (80120f8 <prvInitialiseTaskLists+0x64>)
 80120e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80120e4:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <prvInitialiseTaskLists+0x7c>)
 80120e6:	4a05      	ldr	r2, [pc, #20]	; (80120fc <prvInitialiseTaskLists+0x68>)
 80120e8:	601a      	str	r2, [r3, #0]
}
 80120ea:	bf00      	nop
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	20000ee4 	.word	0x20000ee4
 80120f8:	20001344 	.word	0x20001344
 80120fc:	20001358 	.word	0x20001358
 8012100:	20001374 	.word	0x20001374
 8012104:	20001388 	.word	0x20001388
 8012108:	200013a0 	.word	0x200013a0
 801210c:	2000136c 	.word	0x2000136c
 8012110:	20001370 	.word	0x20001370

08012114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801211a:	e019      	b.n	8012150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801211c:	f000 ff8a 	bl	8013034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012120:	4b10      	ldr	r3, [pc, #64]	; (8012164 <prvCheckTasksWaitingTermination+0x50>)
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3304      	adds	r3, #4
 801212c:	4618      	mov	r0, r3
 801212e:	f7fe f9f1 	bl	8010514 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012132:	4b0d      	ldr	r3, [pc, #52]	; (8012168 <prvCheckTasksWaitingTermination+0x54>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3b01      	subs	r3, #1
 8012138:	4a0b      	ldr	r2, [pc, #44]	; (8012168 <prvCheckTasksWaitingTermination+0x54>)
 801213a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801213c:	4b0b      	ldr	r3, [pc, #44]	; (801216c <prvCheckTasksWaitingTermination+0x58>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	3b01      	subs	r3, #1
 8012142:	4a0a      	ldr	r2, [pc, #40]	; (801216c <prvCheckTasksWaitingTermination+0x58>)
 8012144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012146:	f000 ffa5 	bl	8013094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f810 	bl	8012170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012150:	4b06      	ldr	r3, [pc, #24]	; (801216c <prvCheckTasksWaitingTermination+0x58>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d1e1      	bne.n	801211c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	3708      	adds	r7, #8
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	20001388 	.word	0x20001388
 8012168:	200013b4 	.word	0x200013b4
 801216c:	2000139c 	.word	0x2000139c

08012170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801217e:	2b00      	cmp	r3, #0
 8012180:	d108      	bne.n	8012194 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012186:	4618      	mov	r0, r3
 8012188:	f001 f946 	bl	8013418 <vPortFree>
				vPortFree( pxTCB );
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f001 f943 	bl	8013418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012192:	e018      	b.n	80121c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801219a:	2b01      	cmp	r3, #1
 801219c:	d103      	bne.n	80121a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f001 f93a 	bl	8013418 <vPortFree>
	}
 80121a4:	e00f      	b.n	80121c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d00a      	beq.n	80121c6 <prvDeleteTCB+0x56>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	60fb      	str	r3, [r7, #12]
}
 80121c2:	bf00      	nop
 80121c4:	e7fe      	b.n	80121c4 <prvDeleteTCB+0x54>
	}
 80121c6:	bf00      	nop
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
	...

080121d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121d6:	4b0c      	ldr	r3, [pc, #48]	; (8012208 <prvResetNextTaskUnblockTime+0x38>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d104      	bne.n	80121ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80121e0:	4b0a      	ldr	r3, [pc, #40]	; (801220c <prvResetNextTaskUnblockTime+0x3c>)
 80121e2:	f04f 32ff 	mov.w	r2, #4294967295
 80121e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80121e8:	e008      	b.n	80121fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121ea:	4b07      	ldr	r3, [pc, #28]	; (8012208 <prvResetNextTaskUnblockTime+0x38>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	4a04      	ldr	r2, [pc, #16]	; (801220c <prvResetNextTaskUnblockTime+0x3c>)
 80121fa:	6013      	str	r3, [r2, #0]
}
 80121fc:	bf00      	nop
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	2000136c 	.word	0x2000136c
 801220c:	200013d4 	.word	0x200013d4

08012210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012216:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <xTaskGetSchedulerState+0x34>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d102      	bne.n	8012224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801221e:	2301      	movs	r3, #1
 8012220:	607b      	str	r3, [r7, #4]
 8012222:	e008      	b.n	8012236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012224:	4b08      	ldr	r3, [pc, #32]	; (8012248 <xTaskGetSchedulerState+0x38>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d102      	bne.n	8012232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801222c:	2302      	movs	r3, #2
 801222e:	607b      	str	r3, [r7, #4]
 8012230:	e001      	b.n	8012236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012232:	2300      	movs	r3, #0
 8012234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012236:	687b      	ldr	r3, [r7, #4]
	}
 8012238:	4618      	mov	r0, r3
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	200013c0 	.word	0x200013c0
 8012248:	200013dc 	.word	0x200013dc

0801224c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012258:	2300      	movs	r3, #0
 801225a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d051      	beq.n	8012306 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012266:	4b2a      	ldr	r3, [pc, #168]	; (8012310 <xTaskPriorityInherit+0xc4>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226c:	429a      	cmp	r2, r3
 801226e:	d241      	bcs.n	80122f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	699b      	ldr	r3, [r3, #24]
 8012274:	2b00      	cmp	r3, #0
 8012276:	db06      	blt.n	8012286 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012278:	4b25      	ldr	r3, [pc, #148]	; (8012310 <xTaskPriorityInherit+0xc4>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	6959      	ldr	r1, [r3, #20]
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801228e:	4613      	mov	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	4413      	add	r3, r2
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	4a1f      	ldr	r2, [pc, #124]	; (8012314 <xTaskPriorityInherit+0xc8>)
 8012298:	4413      	add	r3, r2
 801229a:	4299      	cmp	r1, r3
 801229c:	d122      	bne.n	80122e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	3304      	adds	r3, #4
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fe f936 	bl	8010514 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122a8:	4b19      	ldr	r3, [pc, #100]	; (8012310 <xTaskPriorityInherit+0xc4>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b6:	4b18      	ldr	r3, [pc, #96]	; (8012318 <xTaskPriorityInherit+0xcc>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d903      	bls.n	80122c6 <xTaskPriorityInherit+0x7a>
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c2:	4a15      	ldr	r2, [pc, #84]	; (8012318 <xTaskPriorityInherit+0xcc>)
 80122c4:	6013      	str	r3, [r2, #0]
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ca:	4613      	mov	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	4a10      	ldr	r2, [pc, #64]	; (8012314 <xTaskPriorityInherit+0xc8>)
 80122d4:	441a      	add	r2, r3
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	3304      	adds	r3, #4
 80122da:	4619      	mov	r1, r3
 80122dc:	4610      	mov	r0, r2
 80122de:	f7fe f8bc 	bl	801045a <vListInsertEnd>
 80122e2:	e004      	b.n	80122ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122e4:	4b0a      	ldr	r3, [pc, #40]	; (8012310 <xTaskPriorityInherit+0xc4>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80122ee:	2301      	movs	r3, #1
 80122f0:	60fb      	str	r3, [r7, #12]
 80122f2:	e008      	b.n	8012306 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80122f8:	4b05      	ldr	r3, [pc, #20]	; (8012310 <xTaskPriorityInherit+0xc4>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fe:	429a      	cmp	r2, r3
 8012300:	d201      	bcs.n	8012306 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012302:	2301      	movs	r3, #1
 8012304:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012306:	68fb      	ldr	r3, [r7, #12]
	}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20000ee0 	.word	0x20000ee0
 8012314:	20000ee4 	.word	0x20000ee4
 8012318:	200013bc 	.word	0x200013bc

0801231c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801231c:	b580      	push	{r7, lr}
 801231e:	b086      	sub	sp, #24
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012328:	2300      	movs	r3, #0
 801232a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d056      	beq.n	80123e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012332:	4b2e      	ldr	r3, [pc, #184]	; (80123ec <xTaskPriorityDisinherit+0xd0>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	693a      	ldr	r2, [r7, #16]
 8012338:	429a      	cmp	r2, r3
 801233a:	d00a      	beq.n	8012352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	60fb      	str	r3, [r7, #12]
}
 801234e:	bf00      	nop
 8012350:	e7fe      	b.n	8012350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012356:	2b00      	cmp	r3, #0
 8012358:	d10a      	bne.n	8012370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235e:	f383 8811 	msr	BASEPRI, r3
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	f3bf 8f4f 	dsb	sy
 801236a:	60bb      	str	r3, [r7, #8]
}
 801236c:	bf00      	nop
 801236e:	e7fe      	b.n	801236e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012374:	1e5a      	subs	r2, r3, #1
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012382:	429a      	cmp	r2, r3
 8012384:	d02c      	beq.n	80123e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801238a:	2b00      	cmp	r3, #0
 801238c:	d128      	bne.n	80123e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	3304      	adds	r3, #4
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe f8be 	bl	8010514 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b0:	4b0f      	ldr	r3, [pc, #60]	; (80123f0 <xTaskPriorityDisinherit+0xd4>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d903      	bls.n	80123c0 <xTaskPriorityDisinherit+0xa4>
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123bc:	4a0c      	ldr	r2, [pc, #48]	; (80123f0 <xTaskPriorityDisinherit+0xd4>)
 80123be:	6013      	str	r3, [r2, #0]
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c4:	4613      	mov	r3, r2
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	4413      	add	r3, r2
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	4a09      	ldr	r2, [pc, #36]	; (80123f4 <xTaskPriorityDisinherit+0xd8>)
 80123ce:	441a      	add	r2, r3
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	3304      	adds	r3, #4
 80123d4:	4619      	mov	r1, r3
 80123d6:	4610      	mov	r0, r2
 80123d8:	f7fe f83f 	bl	801045a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80123dc:	2301      	movs	r3, #1
 80123de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123e0:	697b      	ldr	r3, [r7, #20]
	}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3718      	adds	r7, #24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20000ee0 	.word	0x20000ee0
 80123f0:	200013bc 	.word	0x200013bc
 80123f4:	20000ee4 	.word	0x20000ee4

080123f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b088      	sub	sp, #32
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012406:	2301      	movs	r3, #1
 8012408:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d06a      	beq.n	80124e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10a      	bne.n	801242e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241c:	f383 8811 	msr	BASEPRI, r3
 8012420:	f3bf 8f6f 	isb	sy
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	60fb      	str	r3, [r7, #12]
}
 801242a:	bf00      	nop
 801242c:	e7fe      	b.n	801242c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012432:	683a      	ldr	r2, [r7, #0]
 8012434:	429a      	cmp	r2, r3
 8012436:	d902      	bls.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	61fb      	str	r3, [r7, #28]
 801243c:	e002      	b.n	8012444 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012442:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012448:	69fa      	ldr	r2, [r7, #28]
 801244a:	429a      	cmp	r2, r3
 801244c:	d04b      	beq.n	80124e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012452:	697a      	ldr	r2, [r7, #20]
 8012454:	429a      	cmp	r2, r3
 8012456:	d146      	bne.n	80124e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012458:	4b25      	ldr	r3, [pc, #148]	; (80124f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	69ba      	ldr	r2, [r7, #24]
 801245e:	429a      	cmp	r2, r3
 8012460:	d10a      	bne.n	8012478 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012466:	f383 8811 	msr	BASEPRI, r3
 801246a:	f3bf 8f6f 	isb	sy
 801246e:	f3bf 8f4f 	dsb	sy
 8012472:	60bb      	str	r3, [r7, #8]
}
 8012474:	bf00      	nop
 8012476:	e7fe      	b.n	8012476 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	69fa      	ldr	r2, [r7, #28]
 8012482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	2b00      	cmp	r3, #0
 801248a:	db04      	blt.n	8012496 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	6959      	ldr	r1, [r3, #20]
 801249a:	693a      	ldr	r2, [r7, #16]
 801249c:	4613      	mov	r3, r2
 801249e:	009b      	lsls	r3, r3, #2
 80124a0:	4413      	add	r3, r2
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4a13      	ldr	r2, [pc, #76]	; (80124f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80124a6:	4413      	add	r3, r2
 80124a8:	4299      	cmp	r1, r3
 80124aa:	d11c      	bne.n	80124e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	3304      	adds	r3, #4
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe f82f 	bl	8010514 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ba:	4b0f      	ldr	r3, [pc, #60]	; (80124f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d903      	bls.n	80124ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c6:	4a0c      	ldr	r2, [pc, #48]	; (80124f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ce:	4613      	mov	r3, r2
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	4413      	add	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4a07      	ldr	r2, [pc, #28]	; (80124f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80124d8:	441a      	add	r2, r3
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	3304      	adds	r3, #4
 80124de:	4619      	mov	r1, r3
 80124e0:	4610      	mov	r0, r2
 80124e2:	f7fd ffba 	bl	801045a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124e6:	bf00      	nop
 80124e8:	3720      	adds	r7, #32
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	20000ee0 	.word	0x20000ee0
 80124f4:	20000ee4 	.word	0x20000ee4
 80124f8:	200013bc 	.word	0x200013bc

080124fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80124fc:	b480      	push	{r7}
 80124fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012500:	4b07      	ldr	r3, [pc, #28]	; (8012520 <pvTaskIncrementMutexHeldCount+0x24>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d004      	beq.n	8012512 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012508:	4b05      	ldr	r3, [pc, #20]	; (8012520 <pvTaskIncrementMutexHeldCount+0x24>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801250e:	3201      	adds	r2, #1
 8012510:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012512:	4b03      	ldr	r3, [pc, #12]	; (8012520 <pvTaskIncrementMutexHeldCount+0x24>)
 8012514:	681b      	ldr	r3, [r3, #0]
	}
 8012516:	4618      	mov	r0, r3
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr
 8012520:	20000ee0 	.word	0x20000ee0

08012524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801252e:	4b21      	ldr	r3, [pc, #132]	; (80125b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012534:	4b20      	ldr	r3, [pc, #128]	; (80125b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	3304      	adds	r3, #4
 801253a:	4618      	mov	r0, r3
 801253c:	f7fd ffea 	bl	8010514 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012546:	d10a      	bne.n	801255e <prvAddCurrentTaskToDelayedList+0x3a>
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d007      	beq.n	801255e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801254e:	4b1a      	ldr	r3, [pc, #104]	; (80125b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	3304      	adds	r3, #4
 8012554:	4619      	mov	r1, r3
 8012556:	4819      	ldr	r0, [pc, #100]	; (80125bc <prvAddCurrentTaskToDelayedList+0x98>)
 8012558:	f7fd ff7f 	bl	801045a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801255c:	e026      	b.n	80125ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4413      	add	r3, r2
 8012564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012566:	4b14      	ldr	r3, [pc, #80]	; (80125b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801256e:	68ba      	ldr	r2, [r7, #8]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	429a      	cmp	r2, r3
 8012574:	d209      	bcs.n	801258a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012576:	4b12      	ldr	r3, [pc, #72]	; (80125c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	4b0f      	ldr	r3, [pc, #60]	; (80125b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3304      	adds	r3, #4
 8012580:	4619      	mov	r1, r3
 8012582:	4610      	mov	r0, r2
 8012584:	f7fd ff8d 	bl	80104a2 <vListInsert>
}
 8012588:	e010      	b.n	80125ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801258a:	4b0e      	ldr	r3, [pc, #56]	; (80125c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	4b0a      	ldr	r3, [pc, #40]	; (80125b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	3304      	adds	r3, #4
 8012594:	4619      	mov	r1, r3
 8012596:	4610      	mov	r0, r2
 8012598:	f7fd ff83 	bl	80104a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801259c:	4b0a      	ldr	r3, [pc, #40]	; (80125c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d202      	bcs.n	80125ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80125a6:	4a08      	ldr	r2, [pc, #32]	; (80125c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	6013      	str	r3, [r2, #0]
}
 80125ac:	bf00      	nop
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	200013b8 	.word	0x200013b8
 80125b8:	20000ee0 	.word	0x20000ee0
 80125bc:	200013a0 	.word	0x200013a0
 80125c0:	20001370 	.word	0x20001370
 80125c4:	2000136c 	.word	0x2000136c
 80125c8:	200013d4 	.word	0x200013d4

080125cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08a      	sub	sp, #40	; 0x28
 80125d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80125d6:	f000 fba1 	bl	8012d1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80125da:	4b1c      	ldr	r3, [pc, #112]	; (801264c <xTimerCreateTimerTask+0x80>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d021      	beq.n	8012626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80125e2:	2300      	movs	r3, #0
 80125e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80125ea:	1d3a      	adds	r2, r7, #4
 80125ec:	f107 0108 	add.w	r1, r7, #8
 80125f0:	f107 030c 	add.w	r3, r7, #12
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fd fee9 	bl	80103cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80125fa:	6879      	ldr	r1, [r7, #4]
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	9202      	str	r2, [sp, #8]
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	2302      	movs	r3, #2
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	2300      	movs	r3, #0
 801260a:	460a      	mov	r2, r1
 801260c:	4910      	ldr	r1, [pc, #64]	; (8012650 <xTimerCreateTimerTask+0x84>)
 801260e:	4811      	ldr	r0, [pc, #68]	; (8012654 <xTimerCreateTimerTask+0x88>)
 8012610:	f7fe ffb8 	bl	8011584 <xTaskCreateStatic>
 8012614:	4603      	mov	r3, r0
 8012616:	4a10      	ldr	r2, [pc, #64]	; (8012658 <xTimerCreateTimerTask+0x8c>)
 8012618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801261a:	4b0f      	ldr	r3, [pc, #60]	; (8012658 <xTimerCreateTimerTask+0x8c>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d001      	beq.n	8012626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012622:	2301      	movs	r3, #1
 8012624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d10a      	bne.n	8012642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012630:	f383 8811 	msr	BASEPRI, r3
 8012634:	f3bf 8f6f 	isb	sy
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	613b      	str	r3, [r7, #16]
}
 801263e:	bf00      	nop
 8012640:	e7fe      	b.n	8012640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012642:	697b      	ldr	r3, [r7, #20]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	20001410 	.word	0x20001410
 8012650:	08014664 	.word	0x08014664
 8012654:	080128c5 	.word	0x080128c5
 8012658:	20001414 	.word	0x20001414

0801265c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801265c:	b580      	push	{r7, lr}
 801265e:	b088      	sub	sp, #32
 8012660:	af02      	add	r7, sp, #8
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	607a      	str	r2, [r7, #4]
 8012668:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801266a:	202c      	movs	r0, #44	; 0x2c
 801266c:	f000 fe04 	bl	8013278 <pvPortMalloc>
 8012670:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00d      	beq.n	8012694 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	2200      	movs	r2, #0
 801267c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	9301      	str	r3, [sp, #4]
 8012684:	6a3b      	ldr	r3, [r7, #32]
 8012686:	9300      	str	r3, [sp, #0]
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	68b9      	ldr	r1, [r7, #8]
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f000 f843 	bl	801271a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012694:	697b      	ldr	r3, [r7, #20]
	}
 8012696:	4618      	mov	r0, r3
 8012698:	3718      	adds	r7, #24
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b08a      	sub	sp, #40	; 0x28
 80126a2:	af02      	add	r7, sp, #8
 80126a4:	60f8      	str	r0, [r7, #12]
 80126a6:	60b9      	str	r1, [r7, #8]
 80126a8:	607a      	str	r2, [r7, #4]
 80126aa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80126ac:	232c      	movs	r3, #44	; 0x2c
 80126ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	2b2c      	cmp	r3, #44	; 0x2c
 80126b4:	d00a      	beq.n	80126cc <xTimerCreateStatic+0x2e>
	__asm volatile
 80126b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ba:	f383 8811 	msr	BASEPRI, r3
 80126be:	f3bf 8f6f 	isb	sy
 80126c2:	f3bf 8f4f 	dsb	sy
 80126c6:	61bb      	str	r3, [r7, #24]
}
 80126c8:	bf00      	nop
 80126ca:	e7fe      	b.n	80126ca <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80126cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80126ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10a      	bne.n	80126ea <xTimerCreateStatic+0x4c>
	__asm volatile
 80126d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	617b      	str	r3, [r7, #20]
}
 80126e6:	bf00      	nop
 80126e8:	e7fe      	b.n	80126e8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80126ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00d      	beq.n	8012710 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	2202      	movs	r2, #2
 80126f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	9301      	str	r3, [sp, #4]
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	68b9      	ldr	r1, [r7, #8]
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f000 f805 	bl	801271a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012710:	69fb      	ldr	r3, [r7, #28]
	}
 8012712:	4618      	mov	r0, r3
 8012714:	3720      	adds	r7, #32
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}

0801271a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801271a:	b580      	push	{r7, lr}
 801271c:	b086      	sub	sp, #24
 801271e:	af00      	add	r7, sp, #0
 8012720:	60f8      	str	r0, [r7, #12]
 8012722:	60b9      	str	r1, [r7, #8]
 8012724:	607a      	str	r2, [r7, #4]
 8012726:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d10a      	bne.n	8012744 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012732:	f383 8811 	msr	BASEPRI, r3
 8012736:	f3bf 8f6f 	isb	sy
 801273a:	f3bf 8f4f 	dsb	sy
 801273e:	617b      	str	r3, [r7, #20]
}
 8012740:	bf00      	nop
 8012742:	e7fe      	b.n	8012742 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012746:	2b00      	cmp	r3, #0
 8012748:	d01e      	beq.n	8012788 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801274a:	f000 fae7 	bl	8012d1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012762:	6a3a      	ldr	r2, [r7, #32]
 8012764:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	3304      	adds	r3, #4
 801276a:	4618      	mov	r0, r3
 801276c:	f7fd fe68 	bl	8010440 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d008      	beq.n	8012788 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801277c:	f043 0304 	orr.w	r3, r3, #4
 8012780:	b2da      	uxtb	r2, r3
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012788:	bf00      	nop
 801278a:	3718      	adds	r7, #24
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b08a      	sub	sp, #40	; 0x28
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801279e:	2300      	movs	r3, #0
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d10a      	bne.n	80127be <xTimerGenericCommand+0x2e>
	__asm volatile
 80127a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ac:	f383 8811 	msr	BASEPRI, r3
 80127b0:	f3bf 8f6f 	isb	sy
 80127b4:	f3bf 8f4f 	dsb	sy
 80127b8:	623b      	str	r3, [r7, #32]
}
 80127ba:	bf00      	nop
 80127bc:	e7fe      	b.n	80127bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80127be:	4b1a      	ldr	r3, [pc, #104]	; (8012828 <xTimerGenericCommand+0x98>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d02a      	beq.n	801281c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	2b05      	cmp	r3, #5
 80127d6:	dc18      	bgt.n	801280a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80127d8:	f7ff fd1a 	bl	8012210 <xTaskGetSchedulerState>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b02      	cmp	r3, #2
 80127e0:	d109      	bne.n	80127f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80127e2:	4b11      	ldr	r3, [pc, #68]	; (8012828 <xTimerGenericCommand+0x98>)
 80127e4:	6818      	ldr	r0, [r3, #0]
 80127e6:	f107 0110 	add.w	r1, r7, #16
 80127ea:	2300      	movs	r3, #0
 80127ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ee:	f7fe f863 	bl	80108b8 <xQueueGenericSend>
 80127f2:	6278      	str	r0, [r7, #36]	; 0x24
 80127f4:	e012      	b.n	801281c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80127f6:	4b0c      	ldr	r3, [pc, #48]	; (8012828 <xTimerGenericCommand+0x98>)
 80127f8:	6818      	ldr	r0, [r3, #0]
 80127fa:	f107 0110 	add.w	r1, r7, #16
 80127fe:	2300      	movs	r3, #0
 8012800:	2200      	movs	r2, #0
 8012802:	f7fe f859 	bl	80108b8 <xQueueGenericSend>
 8012806:	6278      	str	r0, [r7, #36]	; 0x24
 8012808:	e008      	b.n	801281c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801280a:	4b07      	ldr	r3, [pc, #28]	; (8012828 <xTimerGenericCommand+0x98>)
 801280c:	6818      	ldr	r0, [r3, #0]
 801280e:	f107 0110 	add.w	r1, r7, #16
 8012812:	2300      	movs	r3, #0
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	f7fe f94d 	bl	8010ab4 <xQueueGenericSendFromISR>
 801281a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801281e:	4618      	mov	r0, r3
 8012820:	3728      	adds	r7, #40	; 0x28
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20001410 	.word	0x20001410

0801282c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b088      	sub	sp, #32
 8012830:	af02      	add	r7, sp, #8
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012836:	4b22      	ldr	r3, [pc, #136]	; (80128c0 <prvProcessExpiredTimer+0x94>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3304      	adds	r3, #4
 8012844:	4618      	mov	r0, r3
 8012846:	f7fd fe65 	bl	8010514 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012850:	f003 0304 	and.w	r3, r3, #4
 8012854:	2b00      	cmp	r3, #0
 8012856:	d022      	beq.n	801289e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	699a      	ldr	r2, [r3, #24]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	18d1      	adds	r1, r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	6978      	ldr	r0, [r7, #20]
 8012866:	f000 f8d1 	bl	8012a0c <prvInsertTimerInActiveList>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d01f      	beq.n	80128b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012870:	2300      	movs	r3, #0
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	2300      	movs	r3, #0
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	2100      	movs	r1, #0
 801287a:	6978      	ldr	r0, [r7, #20]
 801287c:	f7ff ff88 	bl	8012790 <xTimerGenericCommand>
 8012880:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d113      	bne.n	80128b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288c:	f383 8811 	msr	BASEPRI, r3
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	f3bf 8f4f 	dsb	sy
 8012898:	60fb      	str	r3, [r7, #12]
}
 801289a:	bf00      	nop
 801289c:	e7fe      	b.n	801289c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128a4:	f023 0301 	bic.w	r3, r3, #1
 80128a8:	b2da      	uxtb	r2, r3
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	6a1b      	ldr	r3, [r3, #32]
 80128b4:	6978      	ldr	r0, [r7, #20]
 80128b6:	4798      	blx	r3
}
 80128b8:	bf00      	nop
 80128ba:	3718      	adds	r7, #24
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	20001408 	.word	0x20001408

080128c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80128cc:	f107 0308 	add.w	r3, r7, #8
 80128d0:	4618      	mov	r0, r3
 80128d2:	f000 f857 	bl	8012984 <prvGetNextExpireTime>
 80128d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	4619      	mov	r1, r3
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f000 f803 	bl	80128e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80128e2:	f000 f8d5 	bl	8012a90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80128e6:	e7f1      	b.n	80128cc <prvTimerTask+0x8>

080128e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80128f2:	f7ff f885 	bl	8011a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80128f6:	f107 0308 	add.w	r3, r7, #8
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 f866 	bl	80129cc <prvSampleTimeNow>
 8012900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d130      	bne.n	801296a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10a      	bne.n	8012924 <prvProcessTimerOrBlockTask+0x3c>
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	429a      	cmp	r2, r3
 8012914:	d806      	bhi.n	8012924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012916:	f7ff f881 	bl	8011a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801291a:	68f9      	ldr	r1, [r7, #12]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7ff ff85 	bl	801282c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012922:	e024      	b.n	801296e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d008      	beq.n	801293c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801292a:	4b13      	ldr	r3, [pc, #76]	; (8012978 <prvProcessTimerOrBlockTask+0x90>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <prvProcessTimerOrBlockTask+0x50>
 8012934:	2301      	movs	r3, #1
 8012936:	e000      	b.n	801293a <prvProcessTimerOrBlockTask+0x52>
 8012938:	2300      	movs	r3, #0
 801293a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801293c:	4b0f      	ldr	r3, [pc, #60]	; (801297c <prvProcessTimerOrBlockTask+0x94>)
 801293e:	6818      	ldr	r0, [r3, #0]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	4619      	mov	r1, r3
 801294a:	f7fe fde7 	bl	801151c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801294e:	f7ff f865 	bl	8011a1c <xTaskResumeAll>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d10a      	bne.n	801296e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012958:	4b09      	ldr	r3, [pc, #36]	; (8012980 <prvProcessTimerOrBlockTask+0x98>)
 801295a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801295e:	601a      	str	r2, [r3, #0]
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	f3bf 8f6f 	isb	sy
}
 8012968:	e001      	b.n	801296e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801296a:	f7ff f857 	bl	8011a1c <xTaskResumeAll>
}
 801296e:	bf00      	nop
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	2000140c 	.word	0x2000140c
 801297c:	20001410 	.word	0x20001410
 8012980:	e000ed04 	.word	0xe000ed04

08012984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801298c:	4b0e      	ldr	r3, [pc, #56]	; (80129c8 <prvGetNextExpireTime+0x44>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d101      	bne.n	801299a <prvGetNextExpireTime+0x16>
 8012996:	2201      	movs	r2, #1
 8012998:	e000      	b.n	801299c <prvGetNextExpireTime+0x18>
 801299a:	2200      	movs	r2, #0
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d105      	bne.n	80129b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80129a8:	4b07      	ldr	r3, [pc, #28]	; (80129c8 <prvGetNextExpireTime+0x44>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	60fb      	str	r3, [r7, #12]
 80129b2:	e001      	b.n	80129b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80129b4:	2300      	movs	r3, #0
 80129b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80129b8:	68fb      	ldr	r3, [r7, #12]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3714      	adds	r7, #20
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	20001408 	.word	0x20001408

080129cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80129d4:	f7ff f8c0 	bl	8011b58 <xTaskGetTickCount>
 80129d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80129da:	4b0b      	ldr	r3, [pc, #44]	; (8012a08 <prvSampleTimeNow+0x3c>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d205      	bcs.n	80129f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80129e4:	f000 f936 	bl	8012c54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2201      	movs	r2, #1
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	e002      	b.n	80129f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2200      	movs	r2, #0
 80129f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80129f6:	4a04      	ldr	r2, [pc, #16]	; (8012a08 <prvSampleTimeNow+0x3c>)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80129fc:	68fb      	ldr	r3, [r7, #12]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3710      	adds	r7, #16
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	20001418 	.word	0x20001418

08012a0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	68fa      	ldr	r2, [r7, #12]
 8012a28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012a2a:	68ba      	ldr	r2, [r7, #8]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d812      	bhi.n	8012a58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	1ad2      	subs	r2, r2, r3
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	699b      	ldr	r3, [r3, #24]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d302      	bcc.n	8012a46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012a40:	2301      	movs	r3, #1
 8012a42:	617b      	str	r3, [r7, #20]
 8012a44:	e01b      	b.n	8012a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012a46:	4b10      	ldr	r3, [pc, #64]	; (8012a88 <prvInsertTimerInActiveList+0x7c>)
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	4619      	mov	r1, r3
 8012a50:	4610      	mov	r0, r2
 8012a52:	f7fd fd26 	bl	80104a2 <vListInsert>
 8012a56:	e012      	b.n	8012a7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d206      	bcs.n	8012a6e <prvInsertTimerInActiveList+0x62>
 8012a60:	68ba      	ldr	r2, [r7, #8]
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d302      	bcc.n	8012a6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012a68:	2301      	movs	r3, #1
 8012a6a:	617b      	str	r3, [r7, #20]
 8012a6c:	e007      	b.n	8012a7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a6e:	4b07      	ldr	r3, [pc, #28]	; (8012a8c <prvInsertTimerInActiveList+0x80>)
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	3304      	adds	r3, #4
 8012a76:	4619      	mov	r1, r3
 8012a78:	4610      	mov	r0, r2
 8012a7a:	f7fd fd12 	bl	80104a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012a7e:	697b      	ldr	r3, [r7, #20]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	2000140c 	.word	0x2000140c
 8012a8c:	20001408 	.word	0x20001408

08012a90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08e      	sub	sp, #56	; 0x38
 8012a94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a96:	e0ca      	b.n	8012c2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	da18      	bge.n	8012ad0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012a9e:	1d3b      	adds	r3, r7, #4
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d10a      	bne.n	8012ac0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aae:	f383 8811 	msr	BASEPRI, r3
 8012ab2:	f3bf 8f6f 	isb	sy
 8012ab6:	f3bf 8f4f 	dsb	sy
 8012aba:	61fb      	str	r3, [r7, #28]
}
 8012abc:	bf00      	nop
 8012abe:	e7fe      	b.n	8012abe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ac6:	6850      	ldr	r0, [r2, #4]
 8012ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012aca:	6892      	ldr	r2, [r2, #8]
 8012acc:	4611      	mov	r1, r2
 8012ace:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f2c0 80aa 	blt.w	8012c2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ade:	695b      	ldr	r3, [r3, #20]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d004      	beq.n	8012aee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae6:	3304      	adds	r3, #4
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fd fd13 	bl	8010514 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012aee:	463b      	mov	r3, r7
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff ff6b 	bl	80129cc <prvSampleTimeNow>
 8012af6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2b09      	cmp	r3, #9
 8012afc:	f200 8097 	bhi.w	8012c2e <prvProcessReceivedCommands+0x19e>
 8012b00:	a201      	add	r2, pc, #4	; (adr r2, 8012b08 <prvProcessReceivedCommands+0x78>)
 8012b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b06:	bf00      	nop
 8012b08:	08012b31 	.word	0x08012b31
 8012b0c:	08012b31 	.word	0x08012b31
 8012b10:	08012b31 	.word	0x08012b31
 8012b14:	08012ba5 	.word	0x08012ba5
 8012b18:	08012bb9 	.word	0x08012bb9
 8012b1c:	08012c03 	.word	0x08012c03
 8012b20:	08012b31 	.word	0x08012b31
 8012b24:	08012b31 	.word	0x08012b31
 8012b28:	08012ba5 	.word	0x08012ba5
 8012b2c:	08012bb9 	.word	0x08012bb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b36:	f043 0301 	orr.w	r3, r3, #1
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012b42:	68ba      	ldr	r2, [r7, #8]
 8012b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b46:	699b      	ldr	r3, [r3, #24]
 8012b48:	18d1      	adds	r1, r2, r3
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b50:	f7ff ff5c 	bl	8012a0c <prvInsertTimerInActiveList>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d069      	beq.n	8012c2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5c:	6a1b      	ldr	r3, [r3, #32]
 8012b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b68:	f003 0304 	and.w	r3, r3, #4
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d05e      	beq.n	8012c2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012b70:	68ba      	ldr	r2, [r7, #8]
 8012b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	441a      	add	r2, r3
 8012b78:	2300      	movs	r3, #0
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	2100      	movs	r1, #0
 8012b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b82:	f7ff fe05 	bl	8012790 <xTimerGenericCommand>
 8012b86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d14f      	bne.n	8012c2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b92:	f383 8811 	msr	BASEPRI, r3
 8012b96:	f3bf 8f6f 	isb	sy
 8012b9a:	f3bf 8f4f 	dsb	sy
 8012b9e:	61bb      	str	r3, [r7, #24]
}
 8012ba0:	bf00      	nop
 8012ba2:	e7fe      	b.n	8012ba2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012baa:	f023 0301 	bic.w	r3, r3, #1
 8012bae:	b2da      	uxtb	r2, r3
 8012bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012bb6:	e03a      	b.n	8012c2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bbe:	f043 0301 	orr.w	r3, r3, #1
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d10a      	bne.n	8012bee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bdc:	f383 8811 	msr	BASEPRI, r3
 8012be0:	f3bf 8f6f 	isb	sy
 8012be4:	f3bf 8f4f 	dsb	sy
 8012be8:	617b      	str	r3, [r7, #20]
}
 8012bea:	bf00      	nop
 8012bec:	e7fe      	b.n	8012bec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf0:	699a      	ldr	r2, [r3, #24]
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	18d1      	adds	r1, r2, r3
 8012bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bfc:	f7ff ff06 	bl	8012a0c <prvInsertTimerInActiveList>
					break;
 8012c00:	e015      	b.n	8012c2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c08:	f003 0302 	and.w	r3, r3, #2
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d103      	bne.n	8012c18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c12:	f000 fc01 	bl	8013418 <vPortFree>
 8012c16:	e00a      	b.n	8012c2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c1e:	f023 0301 	bic.w	r3, r3, #1
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012c2a:	e000      	b.n	8012c2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012c2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012c2e:	4b08      	ldr	r3, [pc, #32]	; (8012c50 <prvProcessReceivedCommands+0x1c0>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	1d39      	adds	r1, r7, #4
 8012c34:	2200      	movs	r2, #0
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fe f864 	bl	8010d04 <xQueueReceive>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f47f af2a 	bne.w	8012a98 <prvProcessReceivedCommands+0x8>
	}
}
 8012c44:	bf00      	nop
 8012c46:	bf00      	nop
 8012c48:	3730      	adds	r7, #48	; 0x30
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	20001410 	.word	0x20001410

08012c54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b088      	sub	sp, #32
 8012c58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c5a:	e048      	b.n	8012cee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c5c:	4b2d      	ldr	r3, [pc, #180]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c66:	4b2b      	ldr	r3, [pc, #172]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	3304      	adds	r3, #4
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fd fc4d 	bl	8010514 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6a1b      	ldr	r3, [r3, #32]
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c88:	f003 0304 	and.w	r3, r3, #4
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d02e      	beq.n	8012cee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	699b      	ldr	r3, [r3, #24]
 8012c94:	693a      	ldr	r2, [r7, #16]
 8012c96:	4413      	add	r3, r2
 8012c98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012c9a:	68ba      	ldr	r2, [r7, #8]
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d90e      	bls.n	8012cc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012cae:	4b19      	ldr	r3, [pc, #100]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	3304      	adds	r3, #4
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	4610      	mov	r0, r2
 8012cba:	f7fd fbf2 	bl	80104a2 <vListInsert>
 8012cbe:	e016      	b.n	8012cee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	9300      	str	r3, [sp, #0]
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	693a      	ldr	r2, [r7, #16]
 8012cc8:	2100      	movs	r1, #0
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7ff fd60 	bl	8012790 <xTimerGenericCommand>
 8012cd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10a      	bne.n	8012cee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cdc:	f383 8811 	msr	BASEPRI, r3
 8012ce0:	f3bf 8f6f 	isb	sy
 8012ce4:	f3bf 8f4f 	dsb	sy
 8012ce8:	603b      	str	r3, [r7, #0]
}
 8012cea:	bf00      	nop
 8012cec:	e7fe      	b.n	8012cec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012cee:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1b1      	bne.n	8012c5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012cf8:	4b06      	ldr	r3, [pc, #24]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012cfe:	4b06      	ldr	r3, [pc, #24]	; (8012d18 <prvSwitchTimerLists+0xc4>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	4a04      	ldr	r2, [pc, #16]	; (8012d14 <prvSwitchTimerLists+0xc0>)
 8012d04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012d06:	4a04      	ldr	r2, [pc, #16]	; (8012d18 <prvSwitchTimerLists+0xc4>)
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	6013      	str	r3, [r2, #0]
}
 8012d0c:	bf00      	nop
 8012d0e:	3718      	adds	r7, #24
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	20001408 	.word	0x20001408
 8012d18:	2000140c 	.word	0x2000140c

08012d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012d22:	f000 f987 	bl	8013034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012d26:	4b15      	ldr	r3, [pc, #84]	; (8012d7c <prvCheckForValidListAndQueue+0x60>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d120      	bne.n	8012d70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012d2e:	4814      	ldr	r0, [pc, #80]	; (8012d80 <prvCheckForValidListAndQueue+0x64>)
 8012d30:	f7fd fb66 	bl	8010400 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012d34:	4813      	ldr	r0, [pc, #76]	; (8012d84 <prvCheckForValidListAndQueue+0x68>)
 8012d36:	f7fd fb63 	bl	8010400 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012d3a:	4b13      	ldr	r3, [pc, #76]	; (8012d88 <prvCheckForValidListAndQueue+0x6c>)
 8012d3c:	4a10      	ldr	r2, [pc, #64]	; (8012d80 <prvCheckForValidListAndQueue+0x64>)
 8012d3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012d40:	4b12      	ldr	r3, [pc, #72]	; (8012d8c <prvCheckForValidListAndQueue+0x70>)
 8012d42:	4a10      	ldr	r2, [pc, #64]	; (8012d84 <prvCheckForValidListAndQueue+0x68>)
 8012d44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012d46:	2300      	movs	r3, #0
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	4b11      	ldr	r3, [pc, #68]	; (8012d90 <prvCheckForValidListAndQueue+0x74>)
 8012d4c:	4a11      	ldr	r2, [pc, #68]	; (8012d94 <prvCheckForValidListAndQueue+0x78>)
 8012d4e:	2110      	movs	r1, #16
 8012d50:	200a      	movs	r0, #10
 8012d52:	f7fd fc71 	bl	8010638 <xQueueGenericCreateStatic>
 8012d56:	4603      	mov	r3, r0
 8012d58:	4a08      	ldr	r2, [pc, #32]	; (8012d7c <prvCheckForValidListAndQueue+0x60>)
 8012d5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012d5c:	4b07      	ldr	r3, [pc, #28]	; (8012d7c <prvCheckForValidListAndQueue+0x60>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d005      	beq.n	8012d70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012d64:	4b05      	ldr	r3, [pc, #20]	; (8012d7c <prvCheckForValidListAndQueue+0x60>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	490b      	ldr	r1, [pc, #44]	; (8012d98 <prvCheckForValidListAndQueue+0x7c>)
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fe fb82 	bl	8011474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d70:	f000 f990 	bl	8013094 <vPortExitCritical>
}
 8012d74:	bf00      	nop
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	20001410 	.word	0x20001410
 8012d80:	200013e0 	.word	0x200013e0
 8012d84:	200013f4 	.word	0x200013f4
 8012d88:	20001408 	.word	0x20001408
 8012d8c:	2000140c 	.word	0x2000140c
 8012d90:	200014bc 	.word	0x200014bc
 8012d94:	2000141c 	.word	0x2000141c
 8012d98:	0801466c 	.word	0x0801466c

08012d9c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b086      	sub	sp, #24
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d10a      	bne.n	8012dc4 <pvTimerGetTimerID+0x28>
	__asm volatile
 8012dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db2:	f383 8811 	msr	BASEPRI, r3
 8012db6:	f3bf 8f6f 	isb	sy
 8012dba:	f3bf 8f4f 	dsb	sy
 8012dbe:	60fb      	str	r3, [r7, #12]
}
 8012dc0:	bf00      	nop
 8012dc2:	e7fe      	b.n	8012dc2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8012dc4:	f000 f936 	bl	8013034 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	69db      	ldr	r3, [r3, #28]
 8012dcc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012dce:	f000 f961 	bl	8013094 <vPortExitCritical>

	return pvReturn;
 8012dd2:	693b      	ldr	r3, [r7, #16]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3718      	adds	r7, #24
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	3b04      	subs	r3, #4
 8012dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	3b04      	subs	r3, #4
 8012dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	f023 0201 	bic.w	r2, r3, #1
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	3b04      	subs	r3, #4
 8012e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012e0c:	4a0c      	ldr	r2, [pc, #48]	; (8012e40 <pxPortInitialiseStack+0x64>)
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	3b14      	subs	r3, #20
 8012e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	3b04      	subs	r3, #4
 8012e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f06f 0202 	mvn.w	r2, #2
 8012e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	3b20      	subs	r3, #32
 8012e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012e32:	68fb      	ldr	r3, [r7, #12]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3714      	adds	r7, #20
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr
 8012e40:	08012e45 	.word	0x08012e45

08012e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012e4e:	4b12      	ldr	r3, [pc, #72]	; (8012e98 <prvTaskExitError+0x54>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e56:	d00a      	beq.n	8012e6e <prvTaskExitError+0x2a>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	60fb      	str	r3, [r7, #12]
}
 8012e6a:	bf00      	nop
 8012e6c:	e7fe      	b.n	8012e6c <prvTaskExitError+0x28>
	__asm volatile
 8012e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	60bb      	str	r3, [r7, #8]
}
 8012e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012e82:	bf00      	nop
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d0fc      	beq.n	8012e84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012e8a:	bf00      	nop
 8012e8c:	bf00      	nop
 8012e8e:	3714      	adds	r7, #20
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr
 8012e98:	200000cc 	.word	0x200000cc
 8012e9c:	00000000 	.word	0x00000000

08012ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ea0:	4b07      	ldr	r3, [pc, #28]	; (8012ec0 <pxCurrentTCBConst2>)
 8012ea2:	6819      	ldr	r1, [r3, #0]
 8012ea4:	6808      	ldr	r0, [r1, #0]
 8012ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eaa:	f380 8809 	msr	PSP, r0
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	f04f 0000 	mov.w	r0, #0
 8012eb6:	f380 8811 	msr	BASEPRI, r0
 8012eba:	4770      	bx	lr
 8012ebc:	f3af 8000 	nop.w

08012ec0 <pxCurrentTCBConst2>:
 8012ec0:	20000ee0 	.word	0x20000ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop

08012ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ec8:	4808      	ldr	r0, [pc, #32]	; (8012eec <prvPortStartFirstTask+0x24>)
 8012eca:	6800      	ldr	r0, [r0, #0]
 8012ecc:	6800      	ldr	r0, [r0, #0]
 8012ece:	f380 8808 	msr	MSP, r0
 8012ed2:	f04f 0000 	mov.w	r0, #0
 8012ed6:	f380 8814 	msr	CONTROL, r0
 8012eda:	b662      	cpsie	i
 8012edc:	b661      	cpsie	f
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	f3bf 8f6f 	isb	sy
 8012ee6:	df00      	svc	0
 8012ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012eea:	bf00      	nop
 8012eec:	e000ed08 	.word	0xe000ed08

08012ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012ef6:	4b46      	ldr	r3, [pc, #280]	; (8013010 <xPortStartScheduler+0x120>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4a46      	ldr	r2, [pc, #280]	; (8013014 <xPortStartScheduler+0x124>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d10a      	bne.n	8012f16 <xPortStartScheduler+0x26>
	__asm volatile
 8012f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f04:	f383 8811 	msr	BASEPRI, r3
 8012f08:	f3bf 8f6f 	isb	sy
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	613b      	str	r3, [r7, #16]
}
 8012f12:	bf00      	nop
 8012f14:	e7fe      	b.n	8012f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012f16:	4b3e      	ldr	r3, [pc, #248]	; (8013010 <xPortStartScheduler+0x120>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4a3f      	ldr	r2, [pc, #252]	; (8013018 <xPortStartScheduler+0x128>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d10a      	bne.n	8012f36 <xPortStartScheduler+0x46>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	60fb      	str	r3, [r7, #12]
}
 8012f32:	bf00      	nop
 8012f34:	e7fe      	b.n	8012f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012f36:	4b39      	ldr	r3, [pc, #228]	; (801301c <xPortStartScheduler+0x12c>)
 8012f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	22ff      	movs	r2, #255	; 0xff
 8012f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012f50:	78fb      	ldrb	r3, [r7, #3]
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	4b31      	ldr	r3, [pc, #196]	; (8013020 <xPortStartScheduler+0x130>)
 8012f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012f5e:	4b31      	ldr	r3, [pc, #196]	; (8013024 <xPortStartScheduler+0x134>)
 8012f60:	2207      	movs	r2, #7
 8012f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012f64:	e009      	b.n	8012f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012f66:	4b2f      	ldr	r3, [pc, #188]	; (8013024 <xPortStartScheduler+0x134>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	4a2d      	ldr	r2, [pc, #180]	; (8013024 <xPortStartScheduler+0x134>)
 8012f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012f70:	78fb      	ldrb	r3, [r7, #3]
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012f7a:	78fb      	ldrb	r3, [r7, #3]
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f82:	2b80      	cmp	r3, #128	; 0x80
 8012f84:	d0ef      	beq.n	8012f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012f86:	4b27      	ldr	r3, [pc, #156]	; (8013024 <xPortStartScheduler+0x134>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	f1c3 0307 	rsb	r3, r3, #7
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d00a      	beq.n	8012fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	60bb      	str	r3, [r7, #8]
}
 8012fa4:	bf00      	nop
 8012fa6:	e7fe      	b.n	8012fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012fa8:	4b1e      	ldr	r3, [pc, #120]	; (8013024 <xPortStartScheduler+0x134>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	021b      	lsls	r3, r3, #8
 8012fae:	4a1d      	ldr	r2, [pc, #116]	; (8013024 <xPortStartScheduler+0x134>)
 8012fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012fb2:	4b1c      	ldr	r3, [pc, #112]	; (8013024 <xPortStartScheduler+0x134>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012fba:	4a1a      	ldr	r2, [pc, #104]	; (8013024 <xPortStartScheduler+0x134>)
 8012fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012fc6:	4b18      	ldr	r3, [pc, #96]	; (8013028 <xPortStartScheduler+0x138>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4a17      	ldr	r2, [pc, #92]	; (8013028 <xPortStartScheduler+0x138>)
 8012fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012fd2:	4b15      	ldr	r3, [pc, #84]	; (8013028 <xPortStartScheduler+0x138>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4a14      	ldr	r2, [pc, #80]	; (8013028 <xPortStartScheduler+0x138>)
 8012fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012fde:	f000 f8dd 	bl	801319c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012fe2:	4b12      	ldr	r3, [pc, #72]	; (801302c <xPortStartScheduler+0x13c>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012fe8:	f000 f8fc 	bl	80131e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012fec:	4b10      	ldr	r3, [pc, #64]	; (8013030 <xPortStartScheduler+0x140>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4a0f      	ldr	r2, [pc, #60]	; (8013030 <xPortStartScheduler+0x140>)
 8012ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012ff8:	f7ff ff66 	bl	8012ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012ffc:	f7fe fe76 	bl	8011cec <vTaskSwitchContext>
	prvTaskExitError();
 8013000:	f7ff ff20 	bl	8012e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013004:	2300      	movs	r3, #0
}
 8013006:	4618      	mov	r0, r3
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	e000ed00 	.word	0xe000ed00
 8013014:	410fc271 	.word	0x410fc271
 8013018:	410fc270 	.word	0x410fc270
 801301c:	e000e400 	.word	0xe000e400
 8013020:	2000150c 	.word	0x2000150c
 8013024:	20001510 	.word	0x20001510
 8013028:	e000ed20 	.word	0xe000ed20
 801302c:	200000cc 	.word	0x200000cc
 8013030:	e000ef34 	.word	0xe000ef34

08013034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
	__asm volatile
 801303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801303e:	f383 8811 	msr	BASEPRI, r3
 8013042:	f3bf 8f6f 	isb	sy
 8013046:	f3bf 8f4f 	dsb	sy
 801304a:	607b      	str	r3, [r7, #4]
}
 801304c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801304e:	4b0f      	ldr	r3, [pc, #60]	; (801308c <vPortEnterCritical+0x58>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	3301      	adds	r3, #1
 8013054:	4a0d      	ldr	r2, [pc, #52]	; (801308c <vPortEnterCritical+0x58>)
 8013056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013058:	4b0c      	ldr	r3, [pc, #48]	; (801308c <vPortEnterCritical+0x58>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d10f      	bne.n	8013080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013060:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <vPortEnterCritical+0x5c>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00a      	beq.n	8013080 <vPortEnterCritical+0x4c>
	__asm volatile
 801306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	603b      	str	r3, [r7, #0]
}
 801307c:	bf00      	nop
 801307e:	e7fe      	b.n	801307e <vPortEnterCritical+0x4a>
	}
}
 8013080:	bf00      	nop
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr
 801308c:	200000cc 	.word	0x200000cc
 8013090:	e000ed04 	.word	0xe000ed04

08013094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801309a:	4b12      	ldr	r3, [pc, #72]	; (80130e4 <vPortExitCritical+0x50>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d10a      	bne.n	80130b8 <vPortExitCritical+0x24>
	__asm volatile
 80130a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	607b      	str	r3, [r7, #4]
}
 80130b4:	bf00      	nop
 80130b6:	e7fe      	b.n	80130b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80130b8:	4b0a      	ldr	r3, [pc, #40]	; (80130e4 <vPortExitCritical+0x50>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	3b01      	subs	r3, #1
 80130be:	4a09      	ldr	r2, [pc, #36]	; (80130e4 <vPortExitCritical+0x50>)
 80130c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80130c2:	4b08      	ldr	r3, [pc, #32]	; (80130e4 <vPortExitCritical+0x50>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d105      	bne.n	80130d6 <vPortExitCritical+0x42>
 80130ca:	2300      	movs	r3, #0
 80130cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	f383 8811 	msr	BASEPRI, r3
}
 80130d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80130d6:	bf00      	nop
 80130d8:	370c      	adds	r7, #12
 80130da:	46bd      	mov	sp, r7
 80130dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop
 80130e4:	200000cc 	.word	0x200000cc
	...

080130f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80130f0:	f3ef 8009 	mrs	r0, PSP
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	4b15      	ldr	r3, [pc, #84]	; (8013150 <pxCurrentTCBConst>)
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	f01e 0f10 	tst.w	lr, #16
 8013100:	bf08      	it	eq
 8013102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310a:	6010      	str	r0, [r2, #0]
 801310c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013114:	f380 8811 	msr	BASEPRI, r0
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f7fe fde4 	bl	8011cec <vTaskSwitchContext>
 8013124:	f04f 0000 	mov.w	r0, #0
 8013128:	f380 8811 	msr	BASEPRI, r0
 801312c:	bc09      	pop	{r0, r3}
 801312e:	6819      	ldr	r1, [r3, #0]
 8013130:	6808      	ldr	r0, [r1, #0]
 8013132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013136:	f01e 0f10 	tst.w	lr, #16
 801313a:	bf08      	it	eq
 801313c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013140:	f380 8809 	msr	PSP, r0
 8013144:	f3bf 8f6f 	isb	sy
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	f3af 8000 	nop.w

08013150 <pxCurrentTCBConst>:
 8013150:	20000ee0 	.word	0x20000ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013154:	bf00      	nop
 8013156:	bf00      	nop

08013158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
	__asm volatile
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	607b      	str	r3, [r7, #4]
}
 8013170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013172:	f7fe fd01 	bl	8011b78 <xTaskIncrementTick>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d003      	beq.n	8013184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801317c:	4b06      	ldr	r3, [pc, #24]	; (8013198 <xPortSysTickHandler+0x40>)
 801317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013182:	601a      	str	r2, [r3, #0]
 8013184:	2300      	movs	r3, #0
 8013186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	f383 8811 	msr	BASEPRI, r3
}
 801318e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013190:	bf00      	nop
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	e000ed04 	.word	0xe000ed04

0801319c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801319c:	b480      	push	{r7}
 801319e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80131a0:	4b0b      	ldr	r3, [pc, #44]	; (80131d0 <vPortSetupTimerInterrupt+0x34>)
 80131a2:	2200      	movs	r2, #0
 80131a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80131a6:	4b0b      	ldr	r3, [pc, #44]	; (80131d4 <vPortSetupTimerInterrupt+0x38>)
 80131a8:	2200      	movs	r2, #0
 80131aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80131ac:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <vPortSetupTimerInterrupt+0x3c>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a0a      	ldr	r2, [pc, #40]	; (80131dc <vPortSetupTimerInterrupt+0x40>)
 80131b2:	fba2 2303 	umull	r2, r3, r2, r3
 80131b6:	099b      	lsrs	r3, r3, #6
 80131b8:	4a09      	ldr	r2, [pc, #36]	; (80131e0 <vPortSetupTimerInterrupt+0x44>)
 80131ba:	3b01      	subs	r3, #1
 80131bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80131be:	4b04      	ldr	r3, [pc, #16]	; (80131d0 <vPortSetupTimerInterrupt+0x34>)
 80131c0:	2207      	movs	r2, #7
 80131c2:	601a      	str	r2, [r3, #0]
}
 80131c4:	bf00      	nop
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop
 80131d0:	e000e010 	.word	0xe000e010
 80131d4:	e000e018 	.word	0xe000e018
 80131d8:	200000a0 	.word	0x200000a0
 80131dc:	10624dd3 	.word	0x10624dd3
 80131e0:	e000e014 	.word	0xe000e014

080131e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80131e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80131f4 <vPortEnableVFP+0x10>
 80131e8:	6801      	ldr	r1, [r0, #0]
 80131ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80131ee:	6001      	str	r1, [r0, #0]
 80131f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80131f2:	bf00      	nop
 80131f4:	e000ed88 	.word	0xe000ed88

080131f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80131f8:	b480      	push	{r7}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80131fe:	f3ef 8305 	mrs	r3, IPSR
 8013202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b0f      	cmp	r3, #15
 8013208:	d914      	bls.n	8013234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801320a:	4a17      	ldr	r2, [pc, #92]	; (8013268 <vPortValidateInterruptPriority+0x70>)
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013214:	4b15      	ldr	r3, [pc, #84]	; (801326c <vPortValidateInterruptPriority+0x74>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	7afa      	ldrb	r2, [r7, #11]
 801321a:	429a      	cmp	r2, r3
 801321c:	d20a      	bcs.n	8013234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013222:	f383 8811 	msr	BASEPRI, r3
 8013226:	f3bf 8f6f 	isb	sy
 801322a:	f3bf 8f4f 	dsb	sy
 801322e:	607b      	str	r3, [r7, #4]
}
 8013230:	bf00      	nop
 8013232:	e7fe      	b.n	8013232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013234:	4b0e      	ldr	r3, [pc, #56]	; (8013270 <vPortValidateInterruptPriority+0x78>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801323c:	4b0d      	ldr	r3, [pc, #52]	; (8013274 <vPortValidateInterruptPriority+0x7c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	d90a      	bls.n	801325a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	603b      	str	r3, [r7, #0]
}
 8013256:	bf00      	nop
 8013258:	e7fe      	b.n	8013258 <vPortValidateInterruptPriority+0x60>
	}
 801325a:	bf00      	nop
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	e000e3f0 	.word	0xe000e3f0
 801326c:	2000150c 	.word	0x2000150c
 8013270:	e000ed0c 	.word	0xe000ed0c
 8013274:	20001510 	.word	0x20001510

08013278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b08a      	sub	sp, #40	; 0x28
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013280:	2300      	movs	r3, #0
 8013282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013284:	f7fe fbbc 	bl	8011a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013288:	4b5d      	ldr	r3, [pc, #372]	; (8013400 <pvPortMalloc+0x188>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013290:	f000 f924 	bl	80134dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013294:	4b5b      	ldr	r3, [pc, #364]	; (8013404 <pvPortMalloc+0x18c>)
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4013      	ands	r3, r2
 801329c:	2b00      	cmp	r3, #0
 801329e:	f040 8093 	bne.w	80133c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d01d      	beq.n	80132e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80132a8:	2208      	movs	r2, #8
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	4413      	add	r3, r2
 80132ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f003 0307 	and.w	r3, r3, #7
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d014      	beq.n	80132e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f023 0307 	bic.w	r3, r3, #7
 80132c0:	3308      	adds	r3, #8
 80132c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f003 0307 	and.w	r3, r3, #7
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00a      	beq.n	80132e4 <pvPortMalloc+0x6c>
	__asm volatile
 80132ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d2:	f383 8811 	msr	BASEPRI, r3
 80132d6:	f3bf 8f6f 	isb	sy
 80132da:	f3bf 8f4f 	dsb	sy
 80132de:	617b      	str	r3, [r7, #20]
}
 80132e0:	bf00      	nop
 80132e2:	e7fe      	b.n	80132e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d06e      	beq.n	80133c8 <pvPortMalloc+0x150>
 80132ea:	4b47      	ldr	r3, [pc, #284]	; (8013408 <pvPortMalloc+0x190>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d869      	bhi.n	80133c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80132f4:	4b45      	ldr	r3, [pc, #276]	; (801340c <pvPortMalloc+0x194>)
 80132f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80132f8:	4b44      	ldr	r3, [pc, #272]	; (801340c <pvPortMalloc+0x194>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80132fe:	e004      	b.n	801330a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	429a      	cmp	r2, r3
 8013312:	d903      	bls.n	801331c <pvPortMalloc+0xa4>
 8013314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1f1      	bne.n	8013300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801331c:	4b38      	ldr	r3, [pc, #224]	; (8013400 <pvPortMalloc+0x188>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013322:	429a      	cmp	r2, r3
 8013324:	d050      	beq.n	80133c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013326:	6a3b      	ldr	r3, [r7, #32]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2208      	movs	r2, #8
 801332c:	4413      	add	r3, r2
 801332e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333a:	685a      	ldr	r2, [r3, #4]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	1ad2      	subs	r2, r2, r3
 8013340:	2308      	movs	r3, #8
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	429a      	cmp	r2, r3
 8013346:	d91f      	bls.n	8013388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4413      	add	r3, r2
 801334e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	f003 0307 	and.w	r3, r3, #7
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00a      	beq.n	8013370 <pvPortMalloc+0xf8>
	__asm volatile
 801335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801335e:	f383 8811 	msr	BASEPRI, r3
 8013362:	f3bf 8f6f 	isb	sy
 8013366:	f3bf 8f4f 	dsb	sy
 801336a:	613b      	str	r3, [r7, #16]
}
 801336c:	bf00      	nop
 801336e:	e7fe      	b.n	801336e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013372:	685a      	ldr	r2, [r3, #4]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	1ad2      	subs	r2, r2, r3
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013382:	69b8      	ldr	r0, [r7, #24]
 8013384:	f000 f90c 	bl	80135a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013388:	4b1f      	ldr	r3, [pc, #124]	; (8013408 <pvPortMalloc+0x190>)
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	1ad3      	subs	r3, r2, r3
 8013392:	4a1d      	ldr	r2, [pc, #116]	; (8013408 <pvPortMalloc+0x190>)
 8013394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013396:	4b1c      	ldr	r3, [pc, #112]	; (8013408 <pvPortMalloc+0x190>)
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	4b1d      	ldr	r3, [pc, #116]	; (8013410 <pvPortMalloc+0x198>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d203      	bcs.n	80133aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80133a2:	4b19      	ldr	r3, [pc, #100]	; (8013408 <pvPortMalloc+0x190>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	4a1a      	ldr	r2, [pc, #104]	; (8013410 <pvPortMalloc+0x198>)
 80133a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80133aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ac:	685a      	ldr	r2, [r3, #4]
 80133ae:	4b15      	ldr	r3, [pc, #84]	; (8013404 <pvPortMalloc+0x18c>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	431a      	orrs	r2, r3
 80133b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80133b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ba:	2200      	movs	r2, #0
 80133bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80133be:	4b15      	ldr	r3, [pc, #84]	; (8013414 <pvPortMalloc+0x19c>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	3301      	adds	r3, #1
 80133c4:	4a13      	ldr	r2, [pc, #76]	; (8013414 <pvPortMalloc+0x19c>)
 80133c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80133c8:	f7fe fb28 	bl	8011a1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80133d2:	f7ed fd97 	bl	8000f04 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	f003 0307 	and.w	r3, r3, #7
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00a      	beq.n	80133f6 <pvPortMalloc+0x17e>
	__asm volatile
 80133e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e4:	f383 8811 	msr	BASEPRI, r3
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	f3bf 8f4f 	dsb	sy
 80133f0:	60fb      	str	r3, [r7, #12]
}
 80133f2:	bf00      	nop
 80133f4:	e7fe      	b.n	80133f4 <pvPortMalloc+0x17c>
	return pvReturn;
 80133f6:	69fb      	ldr	r3, [r7, #28]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3728      	adds	r7, #40	; 0x28
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	2001151c 	.word	0x2001151c
 8013404:	20011530 	.word	0x20011530
 8013408:	20011520 	.word	0x20011520
 801340c:	20011514 	.word	0x20011514
 8013410:	20011524 	.word	0x20011524
 8013414:	20011528 	.word	0x20011528

08013418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d04d      	beq.n	80134c6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801342a:	2308      	movs	r3, #8
 801342c:	425b      	negs	r3, r3
 801342e:	697a      	ldr	r2, [r7, #20]
 8013430:	4413      	add	r3, r2
 8013432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	685a      	ldr	r2, [r3, #4]
 801343c:	4b24      	ldr	r3, [pc, #144]	; (80134d0 <vPortFree+0xb8>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4013      	ands	r3, r2
 8013442:	2b00      	cmp	r3, #0
 8013444:	d10a      	bne.n	801345c <vPortFree+0x44>
	__asm volatile
 8013446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344a:	f383 8811 	msr	BASEPRI, r3
 801344e:	f3bf 8f6f 	isb	sy
 8013452:	f3bf 8f4f 	dsb	sy
 8013456:	60fb      	str	r3, [r7, #12]
}
 8013458:	bf00      	nop
 801345a:	e7fe      	b.n	801345a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00a      	beq.n	801347a <vPortFree+0x62>
	__asm volatile
 8013464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013468:	f383 8811 	msr	BASEPRI, r3
 801346c:	f3bf 8f6f 	isb	sy
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	60bb      	str	r3, [r7, #8]
}
 8013476:	bf00      	nop
 8013478:	e7fe      	b.n	8013478 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	685a      	ldr	r2, [r3, #4]
 801347e:	4b14      	ldr	r3, [pc, #80]	; (80134d0 <vPortFree+0xb8>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4013      	ands	r3, r2
 8013484:	2b00      	cmp	r3, #0
 8013486:	d01e      	beq.n	80134c6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d11a      	bne.n	80134c6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	685a      	ldr	r2, [r3, #4]
 8013494:	4b0e      	ldr	r3, [pc, #56]	; (80134d0 <vPortFree+0xb8>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	43db      	mvns	r3, r3
 801349a:	401a      	ands	r2, r3
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80134a0:	f7fe faae 	bl	8011a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	685a      	ldr	r2, [r3, #4]
 80134a8:	4b0a      	ldr	r3, [pc, #40]	; (80134d4 <vPortFree+0xbc>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4413      	add	r3, r2
 80134ae:	4a09      	ldr	r2, [pc, #36]	; (80134d4 <vPortFree+0xbc>)
 80134b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80134b2:	6938      	ldr	r0, [r7, #16]
 80134b4:	f000 f874 	bl	80135a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80134b8:	4b07      	ldr	r3, [pc, #28]	; (80134d8 <vPortFree+0xc0>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	3301      	adds	r3, #1
 80134be:	4a06      	ldr	r2, [pc, #24]	; (80134d8 <vPortFree+0xc0>)
 80134c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80134c2:	f7fe faab 	bl	8011a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80134c6:	bf00      	nop
 80134c8:	3718      	adds	r7, #24
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	20011530 	.word	0x20011530
 80134d4:	20011520 	.word	0x20011520
 80134d8:	2001152c 	.word	0x2001152c

080134dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80134e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80134e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80134e8:	4b27      	ldr	r3, [pc, #156]	; (8013588 <prvHeapInit+0xac>)
 80134ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f003 0307 	and.w	r3, r3, #7
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00c      	beq.n	8013510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	3307      	adds	r3, #7
 80134fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f023 0307 	bic.w	r3, r3, #7
 8013502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	4a1f      	ldr	r2, [pc, #124]	; (8013588 <prvHeapInit+0xac>)
 801350c:	4413      	add	r3, r2
 801350e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013514:	4a1d      	ldr	r2, [pc, #116]	; (801358c <prvHeapInit+0xb0>)
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801351a:	4b1c      	ldr	r3, [pc, #112]	; (801358c <prvHeapInit+0xb0>)
 801351c:	2200      	movs	r2, #0
 801351e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	68ba      	ldr	r2, [r7, #8]
 8013524:	4413      	add	r3, r2
 8013526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013528:	2208      	movs	r2, #8
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	1a9b      	subs	r3, r3, r2
 801352e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f023 0307 	bic.w	r3, r3, #7
 8013536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	4a15      	ldr	r2, [pc, #84]	; (8013590 <prvHeapInit+0xb4>)
 801353c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801353e:	4b14      	ldr	r3, [pc, #80]	; (8013590 <prvHeapInit+0xb4>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2200      	movs	r2, #0
 8013544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013546:	4b12      	ldr	r3, [pc, #72]	; (8013590 <prvHeapInit+0xb4>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2200      	movs	r2, #0
 801354c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	1ad2      	subs	r2, r2, r3
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801355c:	4b0c      	ldr	r3, [pc, #48]	; (8013590 <prvHeapInit+0xb4>)
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	4a0a      	ldr	r2, [pc, #40]	; (8013594 <prvHeapInit+0xb8>)
 801356a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	4a09      	ldr	r2, [pc, #36]	; (8013598 <prvHeapInit+0xbc>)
 8013572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013574:	4b09      	ldr	r3, [pc, #36]	; (801359c <prvHeapInit+0xc0>)
 8013576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801357a:	601a      	str	r2, [r3, #0]
}
 801357c:	bf00      	nop
 801357e:	3714      	adds	r7, #20
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr
 8013588:	20001514 	.word	0x20001514
 801358c:	20011514 	.word	0x20011514
 8013590:	2001151c 	.word	0x2001151c
 8013594:	20011524 	.word	0x20011524
 8013598:	20011520 	.word	0x20011520
 801359c:	20011530 	.word	0x20011530

080135a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80135a8:	4b28      	ldr	r3, [pc, #160]	; (801364c <prvInsertBlockIntoFreeList+0xac>)
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	e002      	b.n	80135b4 <prvInsertBlockIntoFreeList+0x14>
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	60fb      	str	r3, [r7, #12]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d8f7      	bhi.n	80135ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	68ba      	ldr	r2, [r7, #8]
 80135c8:	4413      	add	r3, r2
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d108      	bne.n	80135e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	685a      	ldr	r2, [r3, #4]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	441a      	add	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	441a      	add	r2, r3
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d118      	bne.n	8013628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681a      	ldr	r2, [r3, #0]
 80135fa:	4b15      	ldr	r3, [pc, #84]	; (8013650 <prvInsertBlockIntoFreeList+0xb0>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d00d      	beq.n	801361e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	441a      	add	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	601a      	str	r2, [r3, #0]
 801361c:	e008      	b.n	8013630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801361e:	4b0c      	ldr	r3, [pc, #48]	; (8013650 <prvInsertBlockIntoFreeList+0xb0>)
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	e003      	b.n	8013630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013630:	68fa      	ldr	r2, [r7, #12]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	429a      	cmp	r2, r3
 8013636:	d002      	beq.n	801363e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801363e:	bf00      	nop
 8013640:	3714      	adds	r7, #20
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop
 801364c:	20011514 	.word	0x20011514
 8013650:	2001151c 	.word	0x2001151c

08013654 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8013658:	2200      	movs	r2, #0
 801365a:	490e      	ldr	r1, [pc, #56]	; (8013694 <MX_USB_HOST_Init+0x40>)
 801365c:	480e      	ldr	r0, [pc, #56]	; (8013698 <MX_USB_HOST_Init+0x44>)
 801365e:	f7fa fbcf 	bl	800de00 <USBH_Init>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013668:	f7ef f9f8 	bl	8002a5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801366c:	490b      	ldr	r1, [pc, #44]	; (801369c <MX_USB_HOST_Init+0x48>)
 801366e:	480a      	ldr	r0, [pc, #40]	; (8013698 <MX_USB_HOST_Init+0x44>)
 8013670:	f7fa fc76 	bl	800df60 <USBH_RegisterClass>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d001      	beq.n	801367e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801367a:	f7ef f9ef 	bl	8002a5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801367e:	4806      	ldr	r0, [pc, #24]	; (8013698 <MX_USB_HOST_Init+0x44>)
 8013680:	f7fa fcfa 	bl	800e078 <USBH_Start>
 8013684:	4603      	mov	r3, r0
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801368a:	f7ef f9e7 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801368e:	bf00      	nop
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	080136a1 	.word	0x080136a1
 8013698:	20011534 	.word	0x20011534
 801369c:	200000ac 	.word	0x200000ac

080136a0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	460b      	mov	r3, r1
 80136aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80136ac:	78fb      	ldrb	r3, [r7, #3]
 80136ae:	3b01      	subs	r3, #1
 80136b0:	2b04      	cmp	r3, #4
 80136b2:	d819      	bhi.n	80136e8 <USBH_UserProcess+0x48>
 80136b4:	a201      	add	r2, pc, #4	; (adr r2, 80136bc <USBH_UserProcess+0x1c>)
 80136b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ba:	bf00      	nop
 80136bc:	080136e9 	.word	0x080136e9
 80136c0:	080136d9 	.word	0x080136d9
 80136c4:	080136e9 	.word	0x080136e9
 80136c8:	080136e1 	.word	0x080136e1
 80136cc:	080136d1 	.word	0x080136d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80136d0:	4b09      	ldr	r3, [pc, #36]	; (80136f8 <USBH_UserProcess+0x58>)
 80136d2:	2203      	movs	r2, #3
 80136d4:	701a      	strb	r2, [r3, #0]
  break;
 80136d6:	e008      	b.n	80136ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <USBH_UserProcess+0x58>)
 80136da:	2202      	movs	r2, #2
 80136dc:	701a      	strb	r2, [r3, #0]
  break;
 80136de:	e004      	b.n	80136ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80136e0:	4b05      	ldr	r3, [pc, #20]	; (80136f8 <USBH_UserProcess+0x58>)
 80136e2:	2201      	movs	r2, #1
 80136e4:	701a      	strb	r2, [r3, #0]
  break;
 80136e6:	e000      	b.n	80136ea <USBH_UserProcess+0x4a>

  default:
  break;
 80136e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80136ea:	bf00      	nop
 80136ec:	370c      	adds	r7, #12
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	20011918 	.word	0x20011918

080136fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b08a      	sub	sp, #40	; 0x28
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013704:	f107 0314 	add.w	r3, r7, #20
 8013708:	2200      	movs	r2, #0
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	605a      	str	r2, [r3, #4]
 801370e:	609a      	str	r2, [r3, #8]
 8013710:	60da      	str	r2, [r3, #12]
 8013712:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4a24      	ldr	r2, [pc, #144]	; (80137ac <HAL_HCD_MspInit+0xb0>)
 801371a:	4293      	cmp	r3, r2
 801371c:	d141      	bne.n	80137a2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801371e:	2300      	movs	r3, #0
 8013720:	613b      	str	r3, [r7, #16]
 8013722:	4b23      	ldr	r3, [pc, #140]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 8013724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013726:	4a22      	ldr	r2, [pc, #136]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 8013728:	f043 0302 	orr.w	r3, r3, #2
 801372c:	6313      	str	r3, [r2, #48]	; 0x30
 801372e:	4b20      	ldr	r3, [pc, #128]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 8013730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013732:	f003 0302 	and.w	r3, r3, #2
 8013736:	613b      	str	r3, [r7, #16]
 8013738:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801373a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801373e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013740:	2302      	movs	r3, #2
 8013742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013744:	2300      	movs	r3, #0
 8013746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013748:	2300      	movs	r3, #0
 801374a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801374c:	230c      	movs	r3, #12
 801374e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013750:	f107 0314 	add.w	r3, r7, #20
 8013754:	4619      	mov	r1, r3
 8013756:	4817      	ldr	r0, [pc, #92]	; (80137b4 <HAL_HCD_MspInit+0xb8>)
 8013758:	f7f2 fe68 	bl	800642c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801375c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013762:	2300      	movs	r3, #0
 8013764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013766:	2300      	movs	r3, #0
 8013768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801376a:	f107 0314 	add.w	r3, r7, #20
 801376e:	4619      	mov	r1, r3
 8013770:	4810      	ldr	r0, [pc, #64]	; (80137b4 <HAL_HCD_MspInit+0xb8>)
 8013772:	f7f2 fe5b 	bl	800642c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013776:	2300      	movs	r3, #0
 8013778:	60fb      	str	r3, [r7, #12]
 801377a:	4b0d      	ldr	r3, [pc, #52]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 801377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801377e:	4a0c      	ldr	r2, [pc, #48]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 8013780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013784:	6313      	str	r3, [r2, #48]	; 0x30
 8013786:	4b0a      	ldr	r3, [pc, #40]	; (80137b0 <HAL_HCD_MspInit+0xb4>)
 8013788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801378a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801378e:	60fb      	str	r3, [r7, #12]
 8013790:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8013792:	2200      	movs	r2, #0
 8013794:	2105      	movs	r1, #5
 8013796:	204d      	movs	r0, #77	; 0x4d
 8013798:	f7f2 fa58 	bl	8005c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801379c:	204d      	movs	r0, #77	; 0x4d
 801379e:	f7f2 fa71 	bl	8005c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80137a2:	bf00      	nop
 80137a4:	3728      	adds	r7, #40	; 0x28
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	40040000 	.word	0x40040000
 80137b0:	40023800 	.word	0x40023800
 80137b4:	40020400 	.word	0x40020400

080137b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7fb f90d 	bl	800e9e6 <USBH_LL_IncTimer>
}
 80137cc:	bf00      	nop
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fb f951 	bl	800ea8a <USBH_LL_Connect>
}
 80137e8:	bf00      	nop
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fb f966 	bl	800ead0 <USBH_LL_Disconnect>
}
 8013804:	bf00      	nop
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	460b      	mov	r3, r1
 8013816:	70fb      	strb	r3, [r7, #3]
 8013818:	4613      	mov	r3, r2
 801381a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013822:	4618      	mov	r0, r3
 8013824:	f7fb f99d 	bl	800eb62 <USBH_LL_NotifyURBChange>
#endif
}
 8013828:	bf00      	nop
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801383e:	4618      	mov	r0, r3
 8013840:	f7fb f8fb 	bl	800ea3a <USBH_LL_PortEnabled>
}
 8013844:	bf00      	nop
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801385a:	4618      	mov	r0, r3
 801385c:	f7fb f907 	bl	800ea6e <USBH_LL_PortDisabled>
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013876:	2b00      	cmp	r3, #0
 8013878:	d132      	bne.n	80138e0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801387a:	4a1c      	ldr	r2, [pc, #112]	; (80138ec <USBH_LL_Init+0x84>)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4a19      	ldr	r2, [pc, #100]	; (80138ec <USBH_LL_Init+0x84>)
 8013886:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801388a:	4b18      	ldr	r3, [pc, #96]	; (80138ec <USBH_LL_Init+0x84>)
 801388c:	4a18      	ldr	r2, [pc, #96]	; (80138f0 <USBH_LL_Init+0x88>)
 801388e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8013890:	4b16      	ldr	r3, [pc, #88]	; (80138ec <USBH_LL_Init+0x84>)
 8013892:	220c      	movs	r2, #12
 8013894:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8013896:	4b15      	ldr	r3, [pc, #84]	; (80138ec <USBH_LL_Init+0x84>)
 8013898:	2201      	movs	r2, #1
 801389a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801389c:	4b13      	ldr	r3, [pc, #76]	; (80138ec <USBH_LL_Init+0x84>)
 801389e:	2200      	movs	r2, #0
 80138a0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80138a2:	4b12      	ldr	r3, [pc, #72]	; (80138ec <USBH_LL_Init+0x84>)
 80138a4:	2202      	movs	r2, #2
 80138a6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80138a8:	4b10      	ldr	r3, [pc, #64]	; (80138ec <USBH_LL_Init+0x84>)
 80138aa:	2200      	movs	r2, #0
 80138ac:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <USBH_LL_Init+0x84>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80138b4:	4b0d      	ldr	r3, [pc, #52]	; (80138ec <USBH_LL_Init+0x84>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80138ba:	4b0c      	ldr	r3, [pc, #48]	; (80138ec <USBH_LL_Init+0x84>)
 80138bc:	2200      	movs	r2, #0
 80138be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80138c0:	480a      	ldr	r0, [pc, #40]	; (80138ec <USBH_LL_Init+0x84>)
 80138c2:	f7f3 f884 	bl	80069ce <HAL_HCD_Init>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d001      	beq.n	80138d0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80138cc:	f7ef f8c6 	bl	8002a5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80138d0:	4806      	ldr	r0, [pc, #24]	; (80138ec <USBH_LL_Init+0x84>)
 80138d2:	f7f3 fc68 	bl	80071a6 <HAL_HCD_GetCurrentFrame>
 80138d6:	4603      	mov	r3, r0
 80138d8:	4619      	mov	r1, r3
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f7fb f874 	bl	800e9c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80138e0:	2300      	movs	r3, #0
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	2001191c 	.word	0x2001191c
 80138f0:	40040000 	.word	0x40040000

080138f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801390a:	4618      	mov	r0, r3
 801390c:	f7f3 fbd5 	bl	80070ba <HAL_HCD_Start>
 8013910:	4603      	mov	r3, r0
 8013912:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	4618      	mov	r0, r3
 8013918:	f000 f95c 	bl	8013bd4 <USBH_Get_USB_Status>
 801391c:	4603      	mov	r3, r0
 801391e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013920:	7bbb      	ldrb	r3, [r7, #14]
}
 8013922:	4618      	mov	r0, r3
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801392a:	b580      	push	{r7, lr}
 801392c:	b084      	sub	sp, #16
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013936:	2300      	movs	r3, #0
 8013938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013940:	4618      	mov	r0, r3
 8013942:	f7f3 fbdd 	bl	8007100 <HAL_HCD_Stop>
 8013946:	4603      	mov	r3, r0
 8013948:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801394a:	7bfb      	ldrb	r3, [r7, #15]
 801394c:	4618      	mov	r0, r3
 801394e:	f000 f941 	bl	8013bd4 <USBH_Get_USB_Status>
 8013952:	4603      	mov	r3, r0
 8013954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013956:	7bbb      	ldrb	r3, [r7, #14]
}
 8013958:	4618      	mov	r0, r3
 801395a:	3710      	adds	r7, #16
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b084      	sub	sp, #16
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013968:	2301      	movs	r3, #1
 801396a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013972:	4618      	mov	r0, r3
 8013974:	f7f3 fc25 	bl	80071c2 <HAL_HCD_GetCurrentSpeed>
 8013978:	4603      	mov	r3, r0
 801397a:	2b02      	cmp	r3, #2
 801397c:	d00c      	beq.n	8013998 <USBH_LL_GetSpeed+0x38>
 801397e:	2b02      	cmp	r3, #2
 8013980:	d80d      	bhi.n	801399e <USBH_LL_GetSpeed+0x3e>
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <USBH_LL_GetSpeed+0x2c>
 8013986:	2b01      	cmp	r3, #1
 8013988:	d003      	beq.n	8013992 <USBH_LL_GetSpeed+0x32>
 801398a:	e008      	b.n	801399e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801398c:	2300      	movs	r3, #0
 801398e:	73fb      	strb	r3, [r7, #15]
    break;
 8013990:	e008      	b.n	80139a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013992:	2301      	movs	r3, #1
 8013994:	73fb      	strb	r3, [r7, #15]
    break;
 8013996:	e005      	b.n	80139a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013998:	2302      	movs	r3, #2
 801399a:	73fb      	strb	r3, [r7, #15]
    break;
 801399c:	e002      	b.n	80139a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801399e:	2301      	movs	r3, #1
 80139a0:	73fb      	strb	r3, [r7, #15]
    break;
 80139a2:	bf00      	nop
  }
  return  speed;
 80139a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3710      	adds	r7, #16
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}

080139ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80139ae:	b580      	push	{r7, lr}
 80139b0:	b084      	sub	sp, #16
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139b6:	2300      	movs	r3, #0
 80139b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7f3 fbb8 	bl	800713a <HAL_HCD_ResetPort>
 80139ca:	4603      	mov	r3, r0
 80139cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80139ce:	7bfb      	ldrb	r3, [r7, #15]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f000 f8ff 	bl	8013bd4 <USBH_Get_USB_Status>
 80139d6:	4603      	mov	r3, r0
 80139d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139da:	7bbb      	ldrb	r3, [r7, #14]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3710      	adds	r7, #16
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}

080139e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	460b      	mov	r3, r1
 80139ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80139f6:	78fa      	ldrb	r2, [r7, #3]
 80139f8:	4611      	mov	r1, r2
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f3 fbbf 	bl	800717e <HAL_HCD_HC_GetXferCount>
 8013a00:	4603      	mov	r3, r0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013a0a:	b590      	push	{r4, r7, lr}
 8013a0c:	b089      	sub	sp, #36	; 0x24
 8013a0e:	af04      	add	r7, sp, #16
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	4608      	mov	r0, r1
 8013a14:	4611      	mov	r1, r2
 8013a16:	461a      	mov	r2, r3
 8013a18:	4603      	mov	r3, r0
 8013a1a:	70fb      	strb	r3, [r7, #3]
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	70bb      	strb	r3, [r7, #2]
 8013a20:	4613      	mov	r3, r2
 8013a22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013a32:	787c      	ldrb	r4, [r7, #1]
 8013a34:	78ba      	ldrb	r2, [r7, #2]
 8013a36:	78f9      	ldrb	r1, [r7, #3]
 8013a38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a3a:	9302      	str	r3, [sp, #8]
 8013a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	4623      	mov	r3, r4
 8013a4a:	f7f3 f822 	bl	8006a92 <HAL_HCD_HC_Init>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013a52:	7bfb      	ldrb	r3, [r7, #15]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f000 f8bd 	bl	8013bd4 <USBH_Get_USB_Status>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3714      	adds	r7, #20
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd90      	pop	{r4, r7, pc}

08013a68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	460b      	mov	r3, r1
 8013a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a74:	2300      	movs	r3, #0
 8013a76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013a82:	78fa      	ldrb	r2, [r7, #3]
 8013a84:	4611      	mov	r1, r2
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7f3 f892 	bl	8006bb0 <HAL_HCD_HC_Halt>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013a90:	7bfb      	ldrb	r3, [r7, #15]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f000 f89e 	bl	8013bd4 <USBH_Get_USB_Status>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013aa6:	b590      	push	{r4, r7, lr}
 8013aa8:	b089      	sub	sp, #36	; 0x24
 8013aaa:	af04      	add	r7, sp, #16
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	4608      	mov	r0, r1
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	70fb      	strb	r3, [r7, #3]
 8013ab8:	460b      	mov	r3, r1
 8013aba:	70bb      	strb	r3, [r7, #2]
 8013abc:	4613      	mov	r3, r2
 8013abe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013ace:	787c      	ldrb	r4, [r7, #1]
 8013ad0:	78ba      	ldrb	r2, [r7, #2]
 8013ad2:	78f9      	ldrb	r1, [r7, #3]
 8013ad4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013ad8:	9303      	str	r3, [sp, #12]
 8013ada:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013adc:	9302      	str	r3, [sp, #8]
 8013ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae0:	9301      	str	r3, [sp, #4]
 8013ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	4623      	mov	r3, r4
 8013aea:	f7f3 f885 	bl	8006bf8 <HAL_HCD_HC_SubmitRequest>
 8013aee:	4603      	mov	r3, r0
 8013af0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013af2:	7bfb      	ldrb	r3, [r7, #15]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f000 f86d 	bl	8013bd4 <USBH_Get_USB_Status>
 8013afa:	4603      	mov	r3, r0
 8013afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3714      	adds	r7, #20
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd90      	pop	{r4, r7, pc}

08013b08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	460b      	mov	r3, r1
 8013b12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013b1a:	78fa      	ldrb	r2, [r7, #3]
 8013b1c:	4611      	mov	r1, r2
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7f3 fb19 	bl	8007156 <HAL_HCD_HC_GetURBState>
 8013b24:	4603      	mov	r3, r0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b082      	sub	sp, #8
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	460b      	mov	r3, r1
 8013b38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d103      	bne.n	8013b4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f000 f870 	bl	8013c2c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013b4c:	20c8      	movs	r0, #200	; 0xc8
 8013b4e:	f7f1 fb91 	bl	8005274 <HAL_Delay>
  return USBH_OK;
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b085      	sub	sp, #20
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	460b      	mov	r3, r1
 8013b66:	70fb      	strb	r3, [r7, #3]
 8013b68:	4613      	mov	r3, r2
 8013b6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013b72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013b74:	78fb      	ldrb	r3, [r7, #3]
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	212c      	movs	r1, #44	; 0x2c
 8013b7a:	fb01 f303 	mul.w	r3, r1, r3
 8013b7e:	4413      	add	r3, r2
 8013b80:	333b      	adds	r3, #59	; 0x3b
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d009      	beq.n	8013b9c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013b88:	78fb      	ldrb	r3, [r7, #3]
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	212c      	movs	r1, #44	; 0x2c
 8013b8e:	fb01 f303 	mul.w	r3, r1, r3
 8013b92:	4413      	add	r3, r2
 8013b94:	3354      	adds	r3, #84	; 0x54
 8013b96:	78ba      	ldrb	r2, [r7, #2]
 8013b98:	701a      	strb	r2, [r3, #0]
 8013b9a:	e008      	b.n	8013bae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013b9c:	78fb      	ldrb	r3, [r7, #3]
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	212c      	movs	r1, #44	; 0x2c
 8013ba2:	fb01 f303 	mul.w	r3, r1, r3
 8013ba6:	4413      	add	r3, r2
 8013ba8:	3355      	adds	r3, #85	; 0x55
 8013baa:	78ba      	ldrb	r2, [r7, #2]
 8013bac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013bae:	2300      	movs	r3, #0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3714      	adds	r7, #20
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7f1 fb55 	bl	8005274 <HAL_Delay>
}
 8013bca:	bf00      	nop
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
	...

08013bd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b085      	sub	sp, #20
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4603      	mov	r3, r0
 8013bdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013bde:	2300      	movs	r3, #0
 8013be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013be2:	79fb      	ldrb	r3, [r7, #7]
 8013be4:	2b03      	cmp	r3, #3
 8013be6:	d817      	bhi.n	8013c18 <USBH_Get_USB_Status+0x44>
 8013be8:	a201      	add	r2, pc, #4	; (adr r2, 8013bf0 <USBH_Get_USB_Status+0x1c>)
 8013bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bee:	bf00      	nop
 8013bf0:	08013c01 	.word	0x08013c01
 8013bf4:	08013c07 	.word	0x08013c07
 8013bf8:	08013c0d 	.word	0x08013c0d
 8013bfc:	08013c13 	.word	0x08013c13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013c00:	2300      	movs	r3, #0
 8013c02:	73fb      	strb	r3, [r7, #15]
    break;
 8013c04:	e00b      	b.n	8013c1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013c06:	2302      	movs	r3, #2
 8013c08:	73fb      	strb	r3, [r7, #15]
    break;
 8013c0a:	e008      	b.n	8013c1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8013c10:	e005      	b.n	8013c1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013c12:	2302      	movs	r3, #2
 8013c14:	73fb      	strb	r3, [r7, #15]
    break;
 8013c16:	e002      	b.n	8013c1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013c18:	2302      	movs	r3, #2
 8013c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8013c1c:	bf00      	nop
  }
  return usb_status;
 8013c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3714      	adds	r7, #20
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	4603      	mov	r3, r0
 8013c34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013c36:	79fb      	ldrb	r3, [r7, #7]
 8013c38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8013c3a:	79fb      	ldrb	r3, [r7, #7]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d102      	bne.n	8013c46 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013c40:	2301      	movs	r3, #1
 8013c42:	73fb      	strb	r3, [r7, #15]
 8013c44:	e001      	b.n	8013c4a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8013c46:	2300      	movs	r3, #0
 8013c48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8013c4a:	7bfb      	ldrb	r3, [r7, #15]
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	2110      	movs	r1, #16
 8013c50:	4803      	ldr	r0, [pc, #12]	; (8013c60 <MX_DriverVbusHS+0x34>)
 8013c52:	f7f2 fea3 	bl	800699c <HAL_GPIO_WritePin>
}
 8013c56:	bf00      	nop
 8013c58:	3710      	adds	r7, #16
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	40020800 	.word	0x40020800

08013c64 <__errno>:
 8013c64:	4b01      	ldr	r3, [pc, #4]	; (8013c6c <__errno+0x8>)
 8013c66:	6818      	ldr	r0, [r3, #0]
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop
 8013c6c:	200000d0 	.word	0x200000d0

08013c70 <__libc_init_array>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	4d0d      	ldr	r5, [pc, #52]	; (8013ca8 <__libc_init_array+0x38>)
 8013c74:	4c0d      	ldr	r4, [pc, #52]	; (8013cac <__libc_init_array+0x3c>)
 8013c76:	1b64      	subs	r4, r4, r5
 8013c78:	10a4      	asrs	r4, r4, #2
 8013c7a:	2600      	movs	r6, #0
 8013c7c:	42a6      	cmp	r6, r4
 8013c7e:	d109      	bne.n	8013c94 <__libc_init_array+0x24>
 8013c80:	4d0b      	ldr	r5, [pc, #44]	; (8013cb0 <__libc_init_array+0x40>)
 8013c82:	4c0c      	ldr	r4, [pc, #48]	; (8013cb4 <__libc_init_array+0x44>)
 8013c84:	f000 fc9e 	bl	80145c4 <_init>
 8013c88:	1b64      	subs	r4, r4, r5
 8013c8a:	10a4      	asrs	r4, r4, #2
 8013c8c:	2600      	movs	r6, #0
 8013c8e:	42a6      	cmp	r6, r4
 8013c90:	d105      	bne.n	8013c9e <__libc_init_array+0x2e>
 8013c92:	bd70      	pop	{r4, r5, r6, pc}
 8013c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c98:	4798      	blx	r3
 8013c9a:	3601      	adds	r6, #1
 8013c9c:	e7ee      	b.n	8013c7c <__libc_init_array+0xc>
 8013c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ca2:	4798      	blx	r3
 8013ca4:	3601      	adds	r6, #1
 8013ca6:	e7f2      	b.n	8013c8e <__libc_init_array+0x1e>
 8013ca8:	08075830 	.word	0x08075830
 8013cac:	08075830 	.word	0x08075830
 8013cb0:	08075830 	.word	0x08075830
 8013cb4:	08075834 	.word	0x08075834

08013cb8 <malloc>:
 8013cb8:	4b02      	ldr	r3, [pc, #8]	; (8013cc4 <malloc+0xc>)
 8013cba:	4601      	mov	r1, r0
 8013cbc:	6818      	ldr	r0, [r3, #0]
 8013cbe:	f000 b88d 	b.w	8013ddc <_malloc_r>
 8013cc2:	bf00      	nop
 8013cc4:	200000d0 	.word	0x200000d0

08013cc8 <free>:
 8013cc8:	4b02      	ldr	r3, [pc, #8]	; (8013cd4 <free+0xc>)
 8013cca:	4601      	mov	r1, r0
 8013ccc:	6818      	ldr	r0, [r3, #0]
 8013cce:	f000 b819 	b.w	8013d04 <_free_r>
 8013cd2:	bf00      	nop
 8013cd4:	200000d0 	.word	0x200000d0

08013cd8 <memcpy>:
 8013cd8:	440a      	add	r2, r1
 8013cda:	4291      	cmp	r1, r2
 8013cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ce0:	d100      	bne.n	8013ce4 <memcpy+0xc>
 8013ce2:	4770      	bx	lr
 8013ce4:	b510      	push	{r4, lr}
 8013ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cee:	4291      	cmp	r1, r2
 8013cf0:	d1f9      	bne.n	8013ce6 <memcpy+0xe>
 8013cf2:	bd10      	pop	{r4, pc}

08013cf4 <memset>:
 8013cf4:	4402      	add	r2, r0
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	d100      	bne.n	8013cfe <memset+0xa>
 8013cfc:	4770      	bx	lr
 8013cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8013d02:	e7f9      	b.n	8013cf8 <memset+0x4>

08013d04 <_free_r>:
 8013d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d06:	2900      	cmp	r1, #0
 8013d08:	d044      	beq.n	8013d94 <_free_r+0x90>
 8013d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d0e:	9001      	str	r0, [sp, #4]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f1a1 0404 	sub.w	r4, r1, #4
 8013d16:	bfb8      	it	lt
 8013d18:	18e4      	addlt	r4, r4, r3
 8013d1a:	f000 f903 	bl	8013f24 <__malloc_lock>
 8013d1e:	4a1e      	ldr	r2, [pc, #120]	; (8013d98 <_free_r+0x94>)
 8013d20:	9801      	ldr	r0, [sp, #4]
 8013d22:	6813      	ldr	r3, [r2, #0]
 8013d24:	b933      	cbnz	r3, 8013d34 <_free_r+0x30>
 8013d26:	6063      	str	r3, [r4, #4]
 8013d28:	6014      	str	r4, [r2, #0]
 8013d2a:	b003      	add	sp, #12
 8013d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d30:	f000 b8fe 	b.w	8013f30 <__malloc_unlock>
 8013d34:	42a3      	cmp	r3, r4
 8013d36:	d908      	bls.n	8013d4a <_free_r+0x46>
 8013d38:	6825      	ldr	r5, [r4, #0]
 8013d3a:	1961      	adds	r1, r4, r5
 8013d3c:	428b      	cmp	r3, r1
 8013d3e:	bf01      	itttt	eq
 8013d40:	6819      	ldreq	r1, [r3, #0]
 8013d42:	685b      	ldreq	r3, [r3, #4]
 8013d44:	1949      	addeq	r1, r1, r5
 8013d46:	6021      	streq	r1, [r4, #0]
 8013d48:	e7ed      	b.n	8013d26 <_free_r+0x22>
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	b10b      	cbz	r3, 8013d54 <_free_r+0x50>
 8013d50:	42a3      	cmp	r3, r4
 8013d52:	d9fa      	bls.n	8013d4a <_free_r+0x46>
 8013d54:	6811      	ldr	r1, [r2, #0]
 8013d56:	1855      	adds	r5, r2, r1
 8013d58:	42a5      	cmp	r5, r4
 8013d5a:	d10b      	bne.n	8013d74 <_free_r+0x70>
 8013d5c:	6824      	ldr	r4, [r4, #0]
 8013d5e:	4421      	add	r1, r4
 8013d60:	1854      	adds	r4, r2, r1
 8013d62:	42a3      	cmp	r3, r4
 8013d64:	6011      	str	r1, [r2, #0]
 8013d66:	d1e0      	bne.n	8013d2a <_free_r+0x26>
 8013d68:	681c      	ldr	r4, [r3, #0]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	6053      	str	r3, [r2, #4]
 8013d6e:	4421      	add	r1, r4
 8013d70:	6011      	str	r1, [r2, #0]
 8013d72:	e7da      	b.n	8013d2a <_free_r+0x26>
 8013d74:	d902      	bls.n	8013d7c <_free_r+0x78>
 8013d76:	230c      	movs	r3, #12
 8013d78:	6003      	str	r3, [r0, #0]
 8013d7a:	e7d6      	b.n	8013d2a <_free_r+0x26>
 8013d7c:	6825      	ldr	r5, [r4, #0]
 8013d7e:	1961      	adds	r1, r4, r5
 8013d80:	428b      	cmp	r3, r1
 8013d82:	bf04      	itt	eq
 8013d84:	6819      	ldreq	r1, [r3, #0]
 8013d86:	685b      	ldreq	r3, [r3, #4]
 8013d88:	6063      	str	r3, [r4, #4]
 8013d8a:	bf04      	itt	eq
 8013d8c:	1949      	addeq	r1, r1, r5
 8013d8e:	6021      	streq	r1, [r4, #0]
 8013d90:	6054      	str	r4, [r2, #4]
 8013d92:	e7ca      	b.n	8013d2a <_free_r+0x26>
 8013d94:	b003      	add	sp, #12
 8013d96:	bd30      	pop	{r4, r5, pc}
 8013d98:	20011c20 	.word	0x20011c20

08013d9c <sbrk_aligned>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	4e0e      	ldr	r6, [pc, #56]	; (8013dd8 <sbrk_aligned+0x3c>)
 8013da0:	460c      	mov	r4, r1
 8013da2:	6831      	ldr	r1, [r6, #0]
 8013da4:	4605      	mov	r5, r0
 8013da6:	b911      	cbnz	r1, 8013dae <sbrk_aligned+0x12>
 8013da8:	f000 f88c 	bl	8013ec4 <_sbrk_r>
 8013dac:	6030      	str	r0, [r6, #0]
 8013dae:	4621      	mov	r1, r4
 8013db0:	4628      	mov	r0, r5
 8013db2:	f000 f887 	bl	8013ec4 <_sbrk_r>
 8013db6:	1c43      	adds	r3, r0, #1
 8013db8:	d00a      	beq.n	8013dd0 <sbrk_aligned+0x34>
 8013dba:	1cc4      	adds	r4, r0, #3
 8013dbc:	f024 0403 	bic.w	r4, r4, #3
 8013dc0:	42a0      	cmp	r0, r4
 8013dc2:	d007      	beq.n	8013dd4 <sbrk_aligned+0x38>
 8013dc4:	1a21      	subs	r1, r4, r0
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	f000 f87c 	bl	8013ec4 <_sbrk_r>
 8013dcc:	3001      	adds	r0, #1
 8013dce:	d101      	bne.n	8013dd4 <sbrk_aligned+0x38>
 8013dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	bd70      	pop	{r4, r5, r6, pc}
 8013dd8:	20011c24 	.word	0x20011c24

08013ddc <_malloc_r>:
 8013ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de0:	1ccd      	adds	r5, r1, #3
 8013de2:	f025 0503 	bic.w	r5, r5, #3
 8013de6:	3508      	adds	r5, #8
 8013de8:	2d0c      	cmp	r5, #12
 8013dea:	bf38      	it	cc
 8013dec:	250c      	movcc	r5, #12
 8013dee:	2d00      	cmp	r5, #0
 8013df0:	4607      	mov	r7, r0
 8013df2:	db01      	blt.n	8013df8 <_malloc_r+0x1c>
 8013df4:	42a9      	cmp	r1, r5
 8013df6:	d905      	bls.n	8013e04 <_malloc_r+0x28>
 8013df8:	230c      	movs	r3, #12
 8013dfa:	603b      	str	r3, [r7, #0]
 8013dfc:	2600      	movs	r6, #0
 8013dfe:	4630      	mov	r0, r6
 8013e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e04:	4e2e      	ldr	r6, [pc, #184]	; (8013ec0 <_malloc_r+0xe4>)
 8013e06:	f000 f88d 	bl	8013f24 <__malloc_lock>
 8013e0a:	6833      	ldr	r3, [r6, #0]
 8013e0c:	461c      	mov	r4, r3
 8013e0e:	bb34      	cbnz	r4, 8013e5e <_malloc_r+0x82>
 8013e10:	4629      	mov	r1, r5
 8013e12:	4638      	mov	r0, r7
 8013e14:	f7ff ffc2 	bl	8013d9c <sbrk_aligned>
 8013e18:	1c43      	adds	r3, r0, #1
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	d14d      	bne.n	8013eba <_malloc_r+0xde>
 8013e1e:	6834      	ldr	r4, [r6, #0]
 8013e20:	4626      	mov	r6, r4
 8013e22:	2e00      	cmp	r6, #0
 8013e24:	d140      	bne.n	8013ea8 <_malloc_r+0xcc>
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	4631      	mov	r1, r6
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	eb04 0803 	add.w	r8, r4, r3
 8013e30:	f000 f848 	bl	8013ec4 <_sbrk_r>
 8013e34:	4580      	cmp	r8, r0
 8013e36:	d13a      	bne.n	8013eae <_malloc_r+0xd2>
 8013e38:	6821      	ldr	r1, [r4, #0]
 8013e3a:	3503      	adds	r5, #3
 8013e3c:	1a6d      	subs	r5, r5, r1
 8013e3e:	f025 0503 	bic.w	r5, r5, #3
 8013e42:	3508      	adds	r5, #8
 8013e44:	2d0c      	cmp	r5, #12
 8013e46:	bf38      	it	cc
 8013e48:	250c      	movcc	r5, #12
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7ff ffa5 	bl	8013d9c <sbrk_aligned>
 8013e52:	3001      	adds	r0, #1
 8013e54:	d02b      	beq.n	8013eae <_malloc_r+0xd2>
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	442b      	add	r3, r5
 8013e5a:	6023      	str	r3, [r4, #0]
 8013e5c:	e00e      	b.n	8013e7c <_malloc_r+0xa0>
 8013e5e:	6822      	ldr	r2, [r4, #0]
 8013e60:	1b52      	subs	r2, r2, r5
 8013e62:	d41e      	bmi.n	8013ea2 <_malloc_r+0xc6>
 8013e64:	2a0b      	cmp	r2, #11
 8013e66:	d916      	bls.n	8013e96 <_malloc_r+0xba>
 8013e68:	1961      	adds	r1, r4, r5
 8013e6a:	42a3      	cmp	r3, r4
 8013e6c:	6025      	str	r5, [r4, #0]
 8013e6e:	bf18      	it	ne
 8013e70:	6059      	strne	r1, [r3, #4]
 8013e72:	6863      	ldr	r3, [r4, #4]
 8013e74:	bf08      	it	eq
 8013e76:	6031      	streq	r1, [r6, #0]
 8013e78:	5162      	str	r2, [r4, r5]
 8013e7a:	604b      	str	r3, [r1, #4]
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	f104 060b 	add.w	r6, r4, #11
 8013e82:	f000 f855 	bl	8013f30 <__malloc_unlock>
 8013e86:	f026 0607 	bic.w	r6, r6, #7
 8013e8a:	1d23      	adds	r3, r4, #4
 8013e8c:	1af2      	subs	r2, r6, r3
 8013e8e:	d0b6      	beq.n	8013dfe <_malloc_r+0x22>
 8013e90:	1b9b      	subs	r3, r3, r6
 8013e92:	50a3      	str	r3, [r4, r2]
 8013e94:	e7b3      	b.n	8013dfe <_malloc_r+0x22>
 8013e96:	6862      	ldr	r2, [r4, #4]
 8013e98:	42a3      	cmp	r3, r4
 8013e9a:	bf0c      	ite	eq
 8013e9c:	6032      	streq	r2, [r6, #0]
 8013e9e:	605a      	strne	r2, [r3, #4]
 8013ea0:	e7ec      	b.n	8013e7c <_malloc_r+0xa0>
 8013ea2:	4623      	mov	r3, r4
 8013ea4:	6864      	ldr	r4, [r4, #4]
 8013ea6:	e7b2      	b.n	8013e0e <_malloc_r+0x32>
 8013ea8:	4634      	mov	r4, r6
 8013eaa:	6876      	ldr	r6, [r6, #4]
 8013eac:	e7b9      	b.n	8013e22 <_malloc_r+0x46>
 8013eae:	230c      	movs	r3, #12
 8013eb0:	603b      	str	r3, [r7, #0]
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f000 f83c 	bl	8013f30 <__malloc_unlock>
 8013eb8:	e7a1      	b.n	8013dfe <_malloc_r+0x22>
 8013eba:	6025      	str	r5, [r4, #0]
 8013ebc:	e7de      	b.n	8013e7c <_malloc_r+0xa0>
 8013ebe:	bf00      	nop
 8013ec0:	20011c20 	.word	0x20011c20

08013ec4 <_sbrk_r>:
 8013ec4:	b538      	push	{r3, r4, r5, lr}
 8013ec6:	4d06      	ldr	r5, [pc, #24]	; (8013ee0 <_sbrk_r+0x1c>)
 8013ec8:	2300      	movs	r3, #0
 8013eca:	4604      	mov	r4, r0
 8013ecc:	4608      	mov	r0, r1
 8013ece:	602b      	str	r3, [r5, #0]
 8013ed0:	f7f1 f91c 	bl	800510c <_sbrk>
 8013ed4:	1c43      	adds	r3, r0, #1
 8013ed6:	d102      	bne.n	8013ede <_sbrk_r+0x1a>
 8013ed8:	682b      	ldr	r3, [r5, #0]
 8013eda:	b103      	cbz	r3, 8013ede <_sbrk_r+0x1a>
 8013edc:	6023      	str	r3, [r4, #0]
 8013ede:	bd38      	pop	{r3, r4, r5, pc}
 8013ee0:	20011c28 	.word	0x20011c28

08013ee4 <siprintf>:
 8013ee4:	b40e      	push	{r1, r2, r3}
 8013ee6:	b500      	push	{lr}
 8013ee8:	b09c      	sub	sp, #112	; 0x70
 8013eea:	ab1d      	add	r3, sp, #116	; 0x74
 8013eec:	9002      	str	r0, [sp, #8]
 8013eee:	9006      	str	r0, [sp, #24]
 8013ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ef4:	4809      	ldr	r0, [pc, #36]	; (8013f1c <siprintf+0x38>)
 8013ef6:	9107      	str	r1, [sp, #28]
 8013ef8:	9104      	str	r1, [sp, #16]
 8013efa:	4909      	ldr	r1, [pc, #36]	; (8013f20 <siprintf+0x3c>)
 8013efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f00:	9105      	str	r1, [sp, #20]
 8013f02:	6800      	ldr	r0, [r0, #0]
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	a902      	add	r1, sp, #8
 8013f08:	f000 f874 	bl	8013ff4 <_svfiprintf_r>
 8013f0c:	9b02      	ldr	r3, [sp, #8]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	701a      	strb	r2, [r3, #0]
 8013f12:	b01c      	add	sp, #112	; 0x70
 8013f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f18:	b003      	add	sp, #12
 8013f1a:	4770      	bx	lr
 8013f1c:	200000d0 	.word	0x200000d0
 8013f20:	ffff0208 	.word	0xffff0208

08013f24 <__malloc_lock>:
 8013f24:	4801      	ldr	r0, [pc, #4]	; (8013f2c <__malloc_lock+0x8>)
 8013f26:	f000 baf9 	b.w	801451c <__retarget_lock_acquire_recursive>
 8013f2a:	bf00      	nop
 8013f2c:	20011c2c 	.word	0x20011c2c

08013f30 <__malloc_unlock>:
 8013f30:	4801      	ldr	r0, [pc, #4]	; (8013f38 <__malloc_unlock+0x8>)
 8013f32:	f000 baf4 	b.w	801451e <__retarget_lock_release_recursive>
 8013f36:	bf00      	nop
 8013f38:	20011c2c 	.word	0x20011c2c

08013f3c <__ssputs_r>:
 8013f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f40:	688e      	ldr	r6, [r1, #8]
 8013f42:	429e      	cmp	r6, r3
 8013f44:	4682      	mov	sl, r0
 8013f46:	460c      	mov	r4, r1
 8013f48:	4690      	mov	r8, r2
 8013f4a:	461f      	mov	r7, r3
 8013f4c:	d838      	bhi.n	8013fc0 <__ssputs_r+0x84>
 8013f4e:	898a      	ldrh	r2, [r1, #12]
 8013f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f54:	d032      	beq.n	8013fbc <__ssputs_r+0x80>
 8013f56:	6825      	ldr	r5, [r4, #0]
 8013f58:	6909      	ldr	r1, [r1, #16]
 8013f5a:	eba5 0901 	sub.w	r9, r5, r1
 8013f5e:	6965      	ldr	r5, [r4, #20]
 8013f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f68:	3301      	adds	r3, #1
 8013f6a:	444b      	add	r3, r9
 8013f6c:	106d      	asrs	r5, r5, #1
 8013f6e:	429d      	cmp	r5, r3
 8013f70:	bf38      	it	cc
 8013f72:	461d      	movcc	r5, r3
 8013f74:	0553      	lsls	r3, r2, #21
 8013f76:	d531      	bpl.n	8013fdc <__ssputs_r+0xa0>
 8013f78:	4629      	mov	r1, r5
 8013f7a:	f7ff ff2f 	bl	8013ddc <_malloc_r>
 8013f7e:	4606      	mov	r6, r0
 8013f80:	b950      	cbnz	r0, 8013f98 <__ssputs_r+0x5c>
 8013f82:	230c      	movs	r3, #12
 8013f84:	f8ca 3000 	str.w	r3, [sl]
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f8e:	81a3      	strh	r3, [r4, #12]
 8013f90:	f04f 30ff 	mov.w	r0, #4294967295
 8013f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f98:	6921      	ldr	r1, [r4, #16]
 8013f9a:	464a      	mov	r2, r9
 8013f9c:	f7ff fe9c 	bl	8013cd8 <memcpy>
 8013fa0:	89a3      	ldrh	r3, [r4, #12]
 8013fa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013faa:	81a3      	strh	r3, [r4, #12]
 8013fac:	6126      	str	r6, [r4, #16]
 8013fae:	6165      	str	r5, [r4, #20]
 8013fb0:	444e      	add	r6, r9
 8013fb2:	eba5 0509 	sub.w	r5, r5, r9
 8013fb6:	6026      	str	r6, [r4, #0]
 8013fb8:	60a5      	str	r5, [r4, #8]
 8013fba:	463e      	mov	r6, r7
 8013fbc:	42be      	cmp	r6, r7
 8013fbe:	d900      	bls.n	8013fc2 <__ssputs_r+0x86>
 8013fc0:	463e      	mov	r6, r7
 8013fc2:	6820      	ldr	r0, [r4, #0]
 8013fc4:	4632      	mov	r2, r6
 8013fc6:	4641      	mov	r1, r8
 8013fc8:	f000 faaa 	bl	8014520 <memmove>
 8013fcc:	68a3      	ldr	r3, [r4, #8]
 8013fce:	1b9b      	subs	r3, r3, r6
 8013fd0:	60a3      	str	r3, [r4, #8]
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	4433      	add	r3, r6
 8013fd6:	6023      	str	r3, [r4, #0]
 8013fd8:	2000      	movs	r0, #0
 8013fda:	e7db      	b.n	8013f94 <__ssputs_r+0x58>
 8013fdc:	462a      	mov	r2, r5
 8013fde:	f000 fab9 	bl	8014554 <_realloc_r>
 8013fe2:	4606      	mov	r6, r0
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	d1e1      	bne.n	8013fac <__ssputs_r+0x70>
 8013fe8:	6921      	ldr	r1, [r4, #16]
 8013fea:	4650      	mov	r0, sl
 8013fec:	f7ff fe8a 	bl	8013d04 <_free_r>
 8013ff0:	e7c7      	b.n	8013f82 <__ssputs_r+0x46>
	...

08013ff4 <_svfiprintf_r>:
 8013ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff8:	4698      	mov	r8, r3
 8013ffa:	898b      	ldrh	r3, [r1, #12]
 8013ffc:	061b      	lsls	r3, r3, #24
 8013ffe:	b09d      	sub	sp, #116	; 0x74
 8014000:	4607      	mov	r7, r0
 8014002:	460d      	mov	r5, r1
 8014004:	4614      	mov	r4, r2
 8014006:	d50e      	bpl.n	8014026 <_svfiprintf_r+0x32>
 8014008:	690b      	ldr	r3, [r1, #16]
 801400a:	b963      	cbnz	r3, 8014026 <_svfiprintf_r+0x32>
 801400c:	2140      	movs	r1, #64	; 0x40
 801400e:	f7ff fee5 	bl	8013ddc <_malloc_r>
 8014012:	6028      	str	r0, [r5, #0]
 8014014:	6128      	str	r0, [r5, #16]
 8014016:	b920      	cbnz	r0, 8014022 <_svfiprintf_r+0x2e>
 8014018:	230c      	movs	r3, #12
 801401a:	603b      	str	r3, [r7, #0]
 801401c:	f04f 30ff 	mov.w	r0, #4294967295
 8014020:	e0d1      	b.n	80141c6 <_svfiprintf_r+0x1d2>
 8014022:	2340      	movs	r3, #64	; 0x40
 8014024:	616b      	str	r3, [r5, #20]
 8014026:	2300      	movs	r3, #0
 8014028:	9309      	str	r3, [sp, #36]	; 0x24
 801402a:	2320      	movs	r3, #32
 801402c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014030:	f8cd 800c 	str.w	r8, [sp, #12]
 8014034:	2330      	movs	r3, #48	; 0x30
 8014036:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80141e0 <_svfiprintf_r+0x1ec>
 801403a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801403e:	f04f 0901 	mov.w	r9, #1
 8014042:	4623      	mov	r3, r4
 8014044:	469a      	mov	sl, r3
 8014046:	f813 2b01 	ldrb.w	r2, [r3], #1
 801404a:	b10a      	cbz	r2, 8014050 <_svfiprintf_r+0x5c>
 801404c:	2a25      	cmp	r2, #37	; 0x25
 801404e:	d1f9      	bne.n	8014044 <_svfiprintf_r+0x50>
 8014050:	ebba 0b04 	subs.w	fp, sl, r4
 8014054:	d00b      	beq.n	801406e <_svfiprintf_r+0x7a>
 8014056:	465b      	mov	r3, fp
 8014058:	4622      	mov	r2, r4
 801405a:	4629      	mov	r1, r5
 801405c:	4638      	mov	r0, r7
 801405e:	f7ff ff6d 	bl	8013f3c <__ssputs_r>
 8014062:	3001      	adds	r0, #1
 8014064:	f000 80aa 	beq.w	80141bc <_svfiprintf_r+0x1c8>
 8014068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801406a:	445a      	add	r2, fp
 801406c:	9209      	str	r2, [sp, #36]	; 0x24
 801406e:	f89a 3000 	ldrb.w	r3, [sl]
 8014072:	2b00      	cmp	r3, #0
 8014074:	f000 80a2 	beq.w	80141bc <_svfiprintf_r+0x1c8>
 8014078:	2300      	movs	r3, #0
 801407a:	f04f 32ff 	mov.w	r2, #4294967295
 801407e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014082:	f10a 0a01 	add.w	sl, sl, #1
 8014086:	9304      	str	r3, [sp, #16]
 8014088:	9307      	str	r3, [sp, #28]
 801408a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801408e:	931a      	str	r3, [sp, #104]	; 0x68
 8014090:	4654      	mov	r4, sl
 8014092:	2205      	movs	r2, #5
 8014094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014098:	4851      	ldr	r0, [pc, #324]	; (80141e0 <_svfiprintf_r+0x1ec>)
 801409a:	f7ec f8b1 	bl	8000200 <memchr>
 801409e:	9a04      	ldr	r2, [sp, #16]
 80140a0:	b9d8      	cbnz	r0, 80140da <_svfiprintf_r+0xe6>
 80140a2:	06d0      	lsls	r0, r2, #27
 80140a4:	bf44      	itt	mi
 80140a6:	2320      	movmi	r3, #32
 80140a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140ac:	0711      	lsls	r1, r2, #28
 80140ae:	bf44      	itt	mi
 80140b0:	232b      	movmi	r3, #43	; 0x2b
 80140b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140b6:	f89a 3000 	ldrb.w	r3, [sl]
 80140ba:	2b2a      	cmp	r3, #42	; 0x2a
 80140bc:	d015      	beq.n	80140ea <_svfiprintf_r+0xf6>
 80140be:	9a07      	ldr	r2, [sp, #28]
 80140c0:	4654      	mov	r4, sl
 80140c2:	2000      	movs	r0, #0
 80140c4:	f04f 0c0a 	mov.w	ip, #10
 80140c8:	4621      	mov	r1, r4
 80140ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140ce:	3b30      	subs	r3, #48	; 0x30
 80140d0:	2b09      	cmp	r3, #9
 80140d2:	d94e      	bls.n	8014172 <_svfiprintf_r+0x17e>
 80140d4:	b1b0      	cbz	r0, 8014104 <_svfiprintf_r+0x110>
 80140d6:	9207      	str	r2, [sp, #28]
 80140d8:	e014      	b.n	8014104 <_svfiprintf_r+0x110>
 80140da:	eba0 0308 	sub.w	r3, r0, r8
 80140de:	fa09 f303 	lsl.w	r3, r9, r3
 80140e2:	4313      	orrs	r3, r2
 80140e4:	9304      	str	r3, [sp, #16]
 80140e6:	46a2      	mov	sl, r4
 80140e8:	e7d2      	b.n	8014090 <_svfiprintf_r+0x9c>
 80140ea:	9b03      	ldr	r3, [sp, #12]
 80140ec:	1d19      	adds	r1, r3, #4
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	9103      	str	r1, [sp, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	bfbb      	ittet	lt
 80140f6:	425b      	neglt	r3, r3
 80140f8:	f042 0202 	orrlt.w	r2, r2, #2
 80140fc:	9307      	strge	r3, [sp, #28]
 80140fe:	9307      	strlt	r3, [sp, #28]
 8014100:	bfb8      	it	lt
 8014102:	9204      	strlt	r2, [sp, #16]
 8014104:	7823      	ldrb	r3, [r4, #0]
 8014106:	2b2e      	cmp	r3, #46	; 0x2e
 8014108:	d10c      	bne.n	8014124 <_svfiprintf_r+0x130>
 801410a:	7863      	ldrb	r3, [r4, #1]
 801410c:	2b2a      	cmp	r3, #42	; 0x2a
 801410e:	d135      	bne.n	801417c <_svfiprintf_r+0x188>
 8014110:	9b03      	ldr	r3, [sp, #12]
 8014112:	1d1a      	adds	r2, r3, #4
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	9203      	str	r2, [sp, #12]
 8014118:	2b00      	cmp	r3, #0
 801411a:	bfb8      	it	lt
 801411c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014120:	3402      	adds	r4, #2
 8014122:	9305      	str	r3, [sp, #20]
 8014124:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80141f0 <_svfiprintf_r+0x1fc>
 8014128:	7821      	ldrb	r1, [r4, #0]
 801412a:	2203      	movs	r2, #3
 801412c:	4650      	mov	r0, sl
 801412e:	f7ec f867 	bl	8000200 <memchr>
 8014132:	b140      	cbz	r0, 8014146 <_svfiprintf_r+0x152>
 8014134:	2340      	movs	r3, #64	; 0x40
 8014136:	eba0 000a 	sub.w	r0, r0, sl
 801413a:	fa03 f000 	lsl.w	r0, r3, r0
 801413e:	9b04      	ldr	r3, [sp, #16]
 8014140:	4303      	orrs	r3, r0
 8014142:	3401      	adds	r4, #1
 8014144:	9304      	str	r3, [sp, #16]
 8014146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801414a:	4826      	ldr	r0, [pc, #152]	; (80141e4 <_svfiprintf_r+0x1f0>)
 801414c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014150:	2206      	movs	r2, #6
 8014152:	f7ec f855 	bl	8000200 <memchr>
 8014156:	2800      	cmp	r0, #0
 8014158:	d038      	beq.n	80141cc <_svfiprintf_r+0x1d8>
 801415a:	4b23      	ldr	r3, [pc, #140]	; (80141e8 <_svfiprintf_r+0x1f4>)
 801415c:	bb1b      	cbnz	r3, 80141a6 <_svfiprintf_r+0x1b2>
 801415e:	9b03      	ldr	r3, [sp, #12]
 8014160:	3307      	adds	r3, #7
 8014162:	f023 0307 	bic.w	r3, r3, #7
 8014166:	3308      	adds	r3, #8
 8014168:	9303      	str	r3, [sp, #12]
 801416a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801416c:	4433      	add	r3, r6
 801416e:	9309      	str	r3, [sp, #36]	; 0x24
 8014170:	e767      	b.n	8014042 <_svfiprintf_r+0x4e>
 8014172:	fb0c 3202 	mla	r2, ip, r2, r3
 8014176:	460c      	mov	r4, r1
 8014178:	2001      	movs	r0, #1
 801417a:	e7a5      	b.n	80140c8 <_svfiprintf_r+0xd4>
 801417c:	2300      	movs	r3, #0
 801417e:	3401      	adds	r4, #1
 8014180:	9305      	str	r3, [sp, #20]
 8014182:	4619      	mov	r1, r3
 8014184:	f04f 0c0a 	mov.w	ip, #10
 8014188:	4620      	mov	r0, r4
 801418a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801418e:	3a30      	subs	r2, #48	; 0x30
 8014190:	2a09      	cmp	r2, #9
 8014192:	d903      	bls.n	801419c <_svfiprintf_r+0x1a8>
 8014194:	2b00      	cmp	r3, #0
 8014196:	d0c5      	beq.n	8014124 <_svfiprintf_r+0x130>
 8014198:	9105      	str	r1, [sp, #20]
 801419a:	e7c3      	b.n	8014124 <_svfiprintf_r+0x130>
 801419c:	fb0c 2101 	mla	r1, ip, r1, r2
 80141a0:	4604      	mov	r4, r0
 80141a2:	2301      	movs	r3, #1
 80141a4:	e7f0      	b.n	8014188 <_svfiprintf_r+0x194>
 80141a6:	ab03      	add	r3, sp, #12
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	462a      	mov	r2, r5
 80141ac:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <_svfiprintf_r+0x1f8>)
 80141ae:	a904      	add	r1, sp, #16
 80141b0:	4638      	mov	r0, r7
 80141b2:	f3af 8000 	nop.w
 80141b6:	1c42      	adds	r2, r0, #1
 80141b8:	4606      	mov	r6, r0
 80141ba:	d1d6      	bne.n	801416a <_svfiprintf_r+0x176>
 80141bc:	89ab      	ldrh	r3, [r5, #12]
 80141be:	065b      	lsls	r3, r3, #25
 80141c0:	f53f af2c 	bmi.w	801401c <_svfiprintf_r+0x28>
 80141c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141c6:	b01d      	add	sp, #116	; 0x74
 80141c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141cc:	ab03      	add	r3, sp, #12
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	462a      	mov	r2, r5
 80141d2:	4b06      	ldr	r3, [pc, #24]	; (80141ec <_svfiprintf_r+0x1f8>)
 80141d4:	a904      	add	r1, sp, #16
 80141d6:	4638      	mov	r0, r7
 80141d8:	f000 f87a 	bl	80142d0 <_printf_i>
 80141dc:	e7eb      	b.n	80141b6 <_svfiprintf_r+0x1c2>
 80141de:	bf00      	nop
 80141e0:	080757f4 	.word	0x080757f4
 80141e4:	080757fe 	.word	0x080757fe
 80141e8:	00000000 	.word	0x00000000
 80141ec:	08013f3d 	.word	0x08013f3d
 80141f0:	080757fa 	.word	0x080757fa

080141f4 <_printf_common>:
 80141f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f8:	4616      	mov	r6, r2
 80141fa:	4699      	mov	r9, r3
 80141fc:	688a      	ldr	r2, [r1, #8]
 80141fe:	690b      	ldr	r3, [r1, #16]
 8014200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014204:	4293      	cmp	r3, r2
 8014206:	bfb8      	it	lt
 8014208:	4613      	movlt	r3, r2
 801420a:	6033      	str	r3, [r6, #0]
 801420c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014210:	4607      	mov	r7, r0
 8014212:	460c      	mov	r4, r1
 8014214:	b10a      	cbz	r2, 801421a <_printf_common+0x26>
 8014216:	3301      	adds	r3, #1
 8014218:	6033      	str	r3, [r6, #0]
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	0699      	lsls	r1, r3, #26
 801421e:	bf42      	ittt	mi
 8014220:	6833      	ldrmi	r3, [r6, #0]
 8014222:	3302      	addmi	r3, #2
 8014224:	6033      	strmi	r3, [r6, #0]
 8014226:	6825      	ldr	r5, [r4, #0]
 8014228:	f015 0506 	ands.w	r5, r5, #6
 801422c:	d106      	bne.n	801423c <_printf_common+0x48>
 801422e:	f104 0a19 	add.w	sl, r4, #25
 8014232:	68e3      	ldr	r3, [r4, #12]
 8014234:	6832      	ldr	r2, [r6, #0]
 8014236:	1a9b      	subs	r3, r3, r2
 8014238:	42ab      	cmp	r3, r5
 801423a:	dc26      	bgt.n	801428a <_printf_common+0x96>
 801423c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014240:	1e13      	subs	r3, r2, #0
 8014242:	6822      	ldr	r2, [r4, #0]
 8014244:	bf18      	it	ne
 8014246:	2301      	movne	r3, #1
 8014248:	0692      	lsls	r2, r2, #26
 801424a:	d42b      	bmi.n	80142a4 <_printf_common+0xb0>
 801424c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014250:	4649      	mov	r1, r9
 8014252:	4638      	mov	r0, r7
 8014254:	47c0      	blx	r8
 8014256:	3001      	adds	r0, #1
 8014258:	d01e      	beq.n	8014298 <_printf_common+0xa4>
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	68e5      	ldr	r5, [r4, #12]
 801425e:	6832      	ldr	r2, [r6, #0]
 8014260:	f003 0306 	and.w	r3, r3, #6
 8014264:	2b04      	cmp	r3, #4
 8014266:	bf08      	it	eq
 8014268:	1aad      	subeq	r5, r5, r2
 801426a:	68a3      	ldr	r3, [r4, #8]
 801426c:	6922      	ldr	r2, [r4, #16]
 801426e:	bf0c      	ite	eq
 8014270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014274:	2500      	movne	r5, #0
 8014276:	4293      	cmp	r3, r2
 8014278:	bfc4      	itt	gt
 801427a:	1a9b      	subgt	r3, r3, r2
 801427c:	18ed      	addgt	r5, r5, r3
 801427e:	2600      	movs	r6, #0
 8014280:	341a      	adds	r4, #26
 8014282:	42b5      	cmp	r5, r6
 8014284:	d11a      	bne.n	80142bc <_printf_common+0xc8>
 8014286:	2000      	movs	r0, #0
 8014288:	e008      	b.n	801429c <_printf_common+0xa8>
 801428a:	2301      	movs	r3, #1
 801428c:	4652      	mov	r2, sl
 801428e:	4649      	mov	r1, r9
 8014290:	4638      	mov	r0, r7
 8014292:	47c0      	blx	r8
 8014294:	3001      	adds	r0, #1
 8014296:	d103      	bne.n	80142a0 <_printf_common+0xac>
 8014298:	f04f 30ff 	mov.w	r0, #4294967295
 801429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a0:	3501      	adds	r5, #1
 80142a2:	e7c6      	b.n	8014232 <_printf_common+0x3e>
 80142a4:	18e1      	adds	r1, r4, r3
 80142a6:	1c5a      	adds	r2, r3, #1
 80142a8:	2030      	movs	r0, #48	; 0x30
 80142aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142ae:	4422      	add	r2, r4
 80142b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142b8:	3302      	adds	r3, #2
 80142ba:	e7c7      	b.n	801424c <_printf_common+0x58>
 80142bc:	2301      	movs	r3, #1
 80142be:	4622      	mov	r2, r4
 80142c0:	4649      	mov	r1, r9
 80142c2:	4638      	mov	r0, r7
 80142c4:	47c0      	blx	r8
 80142c6:	3001      	adds	r0, #1
 80142c8:	d0e6      	beq.n	8014298 <_printf_common+0xa4>
 80142ca:	3601      	adds	r6, #1
 80142cc:	e7d9      	b.n	8014282 <_printf_common+0x8e>
	...

080142d0 <_printf_i>:
 80142d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	7e0f      	ldrb	r7, [r1, #24]
 80142d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80142d8:	2f78      	cmp	r7, #120	; 0x78
 80142da:	4691      	mov	r9, r2
 80142dc:	4680      	mov	r8, r0
 80142de:	460c      	mov	r4, r1
 80142e0:	469a      	mov	sl, r3
 80142e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80142e6:	d807      	bhi.n	80142f8 <_printf_i+0x28>
 80142e8:	2f62      	cmp	r7, #98	; 0x62
 80142ea:	d80a      	bhi.n	8014302 <_printf_i+0x32>
 80142ec:	2f00      	cmp	r7, #0
 80142ee:	f000 80d8 	beq.w	80144a2 <_printf_i+0x1d2>
 80142f2:	2f58      	cmp	r7, #88	; 0x58
 80142f4:	f000 80a3 	beq.w	801443e <_printf_i+0x16e>
 80142f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014300:	e03a      	b.n	8014378 <_printf_i+0xa8>
 8014302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014306:	2b15      	cmp	r3, #21
 8014308:	d8f6      	bhi.n	80142f8 <_printf_i+0x28>
 801430a:	a101      	add	r1, pc, #4	; (adr r1, 8014310 <_printf_i+0x40>)
 801430c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014310:	08014369 	.word	0x08014369
 8014314:	0801437d 	.word	0x0801437d
 8014318:	080142f9 	.word	0x080142f9
 801431c:	080142f9 	.word	0x080142f9
 8014320:	080142f9 	.word	0x080142f9
 8014324:	080142f9 	.word	0x080142f9
 8014328:	0801437d 	.word	0x0801437d
 801432c:	080142f9 	.word	0x080142f9
 8014330:	080142f9 	.word	0x080142f9
 8014334:	080142f9 	.word	0x080142f9
 8014338:	080142f9 	.word	0x080142f9
 801433c:	08014489 	.word	0x08014489
 8014340:	080143ad 	.word	0x080143ad
 8014344:	0801446b 	.word	0x0801446b
 8014348:	080142f9 	.word	0x080142f9
 801434c:	080142f9 	.word	0x080142f9
 8014350:	080144ab 	.word	0x080144ab
 8014354:	080142f9 	.word	0x080142f9
 8014358:	080143ad 	.word	0x080143ad
 801435c:	080142f9 	.word	0x080142f9
 8014360:	080142f9 	.word	0x080142f9
 8014364:	08014473 	.word	0x08014473
 8014368:	682b      	ldr	r3, [r5, #0]
 801436a:	1d1a      	adds	r2, r3, #4
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	602a      	str	r2, [r5, #0]
 8014370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014378:	2301      	movs	r3, #1
 801437a:	e0a3      	b.n	80144c4 <_printf_i+0x1f4>
 801437c:	6820      	ldr	r0, [r4, #0]
 801437e:	6829      	ldr	r1, [r5, #0]
 8014380:	0606      	lsls	r6, r0, #24
 8014382:	f101 0304 	add.w	r3, r1, #4
 8014386:	d50a      	bpl.n	801439e <_printf_i+0xce>
 8014388:	680e      	ldr	r6, [r1, #0]
 801438a:	602b      	str	r3, [r5, #0]
 801438c:	2e00      	cmp	r6, #0
 801438e:	da03      	bge.n	8014398 <_printf_i+0xc8>
 8014390:	232d      	movs	r3, #45	; 0x2d
 8014392:	4276      	negs	r6, r6
 8014394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014398:	485e      	ldr	r0, [pc, #376]	; (8014514 <_printf_i+0x244>)
 801439a:	230a      	movs	r3, #10
 801439c:	e019      	b.n	80143d2 <_printf_i+0x102>
 801439e:	680e      	ldr	r6, [r1, #0]
 80143a0:	602b      	str	r3, [r5, #0]
 80143a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80143a6:	bf18      	it	ne
 80143a8:	b236      	sxthne	r6, r6
 80143aa:	e7ef      	b.n	801438c <_printf_i+0xbc>
 80143ac:	682b      	ldr	r3, [r5, #0]
 80143ae:	6820      	ldr	r0, [r4, #0]
 80143b0:	1d19      	adds	r1, r3, #4
 80143b2:	6029      	str	r1, [r5, #0]
 80143b4:	0601      	lsls	r1, r0, #24
 80143b6:	d501      	bpl.n	80143bc <_printf_i+0xec>
 80143b8:	681e      	ldr	r6, [r3, #0]
 80143ba:	e002      	b.n	80143c2 <_printf_i+0xf2>
 80143bc:	0646      	lsls	r6, r0, #25
 80143be:	d5fb      	bpl.n	80143b8 <_printf_i+0xe8>
 80143c0:	881e      	ldrh	r6, [r3, #0]
 80143c2:	4854      	ldr	r0, [pc, #336]	; (8014514 <_printf_i+0x244>)
 80143c4:	2f6f      	cmp	r7, #111	; 0x6f
 80143c6:	bf0c      	ite	eq
 80143c8:	2308      	moveq	r3, #8
 80143ca:	230a      	movne	r3, #10
 80143cc:	2100      	movs	r1, #0
 80143ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80143d2:	6865      	ldr	r5, [r4, #4]
 80143d4:	60a5      	str	r5, [r4, #8]
 80143d6:	2d00      	cmp	r5, #0
 80143d8:	bfa2      	ittt	ge
 80143da:	6821      	ldrge	r1, [r4, #0]
 80143dc:	f021 0104 	bicge.w	r1, r1, #4
 80143e0:	6021      	strge	r1, [r4, #0]
 80143e2:	b90e      	cbnz	r6, 80143e8 <_printf_i+0x118>
 80143e4:	2d00      	cmp	r5, #0
 80143e6:	d04d      	beq.n	8014484 <_printf_i+0x1b4>
 80143e8:	4615      	mov	r5, r2
 80143ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80143ee:	fb03 6711 	mls	r7, r3, r1, r6
 80143f2:	5dc7      	ldrb	r7, [r0, r7]
 80143f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80143f8:	4637      	mov	r7, r6
 80143fa:	42bb      	cmp	r3, r7
 80143fc:	460e      	mov	r6, r1
 80143fe:	d9f4      	bls.n	80143ea <_printf_i+0x11a>
 8014400:	2b08      	cmp	r3, #8
 8014402:	d10b      	bne.n	801441c <_printf_i+0x14c>
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	07de      	lsls	r6, r3, #31
 8014408:	d508      	bpl.n	801441c <_printf_i+0x14c>
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	6861      	ldr	r1, [r4, #4]
 801440e:	4299      	cmp	r1, r3
 8014410:	bfde      	ittt	le
 8014412:	2330      	movle	r3, #48	; 0x30
 8014414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014418:	f105 35ff 	addle.w	r5, r5, #4294967295
 801441c:	1b52      	subs	r2, r2, r5
 801441e:	6122      	str	r2, [r4, #16]
 8014420:	f8cd a000 	str.w	sl, [sp]
 8014424:	464b      	mov	r3, r9
 8014426:	aa03      	add	r2, sp, #12
 8014428:	4621      	mov	r1, r4
 801442a:	4640      	mov	r0, r8
 801442c:	f7ff fee2 	bl	80141f4 <_printf_common>
 8014430:	3001      	adds	r0, #1
 8014432:	d14c      	bne.n	80144ce <_printf_i+0x1fe>
 8014434:	f04f 30ff 	mov.w	r0, #4294967295
 8014438:	b004      	add	sp, #16
 801443a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443e:	4835      	ldr	r0, [pc, #212]	; (8014514 <_printf_i+0x244>)
 8014440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014444:	6829      	ldr	r1, [r5, #0]
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	f851 6b04 	ldr.w	r6, [r1], #4
 801444c:	6029      	str	r1, [r5, #0]
 801444e:	061d      	lsls	r5, r3, #24
 8014450:	d514      	bpl.n	801447c <_printf_i+0x1ac>
 8014452:	07df      	lsls	r7, r3, #31
 8014454:	bf44      	itt	mi
 8014456:	f043 0320 	orrmi.w	r3, r3, #32
 801445a:	6023      	strmi	r3, [r4, #0]
 801445c:	b91e      	cbnz	r6, 8014466 <_printf_i+0x196>
 801445e:	6823      	ldr	r3, [r4, #0]
 8014460:	f023 0320 	bic.w	r3, r3, #32
 8014464:	6023      	str	r3, [r4, #0]
 8014466:	2310      	movs	r3, #16
 8014468:	e7b0      	b.n	80143cc <_printf_i+0xfc>
 801446a:	6823      	ldr	r3, [r4, #0]
 801446c:	f043 0320 	orr.w	r3, r3, #32
 8014470:	6023      	str	r3, [r4, #0]
 8014472:	2378      	movs	r3, #120	; 0x78
 8014474:	4828      	ldr	r0, [pc, #160]	; (8014518 <_printf_i+0x248>)
 8014476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801447a:	e7e3      	b.n	8014444 <_printf_i+0x174>
 801447c:	0659      	lsls	r1, r3, #25
 801447e:	bf48      	it	mi
 8014480:	b2b6      	uxthmi	r6, r6
 8014482:	e7e6      	b.n	8014452 <_printf_i+0x182>
 8014484:	4615      	mov	r5, r2
 8014486:	e7bb      	b.n	8014400 <_printf_i+0x130>
 8014488:	682b      	ldr	r3, [r5, #0]
 801448a:	6826      	ldr	r6, [r4, #0]
 801448c:	6961      	ldr	r1, [r4, #20]
 801448e:	1d18      	adds	r0, r3, #4
 8014490:	6028      	str	r0, [r5, #0]
 8014492:	0635      	lsls	r5, r6, #24
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	d501      	bpl.n	801449c <_printf_i+0x1cc>
 8014498:	6019      	str	r1, [r3, #0]
 801449a:	e002      	b.n	80144a2 <_printf_i+0x1d2>
 801449c:	0670      	lsls	r0, r6, #25
 801449e:	d5fb      	bpl.n	8014498 <_printf_i+0x1c8>
 80144a0:	8019      	strh	r1, [r3, #0]
 80144a2:	2300      	movs	r3, #0
 80144a4:	6123      	str	r3, [r4, #16]
 80144a6:	4615      	mov	r5, r2
 80144a8:	e7ba      	b.n	8014420 <_printf_i+0x150>
 80144aa:	682b      	ldr	r3, [r5, #0]
 80144ac:	1d1a      	adds	r2, r3, #4
 80144ae:	602a      	str	r2, [r5, #0]
 80144b0:	681d      	ldr	r5, [r3, #0]
 80144b2:	6862      	ldr	r2, [r4, #4]
 80144b4:	2100      	movs	r1, #0
 80144b6:	4628      	mov	r0, r5
 80144b8:	f7eb fea2 	bl	8000200 <memchr>
 80144bc:	b108      	cbz	r0, 80144c2 <_printf_i+0x1f2>
 80144be:	1b40      	subs	r0, r0, r5
 80144c0:	6060      	str	r0, [r4, #4]
 80144c2:	6863      	ldr	r3, [r4, #4]
 80144c4:	6123      	str	r3, [r4, #16]
 80144c6:	2300      	movs	r3, #0
 80144c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144cc:	e7a8      	b.n	8014420 <_printf_i+0x150>
 80144ce:	6923      	ldr	r3, [r4, #16]
 80144d0:	462a      	mov	r2, r5
 80144d2:	4649      	mov	r1, r9
 80144d4:	4640      	mov	r0, r8
 80144d6:	47d0      	blx	sl
 80144d8:	3001      	adds	r0, #1
 80144da:	d0ab      	beq.n	8014434 <_printf_i+0x164>
 80144dc:	6823      	ldr	r3, [r4, #0]
 80144de:	079b      	lsls	r3, r3, #30
 80144e0:	d413      	bmi.n	801450a <_printf_i+0x23a>
 80144e2:	68e0      	ldr	r0, [r4, #12]
 80144e4:	9b03      	ldr	r3, [sp, #12]
 80144e6:	4298      	cmp	r0, r3
 80144e8:	bfb8      	it	lt
 80144ea:	4618      	movlt	r0, r3
 80144ec:	e7a4      	b.n	8014438 <_printf_i+0x168>
 80144ee:	2301      	movs	r3, #1
 80144f0:	4632      	mov	r2, r6
 80144f2:	4649      	mov	r1, r9
 80144f4:	4640      	mov	r0, r8
 80144f6:	47d0      	blx	sl
 80144f8:	3001      	adds	r0, #1
 80144fa:	d09b      	beq.n	8014434 <_printf_i+0x164>
 80144fc:	3501      	adds	r5, #1
 80144fe:	68e3      	ldr	r3, [r4, #12]
 8014500:	9903      	ldr	r1, [sp, #12]
 8014502:	1a5b      	subs	r3, r3, r1
 8014504:	42ab      	cmp	r3, r5
 8014506:	dcf2      	bgt.n	80144ee <_printf_i+0x21e>
 8014508:	e7eb      	b.n	80144e2 <_printf_i+0x212>
 801450a:	2500      	movs	r5, #0
 801450c:	f104 0619 	add.w	r6, r4, #25
 8014510:	e7f5      	b.n	80144fe <_printf_i+0x22e>
 8014512:	bf00      	nop
 8014514:	08075805 	.word	0x08075805
 8014518:	08075816 	.word	0x08075816

0801451c <__retarget_lock_acquire_recursive>:
 801451c:	4770      	bx	lr

0801451e <__retarget_lock_release_recursive>:
 801451e:	4770      	bx	lr

08014520 <memmove>:
 8014520:	4288      	cmp	r0, r1
 8014522:	b510      	push	{r4, lr}
 8014524:	eb01 0402 	add.w	r4, r1, r2
 8014528:	d902      	bls.n	8014530 <memmove+0x10>
 801452a:	4284      	cmp	r4, r0
 801452c:	4623      	mov	r3, r4
 801452e:	d807      	bhi.n	8014540 <memmove+0x20>
 8014530:	1e43      	subs	r3, r0, #1
 8014532:	42a1      	cmp	r1, r4
 8014534:	d008      	beq.n	8014548 <memmove+0x28>
 8014536:	f811 2b01 	ldrb.w	r2, [r1], #1
 801453a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801453e:	e7f8      	b.n	8014532 <memmove+0x12>
 8014540:	4402      	add	r2, r0
 8014542:	4601      	mov	r1, r0
 8014544:	428a      	cmp	r2, r1
 8014546:	d100      	bne.n	801454a <memmove+0x2a>
 8014548:	bd10      	pop	{r4, pc}
 801454a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801454e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014552:	e7f7      	b.n	8014544 <memmove+0x24>

08014554 <_realloc_r>:
 8014554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014558:	4680      	mov	r8, r0
 801455a:	4614      	mov	r4, r2
 801455c:	460e      	mov	r6, r1
 801455e:	b921      	cbnz	r1, 801456a <_realloc_r+0x16>
 8014560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014564:	4611      	mov	r1, r2
 8014566:	f7ff bc39 	b.w	8013ddc <_malloc_r>
 801456a:	b92a      	cbnz	r2, 8014578 <_realloc_r+0x24>
 801456c:	f7ff fbca 	bl	8013d04 <_free_r>
 8014570:	4625      	mov	r5, r4
 8014572:	4628      	mov	r0, r5
 8014574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014578:	f000 f81b 	bl	80145b2 <_malloc_usable_size_r>
 801457c:	4284      	cmp	r4, r0
 801457e:	4607      	mov	r7, r0
 8014580:	d802      	bhi.n	8014588 <_realloc_r+0x34>
 8014582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014586:	d812      	bhi.n	80145ae <_realloc_r+0x5a>
 8014588:	4621      	mov	r1, r4
 801458a:	4640      	mov	r0, r8
 801458c:	f7ff fc26 	bl	8013ddc <_malloc_r>
 8014590:	4605      	mov	r5, r0
 8014592:	2800      	cmp	r0, #0
 8014594:	d0ed      	beq.n	8014572 <_realloc_r+0x1e>
 8014596:	42bc      	cmp	r4, r7
 8014598:	4622      	mov	r2, r4
 801459a:	4631      	mov	r1, r6
 801459c:	bf28      	it	cs
 801459e:	463a      	movcs	r2, r7
 80145a0:	f7ff fb9a 	bl	8013cd8 <memcpy>
 80145a4:	4631      	mov	r1, r6
 80145a6:	4640      	mov	r0, r8
 80145a8:	f7ff fbac 	bl	8013d04 <_free_r>
 80145ac:	e7e1      	b.n	8014572 <_realloc_r+0x1e>
 80145ae:	4635      	mov	r5, r6
 80145b0:	e7df      	b.n	8014572 <_realloc_r+0x1e>

080145b2 <_malloc_usable_size_r>:
 80145b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145b6:	1f18      	subs	r0, r3, #4
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	bfbc      	itt	lt
 80145bc:	580b      	ldrlt	r3, [r1, r0]
 80145be:	18c0      	addlt	r0, r0, r3
 80145c0:	4770      	bx	lr
	...

080145c4 <_init>:
 80145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145c6:	bf00      	nop
 80145c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ca:	bc08      	pop	{r3}
 80145cc:	469e      	mov	lr, r3
 80145ce:	4770      	bx	lr

080145d0 <_fini>:
 80145d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d2:	bf00      	nop
 80145d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145d6:	bc08      	pop	{r3}
 80145d8:	469e      	mov	lr, r3
 80145da:	4770      	bx	lr
