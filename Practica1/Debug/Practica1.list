
Practica1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050d44  080110fc  080110fc  000210fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08061e40  08061e40  00080100  2**0
                  CONTENTS
  4 .ARM          00000008  08061e40  08061e40  00071e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08061e48  08061e48  00080100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08061e48  08061e48  00071e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08061e4c  08061e4c  00071e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08061e50  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00080100  2**0
                  CONTENTS
 10 .bss          000099b4  20000100  20000100  00080100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009ab4  20009ab4  00080100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00080100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035624  00000000  00000000  00080130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000724d  00000000  00000000  000b5754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a78  00000000  00000000  000bc9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002758  00000000  00000000  000bf420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8cd  00000000  00000000  000c1b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003374b  00000000  00000000  000ef445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa95b  00000000  00000000  00122b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021d4eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b5ac  00000000  00000000  0021d53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080110e4 	.word	0x080110e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	080110e4 	.word	0x080110e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80005ca:	f001 fa2d 	bl	8001a28 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80005ce:	20ca      	movs	r0, #202	; 0xca
 80005d0:	f000 f95d 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80005d4:	20c3      	movs	r0, #195	; 0xc3
 80005d6:	f000 f967 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80005da:	2008      	movs	r0, #8
 80005dc:	f000 f964 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80005e0:	2050      	movs	r0, #80	; 0x50
 80005e2:	f000 f961 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005e6:	20cf      	movs	r0, #207	; 0xcf
 80005e8:	f000 f951 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f95b 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005f2:	20c1      	movs	r0, #193	; 0xc1
 80005f4:	f000 f958 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005f8:	2030      	movs	r0, #48	; 0x30
 80005fa:	f000 f955 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005fe:	20ed      	movs	r0, #237	; 0xed
 8000600:	f000 f945 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 f94f 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800060a:	2003      	movs	r0, #3
 800060c:	f000 f94c 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000610:	2012      	movs	r0, #18
 8000612:	f000 f949 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000616:	2081      	movs	r0, #129	; 0x81
 8000618:	f000 f946 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800061c:	20e8      	movs	r0, #232	; 0xe8
 800061e:	f000 f936 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000622:	2085      	movs	r0, #133	; 0x85
 8000624:	f000 f940 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f93d 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800062e:	2078      	movs	r0, #120	; 0x78
 8000630:	f000 f93a 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000634:	20cb      	movs	r0, #203	; 0xcb
 8000636:	f000 f92a 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800063a:	2039      	movs	r0, #57	; 0x39
 800063c:	f000 f934 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000640:	202c      	movs	r0, #44	; 0x2c
 8000642:	f000 f931 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f92e 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800064c:	2034      	movs	r0, #52	; 0x34
 800064e:	f000 f92b 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000652:	2002      	movs	r0, #2
 8000654:	f000 f928 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000658:	20f7      	movs	r0, #247	; 0xf7
 800065a:	f000 f918 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800065e:	2020      	movs	r0, #32
 8000660:	f000 f922 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000664:	20ea      	movs	r0, #234	; 0xea
 8000666:	f000 f912 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f91c 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f919 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000676:	20b1      	movs	r0, #177	; 0xb1
 8000678:	f000 f909 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 f913 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000682:	201b      	movs	r0, #27
 8000684:	f000 f910 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000688:	20b6      	movs	r0, #182	; 0xb6
 800068a:	f000 f900 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800068e:	200a      	movs	r0, #10
 8000690:	f000 f90a 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000694:	20a2      	movs	r0, #162	; 0xa2
 8000696:	f000 f907 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800069a:	20c0      	movs	r0, #192	; 0xc0
 800069c:	f000 f8f7 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80006a0:	2010      	movs	r0, #16
 80006a2:	f000 f901 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80006a6:	20c1      	movs	r0, #193	; 0xc1
 80006a8:	f000 f8f1 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80006ac:	2010      	movs	r0, #16
 80006ae:	f000 f8fb 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80006b2:	20c5      	movs	r0, #197	; 0xc5
 80006b4:	f000 f8eb 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80006b8:	2045      	movs	r0, #69	; 0x45
 80006ba:	f000 f8f5 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80006be:	2015      	movs	r0, #21
 80006c0:	f000 f8f2 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80006c4:	20c7      	movs	r0, #199	; 0xc7
 80006c6:	f000 f8e2 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80006ca:	2090      	movs	r0, #144	; 0x90
 80006cc:	f000 f8ec 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80006d0:	2036      	movs	r0, #54	; 0x36
 80006d2:	f000 f8dc 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80006d6:	20c8      	movs	r0, #200	; 0xc8
 80006d8:	f000 f8e6 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80006dc:	20f2      	movs	r0, #242	; 0xf2
 80006de:	f000 f8d6 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8e0 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006e8:	20b0      	movs	r0, #176	; 0xb0
 80006ea:	f000 f8d0 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006ee:	20c2      	movs	r0, #194	; 0xc2
 80006f0:	f000 f8da 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006f4:	20b6      	movs	r0, #182	; 0xb6
 80006f6:	f000 f8ca 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006fa:	200a      	movs	r0, #10
 80006fc:	f000 f8d4 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000700:	20a7      	movs	r0, #167	; 0xa7
 8000702:	f000 f8d1 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000706:	2027      	movs	r0, #39	; 0x27
 8000708:	f000 f8ce 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800070c:	2004      	movs	r0, #4
 800070e:	f000 f8cb 	bl	80008a8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000712:	202a      	movs	r0, #42	; 0x2a
 8000714:	f000 f8bb 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f8c5 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f8c2 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f8bf 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800072a:	20ef      	movs	r0, #239	; 0xef
 800072c:	f000 f8bc 	bl	80008a8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000730:	202b      	movs	r0, #43	; 0x2b
 8000732:	f000 f8ac 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f8b6 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 f8b3 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f8b0 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000748:	203f      	movs	r0, #63	; 0x3f
 800074a:	f000 f8ad 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800074e:	20f6      	movs	r0, #246	; 0xf6
 8000750:	f000 f89d 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f8a7 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f8a4 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000760:	2006      	movs	r0, #6
 8000762:	f000 f8a1 	bl	80008a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000766:	202c      	movs	r0, #44	; 0x2c
 8000768:	f000 f891 	bl	800088e <ili9341_WriteReg>
  LCD_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f001 fa49 	bl	8001c04 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000772:	2026      	movs	r0, #38	; 0x26
 8000774:	f000 f88b 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 f895 	bl	80008a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800077e:	20e0      	movs	r0, #224	; 0xe0
 8000780:	f000 f885 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000784:	200f      	movs	r0, #15
 8000786:	f000 f88f 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800078a:	2029      	movs	r0, #41	; 0x29
 800078c:	f000 f88c 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000790:	2024      	movs	r0, #36	; 0x24
 8000792:	f000 f889 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000796:	200c      	movs	r0, #12
 8000798:	f000 f886 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800079c:	200e      	movs	r0, #14
 800079e:	f000 f883 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80007a2:	2009      	movs	r0, #9
 80007a4:	f000 f880 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80007a8:	204e      	movs	r0, #78	; 0x4e
 80007aa:	f000 f87d 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007ae:	2078      	movs	r0, #120	; 0x78
 80007b0:	f000 f87a 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80007b4:	203c      	movs	r0, #60	; 0x3c
 80007b6:	f000 f877 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80007ba:	2009      	movs	r0, #9
 80007bc:	f000 f874 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80007c0:	2013      	movs	r0, #19
 80007c2:	f000 f871 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007c6:	2005      	movs	r0, #5
 80007c8:	f000 f86e 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80007cc:	2017      	movs	r0, #23
 80007ce:	f000 f86b 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007d2:	2011      	movs	r0, #17
 80007d4:	f000 f868 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f865 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80007de:	20e1      	movs	r0, #225	; 0xe1
 80007e0:	f000 f855 	bl	800088e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 f85f 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007ea:	2016      	movs	r0, #22
 80007ec:	f000 f85c 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007f0:	201b      	movs	r0, #27
 80007f2:	f000 f859 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007f6:	2004      	movs	r0, #4
 80007f8:	f000 f856 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007fc:	2011      	movs	r0, #17
 80007fe:	f000 f853 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 f850 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000808:	2031      	movs	r0, #49	; 0x31
 800080a:	f000 f84d 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800080e:	2033      	movs	r0, #51	; 0x33
 8000810:	f000 f84a 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000814:	2042      	movs	r0, #66	; 0x42
 8000816:	f000 f847 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800081a:	2005      	movs	r0, #5
 800081c:	f000 f844 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000820:	200c      	movs	r0, #12
 8000822:	f000 f841 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000826:	200a      	movs	r0, #10
 8000828:	f000 f83e 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800082c:	2028      	movs	r0, #40	; 0x28
 800082e:	f000 f83b 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000832:	202f      	movs	r0, #47	; 0x2f
 8000834:	f000 f838 	bl	80008a8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000838:	200f      	movs	r0, #15
 800083a:	f000 f835 	bl	80008a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800083e:	2011      	movs	r0, #17
 8000840:	f000 f825 	bl	800088e <ili9341_WriteReg>
  LCD_Delay(200);
 8000844:	20c8      	movs	r0, #200	; 0xc8
 8000846:	f001 f9dd 	bl	8001c04 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800084a:	2029      	movs	r0, #41	; 0x29
 800084c:	f000 f81f 	bl	800088e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000850:	202c      	movs	r0, #44	; 0x2c
 8000852:	f000 f81c 	bl	800088e <ili9341_WriteReg>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800085e:	f001 f8e3 	bl	8001a28 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000862:	2103      	movs	r1, #3
 8000864:	20d3      	movs	r0, #211	; 0xd3
 8000866:	f000 f82c 	bl	80008c2 <ili9341_ReadData>
 800086a:	4603      	mov	r3, r0
 800086c:	b29b      	uxth	r3, r3
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}

08000872 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000876:	2029      	movs	r0, #41	; 0x29
 8000878:	f000 f809 	bl	800088e <ili9341_WriteReg>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000884:	2028      	movs	r0, #40	; 0x28
 8000886:	f000 f802 	bl	800088e <ili9341_WriteReg>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f95e 	bl	8001b5c <LCD_IO_WriteReg>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 f92f 	bl	8001b18 <LCD_IO_WriteData>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	460a      	mov	r2, r1
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4613      	mov	r3, r2
 80008d0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80008d2:	797a      	ldrb	r2, [r7, #5]
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 f961 	bl	8001ba0 <LCD_IO_ReadData>
 80008de:	4603      	mov	r3, r0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008ec:	23f0      	movs	r3, #240	; 0xf0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f002 fd0e 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f826 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 fa94 	bl	8000e44 <MX_GPIO_Init>
  MX_CRC_Init();
 800091c:	f000 f88c 	bl	8000a38 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000920:	f000 f89e 	bl	8000a60 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000924:	f000 fa3e 	bl	8000da4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000928:	f000 f8cc 	bl	8000ac4 <MX_I2C3_Init>
  MX_LTDC_Init();
 800092c:	f000 f90a 	bl	8000b44 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000930:	f000 f988 	bl	8000c44 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000934:	f000 f9bc 	bl	8000cb0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000938:	f000 fa0a 	bl	8000d50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800093c:	f00c fcb4 	bl	800d2a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <main+0x4c>)
 8000942:	2100      	movs	r1, #0
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <main+0x50>)
 8000946:	f00c fcf9 	bl	800d33c <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <main+0x54>)
 800094e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000950:	f00c fcce 	bl	800d2f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x48>
 8000956:	bf00      	nop
 8000958:	08061dc8 	.word	0x08061dc8
 800095c:	08001065 	.word	0x08001065
 8000960:	20000378 	.word	0x20000378

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	; 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	2230      	movs	r2, #48	; 0x30
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00f ff4e 	bl	8010814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <SystemClock_Config+0xcc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a27      	ldr	r2, [pc, #156]	; (8000a30 <SystemClock_Config+0xcc>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <SystemClock_Config+0xd0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <SystemClock_Config+0xd0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009dc:	2348      	movs	r3, #72	; 0x48
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 fc93 	bl	8007318 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f8:	f000 fbec 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2102      	movs	r1, #2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f006 fef5 	bl	8007808 <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a24:	f000 fbd6 	bl	80011d4 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3750      	adds	r7, #80	; 0x50
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_CRC_Init+0x20>)
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <MX_CRC_Init+0x24>)
 8000a40:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_CRC_Init+0x20>)
 8000a44:	f002 fdbc 	bl	80035c0 <HAL_CRC_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a4e:	f000 fbc1 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000011c 	.word	0x2000011c
 8000a5c:	40023000 	.word	0x40023000

08000a60 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <MX_DMA2D_Init+0x60>)
 8000a68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000a96:	f002 ff6d 	bl	8003974 <HAL_DMA2D_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000aa0:	f000 fb98 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_DMA2D_Init+0x5c>)
 8000aa8:	f003 f8be 	bl	8003c28 <HAL_DMA2D_ConfigLayer>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ab2:	f000 fb8f 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000124 	.word	0x20000124
 8000ac0:	4002b000 	.word	0x4002b000

08000ac4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_I2C3_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_I2C3_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000b02:	f004 ffff 	bl	8005b04 <HAL_I2C_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b0c:	f000 fb62 	bl	80011d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000b14:	f005 fff3 	bl	8006afe <HAL_I2CEx_ConfigAnalogFilter>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b1e:	f000 fb59 	bl	80011d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_I2C3_Init+0x74>)
 8000b26:	f006 f826 	bl	8006b76 <HAL_I2CEx_ConfigDigitalFilter>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b30:	f000 fb50 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000164 	.word	0x20000164
 8000b3c:	40005c00 	.word	0x40005c00
 8000b40:	000186a0 	.word	0x000186a0

08000b44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2234      	movs	r2, #52	; 0x34
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00f fe5f 	bl	8010814 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b58:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <MX_LTDC_Init+0xfc>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b74:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b76:	2209      	movs	r2, #9
 8000b78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b82:	221d      	movs	r2, #29
 8000b84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b88:	2203      	movs	r2, #3
 8000b8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b8e:	f240 120d 	movw	r2, #269	; 0x10d
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b96:	f240 1243 	movw	r2, #323	; 0x143
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000b9e:	f240 1217 	movw	r2, #279	; 0x117
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000ba6:	f240 1247 	movw	r2, #327	; 0x147
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bc4:	481d      	ldr	r0, [pc, #116]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000bc6:	f006 f815 	bl	8006bf4 <HAL_LTDC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fb00 	bl	80011d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000bd8:	23f0      	movs	r3, #240	; 0xf0
 8000bda:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000be0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000be4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000be6:	2302      	movs	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bf6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bfc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c02:	23f0      	movs	r3, #240	; 0xf0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_LTDC_Init+0xf8>)
 8000c26:	f006 f977 	bl	8006f18 <HAL_LTDC_ConfigLayer>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c30:	f000 fad0 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3738      	adds	r7, #56	; 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001b8 	.word	0x200001b8
 8000c40:	40016800 	.word	0x40016800

08000c44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <MX_SPI5_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c78:	2218      	movs	r2, #24
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_SPI5_Init+0x64>)
 8000c96:	f007 fa5a 	bl	800814e <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 fa98 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000260 	.word	0x20000260
 8000cac:	40015000 	.word	0x40015000

08000cb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <MX_TIM1_Init+0x9c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000cfa:	f008 f807 	bl	8008d0c <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d04:	f000 fa66 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000d16:	f008 f9c1 	bl	800909c <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d20:	f000 fa58 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_TIM1_Init+0x98>)
 8000d32:	f008 fbdd 	bl	80094f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d3c:	f000 fa4a 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200002b8 	.word	0x200002b8
 8000d4c:	40010000 	.word	0x40010000

08000d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART1_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d88:	f008 fc42 	bl	8009610 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 fa1f 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000300 	.word	0x20000300
 8000da0:	40011000 	.word	0x40011000

08000da4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <MX_FMC_Init+0x9c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_FMC_Init+0x98>)
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_FMC_Init+0x98>)
 8000de2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000de6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_FMC_Init+0x98>)
 8000df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_FMC_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_FMC_Init+0x98>)
 8000dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e10:	2307      	movs	r3, #7
 8000e12:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_FMC_Init+0x98>)
 8000e26:	f007 f901 	bl	800802c <HAL_SDRAM_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e30:	f000 f9d0 	bl	80011d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000344 	.word	0x20000344
 8000e40:	a0000140 	.word	0xa0000140

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	; (800104c <MX_GPIO_Init+0x208>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a7a      	ldr	r2, [pc, #488]	; (800104c <MX_GPIO_Init+0x208>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <MX_GPIO_Init+0x208>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	623b      	str	r3, [r7, #32]
 8000e74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	4b74      	ldr	r3, [pc, #464]	; (800104c <MX_GPIO_Init+0x208>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a73      	ldr	r2, [pc, #460]	; (800104c <MX_GPIO_Init+0x208>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b71      	ldr	r3, [pc, #452]	; (800104c <MX_GPIO_Init+0x208>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	4b6d      	ldr	r3, [pc, #436]	; (800104c <MX_GPIO_Init+0x208>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a6c      	ldr	r2, [pc, #432]	; (800104c <MX_GPIO_Init+0x208>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <MX_GPIO_Init+0x208>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	4b66      	ldr	r3, [pc, #408]	; (800104c <MX_GPIO_Init+0x208>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a65      	ldr	r2, [pc, #404]	; (800104c <MX_GPIO_Init+0x208>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b63      	ldr	r3, [pc, #396]	; (800104c <MX_GPIO_Init+0x208>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <MX_GPIO_Init+0x208>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a5e      	ldr	r2, [pc, #376]	; (800104c <MX_GPIO_Init+0x208>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <MX_GPIO_Init+0x208>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b58      	ldr	r3, [pc, #352]	; (800104c <MX_GPIO_Init+0x208>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a57      	ldr	r2, [pc, #348]	; (800104c <MX_GPIO_Init+0x208>)
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <MX_GPIO_Init+0x208>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <MX_GPIO_Init+0x208>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a50      	ldr	r2, [pc, #320]	; (800104c <MX_GPIO_Init+0x208>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <MX_GPIO_Init+0x208>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <MX_GPIO_Init+0x208>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a49      	ldr	r2, [pc, #292]	; (800104c <MX_GPIO_Init+0x208>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <MX_GPIO_Init+0x208>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2116      	movs	r1, #22
 8000f3e:	4844      	ldr	r0, [pc, #272]	; (8001050 <MX_GPIO_Init+0x20c>)
 8000f40:	f003 f9bc 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	4842      	ldr	r0, [pc, #264]	; (8001054 <MX_GPIO_Init+0x210>)
 8000f4a:	f003 f9b7 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f54:	4840      	ldr	r0, [pc, #256]	; (8001058 <MX_GPIO_Init+0x214>)
 8000f56:	f003 f9b1 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f60:	483e      	ldr	r0, [pc, #248]	; (800105c <MX_GPIO_Init+0x218>)
 8000f62:	f003 f9ab 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000f66:	2316      	movs	r3, #22
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <MX_GPIO_Init+0x20c>)
 8000f7e:	f002 fee5 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000f82:	f248 0307 	movw	r3, #32775	; 0x8007
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	482e      	ldr	r0, [pc, #184]	; (8001054 <MX_GPIO_Init+0x210>)
 8000f9a:	f002 fed7 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <MX_GPIO_Init+0x210>)
 8000fb6:	f002 fec9 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4820      	ldr	r0, [pc, #128]	; (8001050 <MX_GPIO_Init+0x20c>)
 8000fd0:	f002 febc 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_GPIO_Init+0x21c>)
 8000fe8:	f002 feb0 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4815      	ldr	r0, [pc, #84]	; (8001058 <MX_GPIO_Init+0x214>)
 8001002:	f002 fea3 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001006:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_GPIO_Init+0x214>)
 8001020:	f002 fe94 	bl	8003d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001024:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <MX_GPIO_Init+0x218>)
 800103e:	f002 fe85 	bl	8003d4c <HAL_GPIO_Init>

}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40020800 	.word	0x40020800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021800 	.word	0x40021800
 8001060:	40020400 	.word	0x40020400

08001064 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800106c:	f00f f882 	bl	8010174 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  PantallaLCD pantallaLCD;
  inicializaPantalla2Buffers(COLOR_FONDO_PANTALLA, industria3_240x320, &pantallaLCD);
 8001070:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001074:	461a      	mov	r2, r3
 8001076:	4947      	ldr	r1, [pc, #284]	; (8001194 <StartDefaultTask+0x130>)
 8001078:	4847      	ldr	r0, [pc, #284]	; (8001198 <StartDefaultTask+0x134>)
 800107a:	f000 f8b1 	bl	80011e0 <inicializaPantalla2Buffers>
  JuegoCaracteres juego8x11, juego11x16;
  inicializaJuegoCaracteres(8, 11, 2, 0xFFFFFFFF, juegoCaracteres8x11, &juego8x11);
 800107e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <StartDefaultTask+0x138>)
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2202      	movs	r2, #2
 800108e:	210b      	movs	r1, #11
 8001090:	2008      	movs	r0, #8
 8001092:	f000 f93b 	bl	800130c <inicializaJuegoCaracteres>
  inicializaJuegoCaracteres(11, 16, 1, 0xFFFFFFFF, juegoCaracteres11x16, &juego11x16);
 8001096:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <StartDefaultTask+0x13c>)
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	200b      	movs	r0, #11
 80010aa:	f000 f92f 	bl	800130c <inicializaJuegoCaracteres>
  /*JuegoCaracteresAlpha juegoSansSerif8x13, juegoConsolas9x18;
  inicializaJuegoCaracteresAlpha(8, 13, 0, SansSerif8x13Amarillo, &juegoSansSerif8x13);
  inicializaJuegoCaracteresAlpha(9, 18, 0, Consolas9x18Amarillo, &juegoConsolas9x18);
  inicializaBoton(170, 50, 60, 60, botonReset60x60, funcionBotonReset, 1, 1, &botonReset, &pantallaLCD);*/
  int transparencia = 0; // Para modificar la transparencia de una imagen
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int incremento = 10; // La transparencia se va a modificar según este incremento
 80010b4:	230a      	movs	r3, #10
 80010b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  char cadena[100]; // Cadena auxiliar para montar mensajes a mostrar en la pantalla

  while(1) { // Repite contínuamente
	  dibujaImagen(0,0, 240, 320,  0,industria3_240x320, &pantallaLCD);
 80010ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <StartDefaultTask+0x130>)
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010cc:	22f0      	movs	r2, #240	; 0xf0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fa2b 	bl	800152c <dibujaImagen>
   contador ++; // Incrementa un contador
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <StartDefaultTask+0x140>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <StartDefaultTask+0x140>)
 80010de:	6013      	str	r3, [r2, #0]
   sprintf(cadena, "Contador: %-7ld", contador);
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <StartDefaultTask+0x140>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	492f      	ldr	r1, [pc, #188]	; (80011a8 <StartDefaultTask+0x144>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00f fc8a 	bl	8010a04 <siprintf>
   // Añade el valor del contador a una cadena preparándolo en 7 caracteres alineado a la izquierda
   dibujaCadenaCaracteres(10, 10, cadena, &juego11x16, &pantallaLCD);
 80010f0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	460b      	mov	r3, r1
 8001100:	210a      	movs	r1, #10
 8001102:	200a      	movs	r0, #10
 8001104:	f000 f9ab 	bl	800145e <dibujaCadenaCaracteres>
   dibujaCadenaCaracteres(10, 30, cadena, &juego8x11, &pantallaLCD);
 8001108:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800110c:	f107 020c 	add.w	r2, r7, #12
 8001110:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	460b      	mov	r3, r1
 8001118:	211e      	movs	r1, #30
 800111a:	200a      	movs	r0, #10
 800111c:	f000 f99f 	bl	800145e <dibujaCadenaCaracteres>
   //dibujaCadenaCaracteresAlpha(10, 50, cadena, &juegoConsolas9x18, 0, 100, 1, &pantallaLCD);
   //dibujaCadenaCaracteresAlpha(10, 70, cadena, &juegoSansSerif8x13, 0, 100, 1, &pantallaLCD);

   if (transparencia + incremento > 100 | transparencia + incremento < 0)
 8001120:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001128:	4413      	add	r3, r2
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2da      	uxtb	r2, r3
 8001134:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800113c:	440b      	add	r3, r1
 800113e:	0fdb      	lsrs	r3, r3, #31
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <StartDefaultTask+0xf0>
	   incremento = - incremento;
 800114a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800114e:	425b      	negs	r3, r3
 8001150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   transparencia += incremento;
 8001154:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800115c:	4413      	add	r3, r2
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

   dibujaImagen(140, 200, 70, 70,  transparencia,imagenAlerta1_70x70, &pantallaLCD);
 8001162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001166:	b29b      	uxth	r3, r3
 8001168:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800116c:	9202      	str	r2, [sp, #8]
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <StartDefaultTask+0x148>)
 8001170:	9201      	str	r2, [sp, #4]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2346      	movs	r3, #70	; 0x46
 8001176:	2246      	movs	r2, #70	; 0x46
 8001178:	21c8      	movs	r1, #200	; 0xc8
 800117a:	208c      	movs	r0, #140	; 0x8c
 800117c:	f000 f9d6 	bl	800152c <dibujaImagen>
   intercambiaBuffersLCD(&pantallaLCD);
 8001180:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f895 	bl	80012b4 <intercambiaBuffersLCD>
   //uint16_t xClick, yClick;
   //int pulsada = pantallaPulsada(&pantallaLCD, &xClick, &yClick);

   //atiendeBoton(xClick, yClick, pulsada, &botonReset);

   osDelay(5); // Retardo de 5 ms
 800118a:	2005      	movs	r0, #5
 800118c:	f00c f968 	bl	800d460 <osDelay>
	  dibujaImagen(0,0, 240, 320,  0,industria3_240x320, &pantallaLCD);
 8001190:	e793      	b.n	80010ba <StartDefaultTask+0x56>
 8001192:	bf00      	nop
 8001194:	08015dd0 	.word	0x08015dd0
 8001198:	ff000030 	.word	0xff000030
 800119c:	080619b0 	.word	0x080619b0
 80011a0:	08060dd0 	.word	0x08060dd0
 80011a4:	2000037c 	.word	0x2000037c
 80011a8:	08011108 	.word	0x08011108
 80011ac:	08011140 	.word	0x08011140

080011b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011c2:	f002 f8d7 	bl	8003374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40001000 	.word	0x40001000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <inicializaPantalla2Buffers>:
#include <stdio.h>  // Para sprintf()
#include <stdlib.h>  // para abs()
#include <cmsis_os2.h>  // para osDelay()


void inicializaPantalla2Buffers(uint32_t colorFondo,const uint8_t * imagen, PantallaLCD* pantallaLCD) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
	// Inicializa la pantalla para trabajar con 2 frame buffers. Pone el color de todos los puntos
	// según el parámetro 'colorFondo'. En 'pantallaLCD' se indica la direcciónd e una estructura
	// donde se guarda información sobre la pantalla.

	BSP_LCD_Init();
 80011ec:	f000 fd6a 	bl	8001cc4 <BSP_LCD_Init>
	BSP_LCD_Init();  // Inicializa la pantalla LCD
 80011f0:	f000 fd68 	bl	8001cc4 <BSP_LCD_Init>

	pantallaLCD->ancho = BSP_LCD_GetXSize();  // Obtiene el ancho de la pantalla en número de puntos
 80011f4:	f000 fdca 	bl	8001d8c <BSP_LCD_GetXSize>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	801a      	strh	r2, [r3, #0]
	pantallaLCD->alto = BSP_LCD_GetYSize();  // Obtiene el alto de la pantalla
 8001200:	f000 fdd0 	bl	8001da4 <BSP_LCD_GetYSize>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	805a      	strh	r2, [r3, #2]
	pantallaLCD->buffers[0] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_0;  // Dirección del frame buffer número 0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8001212:	605a      	str	r2, [r3, #4]
	pantallaLCD->buffers[1] = (uint32_t*)LCD_FRAME_BUFFER_LAYER_1;  // Dirección del frame buffer número 1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <inicializaPantalla2Buffers+0xcc>)
 8001218:	609a      	str	r2, [r3, #8]

    BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER_0);  // Inicializa frame buffer 0
 800121a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800121e:	2000      	movs	r0, #0
 8001220:	f000 fdcc 	bl	8001dbc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER_1);  // Inicializa frame buffer 1
 8001224:	4921      	ldr	r1, [pc, #132]	; (80012ac <inicializaPantalla2Buffers+0xcc>)
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fdc8 	bl	8001dbc <BSP_LCD_LayerDefaultInit>

	pantallaLCD->bufferDibujo = 0;  // Selecciona el frame buffer 0 para dibujar
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	dibujaImagen(0, 0, pantallaLCD->ancho,pantallaLCD->alto,0,imagen,pantallaLCD);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	8859      	ldrh	r1, [r3, #2]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	460b      	mov	r3, r1
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f96e 	bl	800152c <dibujaImagen>
	pantallaLCD->bufferDibujo = 1;  // Selecciona el frame buffer 0 para dibujar
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	60da      	str	r2, [r3, #12]
	dibujaImagen(0, 0, pantallaLCD->ancho,pantallaLCD->alto,0,imagen,pantallaLCD);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	8859      	ldrh	r1, [r3, #2]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	2100      	movs	r1, #0
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f95c 	bl	800152c <dibujaImagen>
	//dibujaRectangulo(0, 0, 240, 320, colorFondo, pantallaLCD);  // Pone todos los puntos al color de fondo

	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 8001274:	bf00      	nop
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <inicializaPantalla2Buffers+0xd0>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f9      	beq.n	8001276 <inicializaPantalla2Buffers+0x96>
	BSP_LCD_SetLayerVisible(0, ENABLE);  // Frame buffer 0 visible
 8001282:	2101      	movs	r1, #1
 8001284:	2000      	movs	r0, #0
 8001286:	f000 fde9 	bl	8001e5c <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, DISABLE);  // Frame buffer 1 invisible
 800128a:	2100      	movs	r1, #0
 800128c:	2001      	movs	r0, #1
 800128e:	f000 fde5 	bl	8001e5c <BSP_LCD_SetLayerVisible>

	BSP_TS_Init(pantallaLCD->ancho, pantallaLCD->alto);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	885b      	ldrh	r3, [r3, #2]
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f001 f8bb 	bl	8002418 <BSP_TS_Init>
	// Indica a la interfaz táctil el ancho y alto de la pantalla en puntos
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	d0130000 	.word	0xd0130000
 80012b0:	40016800 	.word	0x40016800

080012b4 <intercambiaBuffersLCD>:


void intercambiaBuffersLCD(PantallaLCD* pantallaLCD) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	// Cambia en qué frame buffer se dibuja y qué frame buffer se visualiza

	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS));  // Espera a que la GPU finalice sincronismo con pantalla
 80012bc:	bf00      	nop
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <intercambiaBuffersLCD+0x54>)
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <intercambiaBuffersLCD+0xa>
	if (pantallaLCD->bufferDibujo == 0) {  // Si se dibujó en el buffer 0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10b      	bne.n	80012ea <intercambiaBuffersLCD+0x36>
		BSP_LCD_SetLayerVisible(1, DISABLE);  // Buffer 1 invisible
 80012d2:	2100      	movs	r1, #0
 80012d4:	2001      	movs	r0, #1
 80012d6:	f000 fdc1 	bl	8001e5c <BSP_LCD_SetLayerVisible>
		BSP_LCD_SetLayerVisible(0, ENABLE);  // Buffer 0 visible
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fdbd 	bl	8001e5c <BSP_LCD_SetLayerVisible>
		pantallaLCD->bufferDibujo = 1;  // Buffer donde se va a dibujar
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	60da      	str	r2, [r3, #12]
	} else {
		BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
		BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
		pantallaLCD->bufferDibujo = 0;  // Buffer donde se dibuja
	}
}
 80012e8:	e00a      	b.n	8001300 <intercambiaBuffersLCD+0x4c>
		BSP_LCD_SetLayerVisible(0, DISABLE);  // Buffer 0 invisible
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 fdb5 	bl	8001e5c <BSP_LCD_SetLayerVisible>
		BSP_LCD_SetLayerVisible(1, ENABLE);  // Buffer 1 ivisible
 80012f2:	2101      	movs	r1, #1
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fdb1 	bl	8001e5c <BSP_LCD_SetLayerVisible>
		pantallaLCD->bufferDibujo = 0;  // Buffer donde se dibuja
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40016800 	.word	0x40016800

0800130c <inicializaJuegoCaracteres>:
    }
}


void inicializaJuegoCaracteres(uint8_t ancho, uint8_t alto, uint8_t separacion, uint32_t color,
	const uint8_t* pCaracteres, JuegoCaracteres * pJuegoCaracteres) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	460b      	mov	r3, r1
 800131a:	71bb      	strb	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	717b      	strb	r3, [r7, #5]
	// Inicializa la estructura apuntada por 'pJuegoCaracteres' para indicar que se están utilizando
	// caracteres de 'ancho' puntos de ancho, 'alto' puntos de alto, con una separación horizontal
	// entre ellos de 'separacion' puntos y que se dibujan con un color. En 'pCaracteres' se indica
	// dónde se guardan los bytes que describen cómo hay que dibujar los caracteres.

	pJuegoCaracteres->ancho = ancho;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	701a      	strb	r2, [r3, #0]
	pJuegoCaracteres->alto = alto;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	79ba      	ldrb	r2, [r7, #6]
 800132a:	705a      	strb	r2, [r3, #1]
	pJuegoCaracteres->separacion = separacion;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	797a      	ldrb	r2, [r7, #5]
 8001330:	709a      	strb	r2, [r3, #2]
	pJuegoCaracteres->pCaracteres = pCaracteres;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
	pJuegoCaracteres->color = color;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	605a      	str	r2, [r3, #4]
	// Guarda los parámetros en campos de la estructura apuntada por 'pJuegoCaracteres'

	pJuegoCaracteres->nBytesPorCaracter = ((ancho - 1) / 8 + 1) * alto;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	3b01      	subs	r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	da00      	bge.n	8001348 <inicializaJuegoCaracteres+0x3c>
 8001346:	3307      	adds	r3, #7
 8001348:	10db      	asrs	r3, r3, #3
 800134a:	3301      	adds	r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	79ba      	ldrb	r2, [r7, #6]
 8001350:	fb12 f303 	smulbb	r3, r2, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	70da      	strb	r2, [r3, #3]
	// Guarda el número de bytes utilizado para describir cómo se dibuja cada carácter.
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <dibujaCaracter>:


void dibujaCaracter(uint16_t xCaracter, uint16_t yCaracter, char caracter,
	JuegoCaracteres * pJuegoCaracteres, PantallaLCD * pPantalla) {
 8001366:	b480      	push	{r7}
 8001368:	b08b      	sub	sp, #44	; 0x2c
 800136a:	af00      	add	r7, sp, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	460b      	mov	r3, r1
 8001374:	81bb      	strh	r3, [r7, #12]
 8001376:	4613      	mov	r3, r2
 8001378:	72fb      	strb	r3, [r7, #11]
	// Dibuja el carácter indicado en 'caracter' de forma que su esquina superior izquierda
	// corresponda a las coordenadas ('xCaracter', 'yCaracter') utilizando el juego de caracteres
	// descrito en la estructura apuntada por 'pJuegoCaracteres'.

	const uint8_t * pBytes = pJuegoCaracteres->pCaracteres +
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
		(caracter - ' ') * pJuegoCaracteres->nBytesPorCaracter;
 800137e:	7afa      	ldrb	r2, [r7, #11]
 8001380:	3a20      	subs	r2, #32
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	78c9      	ldrb	r1, [r1, #3]
 8001386:	fb01 f202 	mul.w	r2, r1, r2
	const uint8_t * pBytes = pJuegoCaracteres->pCaracteres +
 800138a:	4413      	add	r3, r2
 800138c:	61fb      	str	r3, [r7, #28]
	// Obtiene la dirección de memoria donde se encuentra el primer byte donde se describe cómo hay
	// que dibujar el carácter

	uint8_t nBytesAnchoCaracter = (pJuegoCaracteres->ancho - 1) / 8 + 1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	da00      	bge.n	800139a <dibujaCaracter+0x34>
 8001398:	3307      	adds	r3, #7
 800139a:	10db      	asrs	r3, r3, #3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	76fb      	strb	r3, [r7, #27]
	// Número de bytes necesarios para representar los puntos de una fila

	uint32_t * pBuffer = pPantalla->buffers[pPantalla->bufferDibujo] + yCaracter * pPantalla->ancho +
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013b2:	8809      	ldrh	r1, [r1, #0]
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	440b      	add	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
		xCaracter;
	// Dirección de memoria en el frame buffer donde se representan los puntos de pantalla para la
	// visualización del carácter

	for(int y = 0; y < pJuegoCaracteres->alto; y++) {  // Recorriendo las filas
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
 80013c8:	e03c      	b.n	8001444 <dibujaCaracter+0xde>
	    for(int x = 0; x < pJuegoCaracteres->ancho; x++) {  // y las columnas de puntos
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	e030      	b.n	8001432 <dibujaCaracter+0xcc>

		    if (pBytes[x / 8 + y * nBytesAnchoCaracter] & (1 << (7 - x % 8))) {
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da00      	bge.n	80013d8 <dibujaCaracter+0x72>
 80013d6:	3307      	adds	r3, #7
 80013d8:	10db      	asrs	r3, r3, #3
 80013da:	4619      	mov	r1, r3
 80013dc:	7efb      	ldrb	r3, [r7, #27]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	440b      	add	r3, r1
 80013e6:	461a      	mov	r2, r3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	425a      	negs	r2, r3
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	f002 0207 	and.w	r2, r2, #7
 80013fc:	bf58      	it	pl
 80013fe:	4253      	negpl	r3, r2
 8001400:	f1c3 0307 	rsb	r3, r3, #7
 8001404:	fa41 f303 	asr.w	r3, r1, r3
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00d      	beq.n	800142c <dibujaCaracter+0xc6>
		    	// Si hay que dibujar un punto del carácter

		        pBuffer[y * pPantalla->ancho + x] = pJuegoCaracteres->color;
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	fb03 f202 	mul.w	r2, r3, r2
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	601a      	str	r2, [r3, #0]
	    for(int x = 0; x < pJuegoCaracteres->ancho; x++) {  // y las columnas de puntos
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	3301      	adds	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	4293      	cmp	r3, r2
 800143c:	dbc8      	blt.n	80013d0 <dibujaCaracter+0x6a>
	for(int y = 0; y < pJuegoCaracteres->alto; y++) {  // Recorriendo las filas
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	3301      	adds	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	461a      	mov	r2, r3
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	4293      	cmp	r3, r2
 800144e:	dbbc      	blt.n	80013ca <dibujaCaracter+0x64>
		        // Pone el punto al color establecido en el juego de caracteres
		    }
	    }
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	; 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <dibujaCadenaCaracteres>:


void dibujaCadenaCaracteres(uint32_t xCadena, uint32_t yCadena, char* cadena,
	JuegoCaracteres * pJuegoCaracteres, PantallaLCD * pPantalla) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b088      	sub	sp, #32
 8001462:	af02      	add	r7, sp, #8
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	603b      	str	r3, [r7, #0]
	// Dibuja la cadena de caracteres apuntada por 'cadena' de forma que la esquina superior izquierda
	// del primer carácter se indica en 'xCadena' e 'yCadena'. Los caracteres se visualizan según
	// el juego de caracteres expresado en la estructura apuntada por 'pJuegoCaracteres'.

	int i = 0, x = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
	while(cadena[i]) {  // Para cada carácter de la cadena
 8001474:	e02c      	b.n	80014d0 <dibujaCadenaCaracteres+0x72>

		dibujaCaracter(xCadena + x * (pJuegoCaracteres->separacion + pJuegoCaracteres->ancho), yCadena,
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	b29b      	uxth	r3, r3
 8001488:	fb12 f303 	smulbb	r3, r2, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	b298      	uxth	r0, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	b299      	uxth	r1, r3
			cadena[i], pJuegoCaracteres, pPantalla);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
		dibujaCaracter(xCadena + x * (pJuegoCaracteres->separacion + pJuegoCaracteres->ancho), yCadena,
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f7ff ff5d 	bl	8001366 <dibujaCaracter>
		// Dibuja el carácter en posiciones sucesivas hacia la derecha

		if (cadena[i] != '\'' && cadena[i] != '~')
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b27      	cmp	r3, #39	; 0x27
 80014b6:	d008      	beq.n	80014ca <dibujaCadenaCaracteres+0x6c>
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b7e      	cmp	r3, #126	; 0x7e
 80014c2:	d002      	beq.n	80014ca <dibujaCadenaCaracteres+0x6c>
			x++;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
		// La comilla se utiliza para componer letras acentuadas, ej. "presi\'on"
		// El ~ se utiliza para componer las eñes, ej. "ca~na"

		i++;  // Para acceder al siguiente carácter de la cadena
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
	while(cadena[i]) {  // Para cada carácter de la cadena
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1cc      	bne.n	8001476 <dibujaCadenaCaracteres+0x18>
	}
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <dibujaPunto>:
	dibujaImagen(xCaracter, yCaracter,pJuegoCaracteres->ancho, pJuegoCaracteres->alto,0,
			lista,pPantalla);

}*/

void dibujaPunto(uint16_t x, uint16_t y, uint32_t color, PantallaLCD * pPantalla) {
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4603      	mov	r3, r0
 80014f2:	81fb      	strh	r3, [r7, #14]
 80014f4:	460b      	mov	r3, r1
 80014f6:	81bb      	strh	r3, [r7, #12]
	// Dibuja un punto en coordenadas ('x', 'y') con el color indicado en 'color'

	    uint32_t * pPuntos = pPantalla->buffers[pPantalla->bufferDibujo];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	617b      	str	r3, [r7, #20]
	    // Puntero al frame buffer donde se va a dibujar el punto

	    pPuntos[y * pPantalla->ancho + x] = color;
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	fb03 f202 	mul.w	r2, r3, r2
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4413      	add	r3, r2
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	601a      	str	r2, [r3, #0]
	    // Guarda los 4 bytes del color en el frame buffer
}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <dibujaImagen>:
    }
}


void dibujaImagen(uint16_t xImagen, uint16_t yImagen, uint16_t ancho, uint16_t alto,uint16_t transparencia,
	const uint8_t * imagen, PantallaLCD * pPantalla) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	// Dibuja una imagen situando su esquina superior izquierda en 'xImagen', 'yImagen', que tiene
	// una resolución de 'ancho' puntos en horizontal y 'alto' puntos en vertical. Los bytes que
	// expresan el color de todos sus puntos (cada punto en 4 bytes en formato ARGB)
	// se encuentran en 'imagen'.

	uint32_t * p = (uint32_t*) imagen;  // Para acceder a cada punto por separado
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	617b      	str	r3, [r7, #20]
	uint32_t tr;
	tr=(0xFF-(transparencia/100*0xFF))<<24;
 800154e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <dibujaImagen+0xac>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b29b      	uxth	r3, r3
 800155a:	f1c3 0201 	rsb	r2, r3, #1
 800155e:	4613      	mov	r3, r2
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	60fb      	str	r3, [r7, #12]
	for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	827b      	strh	r3, [r7, #18]
 800156c:	e029      	b.n	80015c2 <dibujaImagen+0x96>
		for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	823b      	strh	r3, [r7, #16]
 8001572:	e01d      	b.n	80015b0 <dibujaImagen+0x84>
			if (*p>>24 > tr>>24)dibujaPunto(x, y, *p-tr, pPantalla);  // dibuja cada punto
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0e1a      	lsrs	r2, r3, #24
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	0e1b      	lsrs	r3, r3, #24
 800157e:	429a      	cmp	r2, r3
 8001580:	d909      	bls.n	8001596 <dibujaImagen+0x6a>
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	8a79      	ldrh	r1, [r7, #18]
 800158c:	8a38      	ldrh	r0, [r7, #16]
 800158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001590:	f7ff ffa9 	bl	80014e6 <dibujaPunto>
 8001594:	e006      	b.n	80015a4 <dibujaImagen+0x78>
			else dibujaPunto(x, y, *p, pPantalla);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	8a79      	ldrh	r1, [r7, #18]
 800159c:	8a38      	ldrh	r0, [r7, #16]
 800159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a0:	f7ff ffa1 	bl	80014e6 <dibujaPunto>
			p++;  // Para acceder al color del siguiente punto
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3304      	adds	r3, #4
 80015a8:	617b      	str	r3, [r7, #20]
		for (uint16_t x = xImagen; x < xImagen + ancho; x++) {  // y columnas
 80015aa:	8a3b      	ldrh	r3, [r7, #16]
 80015ac:	3301      	adds	r3, #1
 80015ae:	823b      	strh	r3, [r7, #16]
 80015b0:	8a3a      	ldrh	r2, [r7, #16]
 80015b2:	88f9      	ldrh	r1, [r7, #6]
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	440b      	add	r3, r1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbdb      	blt.n	8001574 <dibujaImagen+0x48>
	for(uint16_t y = yImagen; y < yImagen + alto; y++)  // Recorriendo filas
 80015bc:	8a7b      	ldrh	r3, [r7, #18]
 80015be:	3301      	adds	r3, #1
 80015c0:	827b      	strh	r3, [r7, #18]
 80015c2:	8a7a      	ldrh	r2, [r7, #18]
 80015c4:	88b9      	ldrh	r1, [r7, #4]
 80015c6:	883b      	ldrh	r3, [r7, #0]
 80015c8:	440b      	add	r3, r1
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbcf      	blt.n	800156e <dibujaImagen+0x42>
		}
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	51eb851f 	.word	0x51eb851f

080015dc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <I2Cx_MspInit+0xdc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d15f      	bne.n	80016ae <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b32      	ldr	r3, [pc, #200]	; (80016bc <I2Cx_MspInit+0xe0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <I2Cx_MspInit+0xe0>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <I2Cx_MspInit+0xe0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	481f      	ldr	r0, [pc, #124]	; (80016c0 <I2Cx_MspInit+0xe4>)
 8001644:	f002 fb82 	bl	8003d4c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	; (80016c4 <I2Cx_MspInit+0xe8>)
 8001656:	f002 fb79 	bl	8003d4c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001664:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <I2Cx_MspInit+0xe0>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <I2Cx_MspInit+0xe0>)
 800167c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001680:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <I2Cx_MspInit+0xe0>)
 8001688:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800168c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	2048      	movs	r0, #72	; 0x48
 8001694:	f001 ff6a 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001698:	2048      	movs	r0, #72	; 0x48
 800169a:	f001 ff83 	bl	80035a4 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	2049      	movs	r0, #73	; 0x49
 80016a4:	f001 ff62 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80016a8:	2049      	movs	r0, #73	; 0x49
 80016aa:	f001 ff7b 	bl	80035a4 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40005c00 	.word	0x40005c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020800 	.word	0x40020800

080016c8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80016cc:	4814      	ldr	r0, [pc, #80]	; (8001720 <I2Cx_Init+0x58>)
 80016ce:	f004 fead 	bl	800642c <HAL_I2C_GetState>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d121      	bne.n	800171c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <I2Cx_Init+0x58>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <I2Cx_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <I2Cx_Init+0x58>)
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <I2Cx_Init+0x60>)
 80016e2:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <I2Cx_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <I2Cx_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <I2Cx_Init+0x58>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <I2Cx_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <I2Cx_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <I2Cx_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <I2Cx_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <I2Cx_Init+0x58>)
 8001712:	f7ff ff63 	bl	80015dc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001716:	4802      	ldr	r0, [pc, #8]	; (8001720 <I2Cx_Init+0x58>)
 8001718:	f004 f9f4 	bl	8005b04 <HAL_I2C_Init>
  }
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000380 	.word	0x20000380
 8001724:	40005c00 	.word	0x40005c00
 8001728:	000186a0 	.word	0x000186a0

0800172c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <I2Cx_ITConfig+0x58>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <I2Cx_ITConfig+0x58>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <I2Cx_ITConfig+0x58>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800174e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001752:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800175c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001760:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <I2Cx_ITConfig+0x5c>)
 8001768:	f002 faf0 	bl	8003d4c <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800176c:	2200      	movs	r2, #0
 800176e:	210f      	movs	r1, #15
 8001770:	2028      	movs	r0, #40	; 0x28
 8001772:	f001 fefb 	bl	800356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001776:	2028      	movs	r0, #40	; 0x28
 8001778:	f001 ff14 	bl	80035a4 <HAL_NVIC_EnableIRQ>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	460b      	mov	r3, r1
 8001798:	71bb      	strb	r3, [r7, #6]
 800179a:	4613      	mov	r3, r2
 800179c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	b299      	uxth	r1, r3
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <I2Cx_WriteData+0x4c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	1d7b      	adds	r3, r7, #5
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	4808      	ldr	r0, [pc, #32]	; (80017dc <I2Cx_WriteData+0x50>)
 80017bc:	f004 fb16 	bl	8005dec <HAL_I2C_Mem_Write>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80017ca:	f000 f863 	bl	8001894 <I2Cx_Error>
  }        
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000038 	.word	0x20000038
 80017dc:	20000380 	.word	0x20000380

080017e0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <I2Cx_ReadData+0x50>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2301      	movs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 030e 	add.w	r3, r7, #14
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <I2Cx_ReadData+0x54>)
 8001814:	f004 fbe4 	bl	8005fe0 <HAL_I2C_Mem_Read>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001822:	f000 f837 	bl	8001894 <I2Cx_Error>
  
  }
  return value;
 8001826:	7bbb      	ldrb	r3, [r7, #14]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000038 	.word	0x20000038
 8001834:	20000380 	.word	0x20000380

08001838 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af04      	add	r7, sp, #16
 800183e:	603a      	str	r2, [r7, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	b299      	uxth	r1, r3
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <I2Cx_ReadBuffer+0x54>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <I2Cx_ReadBuffer+0x58>)
 800186c:	f004 fbb8 	bl	8005fe0 <HAL_I2C_Mem_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e002      	b.n	8001884 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800187e:	f000 f809 	bl	8001894 <I2Cx_Error>

    return 1;
 8001882:	2301      	movs	r3, #1
  }
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000038 	.word	0x20000038
 8001890:	20000380 	.word	0x20000380

08001894 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <I2Cx_Error+0x14>)
 800189a:	f004 fa77 	bl	8005d8c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800189e:	f7ff ff13 	bl	80016c8 <I2Cx_Init>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000380 	.word	0x20000380

080018ac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018b0:	4819      	ldr	r0, [pc, #100]	; (8001918 <SPIx_Init+0x6c>)
 80018b2:	f007 f8ec 	bl	8008a8e <HAL_SPI_GetState>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12b      	bne.n	8001914 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <SPIx_Init+0x6c>)
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <SPIx_Init+0x70>)
 80018c0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <SPIx_Init+0x6c>)
 80018c4:	2218      	movs	r2, #24
 80018c6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <SPIx_Init+0x6c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <SPIx_Init+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <SPIx_Init+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <SPIx_Init+0x6c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <SPIx_Init+0x6c>)
 80018e2:	2207      	movs	r2, #7
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <SPIx_Init+0x6c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <SPIx_Init+0x6c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <SPIx_Init+0x6c>)
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <SPIx_Init+0x6c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SPIx_Init+0x6c>)
 8001902:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001906:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <SPIx_Init+0x6c>)
 800190a:	f000 f853 	bl	80019b4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800190e:	4802      	ldr	r0, [pc, #8]	; (8001918 <SPIx_Init+0x6c>)
 8001910:	f006 fc1d 	bl	800814e <HAL_SPI_Init>
  } 
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200003d4 	.word	0x200003d4
 800191c:	40015000 	.word	0x40015000

08001920 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <SPIx_Read+0x38>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f107 0108 	add.w	r1, r7, #8
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <SPIx_Read+0x3c>)
 800193c:	f006 fdf4 	bl	8008528 <HAL_SPI_Receive>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800194a:	f000 f827 	bl	800199c <SPIx_Error>
  }
  
  return readvalue;
 800194e:	68bb      	ldr	r3, [r7, #8]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000003c 	.word	0x2000003c
 800195c:	200003d4 	.word	0x200003d4

08001960 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <SPIx_Write+0x34>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1db9      	adds	r1, r7, #6
 8001974:	2201      	movs	r2, #1
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <SPIx_Write+0x38>)
 8001978:	f006 fc9a 	bl	80082b0 <HAL_SPI_Transmit>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001986:	f000 f809 	bl	800199c <SPIx_Error>
  }
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000003c 	.word	0x2000003c
 8001998:	200003d4 	.word	0x200003d4

0800199c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <SPIx_Error+0x14>)
 80019a2:	f006 fc5d 	bl	8008260 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80019a6:	f7ff ff81 	bl	80018ac <SPIx_Init>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003d4 	.word	0x200003d4

080019b4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ca:	6453      	str	r3, [r2, #68]	; 0x44
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <SPIx_MspInit+0x6c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80019f4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001a06:	2305      	movs	r3, #5
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <SPIx_MspInit+0x70>)
 8001a12:	f002 f99b 	bl	8003d4c <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40021400 	.word	0x40021400

08001a28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <LCD_IO_Init+0xe0>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d164      	bne.n	8001b00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <LCD_IO_Init+0xe0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4827      	ldr	r0, [pc, #156]	; (8001b10 <LCD_IO_Init+0xe8>)
 8001a72:	f002 f96b 	bl	8003d4c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4819      	ldr	r0, [pc, #100]	; (8001b10 <LCD_IO_Init+0xe8>)
 8001aac:	f002 f94e 	bl	8003d4c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <LCD_IO_Init+0xe4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001acc:	2304      	movs	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <LCD_IO_Init+0xec>)
 8001ae4:	f002 f932 	bl	8003d4c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <LCD_IO_Init+0xec>)
 8001aee:	f002 fbe5 	bl	80042bc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001af2:	2201      	movs	r2, #1
 8001af4:	2104      	movs	r1, #4
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <LCD_IO_Init+0xec>)
 8001af8:	f002 fbe0 	bl	80042bc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001afc:	f7ff fed6 	bl	80018ac <SPIx_Init>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000042c 	.word	0x2000042c
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40020800 	.word	0x40020800

08001b18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <LCD_IO_WriteData+0x3c>)
 8001b2a:	f002 fbc7 	bl	80042bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2104      	movs	r1, #4
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <LCD_IO_WriteData+0x40>)
 8001b34:	f002 fbc2 	bl	80042bc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff10 	bl	8001960 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b40:	2201      	movs	r2, #1
 8001b42:	2104      	movs	r1, #4
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <LCD_IO_WriteData+0x40>)
 8001b46:	f002 fbb9 	bl	80042bc <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020800 	.word	0x40020800

08001b5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <LCD_IO_WriteReg+0x3c>)
 8001b6e:	f002 fba5 	bl	80042bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b72:	2200      	movs	r2, #0
 8001b74:	2104      	movs	r1, #4
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <LCD_IO_WriteReg+0x40>)
 8001b78:	f002 fba0 	bl	80042bc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff feed 	bl	8001960 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b86:	2201      	movs	r2, #1
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <LCD_IO_WriteReg+0x40>)
 8001b8c:	f002 fb96 	bl	80042bc <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	80fb      	strh	r3, [r7, #6]
 8001bac:	4613      	mov	r3, r2
 8001bae:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4810      	ldr	r0, [pc, #64]	; (8001bfc <LCD_IO_ReadData+0x5c>)
 8001bba:	f002 fb7f 	bl	80042bc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc4:	480e      	ldr	r0, [pc, #56]	; (8001c00 <LCD_IO_ReadData+0x60>)
 8001bc6:	f002 fb79 	bl	80042bc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fec7 	bl	8001960 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fea3 	bl	8001920 <SPIx_Read>
 8001bda:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <LCD_IO_ReadData+0x60>)
 8001be4:	f002 fb6a 	bl	80042bc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001be8:	2201      	movs	r2, #1
 8001bea:	2104      	movs	r1, #4
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <LCD_IO_ReadData+0x5c>)
 8001bee:	f002 fb65 	bl	80042bc <HAL_GPIO_WritePin>
  
  return readvalue;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 fbd1 	bl	80033b4 <HAL_Delay>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8001c1e:	f7ff fd53 	bl	80016c8 <I2Cx_Init>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8001c2a:	f7ff fd7f 	bl	800172c <I2Cx_ITConfig>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	71bb      	strb	r3, [r7, #6]
 8001c40:	4613      	mov	r3, r2
 8001c42:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001c44:	797a      	ldrb	r2, [r7, #5]
 8001c46:	79b9      	ldrb	r1, [r7, #6]
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fd9e 	bl	800178c <I2Cx_WriteData>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001c68:	79ba      	ldrb	r2, [r7, #6]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fdb6 	bl	80017e0 <I2Cx_ReadData>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	603a      	str	r2, [r7, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	4613      	mov	r3, r2
 8001c92:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	79b9      	ldrb	r1, [r7, #6]
 8001c98:	79f8      	ldrb	r0, [r7, #7]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	f7ff fdcc 	bl	8001838 <I2Cx_ReadBuffer>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29b      	uxth	r3, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f001 fb7d 	bl	80033b4 <HAL_Delay>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <BSP_LCD_Init+0xb8>)
 8001ccc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cd0:	2209      	movs	r2, #9
 8001cd2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cdc:	221d      	movs	r2, #29
 8001cde:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001ce8:	f240 120d 	movw	r2, #269	; 0x10d
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cf0:	f240 1243 	movw	r2, #323	; 0x143
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001cf8:	f240 1217 	movw	r2, #279	; 0x117
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d00:	f240 1247 	movw	r2, #327	; 0x147
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <BSP_LCD_Init+0xbc>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <BSP_LCD_Init+0xbc>)
 8001d26:	22c0      	movs	r2, #192	; 0xc0
 8001d28:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BSP_LCD_Init+0xbc>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <BSP_LCD_Init+0xbc>)
 8001d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001d38:	4811      	ldr	r0, [pc, #68]	; (8001d80 <BSP_LCD_Init+0xbc>)
 8001d3a:	f005 ffb7 	bl	8007cac <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001d56:	f000 f8bf 	bl	8001ed8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <BSP_LCD_Init+0xb4>)
 8001d5c:	f004 ff4a 	bl	8006bf4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BSP_LCD_Init+0xc0>)
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <BSP_LCD_Init+0xc4>)
 8001d64:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <BSP_LCD_Init+0xc0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001d6e:	f000 f989 	bl	8002084 <BSP_SDRAM_Init>

  return LCD_OK;
 8001d72:	2300      	movs	r3, #0
}  
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000430 	.word	0x20000430
 8001d7c:	40016800 	.word	0x40016800
 8001d80:	200004d8 	.word	0x200004d8
 8001d84:	20000518 	.word	0x20000518
 8001d88:	20000000 	.word	0x20000000

08001d8c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <BSP_LCD_GetXSize+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	4798      	blx	r3
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000518 	.word	0x20000518

08001da4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <BSP_LCD_GetYSize+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000518 	.word	0x20000518

08001dbc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b090      	sub	sp, #64	; 0x40
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001dcc:	f7ff ffde 	bl	8001d8c <BSP_LCD_GetXSize>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001dd8:	f7ff ffe4 	bl	8001da4 <BSP_LCD_GetYSize>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001de8:	23ff      	movs	r3, #255	; 0xff
 8001dea:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001e0c:	f7ff ffbe 	bl	8001d8c <BSP_LCD_GetXSize>
 8001e10:	4603      	mov	r3, r0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001e14:	f7ff ffc6 	bl	8001da4 <BSP_LCD_GetYSize>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4619      	mov	r1, r3
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <BSP_LCD_LayerDefaultInit+0x98>)
 8001e26:	f005 f877 	bl	8006f18 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <BSP_LCD_LayerDefaultInit+0x9c>)
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	f04f 32ff 	mov.w	r2, #4294967295
 8001e36:	605a      	str	r2, [r3, #4]

  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <BSP_LCD_LayerDefaultInit+0x9c>)
 8001e3c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8001e40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <BSP_LCD_LayerDefaultInit+0x98>)
 8001e46:	f005 f8a5 	bl	8006f94 <HAL_LTDC_EnableDither>
}
 8001e4a:	bf00      	nop
 8001e4c:	3740      	adds	r7, #64	; 0x40
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000430 	.word	0x20000430
 8001e58:	20000508 	.word	0x20000508

08001e5c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d112      	bne.n	8001e94 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	01db      	lsls	r3, r3, #7
 8001e78:	4413      	add	r3, r2
 8001e7a:	3384      	adds	r3, #132	; 0x84
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4611      	mov	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	01d2      	lsls	r2, r2, #7
 8001e88:	440a      	add	r2, r1
 8001e8a:	3284      	adds	r2, #132	; 0x84
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e011      	b.n	8001eb8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	01db      	lsls	r3, r3, #7
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3384      	adds	r3, #132	; 0x84
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	01d2      	lsls	r2, r2, #7
 8001eae:	440a      	add	r2, r1
 8001eb0:	3284      	adds	r2, #132	; 0x84
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <BSP_LCD_SetLayerVisible+0x78>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20000430 	.word	0x20000430

08001ed8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a60      	ldr	r2, [pc, #384]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001ee8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a59      	ldr	r2, [pc, #356]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b57      	ldr	r3, [pc, #348]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b34      	ldr	r3, [pc, #208]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <BSP_LCD_MspInit+0x190>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001fbe:	f641 0358 	movw	r3, #6232	; 0x1858
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001fd0:	230e      	movs	r3, #14
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4824      	ldr	r0, [pc, #144]	; (800206c <BSP_LCD_MspInit+0x194>)
 8001fdc:	f001 feb6 	bl	8003d4c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001fe0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	4820      	ldr	r0, [pc, #128]	; (8002070 <BSP_LCD_MspInit+0x198>)
 8001fee:	f001 fead 	bl	8003d4c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001ff2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481d      	ldr	r0, [pc, #116]	; (8002074 <BSP_LCD_MspInit+0x19c>)
 8002000:	f001 fea4 	bl	8003d4c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002004:	2348      	movs	r3, #72	; 0x48
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	481a      	ldr	r0, [pc, #104]	; (8002078 <BSP_LCD_MspInit+0x1a0>)
 8002010:	f001 fe9c 	bl	8003d4c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	4619      	mov	r1, r3
 8002020:	4816      	ldr	r0, [pc, #88]	; (800207c <BSP_LCD_MspInit+0x1a4>)
 8002022:	f001 fe93 	bl	8003d4c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002026:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	4813      	ldr	r0, [pc, #76]	; (8002080 <BSP_LCD_MspInit+0x1a8>)
 8002034:	f001 fe8a 	bl	8003d4c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002038:	2303      	movs	r3, #3
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800203c:	2309      	movs	r3, #9
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	480a      	ldr	r0, [pc, #40]	; (8002070 <BSP_LCD_MspInit+0x198>)
 8002048:	f001 fe80 	bl	8003d4c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800204c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <BSP_LCD_MspInit+0x1a8>)
 800205a:	f001 fe77 	bl	8003d4c <HAL_GPIO_Init>
}
 800205e:	bf00      	nop
 8002060:	3738      	adds	r7, #56	; 0x38
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800

08002084 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <BSP_SDRAM_Init+0xac>)
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <BSP_SDRAM_Init+0xb0>)
 800208c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 8002096:	2207      	movs	r2, #7
 8002098:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 800209c:	2204      	movs	r2, #4
 800209e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 80020a2:	2207      	movs	r2, #7
 80020a4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 80020a8:	2202      	movs	r2, #2
 80020aa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020cc:	2210      	movs	r2, #16
 80020ce:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020dc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80020fa:	2100      	movs	r1, #0
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <BSP_SDRAM_Init+0xac>)
 80020fe:	f000 f87f 	bl	8002200 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002102:	490d      	ldr	r1, [pc, #52]	; (8002138 <BSP_SDRAM_Init+0xb4>)
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <BSP_SDRAM_Init+0xac>)
 8002106:	f005 ff91 	bl	800802c <HAL_SDRAM_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <BSP_SDRAM_Init+0xb8>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e002      	b.n	800211e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <BSP_SDRAM_Init+0xb8>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800211e:	f240 506a 	movw	r0, #1386	; 0x56a
 8002122:	f000 f80d 	bl	8002140 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <BSP_SDRAM_Init+0xb8>)
 8002128:	781b      	ldrb	r3, [r3, #0]
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000051c 	.word	0x2000051c
 8002134:	a0000140 	.word	0xa0000140
 8002138:	20000550 	.word	0x20000550
 800213c:	20000040 	.word	0x20000040

08002140 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002154:	2208      	movs	r2, #8
 8002156:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800215a:	2201      	movs	r2, #1
 800215c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002168:	4923      	ldr	r1, [pc, #140]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800216a:	4824      	ldr	r0, [pc, #144]	; (80021fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800216c:	f005 ff92 	bl	8008094 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f001 f91f 	bl	80033b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800217e:	2208      	movs	r2, #8
 8002180:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002184:	2201      	movs	r2, #1
 8002186:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800218e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002192:	4919      	ldr	r1, [pc, #100]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002194:	4819      	ldr	r0, [pc, #100]	; (80021fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002196:	f005 ff7d 	bl	8008094 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800219c:	2203      	movs	r2, #3
 800219e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021a2:	2208      	movs	r2, #8
 80021a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	4910      	ldr	r1, [pc, #64]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021b8:	4810      	ldr	r0, [pc, #64]	; (80021fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021ba:	f005 ff6b 	bl	8008094 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80021be:	f44f 730c 	mov.w	r3, #560	; 0x230
 80021c2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021c6:	2204      	movs	r2, #4
 80021c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021cc:	2208      	movs	r2, #8
 80021ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021da:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e0:	4905      	ldr	r1, [pc, #20]	; (80021f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021e4:	f005 ff56 	bl	8008094 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4804      	ldr	r0, [pc, #16]	; (80021fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021ec:	f005 ff87 	bl	80080fe <HAL_SDRAM_ProgramRefreshRate>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000056c 	.word	0x2000056c
 80021fc:	2000051c 	.word	0x2000051c

08002200 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b090      	sub	sp, #64	; 0x40
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ec 	beq.w	80023ea <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
 8002216:	4b77      	ldr	r3, [pc, #476]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	4a76      	ldr	r2, [pc, #472]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6393      	str	r3, [r2, #56]	; 0x38
 8002222:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a6f      	ldr	r2, [pc, #444]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	4b69      	ldr	r3, [pc, #420]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a68      	ldr	r2, [pc, #416]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a5a      	ldr	r2, [pc, #360]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a53      	ldr	r2, [pc, #332]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022a8:	f043 0310 	orr.w	r3, r3, #16
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <BSP_SDRAM_MspInit+0x1f4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022f6:	2302      	movs	r3, #2
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80022fe:	230c      	movs	r3, #12
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002302:	2360      	movs	r3, #96	; 0x60
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	483a      	ldr	r0, [pc, #232]	; (80023f8 <BSP_SDRAM_MspInit+0x1f8>)
 800230e:	f001 fd1d 	bl	8003d4c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002312:	2301      	movs	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231a:	4619      	mov	r1, r3
 800231c:	4837      	ldr	r0, [pc, #220]	; (80023fc <BSP_SDRAM_MspInit+0x1fc>)
 800231e:	f001 fd15 	bl	8003d4c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002322:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232c:	4619      	mov	r1, r3
 800232e:	4834      	ldr	r0, [pc, #208]	; (8002400 <BSP_SDRAM_MspInit+0x200>)
 8002330:	f001 fd0c 	bl	8003d4c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002334:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800233a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	4830      	ldr	r0, [pc, #192]	; (8002404 <BSP_SDRAM_MspInit+0x204>)
 8002342:	f001 fd03 	bl	8003d4c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002346:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	482d      	ldr	r0, [pc, #180]	; (8002408 <BSP_SDRAM_MspInit+0x208>)
 8002354:	f001 fcfa 	bl	8003d4c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002358:	f248 1333 	movw	r3, #33075	; 0x8133
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800235e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002362:	4619      	mov	r1, r3
 8002364:	4829      	ldr	r0, [pc, #164]	; (800240c <BSP_SDRAM_MspInit+0x20c>)
 8002366:	f001 fcf1 	bl	8003d4c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002384:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002394:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 8002398:	2200      	movs	r2, #0
 800239a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 800239e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023ac:	2203      	movs	r2, #3
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <BSP_SDRAM_MspInit+0x214>)
 80023c0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023d0:	f001 f9c0 	bl	8003754 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <BSP_SDRAM_MspInit+0x210>)
 80023d6:	f001 f90f 	bl	80035f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	210f      	movs	r1, #15
 80023de:	2038      	movs	r0, #56	; 0x38
 80023e0:	f001 f8c4 	bl	800356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80023e4:	2038      	movs	r0, #56	; 0x38
 80023e6:	f001 f8dd 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80023ea:	bf00      	nop
 80023ec:	3740      	adds	r7, #64	; 0x40
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	2000057c 	.word	0x2000057c
 8002414:	40026410 	.word	0x40026410

08002418 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	80fb      	strh	r3, [r7, #6]
 8002424:	4613      	mov	r3, r2
 8002426:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <BSP_TS_Init+0x64>)
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <BSP_TS_Init+0x68>)
 8002434:	88bb      	ldrh	r3, [r7, #4]
 8002436:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <BSP_TS_Init+0x6c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2082      	movs	r0, #130	; 0x82
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	f640 0311 	movw	r3, #2065	; 0x811
 8002448:	429a      	cmp	r2, r3
 800244a:	d104      	bne.n	8002456 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <BSP_TS_Init+0x70>)
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <BSP_TS_Init+0x6c>)
 8002450:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <BSP_TS_Init+0x70>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2082      	movs	r0, #130	; 0x82
 8002464:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <BSP_TS_Init+0x70>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2082      	movs	r0, #130	; 0x82
 800246e:	4798      	blx	r3
  }

  return ret;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200005e0 	.word	0x200005e0
 8002480:	200005e2 	.word	0x200005e2
 8002484:	20000044 	.word	0x20000044
 8002488:	200005dc 	.word	0x200005dc

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_MspInit+0x54>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_MspInit+0x54>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_MspInit+0x54>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_MspInit+0x54>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_MspInit+0x54>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_MspInit+0x54>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	210f      	movs	r1, #15
 80024ce:	f06f 0001 	mvn.w	r0, #1
 80024d2:	f001 f84b 	bl	800356c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_CRC_MspInit+0x3c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10d      	bne.n	8002512 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_CRC_MspInit+0x40>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_CRC_MspInit+0x40>)
 8002500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_CRC_MspInit+0x40>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023000 	.word	0x40023000
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_DMA2D_MspInit+0x48>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d115      	bne.n	8002566 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_DMA2D_MspInit+0x4c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_DMA2D_MspInit+0x4c>)
 8002544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_DMA2D_MspInit+0x4c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2105      	movs	r1, #5
 800255a:	205a      	movs	r0, #90	; 0x5a
 800255c:	f001 f806 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002560:	205a      	movs	r0, #90	; 0x5a
 8002562:	f001 f81f 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	4002b000 	.word	0x4002b000
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_I2C_MspInit+0xc4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d14b      	bne.n	8002632 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80025d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d8:	2312      	movs	r3, #18
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025e4:	2304      	movs	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4815      	ldr	r0, [pc, #84]	; (8002644 <HAL_I2C_MspInit+0xcc>)
 80025f0:	f001 fbac 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80025f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fa:	2312      	movs	r3, #18
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002606:	2304      	movs	r3, #4
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <HAL_I2C_MspInit+0xd0>)
 8002612:	f001 fb9b 	bl	8003d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 8002620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_I2C_MspInit+0xc8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40005c00 	.word	0x40005c00
 8002640:	40023800 	.word	0x40023800
 8002644:	40020800 	.word	0x40020800
 8002648:	40020000 	.word	0x40020000

0800264c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_I2C_MspDeInit+0x3c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10f      	bne.n	800267e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_I2C_MspDeInit+0x40>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_I2C_MspDeInit+0x40>)
 8002664:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800266a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800266e:	4808      	ldr	r0, [pc, #32]	; (8002690 <HAL_I2C_MspDeInit+0x44>)
 8002670:	f001 fd18 	bl	80040a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002678:	4806      	ldr	r0, [pc, #24]	; (8002694 <HAL_I2C_MspDeInit+0x48>)
 800267a:	f001 fd13 	bl	80040a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40005c00 	.word	0x40005c00
 800268c:	40023800 	.word	0x40023800
 8002690:	40020800 	.word	0x40020800
 8002694:	40020000 	.word	0x40020000

08002698 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b09a      	sub	sp, #104	; 0x68
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	2230      	movs	r2, #48	; 0x30
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00e f8ab 	bl	8010814 <memset>
  if(hltdc->Instance==LTDC)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a85      	ldr	r2, [pc, #532]	; (80028d8 <HAL_LTDC_MspInit+0x240>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	f040 8102 	bne.w	80028ce <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026ca:	2308      	movs	r3, #8
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80026ce:	2332      	movs	r3, #50	; 0x32
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026de:	4618      	mov	r0, r3
 80026e0:	f005 fae4 	bl	8007cac <HAL_RCCEx_PeriphCLKConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80026ea:	f7fe fd73 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a79      	ldr	r2, [pc, #484]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 80026f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a72      	ldr	r2, [pc, #456]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002714:	f043 0320 	orr.w	r3, r3, #32
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a6b      	ldr	r2, [pc, #428]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b69      	ldr	r3, [pc, #420]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a64      	ldr	r2, [pc, #400]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b62      	ldr	r3, [pc, #392]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b57      	ldr	r3, [pc, #348]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a56      	ldr	r2, [pc, #344]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b54      	ldr	r3, [pc, #336]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_LTDC_MspInit+0x244>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80027b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027c4:	230e      	movs	r3, #14
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027cc:	4619      	mov	r1, r3
 80027ce:	4844      	ldr	r0, [pc, #272]	; (80028e0 <HAL_LTDC_MspInit+0x248>)
 80027d0:	f001 fabc 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80027d4:	f641 0358 	movw	r3, #6232	; 0x1858
 80027d8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027e6:	230e      	movs	r3, #14
 80027e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027ee:	4619      	mov	r1, r3
 80027f0:	483c      	ldr	r0, [pc, #240]	; (80028e4 <HAL_LTDC_MspInit+0x24c>)
 80027f2:	f001 faab 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80027f6:	2303      	movs	r3, #3
 80027f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002806:	2309      	movs	r3, #9
 8002808:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800280e:	4619      	mov	r1, r3
 8002810:	4835      	ldr	r0, [pc, #212]	; (80028e8 <HAL_LTDC_MspInit+0x250>)
 8002812:	f001 fa9b 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002816:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800281a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002828:	230e      	movs	r3, #14
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002830:	4619      	mov	r1, r3
 8002832:	482d      	ldr	r0, [pc, #180]	; (80028e8 <HAL_LTDC_MspInit+0x250>)
 8002834:	f001 fa8a 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002838:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800283c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800284a:	230e      	movs	r3, #14
 800284c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800284e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002852:	4619      	mov	r1, r3
 8002854:	4825      	ldr	r0, [pc, #148]	; (80028ec <HAL_LTDC_MspInit+0x254>)
 8002856:	f001 fa79 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800285a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800285e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800286c:	230e      	movs	r3, #14
 800286e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002874:	4619      	mov	r1, r3
 8002876:	481e      	ldr	r0, [pc, #120]	; (80028f0 <HAL_LTDC_MspInit+0x258>)
 8002878:	f001 fa68 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800287c:	2348      	movs	r3, #72	; 0x48
 800287e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800288c:	230e      	movs	r3, #14
 800288e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002890:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002894:	4619      	mov	r1, r3
 8002896:	4817      	ldr	r0, [pc, #92]	; (80028f4 <HAL_LTDC_MspInit+0x25c>)
 8002898:	f001 fa58 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800289c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028ae:	2309      	movs	r3, #9
 80028b0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b6:	4619      	mov	r1, r3
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <HAL_LTDC_MspInit+0x254>)
 80028ba:	f001 fa47 	bl	8003d4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2105      	movs	r1, #5
 80028c2:	2058      	movs	r0, #88	; 0x58
 80028c4:	f000 fe52 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80028c8:	2058      	movs	r0, #88	; 0x58
 80028ca:	f000 fe6b 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3768      	adds	r7, #104	; 0x68
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40016800 	.word	0x40016800
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00

080028f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_SPI_MspInit+0x84>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12c      	bne.n	8002974 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_SPI_MspInit+0x88>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_SPI_MspInit+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002940:	f043 0320 	orr.w	r3, r3, #32
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_SPI_MspInit+0x88>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002952:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002964:	2305      	movs	r3, #5
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <HAL_SPI_MspInit+0x8c>)
 8002970:	f001 f9ec 	bl	8003d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002974:	bf00      	nop
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40015000 	.word	0x40015000
 8002980:	40023800 	.word	0x40023800
 8002984:	40021400 	.word	0x40021400

08002988 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_SPI_MspDeInit+0x30>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10a      	bne.n	80029b0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_SPI_MspDeInit+0x34>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_SPI_MspDeInit+0x34>)
 80029a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80029a6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_SPI_MspDeInit+0x38>)
 80029ac:	f001 fb7a 	bl	80040a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40015000 	.word	0x40015000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40021400 	.word	0x40021400

080029c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_TIM_Base_MspInit+0x3c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10d      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_TIM_Base_MspInit+0x40>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_TIM_Base_MspInit+0x40>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_TIM_Base_MspInit+0x40>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_UART_MspInit+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12c      	bne.n	8002a84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a34:	f043 0310 	orr.w	r3, r3, #16
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_UART_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a74:	2307      	movs	r3, #7
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_UART_MspInit+0x8c>)
 8002a80:	f001 f964 	bl	8003d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	; 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_FMC_MspInit+0x104>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d16f      	bne.n	8002b94 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_FMC_MspInit+0x104>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_FMC_MspInit+0x108>)
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_FMC_MspInit+0x108>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38
 8002aca:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_FMC_MspInit+0x108>)
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002ad6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ada:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ae8:	230c      	movs	r3, #12
 8002aea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	482c      	ldr	r0, [pc, #176]	; (8002ba4 <HAL_FMC_MspInit+0x10c>)
 8002af2:	f001 f92b 	bl	8003d4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002af6:	2301      	movs	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b06:	230c      	movs	r3, #12
 8002b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4826      	ldr	r0, [pc, #152]	; (8002ba8 <HAL_FMC_MspInit+0x110>)
 8002b10:	f001 f91c 	bl	8003d4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002b14:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b18:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b26:	230c      	movs	r3, #12
 8002b28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	481f      	ldr	r0, [pc, #124]	; (8002bac <HAL_FMC_MspInit+0x114>)
 8002b30:	f001 f90c 	bl	8003d4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002b34:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b38:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b46:	230c      	movs	r3, #12
 8002b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <HAL_FMC_MspInit+0x118>)
 8002b50:	f001 f8fc 	bl	8003d4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b54:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b58:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b66:	230c      	movs	r3, #12
 8002b68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4811      	ldr	r0, [pc, #68]	; (8002bb4 <HAL_FMC_MspInit+0x11c>)
 8002b70:	f001 f8ec 	bl	8003d4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b74:	2360      	movs	r3, #96	; 0x60
 8002b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b84:	230c      	movs	r3, #12
 8002b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <HAL_FMC_MspInit+0x120>)
 8002b8e:	f001 f8dd 	bl	8003d4c <HAL_GPIO_Init>
 8002b92:	e000      	b.n	8002b96 <HAL_FMC_MspInit+0xfe>
    return;
 8002b94:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200005e4 	.word	0x200005e4
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40020400 	.word	0x40020400

08002bbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002bc4:	f7ff ff68 	bl	8002a98 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_InitTick+0xe4>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_InitTick+0xe4>)
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_InitTick+0xe4>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bfc:	f107 0210 	add.w	r2, r7, #16
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 f81e 	bl	8007c48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c16:	f004 ffef 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8002c1a:	6378      	str	r0, [r7, #52]	; 0x34
 8002c1c:	e004      	b.n	8002c28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c1e:	f004 ffeb 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8002c22:	4603      	mov	r3, r0
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_InitTick+0xe8>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	3b01      	subs	r3, #1
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_InitTick+0xec>)
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_InitTick+0xf0>)
 8002c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_InitTick+0xec>)
 8002c3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_InitTick+0xec>)
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_InitTick+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_InitTick+0xec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_InitTick+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c5c:	4817      	ldr	r0, [pc, #92]	; (8002cbc <HAL_InitTick+0xec>)
 8002c5e:	f006 f855 	bl	8008d0c <HAL_TIM_Base_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c70:	4812      	ldr	r0, [pc, #72]	; (8002cbc <HAL_InitTick+0xec>)
 8002c72:	f006 f89b 	bl	8008dac <HAL_TIM_Base_Start_IT>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c84:	2036      	movs	r0, #54	; 0x36
 8002c86:	f000 fc8d 	bl	80035a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d808      	bhi.n	8002ca2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	2036      	movs	r0, #54	; 0x36
 8002c96:	f000 fc69 	bl	800356c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_InitTick+0xf4>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e002      	b.n	8002ca8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	431bde83 	.word	0x431bde83
 8002cbc:	200005e8 	.word	0x200005e8
 8002cc0:	40001000 	.word	0x40001000
 8002cc4:	20000070 	.word	0x20000070

08002cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <NMI_Handler+0x4>

08002cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <HardFault_Handler+0x4>

08002cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <MemManage_Handler+0x4>

08002cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <BusFault_Handler+0x4>

08002ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <UsageFault_Handler+0x4>

08002ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <TIM6_DAC_IRQHandler+0x10>)
 8002cfa:	f006 f8c7 	bl	8008e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200005e8 	.word	0x200005e8

08002d08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <OTG_HS_IRQHandler+0x10>)
 8002d0e:	f001 fd59 	bl	80047c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200097a0 	.word	0x200097a0

08002d1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <LTDC_IRQHandler+0x10>)
 8002d22:	f004 f837 	bl	8006d94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200001b8 	.word	0x200001b8

08002d30 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <DMA2D_IRQHandler+0x10>)
 8002d36:	f000 fe66 	bl	8003a06 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000124 	.word	0x20000124

08002d44 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fa59 	bl	8003208 <stmpe811_GetInstance>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d112      	bne.n	8002d86 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 fa51 	bl	8003208 <stmpe811_GetInstance>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d80a      	bhi.n	8002d86 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002d70:	7bbb      	ldrb	r3, [r7, #14]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	b2d1      	uxtb	r1, r2
 8002d76:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <stmpe811_Init+0x4c>)
 8002d78:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002d7a:	f7fe ff4e 	bl	8001c1a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f807 	bl	8002d94 <stmpe811_Reset>
    }
  }
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000630 	.word	0x20000630

08002d94 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2202      	movs	r2, #2
 8002da4:	2103      	movs	r1, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe ff43 	bl	8001c32 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002dac:	200a      	movs	r0, #10
 8002dae:	f7fe ff7d 	bl	8001cac <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2200      	movs	r2, #0
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ff39 	bl	8001c32 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fe ff73 	bl	8001cac <IOE_Delay>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002dd8:	f7fe ff1f 	bl	8001c1a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ff38 	bl	8001c58 <IOE_Read>
 8002de8:	4603      	mov	r3, r0
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe ff2f 	bl	8001c58 <IOE_Read>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002dfe:	4323      	orrs	r3, r4
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	b29b      	uxth	r3, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}

08002e0c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2109      	movs	r1, #9
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe ff19 	bl	8001c58 <IOE_Read>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	2109      	movs	r1, #9
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fef9 	bl	8001c32 <IOE_Write>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2109      	movs	r1, #9
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fefb 	bl	8001c58 <IOE_Read>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	2109      	movs	r1, #9
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fedb 	bl	8001c32 <IOE_Write>
    
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	80fb      	strh	r3, [r7, #6]
 8002e90:	4613      	mov	r3, r2
 8002e92:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	210a      	movs	r1, #10
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe feda 	bl	8001c58 <IOE_Read>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	797b      	ldrb	r3, [r7, #5]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	210a      	movs	r1, #10
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe feba 	bl	8001c32 <IOE_Write>
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460a      	mov	r2, r1
 8002ed0:	80fb      	strh	r3, [r7, #6]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	210a      	movs	r1, #10
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe feb9 	bl	8001c58 <IOE_Read>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002eea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	210a      	movs	r1, #10
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fe94 	bl	8001c32 <IOE_Write>
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	80fb      	strh	r3, [r7, #6]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	210b      	movs	r1, #11
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fe95 	bl	8001c58 <IOE_Read>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	797b      	ldrb	r3, [r7, #5]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	80fb      	strh	r3, [r7, #6]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	797a      	ldrb	r2, [r7, #5]
 8002f56:	210b      	movs	r1, #11
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fe6a 	bl	8001c32 <IOE_Write>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	6039      	str	r1, [r7, #0]
 8002f70:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2117      	movs	r1, #23
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fe6b 	bl	8001c58 <IOE_Read>
 8002f82:	4603      	mov	r3, r0
 8002f84:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	b25a      	sxtb	r2, r3
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	2117      	movs	r1, #23
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fe46 	bl	8001c32 <IOE_Write>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fe4a 	bl	8001c58 <IOE_Read>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fe2a 	bl	8001c32 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	21f0      	movs	r1, #240	; 0xf0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ffbf 	bl	8002f66 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fe1a 	bl	8001c32 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2249      	movs	r2, #73	; 0x49
 8003004:	2120      	movs	r1, #32
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fe13 	bl	8001c32 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800300c:	2002      	movs	r0, #2
 800300e:	f7fe fe4d 	bl	8001cac <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2201      	movs	r2, #1
 8003018:	2121      	movs	r1, #33	; 0x21
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fe09 	bl	8001c32 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	229a      	movs	r2, #154	; 0x9a
 8003026:	2141      	movs	r1, #65	; 0x41
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fe02 	bl	8001c32 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2201      	movs	r2, #1
 8003034:	214a      	movs	r1, #74	; 0x4a
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fdfb 	bl	8001c32 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2201      	movs	r2, #1
 8003042:	214b      	movs	r1, #75	; 0x4b
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fdf4 	bl	8001c32 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2200      	movs	r2, #0
 8003050:	214b      	movs	r1, #75	; 0x4b
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fded 	bl	8001c32 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2201      	movs	r2, #1
 800305e:	2156      	movs	r1, #86	; 0x56
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe fde6 	bl	8001c32 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2201      	movs	r2, #1
 800306c:	2158      	movs	r1, #88	; 0x58
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fddf 	bl	8001c32 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2201      	movs	r2, #1
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fdd8 	bl	8001c32 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	210b      	movs	r1, #11
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fdd1 	bl	8001c32 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003090:	2002      	movs	r0, #2
 8003092:	f7fe fe0b 	bl	8001cac <IOE_Delay>
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fdd0 	bl	8001c58 <IOE_Read>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80030ca:	7bbb      	ldrb	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	214c      	movs	r1, #76	; 0x4c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fdbe 	bl	8001c58 <IOE_Read>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e00d      	b.n	8003104 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2201      	movs	r2, #1
 80030ee:	214b      	movs	r1, #75	; 0x4b
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fd9e 	bl	8001c32 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	214b      	movs	r1, #75	; 0x4b
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fd97 	bl	8001c32 <IOE_Write>
  }
  
  return ret;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800311c:	89fb      	ldrh	r3, [r7, #14]
 800311e:	b2d8      	uxtb	r0, r3
 8003120:	f107 0210 	add.w	r2, r7, #16
 8003124:	2304      	movs	r3, #4
 8003126:	21d7      	movs	r1, #215	; 0xd7
 8003128:	f7fe fda9 	bl	8001c7e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800312c:	7c3b      	ldrb	r3, [r7, #16]
 800312e:	061a      	lsls	r2, r3, #24
 8003130:	7c7b      	ldrb	r3, [r7, #17]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	7cbb      	ldrb	r3, [r7, #18]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	4313      	orrs	r3, r2
 800313c:	7cfa      	ldrb	r2, [r7, #19]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	0d1b      	lsrs	r3, r3, #20
 8003146:	b29a      	uxth	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2201      	movs	r2, #1
 8003162:	214b      	movs	r1, #75	; 0x4b
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe fd64 	bl	8001c32 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800316a:	89fb      	ldrh	r3, [r7, #14]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2200      	movs	r2, #0
 8003170:	214b      	movs	r1, #75	; 0x4b
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fd5d 	bl	8001c32 <IOE_Write>
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800318a:	f7fe fd4c 	bl	8001c26 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	211f      	movs	r1, #31
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe76 	bl	8002e84 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe36 	bl	8002e0c <stmpe811_EnableGlobalIT>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe47 	bl	8002e48 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	211f      	movs	r1, #31
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe81 	bl	8002ec6 <stmpe811_DisableITSource>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	211f      	movs	r1, #31
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fe99 	bl	8002f12 <stmpe811_ReadGITStatus>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	211f      	movs	r1, #31
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fea1 	bl	8002f40 <stmpe811_ClearGlobalIT>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e00b      	b.n	8003234 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <stmpe811_GetInstance+0x40>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	b29b      	uxth	r3, r3
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	429a      	cmp	r2, r3
 8003228:	d101      	bne.n	800322e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	e006      	b.n	800323c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	3301      	adds	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d9f0      	bls.n	800321c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800323a:	23ff      	movs	r3, #255	; 0xff
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000630 	.word	0x20000630

0800324c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <_sbrk+0x5c>)
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <_sbrk+0x60>)
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <_sbrk+0x64>)
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <_sbrk+0x68>)
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800327c:	f00d fa82 	bl	8010784 <__errno>
 8003280:	4603      	mov	r3, r0
 8003282:	220c      	movs	r2, #12
 8003284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	e009      	b.n	80032a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <_sbrk+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <_sbrk+0x64>)
 800329c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20030000 	.word	0x20030000
 80032ac:	00000400 	.word	0x00000400
 80032b0:	20000634 	.word	0x20000634
 80032b4:	20009ab8 	.word	0x20009ab8

080032b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <SystemInit+0x20>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <SystemInit+0x20>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032e2:	490e      	ldr	r1, [pc, #56]	; (800331c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f8:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003306:	f7ff ffd7 	bl	80032b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f00d fa41 	bl	8010790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7fd fafd 	bl	800090c <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003314:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003320:	08061e50 	.word	0x08061e50
  ldr r2, =_sbss
 8003324:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003328:	20009ab4 	.word	0x20009ab4

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_Init+0x40>)
 800333a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_Init+0x40>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_Init+0x40>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 f8fc 	bl	8003556 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335e:	2000      	movs	r0, #0
 8003360:	f7ff fc36 	bl	8002bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003364:	f7ff f892 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000074 	.word	0x20000074
 8003398:	20000638 	.word	0x20000638

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000638 	.word	0x20000638

080033b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff ffee 	bl	800339c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d005      	beq.n	80033da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_Delay+0x44>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033da:	bf00      	nop
 80033dc:	f7ff ffde 	bl	800339c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f7      	bhi.n	80033dc <HAL_Delay+0x28>
  {
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000074 	.word	0x20000074

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff4c 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357e:	f7ff ff61 	bl	8003444 <__NVIC_GetPriorityGrouping>
 8003582:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f7ff ffb1 	bl	80034f0 <NVIC_EncodePriority>
 800358e:	4602      	mov	r2, r0
 8003590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff80 	bl	800349c <__NVIC_SetPriority>
}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff54 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00e      	b.n	80035f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	795b      	ldrb	r3, [r3, #5]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe ff7e 	bl	80024e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff feca 	bl	800339c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e099      	b.n	8003748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003634:	e00f      	b.n	8003656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003636:	f7ff feb1 	bl	800339c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b05      	cmp	r3, #5
 8003642:	d908      	bls.n	8003656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e078      	b.n	8003748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e8      	bne.n	8003636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_DMA_Init+0x158>)
 8003670:	4013      	ands	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4313      	orrs	r3, r2
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d117      	bne.n	800371a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8bd 	bl	800387c <DMA_CheckFifoParam>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003716:	2301      	movs	r3, #1
 8003718:	e016      	b.n	8003748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f874 	bl	8003810 <DMA_CalcBaseAndBitshift>
 8003728:	4603      	mov	r3, r0
 800372a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	f010803f 	.word	0xf010803f

08003754 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e050      	b.n	8003808 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d101      	bne.n	8003776 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	e048      	b.n	8003808 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2221      	movs	r2, #33	; 0x21
 80037b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f82a 	bl	8003810 <DMA_CalcBaseAndBitshift>
 80037bc:	4603      	mov	r3, r0
 80037be:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3b10      	subs	r3, #16
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <DMA_CalcBaseAndBitshift+0x64>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <DMA_CalcBaseAndBitshift+0x68>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d909      	bls.n	8003852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58
 8003850:	e007      	b.n	8003862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	aaaaaaab 	.word	0xaaaaaaab
 8003878:	08061e04 	.word	0x08061e04

0800387c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11f      	bne.n	80038d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d856      	bhi.n	800394a <DMA_CheckFifoParam+0xce>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <DMA_CheckFifoParam+0x28>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038c7 	.word	0x080038c7
 80038ac:	080038b5 	.word	0x080038b5
 80038b0:	0800394b 	.word	0x0800394b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d046      	beq.n	800394e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e043      	b.n	800394e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ce:	d140      	bne.n	8003952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e03d      	b.n	8003952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038de:	d121      	bne.n	8003924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d837      	bhi.n	8003956 <DMA_CheckFifoParam+0xda>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <DMA_CheckFifoParam+0x70>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003903 	.word	0x08003903
 80038f4:	080038fd 	.word	0x080038fd
 80038f8:	08003915 	.word	0x08003915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e030      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d025      	beq.n	800395a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e022      	b.n	800395a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800391c:	d11f      	bne.n	800395e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003922:	e01c      	b.n	800395e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d903      	bls.n	8003932 <DMA_CheckFifoParam+0xb6>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d003      	beq.n	8003938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003930:	e018      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      break;
 8003936:	e015      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e00b      	b.n	8003962 <DMA_CheckFifoParam+0xe6>
      break;
 800394a:	bf00      	nop
 800394c:	e00a      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
 8003950:	e008      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e006      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;   
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
    }
  } 
  
  return status; 
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e03b      	b.n	80039fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe fdc4 	bl	8002528 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	f023 0107 	bic.w	r1, r3, #7
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d1      	ldr	r1, [r2, #12]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d026      	beq.n	8003a76 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d021      	beq.n	8003a76 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a40:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2201      	movs	r2, #1
 8003a54:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d026      	beq.n	8003ace <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d021      	beq.n	8003ace <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a98:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d026      	beq.n	8003b26 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d021      	beq.n	8003b26 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2208      	movs	r2, #8
 8003af8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f853 	bl	8003bfe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d024      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01f      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2202      	movs	r2, #2
 8003b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01f      	beq.n	8003bf6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f80e 	bl	8003c12 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA2D_ConfigLayer+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e079      	b.n	8003d3c <HAL_DMA2D_ConfigLayer+0x114>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c72:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c74:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b0a      	cmp	r3, #10
 8003c7c:	d003      	beq.n	8003c86 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	d107      	bne.n	8003c96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e005      	b.n	8003ca2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d120      	bne.n	8003cea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	ea02 0103 	and.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA2D_ConfigLayer+0xb2>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d127      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce8:	e01f      	b.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	ea02 0103 	and.w	r1, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b0a      	cmp	r3, #10
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA2D_ConfigLayer+0xf4>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d106      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d28:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	ff03000f 	.word	0xff03000f

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	e177      	b.n	8004058 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	f040 8166 	bne.w	8004052 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d005      	beq.n	8003d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d130      	bne.n	8003e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	2203      	movs	r2, #3
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 0201 	and.w	r2, r3, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d017      	beq.n	8003e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d123      	bne.n	8003e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	08da      	lsrs	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3208      	adds	r2, #8
 8003e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220f      	movs	r2, #15
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	08da      	lsrs	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3208      	adds	r2, #8
 8003e8a:	69b9      	ldr	r1, [r7, #24]
 8003e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0203 	and.w	r2, r3, #3
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80c0 	beq.w	8004052 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_GPIO_Init+0x324>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_GPIO_Init+0x324>)
 8003edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_GPIO_Init+0x324>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eee:	4a61      	ldr	r2, [pc, #388]	; (8004074 <HAL_GPIO_Init+0x328>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_GPIO_Init+0x32c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d037      	beq.n	8003f8a <HAL_GPIO_Init+0x23e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_GPIO_Init+0x330>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_GPIO_Init+0x23a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_GPIO_Init+0x334>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <HAL_GPIO_Init+0x236>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a55      	ldr	r2, [pc, #340]	; (8004084 <HAL_GPIO_Init+0x338>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x232>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_GPIO_Init+0x33c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x22e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a53      	ldr	r2, [pc, #332]	; (800408c <HAL_GPIO_Init+0x340>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x22a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x344>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x226>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	; (8004094 <HAL_GPIO_Init+0x348>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x222>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_GPIO_Init+0x34c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x21e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	; (800409c <HAL_GPIO_Init+0x350>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x21a>
 8003f62:	2309      	movs	r3, #9
 8003f64:	e012      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f66:	230a      	movs	r3, #10
 8003f68:	e010      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	e00e      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e00c      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f72:	2306      	movs	r3, #6
 8003f74:	e00a      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e008      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f002 0203 	and.w	r2, r2, #3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	; (8004074 <HAL_GPIO_Init+0x328>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fce:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff8:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004022:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_GPIO_Init+0x354>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_GPIO_Init+0x354>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_GPIO_Init+0x354>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	f67f ae84 	bls.w	8003d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	; 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021400 	.word	0x40021400
 8004090:	40021800 	.word	0x40021800
 8004094:	40021c00 	.word	0x40021c00
 8004098:	40022000 	.word	0x40022000
 800409c:	40022400 	.word	0x40022400
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e0d9      	b.n	8004274 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c0:	2201      	movs	r2, #1
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	f040 80c9 	bne.w	800426e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80040dc:	4a6b      	ldr	r2, [pc, #428]	; (800428c <HAL_GPIO_DeInit+0x1e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a63      	ldr	r2, [pc, #396]	; (8004290 <HAL_GPIO_DeInit+0x1ec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d037      	beq.n	8004176 <HAL_GPIO_DeInit+0xd2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a62      	ldr	r2, [pc, #392]	; (8004294 <HAL_GPIO_DeInit+0x1f0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d031      	beq.n	8004172 <HAL_GPIO_DeInit+0xce>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a61      	ldr	r2, [pc, #388]	; (8004298 <HAL_GPIO_DeInit+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <HAL_GPIO_DeInit+0xca>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a60      	ldr	r2, [pc, #384]	; (800429c <HAL_GPIO_DeInit+0x1f8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d025      	beq.n	800416a <HAL_GPIO_DeInit+0xc6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a5f      	ldr	r2, [pc, #380]	; (80042a0 <HAL_GPIO_DeInit+0x1fc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <HAL_GPIO_DeInit+0xc2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a5e      	ldr	r2, [pc, #376]	; (80042a4 <HAL_GPIO_DeInit+0x200>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_DeInit+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a5d      	ldr	r2, [pc, #372]	; (80042a8 <HAL_GPIO_DeInit+0x204>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_DeInit+0xba>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a5c      	ldr	r2, [pc, #368]	; (80042ac <HAL_GPIO_DeInit+0x208>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_DeInit+0xb6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a5b      	ldr	r2, [pc, #364]	; (80042b0 <HAL_GPIO_DeInit+0x20c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_DeInit+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_GPIO_DeInit+0x210>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_DeInit+0xae>
 800414e:	2309      	movs	r3, #9
 8004150:	e012      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004152:	230a      	movs	r3, #10
 8004154:	e010      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004156:	2308      	movs	r3, #8
 8004158:	e00e      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800415a:	2307      	movs	r3, #7
 800415c:	e00c      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800415e:	2306      	movs	r3, #6
 8004160:	e00a      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004162:	2305      	movs	r3, #5
 8004164:	e008      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004166:	2304      	movs	r3, #4
 8004168:	e006      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800416a:	2303      	movs	r3, #3
 800416c:	e004      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800416e:	2302      	movs	r3, #2
 8004170:	e002      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004176:	2300      	movs	r3, #0
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	f002 0203 	and.w	r2, r2, #3
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	4093      	lsls	r3, r2
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d132      	bne.n	80041ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004188:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	4949      	ldr	r1, [pc, #292]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 8004192:	4013      	ands	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	43db      	mvns	r3, r3
 800419e:	4946      	ldr	r1, [pc, #280]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041a4:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4942      	ldr	r1, [pc, #264]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	493f      	ldr	r1, [pc, #252]	; (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041bc:	4013      	ands	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80041d0:	4a2e      	ldr	r2, [pc, #184]	; (800428c <HAL_GPIO_DeInit+0x1e8>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	43da      	mvns	r2, r3
 80041e0:	482a      	ldr	r0, [pc, #168]	; (800428c <HAL_GPIO_DeInit+0x1e8>)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	400a      	ands	r2, r1
 80041e8:	3302      	adds	r3, #2
 80041ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2103      	movs	r1, #3
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	08d2      	lsrs	r2, r2, #3
 8004224:	4019      	ands	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3208      	adds	r2, #8
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2103      	movs	r1, #3
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	2101      	movs	r1, #1
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2103      	movs	r1, #3
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	401a      	ands	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	f67f af22 	bls.w	80040c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40013800 	.word	0x40013800
 8004290:	40020000 	.word	0x40020000
 8004294:	40020400 	.word	0x40020400
 8004298:	40020800 	.word	0x40020800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40021800 	.word	0x40021800
 80042ac:	40021c00 	.word	0x40021c00
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40022400 	.word	0x40022400
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d8:	e003      	b.n	80042e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	619a      	str	r2, [r3, #24]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f0:	b08f      	sub	sp, #60	; 0x3c
 80042f2:	af0a      	add	r7, sp, #40	; 0x28
 80042f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e054      	b.n	80043aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f00b ff7e 	bl	801021c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2203      	movs	r2, #3
 8004324:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f005 fdb4 	bl	8009eac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	687e      	ldr	r6, [r7, #4]
 800434c:	466d      	mov	r5, sp
 800434e:	f106 0410 	add.w	r4, r6, #16
 8004352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800435e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004362:	1d33      	adds	r3, r6, #4
 8004364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	f005 fd2e 	bl	8009dc8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f005 fdab 	bl	8009ece <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	687e      	ldr	r6, [r7, #4]
 8004380:	466d      	mov	r5, sp
 8004382:	f106 0410 	add.w	r4, r6, #16
 8004386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004392:	e885 0003 	stmia.w	r5, {r0, r1}
 8004396:	1d33      	adds	r3, r6, #4
 8004398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439a:	6838      	ldr	r0, [r7, #0]
 800439c:	f005 ff34 	bl	800a208 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80043b2:	b590      	push	{r4, r7, lr}
 80043b4:	b089      	sub	sp, #36	; 0x24
 80043b6:	af04      	add	r7, sp, #16
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	461a      	mov	r2, r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	70fb      	strb	r3, [r7, #3]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70bb      	strb	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_HCD_HC_Init+0x28>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e076      	b.n	80044c8 <HAL_HCD_HC_Init+0x116>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	333d      	adds	r3, #61	; 0x3d
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3338      	adds	r3, #56	; 0x38
 8004402:	787a      	ldrb	r2, [r7, #1]
 8004404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3340      	adds	r3, #64	; 0x40
 8004414:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004416:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3339      	adds	r3, #57	; 0x39
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	333f      	adds	r3, #63	; 0x3f
 8004438:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800443c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	78ba      	ldrb	r2, [r7, #2]
 8004442:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004446:	b2d0      	uxtb	r0, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	333a      	adds	r3, #58	; 0x3a
 8004454:	4602      	mov	r2, r0
 8004456:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004458:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800445c:	2b00      	cmp	r3, #0
 800445e:	da09      	bge.n	8004474 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	333b      	adds	r3, #59	; 0x3b
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e008      	b.n	8004486 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	333b      	adds	r3, #59	; 0x3b
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	333c      	adds	r3, #60	; 0x3c
 8004494:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004498:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	787c      	ldrb	r4, [r7, #1]
 80044a0:	78ba      	ldrb	r2, [r7, #2]
 80044a2:	78f9      	ldrb	r1, [r7, #3]
 80044a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044a6:	9302      	str	r3, [sp, #8]
 80044a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4623      	mov	r3, r4
 80044b6:	f006 f82d 	bl	800a514 <USB_HC_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd90      	pop	{r4, r7, pc}

080044d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_HCD_HC_Halt+0x1e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e00f      	b.n	800450e <HAL_HCD_HC_Halt+0x3e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f006 fa7d 	bl	800a9fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	461a      	mov	r2, r3
 8004526:	4603      	mov	r3, r0
 8004528:	70fb      	strb	r3, [r7, #3]
 800452a:	460b      	mov	r3, r1
 800452c:	70bb      	strb	r3, [r7, #2]
 800452e:	4613      	mov	r3, r2
 8004530:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	212c      	movs	r1, #44	; 0x2c
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	333b      	adds	r3, #59	; 0x3b
 8004540:	78ba      	ldrb	r2, [r7, #2]
 8004542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	333f      	adds	r3, #63	; 0x3f
 8004552:	787a      	ldrb	r2, [r7, #1]
 8004554:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004556:	7c3b      	ldrb	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d112      	bne.n	8004582 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	212c      	movs	r1, #44	; 0x2c
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	4413      	add	r3, r2
 8004568:	3342      	adds	r3, #66	; 0x42
 800456a:	2203      	movs	r2, #3
 800456c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	333d      	adds	r3, #61	; 0x3d
 800457c:	7f3a      	ldrb	r2, [r7, #28]
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e008      	b.n	8004594 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3342      	adds	r3, #66	; 0x42
 8004590:	2202      	movs	r2, #2
 8004592:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004594:	787b      	ldrb	r3, [r7, #1]
 8004596:	2b03      	cmp	r3, #3
 8004598:	f200 80c6 	bhi.w	8004728 <HAL_HCD_HC_SubmitRequest+0x210>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	08004715 	.word	0x08004715
 80045ac:	08004619 	.word	0x08004619
 80045b0:	08004697 	.word	0x08004697
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80045b4:	7c3b      	ldrb	r3, [r7, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 80b8 	bne.w	800472c <HAL_HCD_HC_SubmitRequest+0x214>
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 80b4 	bne.w	800472c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80045c4:	8b3b      	ldrh	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3355      	adds	r3, #85	; 0x55
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3355      	adds	r3, #85	; 0x55
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	3342      	adds	r3, #66	; 0x42
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004602:	e093      	b.n	800472c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3342      	adds	r3, #66	; 0x42
 8004612:	2202      	movs	r2, #2
 8004614:	701a      	strb	r2, [r3, #0]
      break;
 8004616:	e089      	b.n	800472c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004618:	78bb      	ldrb	r3, [r7, #2]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11d      	bne.n	800465a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3355      	adds	r3, #85	; 0x55
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	3342      	adds	r3, #66	; 0x42
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004644:	e073      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	3342      	adds	r3, #66	; 0x42
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]
      break;
 8004658:	e069      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	3354      	adds	r3, #84	; 0x54
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	3342      	adds	r3, #66	; 0x42
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
      break;
 8004680:	e055      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3342      	adds	r3, #66	; 0x42
 8004690:	2202      	movs	r2, #2
 8004692:	701a      	strb	r2, [r3, #0]
      break;
 8004694:	e04b      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004696:	78bb      	ldrb	r3, [r7, #2]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3355      	adds	r3, #85	; 0x55
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	212c      	movs	r1, #44	; 0x2c
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3342      	adds	r3, #66	; 0x42
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80046c2:	e034      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3342      	adds	r3, #66	; 0x42
 80046d2:	2202      	movs	r2, #2
 80046d4:	701a      	strb	r2, [r3, #0]
      break;
 80046d6:	e02a      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	4413      	add	r3, r2
 80046e4:	3354      	adds	r3, #84	; 0x54
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	3342      	adds	r3, #66	; 0x42
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
      break;
 80046fe:	e016      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3342      	adds	r3, #66	; 0x42
 800470e:	2202      	movs	r2, #2
 8004710:	701a      	strb	r2, [r3, #0]
      break;
 8004712:	e00c      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3342      	adds	r3, #66	; 0x42
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
      break;
 8004726:	e002      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004728:	bf00      	nop
 800472a:	e000      	b.n	800472e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800472c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3344      	adds	r3, #68	; 0x44
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	8b3a      	ldrh	r2, [r7, #24]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	202c      	movs	r0, #44	; 0x2c
 8004748:	fb00 f303 	mul.w	r3, r0, r3
 800474c:	440b      	add	r3, r1
 800474e:	334c      	adds	r3, #76	; 0x4c
 8004750:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3360      	adds	r3, #96	; 0x60
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3350      	adds	r3, #80	; 0x50
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	3339      	adds	r3, #57	; 0x39
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3361      	adds	r3, #97	; 0x61
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	222c      	movs	r2, #44	; 0x2c
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	3338      	adds	r3, #56	; 0x38
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	18d1      	adds	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	f005 ffd0 	bl	800a758 <USB_HC_StartXfer>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop

080047c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 fcd1 	bl	800a182 <USB_GetMode>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	f040 80f6 	bne.w	80049d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f005 fcb5 	bl	800a15c <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80ec 	beq.w	80049d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f005 fcac 	bl	800a15c <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480e:	d104      	bne.n	800481a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004818:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f005 fc9c 	bl	800a15c <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d104      	bne.n	800483a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004838:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f005 fc8c 	bl	800a15c <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800484a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800484e:	d104      	bne.n	800485a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f005 fc7c 	bl	800a15c <USB_ReadInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d103      	bne.n	8004876 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2202      	movs	r2, #2
 8004874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f005 fc6e 	bl	800a15c <USB_ReadInterrupts>
 8004880:	4603      	mov	r3, r0
 8004882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488a:	d11c      	bne.n	80048c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004894:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80048a6:	2110      	movs	r1, #16
 80048a8:	6938      	ldr	r0, [r7, #16]
 80048aa:	f005 fb5d 	bl	8009f68 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80048ae:	6938      	ldr	r0, [r7, #16]
 80048b0:	f005 fb8e 	bl	8009fd0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f005 fd64 	bl	800a388 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f00b fd25 	bl	8010310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f005 fc46 	bl	800a15c <USB_ReadInterrupts>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048da:	d102      	bne.n	80048e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 f89e 	bl	8005a1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f005 fc38 	bl	800a15c <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d106      	bne.n	8004904 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f00b fcee 	bl	80102d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2208      	movs	r2, #8
 8004902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f005 fc27 	bl	800a15c <USB_ReadInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b10      	cmp	r3, #16
 8004916:	d101      	bne.n	800491c <HAL_HCD_IRQHandler+0x158>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_HCD_IRQHandler+0x15a>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d012      	beq.n	8004948 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0210 	bic.w	r2, r2, #16
 8004930:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 ffa1 	bl	800587a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0210 	orr.w	r2, r2, #16
 8004946:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f005 fc05 	bl	800a15c <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800495c:	d13a      	bne.n	80049d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f006 f83a 	bl	800a9dc <USB_HC_ReadInterrupt>
 8004968:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e025      	b.n	80049bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d018      	beq.n	80049b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d106      	bne.n	80049aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8ab 	bl	8004afe <HCD_HC_IN_IRQHandler>
 80049a8:	e005      	b.n	80049b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fbf9 	bl	80051a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3301      	adds	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d3d4      	bcc.n	8004970 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049ce:	615a      	str	r2, [r3, #20]
 80049d0:	e000      	b.n	80049d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80049d2:	bf00      	nop
    }
  }
}
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_HCD_Start+0x16>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e013      	b.n	8004a18 <HAL_HCD_Start+0x3e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 fd26 	bl	800a450 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f005 fa3e 	bl	8009e8a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_HCD_Stop+0x16>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e00d      	b.n	8004a52 <HAL_HCD_Stop+0x32>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f006 f914 	bl	800ac70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 fcc8 	bl	800a3fc <USB_ResetPort>
 8004a6c:	4603      	mov	r3, r0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3360      	adds	r3, #96	; 0x60
 8004a90:	781b      	ldrb	r3, [r3, #0]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3350      	adds	r3, #80	; 0x50
 8004ab8:	681b      	ldr	r3, [r3, #0]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f005 fd0c 	bl	800a4f0 <USB_GetCurrentFrame>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f005 fce7 	bl	800a4c2 <USB_GetHostSpeed>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d11a      	bne.n	8004b64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	212c      	movs	r1, #44	; 0x2c
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3361      	adds	r3, #97	; 0x61
 8004b4e:	2206      	movs	r2, #6
 8004b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f005 ff4e 	bl	800a9fe <USB_HC_Halt>
 8004b62:	e0af      	b.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d11b      	bne.n	8004bb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3361      	adds	r3, #97	; 0x61
 8004b9e:	2207      	movs	r2, #7
 8004ba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f005 ff26 	bl	800a9fe <USB_HC_Halt>
 8004bb2:	e087      	b.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d109      	bne.n	8004bde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2320      	movs	r3, #32
 8004bda:	6093      	str	r3, [r2, #8]
 8004bdc:	e072      	b.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d11a      	bne.n	8004c2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	461a      	mov	r2, r3
 8004c02:	2308      	movs	r3, #8
 8004c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3361      	adds	r3, #97	; 0x61
 8004c14:	2205      	movs	r2, #5
 8004c16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f005 feeb 	bl	800a9fe <USB_HC_Halt>
 8004c28:	e04c      	b.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c40:	d11b      	bne.n	8004c7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3361      	adds	r3, #97	; 0x61
 8004c64:	2208      	movs	r2, #8
 8004c66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f005 fec3 	bl	800a9fe <USB_HC_Halt>
 8004c78:	e024      	b.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d119      	bne.n	8004cc4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3361      	adds	r3, #97	; 0x61
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f005 fe9d 	bl	800a9fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cda:	d112      	bne.n	8004d02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f005 fe89 	bl	800a9fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004d00:	e24e      	b.n	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 80df 	bne.w	8004ed8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d019      	beq.n	8004d56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	212c      	movs	r1, #44	; 0x2c
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3348      	adds	r3, #72	; 0x48
 8004d30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0159      	lsls	r1, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	202c      	movs	r0, #44	; 0x2c
 8004d4c:	fb00 f303 	mul.w	r3, r0, r3
 8004d50:	440b      	add	r3, r1
 8004d52:	3350      	adds	r3, #80	; 0x50
 8004d54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3361      	adds	r3, #97	; 0x61
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	335c      	adds	r3, #92	; 0x5c
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	2301      	movs	r3, #1
 8004d8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	333f      	adds	r3, #63	; 0x3f
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	212c      	movs	r1, #44	; 0x2c
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	333f      	adds	r3, #63	; 0x3f
 8004dae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d111      	bne.n	8004dd8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 fe1d 	bl	800a9fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	6093      	str	r3, [r2, #8]
 8004dd6:	e03a      	b.n	8004e4e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	333f      	adds	r3, #63	; 0x3f
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d009      	beq.n	8004e00 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	212c      	movs	r1, #44	; 0x2c
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	333f      	adds	r3, #63	; 0x3f
 8004dfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d126      	bne.n	8004e4e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3360      	adds	r3, #96	; 0x60
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	b2d9      	uxtb	r1, r3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	202c      	movs	r0, #44	; 0x2c
 8004e3c:	fb00 f303 	mul.w	r3, r0, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	3360      	adds	r3, #96	; 0x60
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f00b fa6f 	bl	801032c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d12b      	bne.n	8004eae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3348      	adds	r3, #72	; 0x48
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	202c      	movs	r0, #44	; 0x2c
 8004e6c:	fb00 f202 	mul.w	r2, r0, r2
 8004e70:	440a      	add	r2, r1
 8004e72:	3240      	adds	r2, #64	; 0x40
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 818e 	beq.w	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	3354      	adds	r3, #84	; 0x54
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2d8      	uxtb	r0, r3
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3354      	adds	r3, #84	; 0x54
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	701a      	strb	r2, [r3, #0]
}
 8004eac:	e178      	b.n	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	212c      	movs	r1, #44	; 0x2c
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	3354      	adds	r3, #84	; 0x54
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f083 0301 	eor.w	r3, r3, #1
 8004ec2:	b2d8      	uxtb	r0, r3
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	212c      	movs	r1, #44	; 0x2c
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	3354      	adds	r3, #84	; 0x54
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	701a      	strb	r2, [r3, #0]
}
 8004ed6:	e163      	b.n	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	f040 80f6 	bne.w	80050dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3361      	adds	r3, #97	; 0x61
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d109      	bne.n	8004f18 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3360      	adds	r3, #96	; 0x60
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e0c9      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	212c      	movs	r1, #44	; 0x2c
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	3361      	adds	r3, #97	; 0x61
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b05      	cmp	r3, #5
 8004f2a:	d109      	bne.n	8004f40 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3360      	adds	r3, #96	; 0x60
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e0b5      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3361      	adds	r3, #97	; 0x61
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d009      	beq.n	8004f68 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	3361      	adds	r3, #97	; 0x61
 8004f62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d150      	bne.n	800500a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	335c      	adds	r3, #92	; 0x5c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	202c      	movs	r0, #44	; 0x2c
 8004f80:	fb00 f303 	mul.w	r3, r0, r3
 8004f84:	440b      	add	r3, r1
 8004f86:	335c      	adds	r3, #92	; 0x5c
 8004f88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	212c      	movs	r1, #44	; 0x2c
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	335c      	adds	r3, #92	; 0x5c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d912      	bls.n	8004fc4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	335c      	adds	r3, #92	; 0x5c
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3360      	adds	r3, #96	; 0x60
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fc2:	e073      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3360      	adds	r3, #96	; 0x60
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005008:	e050      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3361      	adds	r3, #97	; 0x61
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d122      	bne.n	8005064 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3360      	adds	r3, #96	; 0x60
 800502c:	2202      	movs	r2, #2
 800502e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005046:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800504e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e023      	b.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3361      	adds	r3, #97	; 0x61
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b07      	cmp	r3, #7
 8005076:	d119      	bne.n	80050ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	335c      	adds	r3, #92	; 0x5c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	202c      	movs	r0, #44	; 0x2c
 8005090:	fb00 f303 	mul.w	r3, r0, r3
 8005094:	440b      	add	r3, r1
 8005096:	335c      	adds	r3, #92	; 0x5c
 8005098:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	3360      	adds	r3, #96	; 0x60
 80050a8:	2204      	movs	r2, #4
 80050aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	461a      	mov	r2, r3
 80050ba:	2302      	movs	r3, #2
 80050bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	b2d9      	uxtb	r1, r3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	202c      	movs	r0, #44	; 0x2c
 80050c8:	fb00 f303 	mul.w	r3, r0, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3360      	adds	r3, #96	; 0x60
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f00b f929 	bl	801032c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050da:	e061      	b.n	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d156      	bne.n	80051a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	333f      	adds	r3, #63	; 0x3f
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d111      	bne.n	800512a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f005 fc6b 	bl	800a9fe <USB_HC_Halt>
 8005128:	e031      	b.n	800518e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	212c      	movs	r1, #44	; 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	333f      	adds	r3, #63	; 0x3f
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	212c      	movs	r1, #44	; 0x2c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	333f      	adds	r3, #63	; 0x3f
 800514c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800514e:	2b02      	cmp	r3, #2
 8005150:	d11d      	bne.n	800518e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	212c      	movs	r1, #44	; 0x2c
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	4413      	add	r3, r2
 800515e:	335c      	adds	r3, #92	; 0x5c
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d110      	bne.n	800518e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	3361      	adds	r3, #97	; 0x61
 800517a:	2203      	movs	r2, #3
 800517c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f005 fc38 	bl	800a9fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	461a      	mov	r2, r3
 800519c:	2310      	movs	r3, #16
 800519e:	6093      	str	r3, [r2, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11a      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	2304      	movs	r3, #4
 80051e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	3361      	adds	r3, #97	; 0x61
 80051f8:	2206      	movs	r2, #6
 80051fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f005 fbf9 	bl	800a9fe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800520c:	e331      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b20      	cmp	r3, #32
 8005222:	d12e      	bne.n	8005282 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2320      	movs	r3, #32
 8005234:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	212c      	movs	r1, #44	; 0x2c
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	4413      	add	r3, r2
 8005242:	333d      	adds	r3, #61	; 0x3d
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	f040 8313 	bne.w	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	212c      	movs	r1, #44	; 0x2c
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	333d      	adds	r3, #61	; 0x3d
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	212c      	movs	r1, #44	; 0x2c
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	3360      	adds	r3, #96	; 0x60
 800526c:	2202      	movs	r2, #2
 800526e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f005 fbbf 	bl	800a9fe <USB_HC_Halt>
}
 8005280:	e2f7      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d112      	bne.n	80052c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	461a      	mov	r2, r3
 80052a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f005 fba0 	bl	800a9fe <USB_HC_Halt>
}
 80052be:	e2d8      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d140      	bne.n	8005358 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	335c      	adds	r3, #92	; 0x5c
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d111      	bne.n	8005322 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	212c      	movs	r1, #44	; 0x2c
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	333d      	adds	r3, #61	; 0x3d
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	461a      	mov	r2, r3
 8005330:	2301      	movs	r3, #1
 8005332:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3361      	adds	r3, #97	; 0x61
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f005 fb54 	bl	800a9fe <USB_HC_Halt>
}
 8005356:	e28c      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d12c      	bne.n	80053c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	212c      	movs	r1, #44	; 0x2c
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	4413      	add	r3, r2
 800537a:	3361      	adds	r3, #97	; 0x61
 800537c:	2204      	movs	r2, #4
 800537e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	333d      	adds	r3, #61	; 0x3d
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	335c      	adds	r3, #92	; 0x5c
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f005 fb25 	bl	800a9fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	461a      	mov	r2, r3
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	6093      	str	r3, [r2, #8]
}
 80053c6:	e254      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d11a      	bne.n	8005414 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	461a      	mov	r2, r3
 80053ec:	2308      	movs	r3, #8
 80053ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	3361      	adds	r3, #97	; 0x61
 80053fe:	2205      	movs	r2, #5
 8005400:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f005 faf6 	bl	800a9fe <USB_HC_Halt>
}
 8005412:	e22e      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b10      	cmp	r3, #16
 8005428:	d140      	bne.n	80054ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	335c      	adds	r3, #92	; 0x5c
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3361      	adds	r3, #97	; 0x61
 800544a:	2203      	movs	r2, #3
 800544c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	212c      	movs	r1, #44	; 0x2c
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	333d      	adds	r3, #61	; 0x3d
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d112      	bne.n	8005488 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	212c      	movs	r1, #44	; 0x2c
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	333c      	adds	r3, #60	; 0x3c
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	333d      	adds	r3, #61	; 0x3d
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f005 fab3 	bl	800a9fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	461a      	mov	r2, r3
 80054a6:	2310      	movs	r3, #16
 80054a8:	6093      	str	r3, [r2, #8]
}
 80054aa:	e1e2      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d164      	bne.n	800558c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d111      	bne.n	80054ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	212c      	movs	r1, #44	; 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	3361      	adds	r3, #97	; 0x61
 80054d8:	2206      	movs	r2, #6
 80054da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f005 fa89 	bl	800a9fe <USB_HC_Halt>
 80054ec:	e044      	b.n	8005578 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	335c      	adds	r3, #92	; 0x5c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	202c      	movs	r0, #44	; 0x2c
 8005506:	fb00 f303 	mul.w	r3, r0, r3
 800550a:	440b      	add	r3, r1
 800550c:	335c      	adds	r3, #92	; 0x5c
 800550e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	212c      	movs	r1, #44	; 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	335c      	adds	r3, #92	; 0x5c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d920      	bls.n	8005566 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	212c      	movs	r1, #44	; 0x2c
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	4413      	add	r3, r2
 8005530:	335c      	adds	r3, #92	; 0x5c
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	212c      	movs	r1, #44	; 0x2c
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	4413      	add	r3, r2
 8005542:	3360      	adds	r3, #96	; 0x60
 8005544:	2204      	movs	r2, #4
 8005546:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	b2d9      	uxtb	r1, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	202c      	movs	r0, #44	; 0x2c
 8005552:	fb00 f303 	mul.w	r3, r0, r3
 8005556:	4413      	add	r3, r2
 8005558:	3360      	adds	r3, #96	; 0x60
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f00a fee4 	bl	801032c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005564:	e008      	b.n	8005578 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	212c      	movs	r1, #44	; 0x2c
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	4413      	add	r3, r2
 8005572:	3360      	adds	r3, #96	; 0x60
 8005574:	2202      	movs	r2, #2
 8005576:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	461a      	mov	r2, r3
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	6093      	str	r3, [r2, #8]
}
 800558a:	e172      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d11b      	bne.n	80055dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3361      	adds	r3, #97	; 0x61
 80055b2:	2208      	movs	r2, #8
 80055b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f005 fa1c 	bl	800a9fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	461a      	mov	r2, r3
 80055d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d8:	6093      	str	r3, [r2, #8]
}
 80055da:	e14a      	b.n	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f040 813f 	bne.w	8005872 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3361      	adds	r3, #97	; 0x61
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d17d      	bne.n	8005704 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	212c      	movs	r1, #44	; 0x2c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	3360      	adds	r3, #96	; 0x60
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	212c      	movs	r1, #44	; 0x2c
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	4413      	add	r3, r2
 8005626:	333f      	adds	r3, #63	; 0x3f
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d00a      	beq.n	8005644 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	212c      	movs	r1, #44	; 0x2c
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	333f      	adds	r3, #63	; 0x3f
 800563c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800563e:	2b03      	cmp	r3, #3
 8005640:	f040 8100 	bne.w	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d113      	bne.n	8005674 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	212c      	movs	r1, #44	; 0x2c
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	3355      	adds	r3, #85	; 0x55
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f083 0301 	eor.w	r3, r3, #1
 8005660:	b2d8      	uxtb	r0, r3
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	3355      	adds	r3, #85	; 0x55
 8005670:	4602      	mov	r2, r0
 8005672:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 80e3 	bne.w	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	212c      	movs	r1, #44	; 0x2c
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	4413      	add	r3, r2
 800568a:	334c      	adds	r3, #76	; 0x4c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80d8 	beq.w	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	212c      	movs	r1, #44	; 0x2c
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	334c      	adds	r3, #76	; 0x4c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	202c      	movs	r0, #44	; 0x2c
 80056aa:	fb00 f202 	mul.w	r2, r0, r2
 80056ae:	440a      	add	r2, r1
 80056b0:	3240      	adds	r2, #64	; 0x40
 80056b2:	8812      	ldrh	r2, [r2, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	3b01      	subs	r3, #1
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	202c      	movs	r0, #44	; 0x2c
 80056be:	fb00 f202 	mul.w	r2, r0, r2
 80056c2:	440a      	add	r2, r1
 80056c4:	3240      	adds	r2, #64	; 0x40
 80056c6:	8812      	ldrh	r2, [r2, #0]
 80056c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80b5 	beq.w	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	212c      	movs	r1, #44	; 0x2c
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	3355      	adds	r3, #85	; 0x55
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f083 0301 	eor.w	r3, r3, #1
 80056ee:	b2d8      	uxtb	r0, r3
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3355      	adds	r3, #85	; 0x55
 80056fe:	4602      	mov	r2, r0
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e09f      	b.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	212c      	movs	r1, #44	; 0x2c
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	3361      	adds	r3, #97	; 0x61
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d109      	bne.n	800572c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	3360      	adds	r3, #96	; 0x60
 8005726:	2202      	movs	r2, #2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e08b      	b.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	3361      	adds	r3, #97	; 0x61
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d109      	bne.n	8005754 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	3360      	adds	r3, #96	; 0x60
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e077      	b.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	212c      	movs	r1, #44	; 0x2c
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	3361      	adds	r3, #97	; 0x61
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b05      	cmp	r3, #5
 8005766:	d109      	bne.n	800577c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	212c      	movs	r1, #44	; 0x2c
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	3360      	adds	r3, #96	; 0x60
 8005776:	2205      	movs	r2, #5
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e063      	b.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	212c      	movs	r1, #44	; 0x2c
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	3361      	adds	r3, #97	; 0x61
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b06      	cmp	r3, #6
 800578e:	d009      	beq.n	80057a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	212c      	movs	r1, #44	; 0x2c
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	4413      	add	r3, r2
 800579c:	3361      	adds	r3, #97	; 0x61
 800579e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d14f      	bne.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	212c      	movs	r1, #44	; 0x2c
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	335c      	adds	r3, #92	; 0x5c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	202c      	movs	r0, #44	; 0x2c
 80057bc:	fb00 f303 	mul.w	r3, r0, r3
 80057c0:	440b      	add	r3, r1
 80057c2:	335c      	adds	r3, #92	; 0x5c
 80057c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	212c      	movs	r1, #44	; 0x2c
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	4413      	add	r3, r2
 80057d2:	335c      	adds	r3, #92	; 0x5c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d912      	bls.n	8005800 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	212c      	movs	r1, #44	; 0x2c
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	4413      	add	r3, r2
 80057e6:	335c      	adds	r3, #92	; 0x5c
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	212c      	movs	r1, #44	; 0x2c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	3360      	adds	r3, #96	; 0x60
 80057fa:	2204      	movs	r2, #4
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e021      	b.n	8005844 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	3360      	adds	r3, #96	; 0x60
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005828:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005830:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	461a      	mov	r2, r3
 8005852:	2302      	movs	r3, #2
 8005854:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	b2d9      	uxtb	r1, r3
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	202c      	movs	r0, #44	; 0x2c
 8005860:	fb00 f303 	mul.w	r3, r0, r3
 8005864:	4413      	add	r3, r2
 8005866:	3360      	adds	r3, #96	; 0x60
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f00a fd5d 	bl	801032c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005872:	bf00      	nop
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	; 0x28
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	0c5b      	lsrs	r3, r3, #17
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d004      	beq.n	80058c0 <HCD_RXQLVL_IRQHandler+0x46>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	f000 80a9 	beq.w	8005a10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80058be:	e0aa      	b.n	8005a16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a6 	beq.w	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	212c      	movs	r1, #44	; 0x2c
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	3344      	adds	r3, #68	; 0x44
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 809b 	beq.w	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	212c      	movs	r1, #44	; 0x2c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	3350      	adds	r3, #80	; 0x50
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	441a      	add	r2, r3
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	202c      	movs	r0, #44	; 0x2c
 80058f8:	fb00 f303 	mul.w	r3, r0, r3
 80058fc:	440b      	add	r3, r1
 80058fe:	334c      	adds	r3, #76	; 0x4c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d87a      	bhi.n	80059fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	212c      	movs	r1, #44	; 0x2c
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	3344      	adds	r3, #68	; 0x44
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	b292      	uxth	r2, r2
 800591e:	4619      	mov	r1, r3
 8005920:	f004 fbc4 	bl	800a0ac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	212c      	movs	r1, #44	; 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	3344      	adds	r3, #68	; 0x44
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	441a      	add	r2, r3
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	202c      	movs	r0, #44	; 0x2c
 800593e:	fb00 f303 	mul.w	r3, r0, r3
 8005942:	440b      	add	r3, r1
 8005944:	3344      	adds	r3, #68	; 0x44
 8005946:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	212c      	movs	r1, #44	; 0x2c
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	3350      	adds	r3, #80	; 0x50
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	441a      	add	r2, r3
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	202c      	movs	r0, #44	; 0x2c
 8005962:	fb00 f303 	mul.w	r3, r0, r3
 8005966:	440b      	add	r3, r1
 8005968:	3350      	adds	r3, #80	; 0x50
 800596a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	0cdb      	lsrs	r3, r3, #19
 800597c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005980:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	3340      	adds	r3, #64	; 0x40
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4293      	cmp	r3, r2
 8005998:	d13c      	bne.n	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d039      	beq.n	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	212c      	movs	r1, #44	; 0x2c
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	4413      	add	r3, r2
 80059de:	3354      	adds	r3, #84	; 0x54
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f083 0301 	eor.w	r3, r3, #1
 80059e6:	b2d8      	uxtb	r0, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	212c      	movs	r1, #44	; 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	3354      	adds	r3, #84	; 0x54
 80059f6:	4602      	mov	r2, r0
 80059f8:	701a      	strb	r2, [r3, #0]
      break;
 80059fa:	e00b      	b.n	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3360      	adds	r3, #96	; 0x60
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	701a      	strb	r2, [r3, #0]
      break;
 8005a0e:	e001      	b.n	8005a14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005a14:	bf00      	nop
  }
}
 8005a16:	bf00      	nop
 8005a18:	3728      	adds	r7, #40	; 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d10b      	bne.n	8005a6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d102      	bne.n	8005a66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f00a fc47 	bl	80102f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d132      	bne.n	8005ade <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f043 0308 	orr.w	r3, r3, #8
 8005a7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d126      	bne.n	8005ad8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d113      	bne.n	8005aba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a9c:	d106      	bne.n	8005aac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fc6f 	bl	800a388 <USB_InitFSLSPClkSel>
 8005aaa:	e011      	b.n	8005ad0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 fc68 	bl	800a388 <USB_InitFSLSPClkSel>
 8005ab8:	e00a      	b.n	8005ad0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d106      	bne.n	8005ad0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ace:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f00a fc3d 	bl	8010350 <HAL_HCD_PortEnabled_Callback>
 8005ad6:	e002      	b.n	8005ade <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00a fc47 	bl	801036c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d103      	bne.n	8005af0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f043 0320 	orr.w	r3, r3, #32
 8005aee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e12b      	b.n	8005d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc fd24 	bl	8002578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b68:	f002 f846 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a81      	ldr	r2, [pc, #516]	; (8005d78 <HAL_I2C_Init+0x274>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d807      	bhi.n	8005b88 <HAL_I2C_Init+0x84>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a80      	ldr	r2, [pc, #512]	; (8005d7c <HAL_I2C_Init+0x278>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bf94      	ite	ls
 8005b80:	2301      	movls	r3, #1
 8005b82:	2300      	movhi	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e006      	b.n	8005b96 <HAL_I2C_Init+0x92>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a7d      	ldr	r2, [pc, #500]	; (8005d80 <HAL_I2C_Init+0x27c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bf94      	ite	ls
 8005b90:	2301      	movls	r3, #1
 8005b92:	2300      	movhi	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0e7      	b.n	8005d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a78      	ldr	r2, [pc, #480]	; (8005d84 <HAL_I2C_Init+0x280>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	0c9b      	lsrs	r3, r3, #18
 8005ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <HAL_I2C_Init+0x274>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d802      	bhi.n	8005bd8 <HAL_I2C_Init+0xd4>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	e009      	b.n	8005bec <HAL_I2C_Init+0xe8>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	4a69      	ldr	r2, [pc, #420]	; (8005d88 <HAL_I2C_Init+0x284>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	3301      	adds	r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	495c      	ldr	r1, [pc, #368]	; (8005d78 <HAL_I2C_Init+0x274>)
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	d819      	bhi.n	8005c40 <HAL_I2C_Init+0x13c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e59      	subs	r1, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c20:	400b      	ands	r3, r1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_I2C_Init+0x138>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e59      	subs	r1, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c34:	3301      	adds	r3, #1
 8005c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3a:	e051      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	e04f      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d111      	bne.n	8005c6c <HAL_I2C_Init+0x168>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1e58      	subs	r0, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e012      	b.n	8005c92 <HAL_I2C_Init+0x18e>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1e58      	subs	r0, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6859      	ldr	r1, [r3, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	0099      	lsls	r1, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c82:	3301      	adds	r3, #1
 8005c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_I2C_Init+0x196>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e022      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_I2C_Init+0x1bc>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1e58      	subs	r0, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6859      	ldr	r1, [r3, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	440b      	add	r3, r1
 8005cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	e00f      	b.n	8005ce0 <HAL_I2C_Init+0x1dc>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e58      	subs	r0, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	0099      	lsls	r1, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	6809      	ldr	r1, [r1, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6911      	ldr	r1, [r2, #16]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68d2      	ldr	r2, [r2, #12]
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	000186a0 	.word	0x000186a0
 8005d7c:	001e847f 	.word	0x001e847f
 8005d80:	003d08ff 	.word	0x003d08ff
 8005d84:	431bde83 	.word	0x431bde83
 8005d88:	10624dd3 	.word	0x10624dd3

08005d8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e021      	b.n	8005de2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2224      	movs	r2, #36	; 0x24
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fc48 	bl	800264c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	817b      	strh	r3, [r7, #10]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	813b      	strh	r3, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e06:	f7fd fac9 	bl	800339c <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	f040 80d9 	bne.w	8005fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2319      	movs	r3, #25
 8005e20:	2201      	movs	r2, #1
 8005e22:	496d      	ldr	r1, [pc, #436]	; (8005fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fc8d 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0cc      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2C_Mem_Write+0x56>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0c5      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d007      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2221      	movs	r2, #33	; 0x21
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2240      	movs	r2, #64	; 0x40
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a3a      	ldr	r2, [r7, #32]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_I2C_Mem_Write+0x1f0>)
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eaa:	88f8      	ldrh	r0, [r7, #6]
 8005eac:	893a      	ldrh	r2, [r7, #8]
 8005eae:	8979      	ldrh	r1, [r7, #10]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4603      	mov	r3, r0
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fac4 	bl	8006448 <I2C_RequestMemoryWrite>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d052      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e081      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fd0e 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d107      	bne.n	8005ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e06b      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	781a      	ldrb	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d11b      	bne.n	8005f6c <HAL_I2C_Mem_Write+0x180>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d017      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1aa      	bne.n	8005eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fcfa 	bl	8006972 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d107      	bne.n	8005f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e016      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	00100002 	.word	0x00100002
 8005fdc:	ffff0000 	.word	0xffff0000

08005fe0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	; 0x30
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	461a      	mov	r2, r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	813b      	strh	r3, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ffa:	f7fd f9cf 	bl	800339c <HAL_GetTick>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b20      	cmp	r3, #32
 800600a:	f040 8208 	bne.w	800641e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	2319      	movs	r3, #25
 8006014:	2201      	movs	r2, #1
 8006016:	497b      	ldr	r1, [pc, #492]	; (8006204 <HAL_I2C_Mem_Read+0x224>)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fb93 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
 8006026:	e1fb      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_I2C_Mem_Read+0x56>
 8006032:	2302      	movs	r3, #2
 8006034:	e1f4      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d007      	beq.n	800605c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2222      	movs	r2, #34	; 0x22
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800608c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a5b      	ldr	r2, [pc, #364]	; (8006208 <HAL_I2C_Mem_Read+0x228>)
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800609e:	88f8      	ldrh	r0, [r7, #6]
 80060a0:	893a      	ldrh	r2, [r7, #8]
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fa60 	bl	8006574 <I2C_RequestMemoryRead>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e1b0      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d113      	bne.n	80060ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	e184      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d11b      	bne.n	800612e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e164      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b02      	cmp	r3, #2
 8006134:	d11b      	bne.n	800616e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	e144      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006184:	e138      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	2b03      	cmp	r3, #3
 800618c:	f200 80f1 	bhi.w	8006372 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	2b01      	cmp	r3, #1
 8006196:	d123      	bne.n	80061e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fc29 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e139      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061de:	e10b      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d14e      	bne.n	8006286 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2200      	movs	r2, #0
 80061f0:	4906      	ldr	r1, [pc, #24]	; (800620c <HAL_I2C_Mem_Read+0x22c>)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 faa6 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e10e      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
 8006202:	bf00      	nop
 8006204:	00100002 	.word	0x00100002
 8006208:	ffff0000 	.word	0xffff0000
 800620c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006284:	e0b8      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	2200      	movs	r2, #0
 800628e:	4966      	ldr	r1, [pc, #408]	; (8006428 <HAL_I2C_Mem_Read+0x448>)
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fa57 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0bf      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2200      	movs	r2, #0
 80062ea:	494f      	ldr	r1, [pc, #316]	; (8006428 <HAL_I2C_Mem_Read+0x448>)
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fa29 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e091      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006370:	e042      	b.n	80063f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fb3c 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e04c      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d118      	bne.n	80063f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f aec2 	bne.w	8006186 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3728      	adds	r7, #40	; 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	00010004 	.word	0x00010004

0800642c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643a:	b2db      	uxtb	r3, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4603      	mov	r3, r0
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	460b      	mov	r3, r1
 800645c:	813b      	strh	r3, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2200      	movs	r2, #0
 800647a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f960 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d103      	bne.n	80064a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e05f      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	6a3a      	ldr	r2, [r7, #32]
 80064ba:	492d      	ldr	r1, [pc, #180]	; (8006570 <I2C_RequestMemoryWrite+0x128>)
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f998 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e04c      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa02 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d107      	bne.n	800650a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e02b      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d105      	bne.n	8006520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006514:	893b      	ldrh	r3, [r7, #8]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e021      	b.n	8006564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	b29b      	uxth	r3, r3
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9dc 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e005      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	00010002 	.word	0x00010002

08006574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	460b      	mov	r3, r1
 8006588:	813b      	strh	r3, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800659c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8c2 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d103      	bne.n	80065de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0aa      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e2:	897b      	ldrh	r3, [r7, #10]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	4952      	ldr	r1, [pc, #328]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f8fa 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e097      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f964 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b04      	cmp	r3, #4
 8006634:	d107      	bne.n	8006646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e076      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]
 800665a:	e021      	b.n	80066a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f93e 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e050      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	6a39      	ldr	r1, [r7, #32]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f923 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e035      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f82b 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006702:	d103      	bne.n	800670c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e013      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	4906      	ldr	r1, [pc, #24]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f863 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	00010002 	.word	0x00010002

08006744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006754:	e025      	b.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d021      	beq.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fc fe1d 	bl	800339c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d116      	bne.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e023      	b.n	80067ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10d      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	43da      	mvns	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	e00c      	b.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	43da      	mvns	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d0b6      	beq.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006800:	e051      	b.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d123      	bne.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800682a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0204 	orr.w	r2, r3, #4
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e046      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d021      	beq.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fc fd9b 	bl	800339c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d116      	bne.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e020      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10c      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	43da      	mvns	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	2300      	moveq	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e00b      	b.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	43da      	mvns	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d18d      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068fc:	e02d      	b.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8ce 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e02d      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d021      	beq.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fc fd41 	bl	800339c <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d116      	bne.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e007      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d1ca      	bne.n	80068fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800697e:	e02d      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f88d 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e02d      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d021      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006998:	f7fc fd00 	bl	800339c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d116      	bne.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d1ca      	bne.n	8006980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a00:	e042      	b.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d119      	bne.n	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0210 	mvn.w	r2, #16
 8006a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e029      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a44:	f7fc fcaa 	bl	800339c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d302      	bcc.n	8006a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d116      	bne.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e007      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d1b5      	bne.n	8006a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab6:	d11b      	bne.n	8006af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d129      	bne.n	8006b68 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0210 	bic.w	r2, r2, #16
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d12a      	bne.n	8006be6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2224      	movs	r2, #36	; 0x24
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	f023 030f 	bic.w	r3, r3, #15
 8006bb6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	89fa      	ldrh	r2, [r7, #14]
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0201 	orr.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0bf      	b.n	8006d86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fb fd3c 	bl	8002698 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6999      	ldr	r1, [r3, #24]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6899      	ldr	r1, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b4a      	ldr	r3, [pc, #296]	; (8006d90 <HAL_LTDC_Init+0x19c>)
 8006c68:	400b      	ands	r3, r1
 8006c6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68d9      	ldr	r1, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <HAL_LTDC_Init+0x19c>)
 8006c96:	400b      	ands	r3, r1
 8006c98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68d9      	ldr	r1, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6919      	ldr	r1, [r3, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <HAL_LTDC_Init+0x19c>)
 8006cc4:	400b      	ands	r3, r1
 8006cc6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6919      	ldr	r1, [r3, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6959      	ldr	r1, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <HAL_LTDC_Init+0x19c>)
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6959      	ldr	r1, [r3, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0206 	orr.w	r2, r2, #6
 8006d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	f000f800 	.word	0xf000f800

08006d94 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d023      	beq.n	8006dfe <HAL_LTDC_IRQHandler+0x6a>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01e      	beq.n	8006dfe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0204 	bic.w	r2, r2, #4
 8006dce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dde:	f043 0201 	orr.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2204      	movs	r2, #4
 8006dec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f86f 	bl	8006edc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d023      	beq.n	8006e50 <HAL_LTDC_IRQHandler+0xbc>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01e      	beq.n	8006e50 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0202 	bic.w	r2, r2, #2
 8006e20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2202      	movs	r2, #2
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e30:	f043 0202 	orr.w	r2, r3, #2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f846 	bl	8006edc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01b      	beq.n	8006e92 <HAL_LTDC_IRQHandler+0xfe>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d016      	beq.n	8006e92 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0201 	bic.w	r2, r2, #1
 8006e72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f82f 	bl	8006ef0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_LTDC_IRQHandler+0x140>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0208 	bic.w	r2, r2, #8
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f818 	bl	8006f04 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_LTDC_ConfigLayer+0x1a>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e02c      	b.n	8006f8c <HAL_LTDC_ConfigLayer+0x74>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2134      	movs	r1, #52	; 0x34
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4614      	mov	r4, r2
 8006f56:	461d      	mov	r5, r3
 8006f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f83b 	bl	8006fe8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2201      	movs	r2, #1
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bdb0      	pop	{r4, r5, r7, pc}

08006f94 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_LTDC_EnableDither+0x16>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e016      	b.n	8006fd8 <HAL_LTDC_EnableDither+0x44>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <HAL_LTDC_EnableDither+0x50>)
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <HAL_LTDC_EnableDither+0x50>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40016800 	.word	0x40016800

08006fe8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007004:	4413      	add	r3, r2
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	01db      	lsls	r3, r3, #7
 8007014:	4413      	add	r3, r2
 8007016:	3384      	adds	r3, #132	; 0x84
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	4611      	mov	r1, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	01d2      	lsls	r2, r2, #7
 8007024:	440a      	add	r2, r1
 8007026:	3284      	adds	r2, #132	; 0x84
 8007028:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800702c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800703e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007040:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4619      	mov	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	01db      	lsls	r3, r3, #7
 800704c:	440b      	add	r3, r1
 800704e:	3384      	adds	r3, #132	; 0x84
 8007050:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007056:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007066:	4413      	add	r3, r2
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	01db      	lsls	r3, r3, #7
 8007076:	4413      	add	r3, r2
 8007078:	3384      	adds	r3, #132	; 0x84
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	4611      	mov	r1, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	01d2      	lsls	r2, r2, #7
 8007086:	440a      	add	r2, r1
 8007088:	3284      	adds	r2, #132	; 0x84
 800708a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800708e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800709e:	4413      	add	r3, r2
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	01db      	lsls	r3, r3, #7
 80070ac:	440b      	add	r3, r1
 80070ae:	3384      	adds	r3, #132	; 0x84
 80070b0:	4619      	mov	r1, r3
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	01db      	lsls	r3, r3, #7
 80070c2:	4413      	add	r3, r2
 80070c4:	3384      	adds	r3, #132	; 0x84
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	4611      	mov	r1, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	01d2      	lsls	r2, r2, #7
 80070d2:	440a      	add	r2, r1
 80070d4:	3284      	adds	r2, #132	; 0x84
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	01db      	lsls	r3, r3, #7
 80070e6:	4413      	add	r3, r2
 80070e8:	3384      	adds	r3, #132	; 0x84
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	4413      	add	r3, r2
 800711a:	3384      	adds	r3, #132	; 0x84
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	01db      	lsls	r3, r3, #7
 8007128:	4413      	add	r3, r2
 800712a:	3384      	adds	r3, #132	; 0x84
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007138:	461a      	mov	r2, r3
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	431a      	orrs	r2, r3
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	01db      	lsls	r3, r3, #7
 800714c:	440b      	add	r3, r1
 800714e:	3384      	adds	r3, #132	; 0x84
 8007150:	4619      	mov	r1, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	01db      	lsls	r3, r3, #7
 8007162:	4413      	add	r3, r2
 8007164:	3384      	adds	r3, #132	; 0x84
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	6812      	ldr	r2, [r2, #0]
 800716c:	4611      	mov	r1, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	01d2      	lsls	r2, r2, #7
 8007172:	440a      	add	r2, r1
 8007174:	3284      	adds	r2, #132	; 0x84
 8007176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800717a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	01db      	lsls	r3, r3, #7
 8007186:	4413      	add	r3, r2
 8007188:	3384      	adds	r3, #132	; 0x84
 800718a:	461a      	mov	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	01db      	lsls	r3, r3, #7
 800719c:	4413      	add	r3, r2
 800719e:	3384      	adds	r3, #132	; 0x84
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	4611      	mov	r1, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	01d2      	lsls	r2, r2, #7
 80071ac:	440a      	add	r2, r1
 80071ae:	3284      	adds	r2, #132	; 0x84
 80071b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071b4:	f023 0307 	bic.w	r3, r3, #7
 80071b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	6809      	ldr	r1, [r1, #0]
 80071c6:	4608      	mov	r0, r1
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	01c9      	lsls	r1, r1, #7
 80071cc:	4401      	add	r1, r0
 80071ce:	3184      	adds	r1, #132	; 0x84
 80071d0:	4313      	orrs	r3, r2
 80071d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	01db      	lsls	r3, r3, #7
 80071de:	4413      	add	r3, r2
 80071e0:	3384      	adds	r3, #132	; 0x84
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	01db      	lsls	r3, r3, #7
 80071ee:	4413      	add	r3, r2
 80071f0:	3384      	adds	r3, #132	; 0x84
 80071f2:	461a      	mov	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	01db      	lsls	r3, r3, #7
 8007202:	4413      	add	r3, r2
 8007204:	3384      	adds	r3, #132	; 0x84
 8007206:	461a      	mov	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007216:	2304      	movs	r3, #4
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e01b      	b.n	8007254 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d102      	bne.n	800722a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007224:	2303      	movs	r3, #3
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e014      	b.n	8007254 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00b      	beq.n	800724a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007236:	2b02      	cmp	r3, #2
 8007238:	d007      	beq.n	800724a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800723e:	2b03      	cmp	r3, #3
 8007240:	d003      	beq.n	800724a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007246:	2b07      	cmp	r3, #7
 8007248:	d102      	bne.n	8007250 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800724a:	2302      	movs	r3, #2
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e001      	b.n	8007254 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007250:	2301      	movs	r3, #1
 8007252:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	01db      	lsls	r3, r3, #7
 800725e:	4413      	add	r3, r2
 8007260:	3384      	adds	r3, #132	; 0x84
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	4611      	mov	r1, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	01d2      	lsls	r2, r2, #7
 800726e:	440a      	add	r2, r1
 8007270:	3284      	adds	r2, #132	; 0x84
 8007272:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007276:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6859      	ldr	r1, [r3, #4]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	1acb      	subs	r3, r1, r3
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	6809      	ldr	r1, [r1, #0]
 800729a:	4608      	mov	r0, r1
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	01c9      	lsls	r1, r1, #7
 80072a0:	4401      	add	r1, r0
 80072a2:	3184      	adds	r1, #132	; 0x84
 80072a4:	4313      	orrs	r3, r2
 80072a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	01db      	lsls	r3, r3, #7
 80072b2:	4413      	add	r3, r2
 80072b4:	3384      	adds	r3, #132	; 0x84
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	4611      	mov	r1, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	01d2      	lsls	r2, r2, #7
 80072c2:	440a      	add	r2, r1
 80072c4:	3284      	adds	r2, #132	; 0x84
 80072c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	01db      	lsls	r3, r3, #7
 80072da:	4413      	add	r3, r2
 80072dc:	3384      	adds	r3, #132	; 0x84
 80072de:	461a      	mov	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	01db      	lsls	r3, r3, #7
 80072f0:	4413      	add	r3, r2
 80072f2:	3384      	adds	r3, #132	; 0x84
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	4611      	mov	r1, r2
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	01d2      	lsls	r2, r2, #7
 8007300:	440a      	add	r2, r1
 8007302:	3284      	adds	r2, #132	; 0x84
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6013      	str	r3, [r2, #0]
}
 800730a:	bf00      	nop
 800730c:	3724      	adds	r7, #36	; 0x24
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e267      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d075      	beq.n	8007422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007336:	4b88      	ldr	r3, [pc, #544]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 030c 	and.w	r3, r3, #12
 800733e:	2b04      	cmp	r3, #4
 8007340:	d00c      	beq.n	800735c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007342:	4b85      	ldr	r3, [pc, #532]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800734a:	2b08      	cmp	r3, #8
 800734c:	d112      	bne.n	8007374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800734e:	4b82      	ldr	r3, [pc, #520]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735a:	d10b      	bne.n	8007374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800735c:	4b7e      	ldr	r3, [pc, #504]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d05b      	beq.n	8007420 <HAL_RCC_OscConfig+0x108>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d157      	bne.n	8007420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e242      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d106      	bne.n	800738c <HAL_RCC_OscConfig+0x74>
 800737e:	4b76      	ldr	r3, [pc, #472]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a75      	ldr	r2, [pc, #468]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	e01d      	b.n	80073c8 <HAL_RCC_OscConfig+0xb0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007394:	d10c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x98>
 8007396:	4b70      	ldr	r3, [pc, #448]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a6f      	ldr	r2, [pc, #444]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800739c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	4b6d      	ldr	r3, [pc, #436]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6c      	ldr	r2, [pc, #432]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	e00b      	b.n	80073c8 <HAL_RCC_OscConfig+0xb0>
 80073b0:	4b69      	ldr	r3, [pc, #420]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a68      	ldr	r2, [pc, #416]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	4b66      	ldr	r3, [pc, #408]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a65      	ldr	r2, [pc, #404]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d013      	beq.n	80073f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d0:	f7fb ffe4 	bl	800339c <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d8:	f7fb ffe0 	bl	800339c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	; 0x64
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e207      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ea:	4b5b      	ldr	r3, [pc, #364]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f0      	beq.n	80073d8 <HAL_RCC_OscConfig+0xc0>
 80073f6:	e014      	b.n	8007422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f8:	f7fb ffd0 	bl	800339c <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007400:	f7fb ffcc 	bl	800339c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b64      	cmp	r3, #100	; 0x64
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e1f3      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007412:	4b51      	ldr	r3, [pc, #324]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0xe8>
 800741e:	e000      	b.n	8007422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d063      	beq.n	80074f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800742e:	4b4a      	ldr	r3, [pc, #296]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 030c 	and.w	r3, r3, #12
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800743a:	4b47      	ldr	r3, [pc, #284]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007442:	2b08      	cmp	r3, #8
 8007444:	d11c      	bne.n	8007480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007446:	4b44      	ldr	r3, [pc, #272]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d116      	bne.n	8007480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007452:	4b41      	ldr	r3, [pc, #260]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_RCC_OscConfig+0x152>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d001      	beq.n	800746a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e1c7      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800746a:	4b3b      	ldr	r3, [pc, #236]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4937      	ldr	r1, [pc, #220]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800747a:	4313      	orrs	r3, r2
 800747c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800747e:	e03a      	b.n	80074f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d020      	beq.n	80074ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007488:	4b34      	ldr	r3, [pc, #208]	; (800755c <HAL_RCC_OscConfig+0x244>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748e:	f7fb ff85 	bl	800339c <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007496:	f7fb ff81 	bl	800339c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e1a8      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a8:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b4:	4b28      	ldr	r3, [pc, #160]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	4925      	ldr	r1, [pc, #148]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	600b      	str	r3, [r1, #0]
 80074c8:	e015      	b.n	80074f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ca:	4b24      	ldr	r3, [pc, #144]	; (800755c <HAL_RCC_OscConfig+0x244>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d0:	f7fb ff64 	bl	800339c <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d8:	f7fb ff60 	bl	800339c <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e187      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f0      	bne.n	80074d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d036      	beq.n	8007570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d016      	beq.n	8007538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800750a:	4b15      	ldr	r3, [pc, #84]	; (8007560 <HAL_RCC_OscConfig+0x248>)
 800750c:	2201      	movs	r2, #1
 800750e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007510:	f7fb ff44 	bl	800339c <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007518:	f7fb ff40 	bl	800339c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e167      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <HAL_RCC_OscConfig+0x240>)
 800752c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0x200>
 8007536:	e01b      	b.n	8007570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <HAL_RCC_OscConfig+0x248>)
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800753e:	f7fb ff2d 	bl	800339c <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007544:	e00e      	b.n	8007564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007546:	f7fb ff29 	bl	800339c <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d907      	bls.n	8007564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e150      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
 8007558:	40023800 	.word	0x40023800
 800755c:	42470000 	.word	0x42470000
 8007560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007564:	4b88      	ldr	r3, [pc, #544]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ea      	bne.n	8007546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8097 	beq.w	80076ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007582:	4b81      	ldr	r3, [pc, #516]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	4b7d      	ldr	r3, [pc, #500]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a7c      	ldr	r2, [pc, #496]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759c:	6413      	str	r3, [r2, #64]	; 0x40
 800759e:	4b7a      	ldr	r3, [pc, #488]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ae:	4b77      	ldr	r3, [pc, #476]	; (800778c <HAL_RCC_OscConfig+0x474>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d118      	bne.n	80075ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ba:	4b74      	ldr	r3, [pc, #464]	; (800778c <HAL_RCC_OscConfig+0x474>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a73      	ldr	r2, [pc, #460]	; (800778c <HAL_RCC_OscConfig+0x474>)
 80075c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075c6:	f7fb fee9 	bl	800339c <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075cc:	e008      	b.n	80075e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ce:	f7fb fee5 	bl	800339c <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e10c      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e0:	4b6a      	ldr	r3, [pc, #424]	; (800778c <HAL_RCC_OscConfig+0x474>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d106      	bne.n	8007602 <HAL_RCC_OscConfig+0x2ea>
 80075f4:	4b64      	ldr	r3, [pc, #400]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	4a63      	ldr	r2, [pc, #396]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007600:	e01c      	b.n	800763c <HAL_RCC_OscConfig+0x324>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b05      	cmp	r3, #5
 8007608:	d10c      	bne.n	8007624 <HAL_RCC_OscConfig+0x30c>
 800760a:	4b5f      	ldr	r3, [pc, #380]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	4a5e      	ldr	r2, [pc, #376]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007610:	f043 0304 	orr.w	r3, r3, #4
 8007614:	6713      	str	r3, [r2, #112]	; 0x70
 8007616:	4b5c      	ldr	r3, [pc, #368]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a5b      	ldr	r2, [pc, #364]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 800761c:	f043 0301 	orr.w	r3, r3, #1
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
 8007622:	e00b      	b.n	800763c <HAL_RCC_OscConfig+0x324>
 8007624:	4b58      	ldr	r3, [pc, #352]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	4a57      	ldr	r2, [pc, #348]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	6713      	str	r3, [r2, #112]	; 0x70
 8007630:	4b55      	ldr	r3, [pc, #340]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4a54      	ldr	r2, [pc, #336]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007636:	f023 0304 	bic.w	r3, r3, #4
 800763a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d015      	beq.n	8007670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007644:	f7fb feaa 	bl	800339c <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800764a:	e00a      	b.n	8007662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800764c:	f7fb fea6 	bl	800339c <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	; 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0cb      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007662:	4b49      	ldr	r3, [pc, #292]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0ee      	beq.n	800764c <HAL_RCC_OscConfig+0x334>
 800766e:	e014      	b.n	800769a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007670:	f7fb fe94 	bl	800339c <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007676:	e00a      	b.n	800768e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007678:	f7fb fe90 	bl	800339c <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	f241 3288 	movw	r2, #5000	; 0x1388
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e0b5      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768e:	4b3e      	ldr	r3, [pc, #248]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1ee      	bne.n	8007678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d105      	bne.n	80076ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076a0:	4b39      	ldr	r3, [pc, #228]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	4a38      	ldr	r2, [pc, #224]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80076a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 80a1 	beq.w	80077f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076b6:	4b34      	ldr	r3, [pc, #208]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d05c      	beq.n	800777c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d141      	bne.n	800774e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ca:	4b31      	ldr	r3, [pc, #196]	; (8007790 <HAL_RCC_OscConfig+0x478>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d0:	f7fb fe64 	bl	800339c <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d8:	f7fb fe60 	bl	800339c <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e087      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f0      	bne.n	80076d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	019b      	lsls	r3, r3, #6
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	3b01      	subs	r3, #1
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	061b      	lsls	r3, r3, #24
 800771a:	491b      	ldr	r1, [pc, #108]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 800771c:	4313      	orrs	r3, r2
 800771e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_RCC_OscConfig+0x478>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007726:	f7fb fe39 	bl	800339c <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772c:	e008      	b.n	8007740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772e:	f7fb fe35 	bl	800339c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e05c      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007740:	4b11      	ldr	r3, [pc, #68]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f0      	beq.n	800772e <HAL_RCC_OscConfig+0x416>
 800774c:	e054      	b.n	80077f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <HAL_RCC_OscConfig+0x478>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007754:	f7fb fe22 	bl	800339c <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800775c:	f7fb fe1e 	bl	800339c <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e045      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_RCC_OscConfig+0x470>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f0      	bne.n	800775c <HAL_RCC_OscConfig+0x444>
 800777a:	e03d      	b.n	80077f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d107      	bne.n	8007794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e038      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
 8007788:	40023800 	.word	0x40023800
 800778c:	40007000 	.word	0x40007000
 8007790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <HAL_RCC_OscConfig+0x4ec>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d028      	beq.n	80077f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d121      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d11a      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077c4:	4013      	ands	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d111      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	3b01      	subs	r3, #1
 80077de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d107      	bne.n	80077f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800

08007808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0cc      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800781c:	4b68      	ldr	r3, [pc, #416]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d90c      	bls.n	8007844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782a:	4b65      	ldr	r3, [pc, #404]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007832:	4b63      	ldr	r3, [pc, #396]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0b8      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d020      	beq.n	8007892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800785c:	4b59      	ldr	r3, [pc, #356]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4a58      	ldr	r2, [pc, #352]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	4a52      	ldr	r2, [pc, #328]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800787a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800787e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007880:	4b50      	ldr	r3, [pc, #320]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	494d      	ldr	r1, [pc, #308]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d044      	beq.n	8007928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d107      	bne.n	80078b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a6:	4b47      	ldr	r3, [pc, #284]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d119      	bne.n	80078e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e07f      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d003      	beq.n	80078c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d107      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c6:	4b3f      	ldr	r3, [pc, #252]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e06f      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d6:	4b3b      	ldr	r3, [pc, #236]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e067      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078e6:	4b37      	ldr	r3, [pc, #220]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f023 0203 	bic.w	r2, r3, #3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4934      	ldr	r1, [pc, #208]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078f8:	f7fb fd50 	bl	800339c <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fe:	e00a      	b.n	8007916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007900:	f7fb fd4c 	bl	800339c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f241 3288 	movw	r2, #5000	; 0x1388
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e04f      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007916:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 020c 	and.w	r2, r3, #12
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	429a      	cmp	r2, r3
 8007926:	d1eb      	bne.n	8007900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d20c      	bcs.n	8007950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007936:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e032      	b.n	80079b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800795c:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4916      	ldr	r1, [pc, #88]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	4313      	orrs	r3, r2
 800796c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	490e      	ldr	r1, [pc, #56]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 800798a:	4313      	orrs	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800798e:	f000 f821 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8007992:	4602      	mov	r2, r0
 8007994:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	490a      	ldr	r1, [pc, #40]	; (80079c8 <HAL_RCC_ClockConfig+0x1c0>)
 80079a0:	5ccb      	ldrb	r3, [r1, r3]
 80079a2:	fa22 f303 	lsr.w	r3, r2, r3
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <HAL_RCC_ClockConfig+0x1c4>)
 80079a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <HAL_RCC_ClockConfig+0x1c8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fb f90e 	bl	8002bd0 <HAL_InitTick>

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40023c00 	.word	0x40023c00
 80079c4:	40023800 	.word	0x40023800
 80079c8:	08061dec 	.word	0x08061dec
 80079cc:	2000006c 	.word	0x2000006c
 80079d0:	20000070 	.word	0x20000070

080079d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d8:	b094      	sub	sp, #80	; 0x50
 80079da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	647b      	str	r3, [r7, #68]	; 0x44
 80079e0:	2300      	movs	r3, #0
 80079e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e4:	2300      	movs	r3, #0
 80079e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079ec:	4b79      	ldr	r3, [pc, #484]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d00d      	beq.n	8007a14 <HAL_RCC_GetSysClockFreq+0x40>
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	f200 80e1 	bhi.w	8007bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_RCC_GetSysClockFreq+0x34>
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d003      	beq.n	8007a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8007a06:	e0db      	b.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a08:	4b73      	ldr	r3, [pc, #460]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007a0c:	e0db      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a0e:	4b73      	ldr	r3, [pc, #460]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8007a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a12:	e0d8      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a14:	4b6f      	ldr	r3, [pc, #444]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a1e:	4b6d      	ldr	r3, [pc, #436]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d063      	beq.n	8007af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	2200      	movs	r2, #0
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
 8007a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a46:	4622      	mov	r2, r4
 8007a48:	462b      	mov	r3, r5
 8007a4a:	f04f 0000 	mov.w	r0, #0
 8007a4e:	f04f 0100 	mov.w	r1, #0
 8007a52:	0159      	lsls	r1, r3, #5
 8007a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a58:	0150      	lsls	r0, r2, #5
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4621      	mov	r1, r4
 8007a60:	1a51      	subs	r1, r2, r1
 8007a62:	6139      	str	r1, [r7, #16]
 8007a64:	4629      	mov	r1, r5
 8007a66:	eb63 0301 	sbc.w	r3, r3, r1
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a78:	4659      	mov	r1, fp
 8007a7a:	018b      	lsls	r3, r1, #6
 8007a7c:	4651      	mov	r1, sl
 8007a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a82:	4651      	mov	r1, sl
 8007a84:	018a      	lsls	r2, r1, #6
 8007a86:	4651      	mov	r1, sl
 8007a88:	ebb2 0801 	subs.w	r8, r2, r1
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa6:	4690      	mov	r8, r2
 8007aa8:	4699      	mov	r9, r3
 8007aaa:	4623      	mov	r3, r4
 8007aac:	eb18 0303 	adds.w	r3, r8, r3
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	eb49 0303 	adc.w	r3, r9, r3
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	024b      	lsls	r3, r1, #9
 8007aca:	4621      	mov	r1, r4
 8007acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	024a      	lsls	r2, r1, #9
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ada:	2200      	movs	r2, #0
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ae4:	f7f8 fbd4 	bl	8000290 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4613      	mov	r3, r2
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	e058      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007af2:	4b38      	ldr	r3, [pc, #224]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	2200      	movs	r2, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	4611      	mov	r1, r2
 8007afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b02:	623b      	str	r3, [r7, #32]
 8007b04:	2300      	movs	r3, #0
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
 8007b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	f04f 0000 	mov.w	r0, #0
 8007b14:	f04f 0100 	mov.w	r1, #0
 8007b18:	0159      	lsls	r1, r3, #5
 8007b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b1e:	0150      	lsls	r0, r2, #5
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4641      	mov	r1, r8
 8007b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b44:	ebb2 040a 	subs.w	r4, r2, sl
 8007b48:	eb63 050b 	sbc.w	r5, r3, fp
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	00eb      	lsls	r3, r5, #3
 8007b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b5a:	00e2      	lsls	r2, r4, #3
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	461d      	mov	r5, r3
 8007b60:	4643      	mov	r3, r8
 8007b62:	18e3      	adds	r3, r4, r3
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	464b      	mov	r3, r9
 8007b68:	eb45 0303 	adc.w	r3, r5, r3
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	028b      	lsls	r3, r1, #10
 8007b7e:	4621      	mov	r1, r4
 8007b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b84:	4621      	mov	r1, r4
 8007b86:	028a      	lsls	r2, r1, #10
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8e:	2200      	movs	r2, #0
 8007b90:	61bb      	str	r3, [r7, #24]
 8007b92:	61fa      	str	r2, [r7, #28]
 8007b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b98:	f7f8 fb7a 	bl	8000290 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	3301      	adds	r3, #1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3750      	adds	r7, #80	; 0x50
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	00f42400 	.word	0x00f42400
 8007bdc:	007a1200 	.word	0x007a1200

08007be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007be6:	681b      	ldr	r3, [r3, #0]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	2000006c 	.word	0x2000006c

08007bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bfc:	f7ff fff0 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	0a9b      	lsrs	r3, r3, #10
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	4903      	ldr	r1, [pc, #12]	; (8007c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c0e:	5ccb      	ldrb	r3, [r1, r3]
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	08061dfc 	.word	0x08061dfc

08007c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c24:	f7ff ffdc 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	0b5b      	lsrs	r3, r3, #13
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	4903      	ldr	r1, [pc, #12]	; (8007c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c36:	5ccb      	ldrb	r3, [r1, r3]
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40023800 	.word	0x40023800
 8007c44:	08061dfc 	.word	0x08061dfc

08007c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	220f      	movs	r2, #15
 8007c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0203 	and.w	r2, r3, #3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCC_GetClockConfig+0x60>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 020f 	and.w	r2, r3, #15
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	601a      	str	r2, [r3, #0]
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	40023c00 	.word	0x40023c00

08007cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d105      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d075      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ce0:	4b91      	ldr	r3, [pc, #580]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ce6:	f7fb fb59 	bl	800339c <HAL_GetTick>
 8007cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cec:	e008      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cee:	f7fb fb55 	bl	800339c <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e189      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d00:	4b8a      	ldr	r3, [pc, #552]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f0      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	019a      	lsls	r2, r3, #6
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	071b      	lsls	r3, r3, #28
 8007d24:	4981      	ldr	r1, [pc, #516]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01f      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d38:	4b7c      	ldr	r3, [pc, #496]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3e:	0f1b      	lsrs	r3, r3, #28
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	019a      	lsls	r2, r3, #6
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	431a      	orrs	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	071b      	lsls	r3, r3, #28
 8007d58:	4974      	ldr	r1, [pc, #464]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d60:	4b72      	ldr	r3, [pc, #456]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d66:	f023 021f 	bic.w	r2, r3, #31
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	496e      	ldr	r1, [pc, #440]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	019a      	lsls	r2, r3, #6
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	071b      	lsls	r3, r3, #28
 8007d98:	4964      	ldr	r1, [pc, #400]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007da0:	4b61      	ldr	r3, [pc, #388]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007da6:	f7fb faf9 	bl	800339c <HAL_GetTick>
 8007daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007dae:	f7fb faf5 	bl	800339c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e129      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dc0:	4b5a      	ldr	r3, [pc, #360]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0f0      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d079      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007de4:	4b52      	ldr	r3, [pc, #328]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dea:	f7fb fad7 	bl	800339c <HAL_GetTick>
 8007dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007df0:	e008      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007df2:	f7fb fad3 	bl	800339c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e107      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e04:	4b49      	ldr	r3, [pc, #292]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e10:	d0ef      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d020      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e1e:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	0f1b      	lsrs	r3, r3, #28
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	019a      	lsls	r2, r3, #6
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	061b      	lsls	r3, r3, #24
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	071b      	lsls	r3, r3, #28
 8007e3e:	493b      	ldr	r1, [pc, #236]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e46:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	4934      	ldr	r1, [pc, #208]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e6c:	4b2f      	ldr	r3, [pc, #188]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	019a      	lsls	r2, r3, #6
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	071b      	lsls	r3, r3, #28
 8007e8c:	4927      	ldr	r1, [pc, #156]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e94:	4b25      	ldr	r3, [pc, #148]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	4922      	ldr	r1, [pc, #136]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007eaa:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007eb0:	f7fb fa74 	bl	800339c <HAL_GetTick>
 8007eb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007eb8:	f7fb fa70 	bl	800339c <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e0a4      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed6:	d1ef      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 808b 	beq.w	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	4a0f      	ldr	r2, [pc, #60]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a0b      	ldr	r2, [pc, #44]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f0e:	f7fb fa45 	bl	800339c <HAL_GetTick>
 8007f12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f14:	e010      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f16:	f7fb fa41 	bl	800339c <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d909      	bls.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e075      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007f28:	42470068 	.word	0x42470068
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	42470070 	.word	0x42470070
 8007f34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f38:	4b38      	ldr	r3, [pc, #224]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0e8      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d02f      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d028      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f72:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f7e:	4b28      	ldr	r3, [pc, #160]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d114      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f8a:	f7fb fa07 	bl	800339c <HAL_GetTick>
 8007f8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f90:	e00a      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f92:	f7fb fa03 	bl	800339c <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e035      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fa8:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0ee      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fc0:	d10d      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007fc2:	4b17      	ldr	r3, [pc, #92]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd6:	4912      	ldr	r1, [pc, #72]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	608b      	str	r3, [r1, #8]
 8007fdc:	e005      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007fde:	4b10      	ldr	r3, [pc, #64]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fe4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fe8:	6093      	str	r3, [r2, #8]
 8007fea:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ff6:	490a      	ldr	r1, [pc, #40]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008010:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40007000 	.word	0x40007000
 8008020:	40023800 	.word	0x40023800
 8008024:	42470e40 	.word	0x42470e40
 8008028:	424711e0 	.word	0x424711e0

0800802c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e025      	b.n	800808c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fa fdb1 	bl	8002bbc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f001 fd91 	bl	8009b94 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	f001 fde6 	bl	8009c4e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d101      	bne.n	80080b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
 80080b0:	e021      	b.n	80080f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d002      	beq.n	80080be <HAL_SDRAM_SendCommand+0x2a>
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d118      	bne.n	80080f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fe26 	bl	8009d20 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d104      	bne.n	80080e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2205      	movs	r2, #5
 80080e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080e4:	e006      	b.n	80080f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080ee:	e001      	b.n	80080f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d101      	bne.n	8008118 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008114:	2302      	movs	r3, #2
 8008116:	e016      	b.n	8008146 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	d10f      	bne.n	8008144 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f001 fe31 	bl	8009d9a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	e000      	b.n	8008146 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e07b      	b.n	8008258 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d108      	bne.n	800817a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008170:	d009      	beq.n	8008186 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	61da      	str	r2, [r3, #28]
 8008178:	e005      	b.n	8008186 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fa fba9 	bl	80028f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	431a      	orrs	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820a:	ea42 0103 	orr.w	r1, r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	f003 0104 	and.w	r1, r3, #4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	f003 0210 	and.w	r2, r3, #16
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69da      	ldr	r2, [r3, #28]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008246:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e01a      	b.n	80082a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fa fb7c 	bl	8002988 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	4613      	mov	r3, r2
 80082be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_SPI_Transmit+0x22>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e126      	b.n	8008520 <HAL_SPI_Transmit+0x270>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082da:	f7fb f85f 	bl	800339c <HAL_GetTick>
 80082de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d002      	beq.n	80082f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
 80082f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082f4:	e10b      	b.n	800850e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_SPI_Transmit+0x52>
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008306:	e102      	b.n	800850e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2203      	movs	r2, #3
 800830c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	88fa      	ldrh	r2, [r7, #6]
 8008326:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834e:	d10f      	bne.n	8008370 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800836e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d007      	beq.n	800838e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008396:	d14b      	bne.n	8008430 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_SPI_Transmit+0xf6>
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d13e      	bne.n	8008424 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	881a      	ldrh	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	1c9a      	adds	r2, r3, #2
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083ca:	e02b      	b.n	8008424 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d112      	bne.n	8008400 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80083fe:	e011      	b.n	8008424 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008400:	f7fa ffcc 	bl	800339c <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d803      	bhi.n	8008418 <HAL_SPI_Transmit+0x168>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d102      	bne.n	800841e <HAL_SPI_Transmit+0x16e>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008422:	e074      	b.n	800850e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1ce      	bne.n	80083cc <HAL_SPI_Transmit+0x11c>
 800842e:	e04c      	b.n	80084ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <HAL_SPI_Transmit+0x18e>
 8008438:	8afb      	ldrh	r3, [r7, #22]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d140      	bne.n	80084c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	330c      	adds	r3, #12
 8008448:	7812      	ldrb	r2, [r2, #0]
 800844a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008464:	e02c      	b.n	80084c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b02      	cmp	r3, #2
 8008472:	d113      	bne.n	800849c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	330c      	adds	r3, #12
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	86da      	strh	r2, [r3, #54]	; 0x36
 800849a:	e011      	b.n	80084c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800849c:	f7fa ff7e 	bl	800339c <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d803      	bhi.n	80084b4 <HAL_SPI_Transmit+0x204>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d102      	bne.n	80084ba <HAL_SPI_Transmit+0x20a>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084be:	e026      	b.n	800850e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1cd      	bne.n	8008466 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fbda 	bl	8008c88 <SPI_EndRxTxTransaction>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084e8:	2300      	movs	r3, #0
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e000      	b.n	800850e <HAL_SPI_Transmit+0x25e>
  }

error:
 800850c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800851e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	4613      	mov	r3, r2
 8008536:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008544:	d112      	bne.n	800856c <HAL_SPI_Receive+0x44>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10e      	bne.n	800856c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2204      	movs	r2, #4
 8008552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f8f1 	bl	800874a <HAL_SPI_TransmitReceive>
 8008568:	4603      	mov	r3, r0
 800856a:	e0ea      	b.n	8008742 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_SPI_Receive+0x52>
 8008576:	2302      	movs	r3, #2
 8008578:	e0e3      	b.n	8008742 <HAL_SPI_Receive+0x21a>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008582:	f7fa ff0b 	bl	800339c <HAL_GetTick>
 8008586:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b01      	cmp	r3, #1
 8008592:	d002      	beq.n	800859a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008594:	2302      	movs	r3, #2
 8008596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008598:	e0ca      	b.n	8008730 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <HAL_SPI_Receive+0x7e>
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085aa:	e0c1      	b.n	8008730 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2204      	movs	r2, #4
 80085b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	88fa      	ldrh	r2, [r7, #6]
 80085c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	88fa      	ldrh	r2, [r7, #6]
 80085ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f2:	d10f      	bne.n	8008614 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008612:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861e:	2b40      	cmp	r3, #64	; 0x40
 8008620:	d007      	beq.n	8008632 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008630:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d162      	bne.n	8008700 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800863a:	e02e      	b.n	800869a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b01      	cmp	r3, #1
 8008648:	d115      	bne.n	8008676 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f103 020c 	add.w	r2, r3, #12
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008656:	7812      	ldrb	r2, [r2, #0]
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008674:	e011      	b.n	800869a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008676:	f7fa fe91 	bl	800339c <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d803      	bhi.n	800868e <HAL_SPI_Receive+0x166>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d102      	bne.n	8008694 <HAL_SPI_Receive+0x16c>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008698:	e04a      	b.n	8008730 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1cb      	bne.n	800863c <HAL_SPI_Receive+0x114>
 80086a4:	e031      	b.n	800870a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d113      	bne.n	80086dc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	b292      	uxth	r2, r2
 80086c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	1c9a      	adds	r2, r3, #2
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086da:	e011      	b.n	8008700 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086dc:	f7fa fe5e 	bl	800339c <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d803      	bhi.n	80086f4 <HAL_SPI_Receive+0x1cc>
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d102      	bne.n	80086fa <HAL_SPI_Receive+0x1d2>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d102      	bne.n	8008700 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80086fe:	e017      	b.n	8008730 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1cd      	bne.n	80086a6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 fa54 	bl	8008bbc <SPI_EndRxTransaction>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	75fb      	strb	r3, [r7, #23]
 800872c:	e000      	b.n	8008730 <HAL_SPI_Receive+0x208>
  }

error :
 800872e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b08c      	sub	sp, #48	; 0x30
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008758:	2301      	movs	r3, #1
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x26>
 800876c:	2302      	movs	r3, #2
 800876e:	e18a      	b.n	8008a86 <HAL_SPI_TransmitReceive+0x33c>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008778:	f7fa fe10 	bl	800339c <HAL_GetTick>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800878e:	887b      	ldrh	r3, [r7, #2]
 8008790:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008796:	2b01      	cmp	r3, #1
 8008798:	d00f      	beq.n	80087ba <HAL_SPI_TransmitReceive+0x70>
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a0:	d107      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x68>
 80087aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d003      	beq.n	80087ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
 80087b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087b8:	e15b      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x82>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x82>
 80087c6:	887b      	ldrh	r3, [r7, #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087d2:	e14e      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d003      	beq.n	80087e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2205      	movs	r2, #5
 80087e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	887a      	ldrh	r2, [r7, #2]
 80087f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	887a      	ldrh	r2, [r7, #2]
 80087fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	887a      	ldrh	r2, [r7, #2]
 800880a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	887a      	ldrh	r2, [r7, #2]
 8008810:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d007      	beq.n	800883c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800883a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008844:	d178      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_SPI_TransmitReceive+0x10a>
 800884e:	8b7b      	ldrh	r3, [r7, #26]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d166      	bne.n	8008922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	1c9a      	adds	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008878:	e053      	b.n	8008922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b02      	cmp	r3, #2
 8008886:	d11b      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x176>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d016      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0x176>
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	2b01      	cmp	r3, #1
 8008896:	d113      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	881a      	ldrh	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a8:	1c9a      	adds	r2, r3, #2
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d119      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x1b8>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d014      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	b292      	uxth	r2, r2
 80088e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	1c9a      	adds	r2, r3, #2
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088fe:	2301      	movs	r3, #1
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008902:	f7fa fd4b 	bl	800339c <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890e:	429a      	cmp	r2, r3
 8008910:	d807      	bhi.n	8008922 <HAL_SPI_TransmitReceive+0x1d8>
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d003      	beq.n	8008922 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008920:	e0a7      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008926:	b29b      	uxth	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1a6      	bne.n	800887a <HAL_SPI_TransmitReceive+0x130>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1a1      	bne.n	800887a <HAL_SPI_TransmitReceive+0x130>
 8008936:	e07c      	b.n	8008a32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <HAL_SPI_TransmitReceive+0x1fc>
 8008940:	8b7b      	ldrh	r3, [r7, #26]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d16b      	bne.n	8008a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800896c:	e057      	b.n	8008a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b02      	cmp	r3, #2
 800897a:	d11c      	bne.n	80089b6 <HAL_SPI_TransmitReceive+0x26c>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d017      	beq.n	80089b6 <HAL_SPI_TransmitReceive+0x26c>
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d114      	bne.n	80089b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d119      	bne.n	80089f8 <HAL_SPI_TransmitReceive+0x2ae>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d014      	beq.n	80089f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089f4:	2301      	movs	r3, #1
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089f8:	f7fa fcd0 	bl	800339c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d803      	bhi.n	8008a10 <HAL_SPI_TransmitReceive+0x2c6>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d102      	bne.n	8008a16 <HAL_SPI_TransmitReceive+0x2cc>
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a1c:	e029      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1a2      	bne.n	800896e <HAL_SPI_TransmitReceive+0x224>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d19d      	bne.n	800896e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f926 	bl	8008c88 <SPI_EndRxTxTransaction>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d006      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a4e:	e010      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	e000      	b.n	8008a72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008a70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3730      	adds	r7, #48	; 0x30
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a9c:	b2db      	uxtb	r3, r3
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008abc:	f7fa fc6e 	bl	800339c <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4413      	add	r3, r2
 8008aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008acc:	f7fa fc66 	bl	800339c <HAL_GetTick>
 8008ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ad2:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	015b      	lsls	r3, r3, #5
 8008ad8:	0d1b      	lsrs	r3, r3, #20
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	fb02 f303 	mul.w	r3, r2, r3
 8008ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ae2:	e054      	b.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d050      	beq.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008aec:	f7fa fc56 	bl	800339c <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d902      	bls.n	8008b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d13d      	bne.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b1a:	d111      	bne.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b24:	d004      	beq.n	8008b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b2e:	d107      	bne.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b48:	d10f      	bne.n	8008b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e017      	b.n	8008bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4013      	ands	r3, r2
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	bf0c      	ite	eq
 8008b9e:	2301      	moveq	r3, #1
 8008ba0:	2300      	movne	r3, #0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d19b      	bne.n	8008ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000006c 	.word	0x2000006c

08008bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bd0:	d111      	bne.n	8008bf6 <SPI_EndRxTransaction+0x3a>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bda:	d004      	beq.n	8008be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be4:	d107      	bne.n	8008bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bfe:	d12a      	bne.n	8008c56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c08:	d012      	beq.n	8008c30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2180      	movs	r1, #128	; 0x80
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7ff ff49 	bl	8008aac <SPI_WaitFlagStateUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d02d      	beq.n	8008c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c24:	f043 0220 	orr.w	r2, r3, #32
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e026      	b.n	8008c7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2200      	movs	r2, #0
 8008c38:	2101      	movs	r1, #1
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff ff36 	bl	8008aac <SPI_WaitFlagStateUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01a      	beq.n	8008c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4a:	f043 0220 	orr.w	r2, r3, #32
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e013      	b.n	8008c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2101      	movs	r1, #1
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7ff ff23 	bl	8008aac <SPI_WaitFlagStateUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c70:	f043 0220 	orr.w	r2, r3, #32
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e000      	b.n	8008c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c94:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <SPI_EndRxTxTransaction+0x7c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <SPI_EndRxTxTransaction+0x80>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	0d5b      	lsrs	r3, r3, #21
 8008ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
 8008ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cb2:	d112      	bne.n	8008cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2180      	movs	r1, #128	; 0x80
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fef4 	bl	8008aac <SPI_WaitFlagStateUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d016      	beq.n	8008cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	f043 0220 	orr.w	r2, r3, #32
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e00f      	b.n	8008cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf0:	2b80      	cmp	r3, #128	; 0x80
 8008cf2:	d0f2      	beq.n	8008cda <SPI_EndRxTxTransaction+0x52>
 8008cf4:	e000      	b.n	8008cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008cf6:	bf00      	nop
  }

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	2000006c 	.word	0x2000006c
 8008d08:	165e9f81 	.word	0x165e9f81

08008d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e041      	b.n	8008da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7f9 fe46 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f000 fa96 	bl	800927c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d001      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e04e      	b.n	8008e62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a23      	ldr	r2, [pc, #140]	; (8008e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d022      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d01d      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1f      	ldr	r2, [pc, #124]	; (8008e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d018      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1e      	ldr	r2, [pc, #120]	; (8008e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d013      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00e      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1b      	ldr	r2, [pc, #108]	; (8008e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d009      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a19      	ldr	r2, [pc, #100]	; (8008e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x80>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a18      	ldr	r2, [pc, #96]	; (8008e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d111      	bne.n	8008e50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b06      	cmp	r3, #6
 8008e3c:	d010      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0201 	orr.w	r2, r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4e:	e007      	b.n	8008e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0201 	orr.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40000400 	.word	0x40000400
 8008e78:	40000800 	.word	0x40000800
 8008e7c:	40000c00 	.word	0x40000c00
 8008e80:	40010400 	.word	0x40010400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40001800 	.word	0x40001800

08008e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d122      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d11b      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0202 	mvn.w	r2, #2
 8008eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9b5 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008ed4:	e005      	b.n	8008ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9a7 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9b8 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d122      	bne.n	8008f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d11b      	bne.n	8008f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f06f 0204 	mvn.w	r2, #4
 8008f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f98b 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008f28:	e005      	b.n	8008f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f97d 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f98e 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d122      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d11b      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0208 	mvn.w	r2, #8
 8008f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2204      	movs	r2, #4
 8008f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f961 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008f7c:	e005      	b.n	8008f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f953 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f964 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d122      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d11b      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0210 	mvn.w	r2, #16
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2208      	movs	r2, #8
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f937 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f929 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f93a 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d10e      	bne.n	8009010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d107      	bne.n	8009010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0201 	mvn.w	r2, #1
 8009008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7f8 f8d0 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901a:	2b80      	cmp	r3, #128	; 0x80
 800901c:	d10e      	bne.n	800903c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d107      	bne.n	800903c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fae0 	bl	80095fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009054:	2b40      	cmp	r3, #64	; 0x40
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f8ff 	bl	8009266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b20      	cmp	r3, #32
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b20      	cmp	r3, #32
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0220 	mvn.w	r2, #32
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 faaa 	bl	80095e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_TIM_ConfigClockSource+0x1c>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e0b4      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x186>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f0:	d03e      	beq.n	8009170 <HAL_TIM_ConfigClockSource+0xd4>
 80090f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f6:	f200 8087 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 80090fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fe:	f000 8086 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x172>
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d87f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009108:	2b70      	cmp	r3, #112	; 0x70
 800910a:	d01a      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0xa6>
 800910c:	2b70      	cmp	r3, #112	; 0x70
 800910e:	d87b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009110:	2b60      	cmp	r3, #96	; 0x60
 8009112:	d050      	beq.n	80091b6 <HAL_TIM_ConfigClockSource+0x11a>
 8009114:	2b60      	cmp	r3, #96	; 0x60
 8009116:	d877      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009118:	2b50      	cmp	r3, #80	; 0x50
 800911a:	d03c      	beq.n	8009196 <HAL_TIM_ConfigClockSource+0xfa>
 800911c:	2b50      	cmp	r3, #80	; 0x50
 800911e:	d873      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d058      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x13a>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	d86f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009128:	2b30      	cmp	r3, #48	; 0x30
 800912a:	d064      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 800912c:	2b30      	cmp	r3, #48	; 0x30
 800912e:	d86b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b20      	cmp	r3, #32
 8009132:	d060      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009134:	2b20      	cmp	r3, #32
 8009136:	d867      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d05c      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 800913c:	2b10      	cmp	r3, #16
 800913e:	d05a      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009140:	e062      	b.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6899      	ldr	r1, [r3, #8]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f000 f9ad 	bl	80094b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	609a      	str	r2, [r3, #8]
      break;
 800916e:	e04f      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6899      	ldr	r1, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f000 f996 	bl	80094b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009192:	609a      	str	r2, [r3, #8]
      break;
 8009194:	e03c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6859      	ldr	r1, [r3, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f000 f90a 	bl	80093bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2150      	movs	r1, #80	; 0x50
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f963 	bl	800947a <TIM_ITRx_SetConfig>
      break;
 80091b4:	e02c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6859      	ldr	r1, [r3, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f000 f929 	bl	800941a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2160      	movs	r1, #96	; 0x60
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f953 	bl	800947a <TIM_ITRx_SetConfig>
      break;
 80091d4:	e01c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f000 f8ea 	bl	80093bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f943 	bl	800947a <TIM_ITRx_SetConfig>
      break;
 80091f4:	e00c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f000 f93a 	bl	800947a <TIM_ITRx_SetConfig>
      break;
 8009206:	e003      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	73fb      	strb	r3, [r7, #15]
      break;
 800920c:	e000      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800920e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a40      	ldr	r2, [pc, #256]	; (8009390 <TIM_Base_SetConfig+0x114>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d013      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d00f      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a3d      	ldr	r2, [pc, #244]	; (8009394 <TIM_Base_SetConfig+0x118>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00b      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a3c      	ldr	r2, [pc, #240]	; (8009398 <TIM_Base_SetConfig+0x11c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d007      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a3b      	ldr	r2, [pc, #236]	; (800939c <TIM_Base_SetConfig+0x120>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3a      	ldr	r2, [pc, #232]	; (80093a0 <TIM_Base_SetConfig+0x124>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d108      	bne.n	80092ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a2f      	ldr	r2, [pc, #188]	; (8009390 <TIM_Base_SetConfig+0x114>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d02b      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092dc:	d027      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a2c      	ldr	r2, [pc, #176]	; (8009394 <TIM_Base_SetConfig+0x118>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d023      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a2b      	ldr	r2, [pc, #172]	; (8009398 <TIM_Base_SetConfig+0x11c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d01f      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a2a      	ldr	r2, [pc, #168]	; (800939c <TIM_Base_SetConfig+0x120>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01b      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a29      	ldr	r2, [pc, #164]	; (80093a0 <TIM_Base_SetConfig+0x124>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d017      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a28      	ldr	r2, [pc, #160]	; (80093a4 <TIM_Base_SetConfig+0x128>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d013      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a27      	ldr	r2, [pc, #156]	; (80093a8 <TIM_Base_SetConfig+0x12c>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d00f      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a26      	ldr	r2, [pc, #152]	; (80093ac <TIM_Base_SetConfig+0x130>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00b      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a25      	ldr	r2, [pc, #148]	; (80093b0 <TIM_Base_SetConfig+0x134>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d007      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a24      	ldr	r2, [pc, #144]	; (80093b4 <TIM_Base_SetConfig+0x138>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d003      	beq.n	800932e <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a23      	ldr	r2, [pc, #140]	; (80093b8 <TIM_Base_SetConfig+0x13c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d108      	bne.n	8009340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4313      	orrs	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <TIM_Base_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0xf8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a0c      	ldr	r2, [pc, #48]	; (80093a0 <TIM_Base_SetConfig+0x124>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d103      	bne.n	800937c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	615a      	str	r2, [r3, #20]
}
 8009382:	bf00      	nop
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40010000 	.word	0x40010000
 8009394:	40000400 	.word	0x40000400
 8009398:	40000800 	.word	0x40000800
 800939c:	40000c00 	.word	0x40000c00
 80093a0:	40010400 	.word	0x40010400
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40014400 	.word	0x40014400
 80093ac:	40014800 	.word	0x40014800
 80093b0:	40001800 	.word	0x40001800
 80093b4:	40001c00 	.word	0x40001c00
 80093b8:	40002000 	.word	0x40002000

080093bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f023 0201 	bic.w	r2, r3, #1
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f023 030a 	bic.w	r3, r3, #10
 80093f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	621a      	str	r2, [r3, #32]
}
 800940e:	bf00      	nop
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800941a:	b480      	push	{r7}
 800941c:	b087      	sub	sp, #28
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f023 0210 	bic.w	r2, r3, #16
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	031b      	lsls	r3, r3, #12
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4313      	orrs	r3, r2
 800944e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	011b      	lsls	r3, r3, #4
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	4313      	orrs	r3, r2
 8009460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	621a      	str	r2, [r3, #32]
}
 800946e:	bf00      	nop
 8009470:	371c      	adds	r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	f043 0307 	orr.w	r3, r3, #7
 800949c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	609a      	str	r2, [r3, #8]
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	021a      	lsls	r2, r3, #8
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009504:	2302      	movs	r3, #2
 8009506:	e05a      	b.n	80095be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a21      	ldr	r2, [pc, #132]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d022      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009554:	d01d      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a1d      	ldr	r2, [pc, #116]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d018      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1b      	ldr	r2, [pc, #108]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1a      	ldr	r2, [pc, #104]	; (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00e      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a18      	ldr	r2, [pc, #96]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d009      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a17      	ldr	r2, [pc, #92]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d004      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a15      	ldr	r2, [pc, #84]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d10c      	bne.n	80095ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40000800 	.word	0x40000800
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	40010400 	.word	0x40010400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40001800 	.word	0x40001800

080095e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e03f      	b.n	80096a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7f9 f9e6 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2224      	movs	r2, #36	; 0x24
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f829 	bl	80096ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	691a      	ldr	r2, [r3, #16]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096b0:	b0c0      	sub	sp, #256	; 0x100
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80096c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c8:	68d9      	ldr	r1, [r3, #12]
 80096ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	ea40 0301 	orr.w	r3, r0, r1
 80096d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009704:	f021 010c 	bic.w	r1, r1, #12
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009712:	430b      	orrs	r3, r1
 8009714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009726:	6999      	ldr	r1, [r3, #24]
 8009728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	ea40 0301 	orr.w	r3, r0, r1
 8009732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b8f      	ldr	r3, [pc, #572]	; (8009978 <UART_SetConfig+0x2cc>)
 800973c:	429a      	cmp	r2, r3
 800973e:	d005      	beq.n	800974c <UART_SetConfig+0xa0>
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4b8d      	ldr	r3, [pc, #564]	; (800997c <UART_SetConfig+0x2d0>)
 8009748:	429a      	cmp	r2, r3
 800974a:	d104      	bne.n	8009756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800974c:	f7fe fa68 	bl	8007c20 <HAL_RCC_GetPCLK2Freq>
 8009750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009754:	e003      	b.n	800975e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009756:	f7fe fa4f 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 800975a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009768:	f040 810c 	bne.w	8009984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800976c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009770:	2200      	movs	r2, #0
 8009772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800977a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800977e:	4622      	mov	r2, r4
 8009780:	462b      	mov	r3, r5
 8009782:	1891      	adds	r1, r2, r2
 8009784:	65b9      	str	r1, [r7, #88]	; 0x58
 8009786:	415b      	adcs	r3, r3
 8009788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800978a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800978e:	4621      	mov	r1, r4
 8009790:	eb12 0801 	adds.w	r8, r2, r1
 8009794:	4629      	mov	r1, r5
 8009796:	eb43 0901 	adc.w	r9, r3, r1
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097ae:	4690      	mov	r8, r2
 80097b0:	4699      	mov	r9, r3
 80097b2:	4623      	mov	r3, r4
 80097b4:	eb18 0303 	adds.w	r3, r8, r3
 80097b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097bc:	462b      	mov	r3, r5
 80097be:	eb49 0303 	adc.w	r3, r9, r3
 80097c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80097d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80097da:	460b      	mov	r3, r1
 80097dc:	18db      	adds	r3, r3, r3
 80097de:	653b      	str	r3, [r7, #80]	; 0x50
 80097e0:	4613      	mov	r3, r2
 80097e2:	eb42 0303 	adc.w	r3, r2, r3
 80097e6:	657b      	str	r3, [r7, #84]	; 0x54
 80097e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80097f0:	f7f6 fd4e 	bl	8000290 <__aeabi_uldivmod>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4b61      	ldr	r3, [pc, #388]	; (8009980 <UART_SetConfig+0x2d4>)
 80097fa:	fba3 2302 	umull	r2, r3, r3, r2
 80097fe:	095b      	lsrs	r3, r3, #5
 8009800:	011c      	lsls	r4, r3, #4
 8009802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009806:	2200      	movs	r2, #0
 8009808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800980c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	1891      	adds	r1, r2, r2
 800981a:	64b9      	str	r1, [r7, #72]	; 0x48
 800981c:	415b      	adcs	r3, r3
 800981e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009824:	4641      	mov	r1, r8
 8009826:	eb12 0a01 	adds.w	sl, r2, r1
 800982a:	4649      	mov	r1, r9
 800982c:	eb43 0b01 	adc.w	fp, r3, r1
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	f04f 0300 	mov.w	r3, #0
 8009838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800983c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009844:	4692      	mov	sl, r2
 8009846:	469b      	mov	fp, r3
 8009848:	4643      	mov	r3, r8
 800984a:	eb1a 0303 	adds.w	r3, sl, r3
 800984e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009852:	464b      	mov	r3, r9
 8009854:	eb4b 0303 	adc.w	r3, fp, r3
 8009858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800985c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800986c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009870:	460b      	mov	r3, r1
 8009872:	18db      	adds	r3, r3, r3
 8009874:	643b      	str	r3, [r7, #64]	; 0x40
 8009876:	4613      	mov	r3, r2
 8009878:	eb42 0303 	adc.w	r3, r2, r3
 800987c:	647b      	str	r3, [r7, #68]	; 0x44
 800987e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009886:	f7f6 fd03 	bl	8000290 <__aeabi_uldivmod>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4611      	mov	r1, r2
 8009890:	4b3b      	ldr	r3, [pc, #236]	; (8009980 <UART_SetConfig+0x2d4>)
 8009892:	fba3 2301 	umull	r2, r3, r3, r1
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	2264      	movs	r2, #100	; 0x64
 800989a:	fb02 f303 	mul.w	r3, r2, r3
 800989e:	1acb      	subs	r3, r1, r3
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80098a6:	4b36      	ldr	r3, [pc, #216]	; (8009980 <UART_SetConfig+0x2d4>)
 80098a8:	fba3 2302 	umull	r2, r3, r3, r2
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098b4:	441c      	add	r4, r3
 80098b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80098c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80098c8:	4642      	mov	r2, r8
 80098ca:	464b      	mov	r3, r9
 80098cc:	1891      	adds	r1, r2, r2
 80098ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80098d0:	415b      	adcs	r3, r3
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098d8:	4641      	mov	r1, r8
 80098da:	1851      	adds	r1, r2, r1
 80098dc:	6339      	str	r1, [r7, #48]	; 0x30
 80098de:	4649      	mov	r1, r9
 80098e0:	414b      	adcs	r3, r1
 80098e2:	637b      	str	r3, [r7, #52]	; 0x34
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80098f0:	4659      	mov	r1, fp
 80098f2:	00cb      	lsls	r3, r1, #3
 80098f4:	4651      	mov	r1, sl
 80098f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098fa:	4651      	mov	r1, sl
 80098fc:	00ca      	lsls	r2, r1, #3
 80098fe:	4610      	mov	r0, r2
 8009900:	4619      	mov	r1, r3
 8009902:	4603      	mov	r3, r0
 8009904:	4642      	mov	r2, r8
 8009906:	189b      	adds	r3, r3, r2
 8009908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800990c:	464b      	mov	r3, r9
 800990e:	460a      	mov	r2, r1
 8009910:	eb42 0303 	adc.w	r3, r2, r3
 8009914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800992c:	460b      	mov	r3, r1
 800992e:	18db      	adds	r3, r3, r3
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
 8009932:	4613      	mov	r3, r2
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800993a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800993e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009942:	f7f6 fca5 	bl	8000290 <__aeabi_uldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <UART_SetConfig+0x2d4>)
 800994c:	fba3 1302 	umull	r1, r3, r3, r2
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	2164      	movs	r1, #100	; 0x64
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	3332      	adds	r3, #50	; 0x32
 800995e:	4a08      	ldr	r2, [pc, #32]	; (8009980 <UART_SetConfig+0x2d4>)
 8009960:	fba2 2303 	umull	r2, r3, r2, r3
 8009964:	095b      	lsrs	r3, r3, #5
 8009966:	f003 0207 	and.w	r2, r3, #7
 800996a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4422      	add	r2, r4
 8009972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009974:	e105      	b.n	8009b82 <UART_SetConfig+0x4d6>
 8009976:	bf00      	nop
 8009978:	40011000 	.word	0x40011000
 800997c:	40011400 	.word	0x40011400
 8009980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009988:	2200      	movs	r2, #0
 800998a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800998e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009996:	4642      	mov	r2, r8
 8009998:	464b      	mov	r3, r9
 800999a:	1891      	adds	r1, r2, r2
 800999c:	6239      	str	r1, [r7, #32]
 800999e:	415b      	adcs	r3, r3
 80099a0:	627b      	str	r3, [r7, #36]	; 0x24
 80099a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099a6:	4641      	mov	r1, r8
 80099a8:	1854      	adds	r4, r2, r1
 80099aa:	4649      	mov	r1, r9
 80099ac:	eb43 0501 	adc.w	r5, r3, r1
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	00eb      	lsls	r3, r5, #3
 80099ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099be:	00e2      	lsls	r2, r4, #3
 80099c0:	4614      	mov	r4, r2
 80099c2:	461d      	mov	r5, r3
 80099c4:	4643      	mov	r3, r8
 80099c6:	18e3      	adds	r3, r4, r3
 80099c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099cc:	464b      	mov	r3, r9
 80099ce:	eb45 0303 	adc.w	r3, r5, r3
 80099d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80099f2:	4629      	mov	r1, r5
 80099f4:	008b      	lsls	r3, r1, #2
 80099f6:	4621      	mov	r1, r4
 80099f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099fc:	4621      	mov	r1, r4
 80099fe:	008a      	lsls	r2, r1, #2
 8009a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a04:	f7f6 fc44 	bl	8000290 <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4b60      	ldr	r3, [pc, #384]	; (8009b90 <UART_SetConfig+0x4e4>)
 8009a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	011c      	lsls	r4, r3, #4
 8009a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009a28:	4642      	mov	r2, r8
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	1891      	adds	r1, r2, r2
 8009a2e:	61b9      	str	r1, [r7, #24]
 8009a30:	415b      	adcs	r3, r3
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a38:	4641      	mov	r1, r8
 8009a3a:	1851      	adds	r1, r2, r1
 8009a3c:	6139      	str	r1, [r7, #16]
 8009a3e:	4649      	mov	r1, r9
 8009a40:	414b      	adcs	r3, r1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a50:	4659      	mov	r1, fp
 8009a52:	00cb      	lsls	r3, r1, #3
 8009a54:	4651      	mov	r1, sl
 8009a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a5a:	4651      	mov	r1, sl
 8009a5c:	00ca      	lsls	r2, r1, #3
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	4642      	mov	r2, r8
 8009a66:	189b      	adds	r3, r3, r2
 8009a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	460a      	mov	r2, r1
 8009a70:	eb42 0303 	adc.w	r3, r2, r3
 8009a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	f04f 0300 	mov.w	r3, #0
 8009a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a90:	4649      	mov	r1, r9
 8009a92:	008b      	lsls	r3, r1, #2
 8009a94:	4641      	mov	r1, r8
 8009a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	008a      	lsls	r2, r1, #2
 8009a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009aa2:	f7f6 fbf5 	bl	8000290 <__aeabi_uldivmod>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4b39      	ldr	r3, [pc, #228]	; (8009b90 <UART_SetConfig+0x4e4>)
 8009aac:	fba3 1302 	umull	r1, r3, r3, r2
 8009ab0:	095b      	lsrs	r3, r3, #5
 8009ab2:	2164      	movs	r1, #100	; 0x64
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	3332      	adds	r3, #50	; 0x32
 8009abe:	4a34      	ldr	r2, [pc, #208]	; (8009b90 <UART_SetConfig+0x4e4>)
 8009ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac4:	095b      	lsrs	r3, r3, #5
 8009ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aca:	441c      	add	r4, r3
 8009acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ad4:	677a      	str	r2, [r7, #116]	; 0x74
 8009ad6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009ada:	4642      	mov	r2, r8
 8009adc:	464b      	mov	r3, r9
 8009ade:	1891      	adds	r1, r2, r2
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	415b      	adcs	r3, r3
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009aea:	4641      	mov	r1, r8
 8009aec:	1851      	adds	r1, r2, r1
 8009aee:	6039      	str	r1, [r7, #0]
 8009af0:	4649      	mov	r1, r9
 8009af2:	414b      	adcs	r3, r1
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b02:	4659      	mov	r1, fp
 8009b04:	00cb      	lsls	r3, r1, #3
 8009b06:	4651      	mov	r1, sl
 8009b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b0c:	4651      	mov	r1, sl
 8009b0e:	00ca      	lsls	r2, r1, #3
 8009b10:	4610      	mov	r0, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	4642      	mov	r2, r8
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	460a      	mov	r2, r1
 8009b20:	eb42 0303 	adc.w	r3, r2, r3
 8009b24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8009b30:	667a      	str	r2, [r7, #100]	; 0x64
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009b3e:	4649      	mov	r1, r9
 8009b40:	008b      	lsls	r3, r1, #2
 8009b42:	4641      	mov	r1, r8
 8009b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b48:	4641      	mov	r1, r8
 8009b4a:	008a      	lsls	r2, r1, #2
 8009b4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b50:	f7f6 fb9e 	bl	8000290 <__aeabi_uldivmod>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <UART_SetConfig+0x4e4>)
 8009b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b5e:	095b      	lsrs	r3, r3, #5
 8009b60:	2164      	movs	r1, #100	; 0x64
 8009b62:	fb01 f303 	mul.w	r3, r1, r3
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	3332      	adds	r3, #50	; 0x32
 8009b6c:	4a08      	ldr	r2, [pc, #32]	; (8009b90 <UART_SetConfig+0x4e4>)
 8009b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4422      	add	r2, r4
 8009b80:	609a      	str	r2, [r3, #8]
}
 8009b82:	bf00      	nop
 8009b84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b8e:	bf00      	nop
 8009b90:	51eb851f 	.word	0x51eb851f

08009b94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d123      	bne.n	8009bee <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009bae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	6851      	ldr	r1, [r2, #4]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	6892      	ldr	r2, [r2, #8]
 8009bba:	4311      	orrs	r1, r2
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	68d2      	ldr	r2, [r2, #12]
 8009bc0:	4311      	orrs	r1, r2
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	6912      	ldr	r2, [r2, #16]
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	6952      	ldr	r2, [r2, #20]
 8009bcc:	4311      	orrs	r1, r2
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	6992      	ldr	r2, [r2, #24]
 8009bd2:	4311      	orrs	r1, r2
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	69d2      	ldr	r2, [r2, #28]
 8009bd8:	4311      	orrs	r1, r2
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	6a12      	ldr	r2, [r2, #32]
 8009bde:	4311      	orrs	r1, r2
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009be4:	430a      	orrs	r2, r1
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	e028      	b.n	8009c40 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	69d9      	ldr	r1, [r3, #28]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	4319      	orrs	r1, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	430b      	orrs	r3, r1
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	6851      	ldr	r1, [r2, #4]
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	6892      	ldr	r2, [r2, #8]
 8009c20:	4311      	orrs	r1, r2
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	68d2      	ldr	r2, [r2, #12]
 8009c26:	4311      	orrs	r1, r2
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	6912      	ldr	r2, [r2, #16]
 8009c2c:	4311      	orrs	r1, r2
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	6952      	ldr	r2, [r2, #20]
 8009c32:	4311      	orrs	r1, r2
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	6992      	ldr	r2, [r2, #24]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d128      	bne.n	8009cb2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	1e59      	subs	r1, r3, #1
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	4319      	orrs	r1, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	4319      	orrs	r1, r3
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	031b      	lsls	r3, r3, #12
 8009c8a:	4319      	orrs	r1, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	4319      	orrs	r1, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	051b      	lsls	r3, r3, #20
 8009c9e:	4319      	orrs	r1, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	061b      	lsls	r3, r3, #24
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	431a      	orrs	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
 8009cb0:	e02f      	b.n	8009d12 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	68d2      	ldr	r2, [r2, #12]
 8009cc2:	3a01      	subs	r2, #1
 8009cc4:	0311      	lsls	r1, r2, #12
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	6952      	ldr	r2, [r2, #20]
 8009cca:	3a01      	subs	r2, #1
 8009ccc:	0512      	lsls	r2, r2, #20
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	1e59      	subs	r1, r3, #1
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	4319      	orrs	r1, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	4319      	orrs	r1, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	4319      	orrs	r1, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	061b      	lsls	r3, r3, #24
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	0d9b      	lsrs	r3, r3, #22
 8009d36:	059b      	lsls	r3, r3, #22
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	6811      	ldr	r1, [r2, #0]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	6852      	ldr	r2, [r2, #4]
 8009d40:	4311      	orrs	r1, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	6892      	ldr	r2, [r2, #8]
 8009d46:	3a01      	subs	r2, #1
 8009d48:	0152      	lsls	r2, r2, #5
 8009d4a:	4311      	orrs	r1, r2
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	68d2      	ldr	r2, [r2, #12]
 8009d50:	0252      	lsls	r2, r2, #9
 8009d52:	430a      	orrs	r2, r1
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009d5a:	f7f9 fb1f 	bl	800339c <HAL_GetTick>
 8009d5e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009d60:	e010      	b.n	8009d84 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d00c      	beq.n	8009d84 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <FMC_SDRAM_SendCommand+0x60>
 8009d70:	f7f9 fb14 	bl	800339c <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d201      	bcs.n	8009d84 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e006      	b.n	8009d92 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d0e8      	beq.n	8009d62 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009dac:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	0052      	lsls	r2, r2, #1
 8009db4:	431a      	orrs	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dc8:	b084      	sub	sp, #16
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	f107 001c 	add.w	r0, r7, #28
 8009dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d122      	bne.n	8009e26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d105      	bne.n	8009e1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9c0 	bl	800a1a0 <USB_CoreReset>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
 8009e24:	e01a      	b.n	8009e5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f9b4 	bl	800a1a0 <USB_CoreReset>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8009e4e:	e005      	b.n	8009e5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d10b      	bne.n	8009e7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f043 0206 	orr.w	r2, r3, #6
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f043 0220 	orr.w	r2, r3, #32
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e86:	b004      	add	sp, #16
 8009e88:	4770      	bx	lr

08009e8a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f043 0201 	orr.w	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f023 0201 	bic.w	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d115      	bne.n	8009f1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009efc:	2001      	movs	r0, #1
 8009efe:	f7f9 fa59 	bl	80033b4 <HAL_Delay>
      ms++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f93a 	bl	800a182 <USB_GetMode>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d01e      	beq.n	8009f52 <USB_SetCurrentMode+0x84>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b31      	cmp	r3, #49	; 0x31
 8009f18:	d9f0      	bls.n	8009efc <USB_SetCurrentMode+0x2e>
 8009f1a:	e01a      	b.n	8009f52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d115      	bne.n	8009f4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f7f9 fa40 	bl	80033b4 <HAL_Delay>
      ms++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f921 	bl	800a182 <USB_GetMode>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <USB_SetCurrentMode+0x84>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b31      	cmp	r3, #49	; 0x31
 8009f4a:	d9f0      	bls.n	8009f2e <USB_SetCurrentMode+0x60>
 8009f4c:	e001      	b.n	8009f52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e005      	b.n	8009f5e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b32      	cmp	r3, #50	; 0x32
 8009f56:	d101      	bne.n	8009f5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <USB_FlushTxFifo+0x64>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d901      	bls.n	8009f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e01b      	b.n	8009fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	daf2      	bge.n	8009f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	019b      	lsls	r3, r3, #6
 8009f98:	f043 0220 	orr.w	r2, r3, #32
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <USB_FlushTxFifo+0x64>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d901      	bls.n	8009fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e006      	b.n	8009fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0320 	and.w	r3, r3, #32
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	d0f0      	beq.n	8009fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	00030d40 	.word	0x00030d40

08009fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4a11      	ldr	r2, [pc, #68]	; (800a02c <USB_FlushRxFifo+0x5c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d901      	bls.n	8009fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e018      	b.n	800a020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	daf2      	bge.n	8009fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4a08      	ldr	r2, [pc, #32]	; (800a02c <USB_FlushRxFifo+0x5c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d901      	bls.n	800a012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e006      	b.n	800a020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0310 	and.w	r3, r3, #16
 800a01a:	2b10      	cmp	r3, #16
 800a01c:	d0f0      	beq.n	800a000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	00030d40 	.word	0x00030d40

0800a030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	; 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4611      	mov	r1, r2
 800a03c:	461a      	mov	r2, r3
 800a03e:	460b      	mov	r3, r1
 800a040:	71fb      	strb	r3, [r7, #7]
 800a042:	4613      	mov	r3, r2
 800a044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a04e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	d123      	bne.n	800a09e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a056:	88bb      	ldrh	r3, [r7, #4]
 800a058:	3303      	adds	r3, #3
 800a05a:	089b      	lsrs	r3, r3, #2
 800a05c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a05e:	2300      	movs	r3, #0
 800a060:	61bb      	str	r3, [r7, #24]
 800a062:	e018      	b.n	800a096 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	031a      	lsls	r2, r3, #12
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a070:	461a      	mov	r2, r3
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3301      	adds	r3, #1
 800a07c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	3301      	adds	r3, #1
 800a082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3301      	adds	r3, #1
 800a08e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	3301      	adds	r3, #1
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d3e2      	bcc.n	800a064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3724      	adds	r7, #36	; 0x24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b08b      	sub	sp, #44	; 0x2c
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	089b      	lsrs	r3, r3, #2
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	623b      	str	r3, [r7, #32]
 800a0d6:	e014      	b.n	800a102 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	3301      	adds	r3, #1
 800a100:	623b      	str	r3, [r7, #32]
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	429a      	cmp	r2, r3
 800a108:	d3e6      	bcc.n	800a0d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a10a:	8bfb      	ldrh	r3, [r7, #30]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01e      	beq.n	800a14e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	461a      	mov	r2, r3
 800a11c:	f107 0310 	add.w	r3, r7, #16
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	701a      	strb	r2, [r3, #0]
      i++;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	3301      	adds	r3, #1
 800a13a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	3301      	adds	r3, #1
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a142:	8bfb      	ldrh	r3, [r7, #30]
 800a144:	3b01      	subs	r3, #1
 800a146:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a148:	8bfb      	ldrh	r3, [r7, #30]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1ea      	bne.n	800a124 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a150:	4618      	mov	r0, r3
 800a152:	372c      	adds	r7, #44	; 0x2c
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	4013      	ands	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a174:	68fb      	ldr	r3, [r7, #12]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f003 0301 	and.w	r3, r3, #1
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a13      	ldr	r2, [pc, #76]	; (800a204 <USB_CoreReset+0x64>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d901      	bls.n	800a1be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e01b      	b.n	800a1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	daf2      	bge.n	800a1ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f043 0201 	orr.w	r2, r3, #1
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <USB_CoreReset+0x64>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d901      	bls.n	800a1e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e006      	b.n	800a1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d0f0      	beq.n	800a1d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	00030d40 	.word	0x00030d40

0800a208 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a208:	b084      	sub	sp, #16
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a228:	461a      	mov	r2, r3
 800a22a:	2300      	movs	r3, #0
 800a22c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d018      	beq.n	800a290 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	2b01      	cmp	r3, #1
 800a262:	d10a      	bne.n	800a27a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a272:	f043 0304 	orr.w	r3, r3, #4
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	e014      	b.n	800a2a4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a288:	f023 0304 	bic.w	r3, r3, #4
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	e009      	b.n	800a2a4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a29e:	f023 0304 	bic.w	r3, r3, #4
 800a2a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2a4:	2110      	movs	r1, #16
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fe5e 	bl	8009f68 <USB_FlushTxFifo>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff fe8a 	bl	8009fd0 <USB_FlushRxFifo>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	e015      	b.n	800a2f8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295
 800a2de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d3e5      	bcc.n	800a2cc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f04f 32ff 	mov.w	r2, #4294967295
 800a30c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a320:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a13      	ldr	r2, [pc, #76]	; (800a374 <USB_HostInit+0x16c>)
 800a326:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a13      	ldr	r2, [pc, #76]	; (800a378 <USB_HostInit+0x170>)
 800a32c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a330:	e009      	b.n	800a346 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2280      	movs	r2, #128	; 0x80
 800a336:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a10      	ldr	r2, [pc, #64]	; (800a37c <USB_HostInit+0x174>)
 800a33c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a0f      	ldr	r2, [pc, #60]	; (800a380 <USB_HostInit+0x178>)
 800a342:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d105      	bne.n	800a358 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f043 0210 	orr.w	r2, r3, #16
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <USB_HostInit+0x17c>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a364:	7dfb      	ldrb	r3, [r7, #23]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a370:	b004      	add	sp, #16
 800a372:	4770      	bx	lr
 800a374:	01000200 	.word	0x01000200
 800a378:	00e00300 	.word	0x00e00300
 800a37c:	00600080 	.word	0x00600080
 800a380:	004000e0 	.word	0x004000e0
 800a384:	a3200008 	.word	0xa3200008

0800a388 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3a6:	f023 0303 	bic.w	r3, r3, #3
 800a3aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d107      	bne.n	800a3da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a3d6:	6053      	str	r3, [r2, #4]
 800a3d8:	e009      	b.n	800a3ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d106      	bne.n	800a3ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f241 7370 	movw	r3, #6000	; 0x1770
 800a3ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a41c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a42a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a42c:	2064      	movs	r0, #100	; 0x64
 800a42e:	f7f8 ffc1 	bl	80033b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a43e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a440:	200a      	movs	r0, #10
 800a442:	f7f8 ffb7 	bl	80033b4 <HAL_Delay>

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a474:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <USB_DriveVbus+0x44>
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d106      	bne.n	800a494 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a48e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a492:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a49e:	d109      	bne.n	800a4b4 <USB_DriveVbus+0x64>
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d106      	bne.n	800a4b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	0c5b      	lsrs	r3, r3, #17
 800a4e0:	f003 0303 	and.w	r3, r3, #3
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	b29b      	uxth	r3, r3
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
	...

0800a514 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4603      	mov	r3, r0
 800a524:	70fb      	strb	r3, [r7, #3]
 800a526:	460b      	mov	r3, r1
 800a528:	70bb      	strb	r3, [r7, #2]
 800a52a:	4613      	mov	r3, r2
 800a52c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a536:	78fb      	ldrb	r3, [r7, #3]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a542:	461a      	mov	r2, r3
 800a544:	f04f 33ff 	mov.w	r3, #4294967295
 800a548:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a54a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d87e      	bhi.n	800a650 <USB_HC_Init+0x13c>
 800a552:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <USB_HC_Init+0x44>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a569 	.word	0x0800a569
 800a55c:	0800a613 	.word	0x0800a613
 800a560:	0800a569 	.word	0x0800a569
 800a564:	0800a5d5 	.word	0x0800a5d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a574:	461a      	mov	r2, r3
 800a576:	f240 439d 	movw	r3, #1181	; 0x49d
 800a57a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a57c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a580:	2b00      	cmp	r3, #0
 800a582:	da10      	bge.n	800a5a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a59e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a5a4:	e057      	b.n	800a656 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d051      	beq.n	800a656 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a5d0:	60d3      	str	r3, [r2, #12]
      break;
 800a5d2:	e040      	b.n	800a656 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f240 639d 	movw	r3, #1693	; 0x69d
 800a5e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a5e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da34      	bge.n	800a65a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	0151      	lsls	r1, r2, #5
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	440a      	add	r2, r1
 800a606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a60a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a610:	e023      	b.n	800a65a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61e:	461a      	mov	r2, r3
 800a620:	f240 2325 	movw	r3, #549	; 0x225
 800a624:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	da17      	bge.n	800a65e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	4413      	add	r3, r2
 800a636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	0151      	lsls	r1, r2, #5
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	440a      	add	r2, r1
 800a644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a648:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a64c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a64e:	e006      	b.n	800a65e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	77fb      	strb	r3, [r7, #31]
      break;
 800a654:	e004      	b.n	800a660 <USB_HC_Init+0x14c>
      break;
 800a656:	bf00      	nop
 800a658:	e002      	b.n	800a660 <USB_HC_Init+0x14c>
      break;
 800a65a:	bf00      	nop
 800a65c:	e000      	b.n	800a660 <USB_HC_Init+0x14c>
      break;
 800a65e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	4413      	add	r3, r2
 800a668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	440a      	add	r2, r1
 800a676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a67a:	f043 0302 	orr.w	r3, r3, #2
 800a67e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	2101      	movs	r1, #1
 800a690:	fa01 f303 	lsl.w	r3, r1, r3
 800a694:	6939      	ldr	r1, [r7, #16]
 800a696:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a69a:	4313      	orrs	r3, r2
 800a69c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a6aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da03      	bge.n	800a6ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	e001      	b.n	800a6be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff feff 	bl	800a4c2 <USB_GetHostSpeed>
 800a6c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a6c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d106      	bne.n	800a6dc <USB_HC_Init+0x1c8>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d003      	beq.n	800a6dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a6d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e001      	b.n	800a6e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a6e0:	787b      	ldrb	r3, [r7, #1]
 800a6e2:	059b      	lsls	r3, r3, #22
 800a6e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a6e8:	78bb      	ldrb	r3, [r7, #2]
 800a6ea:	02db      	lsls	r3, r3, #11
 800a6ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a6f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a6f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6f6:	049b      	lsls	r3, r3, #18
 800a6f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a6fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a6fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a700:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a704:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	0159      	lsls	r1, r3, #5
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	440b      	add	r3, r1
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a71c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a71e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a722:	2b03      	cmp	r3, #3
 800a724:	d003      	beq.n	800a72e <USB_HC_Init+0x21a>
 800a726:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d10f      	bne.n	800a74e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	4413      	add	r3, r2
 800a736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	78fa      	ldrb	r2, [r7, #3]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	440a      	add	r2, r1
 800a744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a74c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08c      	sub	sp, #48	; 0x30
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	4613      	mov	r3, r2
 800a764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d02d      	beq.n	800a7de <USB_HC_StartXfer+0x86>
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d129      	bne.n	800a7de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d117      	bne.n	800a7c0 <USB_HC_StartXfer+0x68>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	79db      	ldrb	r3, [r3, #7]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <USB_HC_StartXfer+0x48>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	79db      	ldrb	r3, [r3, #7]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d10f      	bne.n	800a7c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	6a3a      	ldr	r2, [r7, #32]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <USB_HC_StartXfer+0x86>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	795b      	ldrb	r3, [r3, #5]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d107      	bne.n	800a7de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 fa0f 	bl	800abf8 <USB_DoPing>
      return HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e0f8      	b.n	800a9d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d018      	beq.n	800a818 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	8912      	ldrh	r2, [r2, #8]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	8912      	ldrh	r2, [r2, #8]
 800a7f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a7fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a7fe:	8b7b      	ldrh	r3, [r7, #26]
 800a800:	429a      	cmp	r2, r3
 800a802:	d90b      	bls.n	800a81c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a804:	8b7b      	ldrh	r3, [r7, #26]
 800a806:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	8912      	ldrh	r2, [r2, #8]
 800a80e:	fb03 f202 	mul.w	r2, r3, r2
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	611a      	str	r2, [r3, #16]
 800a816:	e001      	b.n	800a81c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a818:	2301      	movs	r3, #1
 800a81a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	8912      	ldrh	r2, [r2, #8]
 800a82a:	fb03 f202 	mul.w	r2, r3, r2
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	611a      	str	r2, [r3, #16]
 800a832:	e003      	b.n	800a83c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a846:	04d9      	lsls	r1, r3, #19
 800a848:	4b63      	ldr	r3, [pc, #396]	; (800a9d8 <USB_HC_StartXfer+0x280>)
 800a84a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a84c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	7a9b      	ldrb	r3, [r3, #10]
 800a852:	075b      	lsls	r3, r3, #29
 800a854:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a858:	69f9      	ldr	r1, [r7, #28]
 800a85a:	0148      	lsls	r0, r1, #5
 800a85c:	6a39      	ldr	r1, [r7, #32]
 800a85e:	4401      	add	r1, r0
 800a860:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a864:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a866:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	68d9      	ldr	r1, [r3, #12]
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87e:	460a      	mov	r2, r1
 800a880:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bf0c      	ite	eq
 800a892:	2301      	moveq	r3, #1
 800a894:	2300      	movne	r3, #0
 800a896:	b2db      	uxtb	r3, r3
 800a898:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	6a3a      	ldr	r2, [r7, #32]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	7e7b      	ldrb	r3, [r7, #25]
 800a8ca:	075b      	lsls	r3, r3, #29
 800a8cc:	69f9      	ldr	r1, [r7, #28]
 800a8ce:	0148      	lsls	r0, r1, #5
 800a8d0:	6a39      	ldr	r1, [r7, #32]
 800a8d2:	4401      	add	r1, r0
 800a8d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	78db      	ldrb	r3, [r3, #3]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	e003      	b.n	800a90e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a90c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a914:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a922:	461a      	mov	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	e04e      	b.n	800a9d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d149      	bne.n	800a9ce <USB_HC_StartXfer+0x276>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d045      	beq.n	800a9ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	79db      	ldrb	r3, [r3, #7]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d830      	bhi.n	800a9ac <USB_HC_StartXfer+0x254>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USB_HC_StartXfer+0x1f8>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a961 	.word	0x0800a961
 800a954:	0800a985 	.word	0x0800a985
 800a958:	0800a961 	.word	0x0800a961
 800a95c:	0800a985 	.word	0x0800a985
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	3303      	adds	r3, #3
 800a966:	089b      	lsrs	r3, r3, #2
 800a968:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a96a:	8afa      	ldrh	r2, [r7, #22]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	b29b      	uxth	r3, r3
 800a972:	429a      	cmp	r2, r3
 800a974:	d91c      	bls.n	800a9b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f043 0220 	orr.w	r2, r3, #32
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	619a      	str	r2, [r3, #24]
        }
        break;
 800a982:	e015      	b.n	800a9b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	3303      	adds	r3, #3
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a98e:	8afa      	ldrh	r2, [r7, #22]
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d90a      	bls.n	800a9b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a9aa:	e003      	b.n	800a9b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <USB_HC_StartXfer+0x25e>
        break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <USB_HC_StartXfer+0x25e>
        break;
 800a9b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	68d9      	ldr	r1, [r3, #12]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	785a      	ldrb	r2, [r3, #1]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	9000      	str	r0, [sp, #0]
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f7ff fb31 	bl	800a030 <USB_WritePacket>
  }

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3728      	adds	r7, #40	; 0x28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	1ff80000 	.word	0x1ff80000

0800a9dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	b29b      	uxth	r3, r3
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b089      	sub	sp, #36	; 0x24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	0c9b      	lsrs	r3, r3, #18
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	0fdb      	lsrs	r3, r3, #31
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b20      	cmp	r3, #32
 800aa4c:	d104      	bne.n	800aa58 <USB_HC_Halt+0x5a>
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e0c8      	b.n	800abea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <USB_HC_Halt+0x66>
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d163      	bne.n	800ab2c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f003 0320 	and.w	r3, r3, #32
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 80ab 	bne.w	800abe8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d133      	bne.n	800ab06 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aabc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	0151      	lsls	r1, r2, #5
 800aad0:	69fa      	ldr	r2, [r7, #28]
 800aad2:	440a      	add	r2, r1
 800aad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aadc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3301      	adds	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaea:	d81d      	bhi.n	800ab28 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aafe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab02:	d0ec      	beq.n	800aade <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab04:	e070      	b.n	800abe8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	0151      	lsls	r1, r2, #5
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	440a      	add	r2, r1
 800ab1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab26:	e05f      	b.n	800abe8 <USB_HC_Halt+0x1ea>
            break;
 800ab28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ab2a:	e05d      	b.n	800abe8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d133      	bne.n	800abc4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aba8:	d81d      	bhi.n	800abe6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abc0:	d0ec      	beq.n	800ab9c <USB_HC_Halt+0x19e>
 800abc2:	e011      	b.n	800abe8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	0151      	lsls	r1, r2, #5
 800abd6:	69fa      	ldr	r2, [r7, #28]
 800abd8:	440a      	add	r2, r1
 800abda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	e000      	b.n	800abe8 <USB_HC_Halt+0x1ea>
          break;
 800abe6:	bf00      	nop
    }
  }

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3724      	adds	r7, #36	; 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	04da      	lsls	r2, r3, #19
 800ac14:	4b15      	ldr	r3, [pc, #84]	; (800ac6c <USB_DoPing+0x74>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac28:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac40:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac48:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac56:	461a      	mov	r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	371c      	adds	r7, #28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	1ff80000 	.word	0x1ff80000

0800ac70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff f911 	bl	8009eac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac8a:	2110      	movs	r1, #16
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff f96b 	bl	8009f68 <USB_FlushTxFifo>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff f997 	bl	8009fd0 <USB_FlushRxFifo>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800acac:	2300      	movs	r3, #0
 800acae:	61bb      	str	r3, [r7, #24]
 800acb0:	e01f      	b.n	800acf2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	461a      	mov	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	3301      	adds	r3, #1
 800acf0:	61bb      	str	r3, [r7, #24]
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b0f      	cmp	r3, #15
 800acf6:	d9dc      	bls.n	800acb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800acf8:	2300      	movs	r3, #0
 800acfa:	61bb      	str	r3, [r7, #24]
 800acfc:	e034      	b.n	800ad68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad32:	461a      	mov	r2, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad44:	d80c      	bhi.n	800ad60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad5c:	d0ec      	beq.n	800ad38 <USB_StopHost+0xc8>
 800ad5e:	e000      	b.n	800ad62 <USB_StopHost+0xf2>
        break;
 800ad60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	3301      	adds	r3, #1
 800ad66:	61bb      	str	r3, [r7, #24]
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	2b0f      	cmp	r3, #15
 800ad6c:	d9c7      	bls.n	800acfe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad74:	461a      	mov	r2, r3
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff f880 	bl	8009e8a <USB_EnableGlobalInt>

  return ret;
 800ad8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3720      	adds	r7, #32
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b089      	sub	sp, #36	; 0x24
 800ad98:	af04      	add	r7, sp, #16
 800ad9a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	2202      	movs	r2, #2
 800ada0:	2102      	movs	r1, #2
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fcb2 	bl	800b70c <USBH_FindInterface>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	2bff      	cmp	r3, #255	; 0xff
 800adb0:	d002      	beq.n	800adb8 <USBH_CDC_InterfaceInit+0x24>
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d901      	bls.n	800adbc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800adb8:	2302      	movs	r3, #2
 800adba:	e13d      	b.n	800b038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fc87 	bl	800b6d4 <USBH_SelectInterface>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800add0:	2302      	movs	r3, #2
 800add2:	e131      	b.n	800b038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800adda:	2050      	movs	r0, #80	; 0x50
 800addc:	f005 fcfc 	bl	80107d8 <malloc>
 800ade0:	4603      	mov	r3, r0
 800ade2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800adf4:	2302      	movs	r3, #2
 800adf6:	e11f      	b.n	800b038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800adf8:	2250      	movs	r2, #80	; 0x50
 800adfa:	2100      	movs	r1, #0
 800adfc:	68b8      	ldr	r0, [r7, #8]
 800adfe:	f005 fd09 	bl	8010814 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	211a      	movs	r1, #26
 800ae08:	fb01 f303 	mul.w	r3, r1, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	b25b      	sxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	da15      	bge.n	800ae46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	211a      	movs	r1, #26
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	211a      	movs	r1, #26
 800ae36:	fb01 f303 	mul.w	r3, r1, r3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ae40:	881a      	ldrh	r2, [r3, #0]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	785b      	ldrb	r3, [r3, #1]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f002 f984 	bl	800d15a <USBH_AllocPipe>
 800ae52:	4603      	mov	r3, r0
 800ae54:	461a      	mov	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	7819      	ldrb	r1, [r3, #0]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	7858      	ldrb	r0, [r3, #1]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	8952      	ldrh	r2, [r2, #10]
 800ae72:	9202      	str	r2, [sp, #8]
 800ae74:	2203      	movs	r2, #3
 800ae76:	9201      	str	r2, [sp, #4]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4623      	mov	r3, r4
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f002 f93c 	bl	800d0fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f005 fbf5 	bl	801067c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ae92:	2300      	movs	r3, #0
 800ae94:	2200      	movs	r2, #0
 800ae96:	210a      	movs	r1, #10
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fc37 	bl	800b70c <USBH_FindInterface>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	2bff      	cmp	r3, #255	; 0xff
 800aea6:	d002      	beq.n	800aeae <USBH_CDC_InterfaceInit+0x11a>
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d901      	bls.n	800aeb2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e0c2      	b.n	800b038 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	211a      	movs	r1, #26
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	4413      	add	r3, r2
 800aebe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	da16      	bge.n	800aef8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	211a      	movs	r1, #26
 800aed0:	fb01 f303 	mul.w	r3, r1, r3
 800aed4:	4413      	add	r3, r2
 800aed6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aeda:	781a      	ldrb	r2, [r3, #0]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	211a      	movs	r1, #26
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aef0:	881a      	ldrh	r2, [r3, #0]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	835a      	strh	r2, [r3, #26]
 800aef6:	e015      	b.n	800af24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	211a      	movs	r1, #26
 800aefe:	fb01 f303 	mul.w	r3, r1, r3
 800af02:	4413      	add	r3, r2
 800af04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	211a      	movs	r1, #26
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	4413      	add	r3, r2
 800af1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800af1e:	881a      	ldrh	r2, [r3, #0]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	211a      	movs	r1, #26
 800af2a:	fb01 f303 	mul.w	r3, r1, r3
 800af2e:	4413      	add	r3, r2
 800af30:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b25b      	sxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da16      	bge.n	800af6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	211a      	movs	r1, #26
 800af42:	fb01 f303 	mul.w	r3, r1, r3
 800af46:	4413      	add	r3, r2
 800af48:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af4c:	781a      	ldrb	r2, [r3, #0]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	211a      	movs	r1, #26
 800af58:	fb01 f303 	mul.w	r3, r1, r3
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af62:	881a      	ldrh	r2, [r3, #0]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	835a      	strh	r2, [r3, #26]
 800af68:	e015      	b.n	800af96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	211a      	movs	r1, #26
 800af70:	fb01 f303 	mul.w	r3, r1, r3
 800af74:	4413      	add	r3, r2
 800af76:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	211a      	movs	r1, #26
 800af86:	fb01 f303 	mul.w	r3, r1, r3
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af90:	881a      	ldrh	r2, [r3, #0]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	7b9b      	ldrb	r3, [r3, #14]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f002 f8dc 	bl	800d15a <USBH_AllocPipe>
 800afa2:	4603      	mov	r3, r0
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	7bdb      	ldrb	r3, [r3, #15]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f002 f8d2 	bl	800d15a <USBH_AllocPipe>
 800afb6:	4603      	mov	r3, r0
 800afb8:	461a      	mov	r2, r3
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	7b59      	ldrb	r1, [r3, #13]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	7b98      	ldrb	r0, [r3, #14]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	8b12      	ldrh	r2, [r2, #24]
 800afd6:	9202      	str	r2, [sp, #8]
 800afd8:	2202      	movs	r2, #2
 800afda:	9201      	str	r2, [sp, #4]
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	4623      	mov	r3, r4
 800afe0:	4602      	mov	r2, r0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f002 f88a 	bl	800d0fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	7b19      	ldrb	r1, [r3, #12]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	7bd8      	ldrb	r0, [r3, #15]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	8b52      	ldrh	r2, [r2, #26]
 800b000:	9202      	str	r2, [sp, #8]
 800b002:	2202      	movs	r2, #2
 800b004:	9201      	str	r2, [sp, #4]
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	4623      	mov	r3, r4
 800b00a:	4602      	mov	r2, r0
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f002 f875 	bl	800d0fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	7b5b      	ldrb	r3, [r3, #13]
 800b01e:	2200      	movs	r2, #0
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f005 fb2a 	bl	801067c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	7b1b      	ldrb	r3, [r3, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f005 fb23 	bl	801067c <USBH_LL_SetToggle>

  return USBH_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}

0800b040 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00e      	beq.n	800b078 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f002 f86a 	bl	800d13a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f002 f895 	bl	800d19c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	7b1b      	ldrb	r3, [r3, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	7b1b      	ldrb	r3, [r3, #12]
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f002 f857 	bl	800d13a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	7b1b      	ldrb	r3, [r3, #12]
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f002 f882 	bl	800d19c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	7b5b      	ldrb	r3, [r3, #13]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	7b5b      	ldrb	r3, [r3, #13]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f002 f844 	bl	800d13a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	7b5b      	ldrb	r3, [r3, #13]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f002 f86f 	bl	800d19c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f005 fb85 	bl	80107e8 <free>
    phost->pActiveClass->pData = 0U;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3340      	adds	r3, #64	; 0x40
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f8b1 	bl	800b272 <GetLineCoding>
 800b110:	4603      	mov	r3, r0
 800b112:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b114:	7afb      	ldrb	r3, [r7, #11]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d105      	bne.n	800b126 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b120:	2102      	movs	r1, #2
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b126:	7afb      	ldrb	r3, [r7, #11]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b138:	2301      	movs	r3, #1
 800b13a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b150:	2b04      	cmp	r3, #4
 800b152:	d877      	bhi.n	800b244 <USBH_CDC_Process+0x114>
 800b154:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <USBH_CDC_Process+0x2c>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b171 	.word	0x0800b171
 800b160:	0800b177 	.word	0x0800b177
 800b164:	0800b1a7 	.word	0x0800b1a7
 800b168:	0800b21b 	.word	0x0800b21b
 800b16c:	0800b229 	.word	0x0800b229
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
      break;
 800b174:	e06d      	b.n	800b252 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f897 	bl	800b2b0 <SetLineCoding>
 800b182:	4603      	mov	r3, r0
 800b184:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d104      	bne.n	800b196 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b194:	e058      	b.n	800b248 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d055      	beq.n	800b248 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2204      	movs	r2, #4
 800b1a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b1a4:	e050      	b.n	800b248 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	3340      	adds	r3, #64	; 0x40
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f860 	bl	800b272 <GetLineCoding>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d126      	bne.n	800b20a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ce:	791b      	ldrb	r3, [r3, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d13b      	bne.n	800b24c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d133      	bne.n	800b24c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d12b      	bne.n	800b24c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d124      	bne.n	800b24c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f982 	bl	800b50c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b208:	e020      	b.n	800b24c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d01d      	beq.n	800b24c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2204      	movs	r2, #4
 800b214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b218:	e018      	b.n	800b24c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f867 	bl	800b2ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f8f6 	bl	800b412 <CDC_ProcessReception>
      break;
 800b226:	e014      	b.n	800b252 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f957 	bl	800c4de <USBH_ClrFeature>
 800b230:	4603      	mov	r3, r0
 800b232:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10a      	bne.n	800b250 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b242:	e005      	b.n	800b250 <USBH_CDC_Process+0x120>

    default:
      break;
 800b244:	bf00      	nop
 800b246:	e004      	b.n	800b252 <USBH_CDC_Process+0x122>
      break;
 800b248:	bf00      	nop
 800b24a:	e002      	b.n	800b252 <USBH_CDC_Process+0x122>
      break;
 800b24c:	bf00      	nop
 800b24e:	e000      	b.n	800b252 <USBH_CDC_Process+0x122>
      break;
 800b250:	bf00      	nop

  }

  return status;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	22a1      	movs	r2, #161	; 0xa1
 800b280:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2221      	movs	r2, #33	; 0x21
 800b286:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2207      	movs	r2, #7
 800b298:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2207      	movs	r2, #7
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fbe9 	bl	800ca78 <USBH_CtlReq>
 800b2a6:	4603      	mov	r3, r0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2221      	movs	r2, #33	; 0x21
 800b2be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2207      	movs	r2, #7
 800b2d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2207      	movs	r2, #7
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 fbca 	bl	800ca78 <USBH_CtlReq>
 800b2e4:	4603      	mov	r3, r0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b086      	sub	sp, #24
 800b2f2:	af02      	add	r7, sp, #8
 800b2f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2fc:	69db      	ldr	r3, [r3, #28]
 800b2fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b300:	2300      	movs	r3, #0
 800b302:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d002      	beq.n	800b314 <CDC_ProcessTransmission+0x26>
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d023      	beq.n	800b35a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b312:	e07a      	b.n	800b40a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	8b12      	ldrh	r2, [r2, #24]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d90b      	bls.n	800b338 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	69d9      	ldr	r1, [r3, #28]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8b1a      	ldrh	r2, [r3, #24]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	7b5b      	ldrb	r3, [r3, #13]
 800b32c:	2001      	movs	r0, #1
 800b32e:	9000      	str	r0, [sp, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 fea0 	bl	800d076 <USBH_BulkSendData>
 800b336:	e00b      	b.n	800b350 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b340:	b29a      	uxth	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	7b5b      	ldrb	r3, [r3, #13]
 800b346:	2001      	movs	r0, #1
 800b348:	9000      	str	r0, [sp, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fe93 	bl	800d076 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2202      	movs	r2, #2
 800b354:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b358:	e057      	b.n	800b40a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	7b5b      	ldrb	r3, [r3, #13]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f005 f961 	bl	8010628 <USBH_LL_GetURBState>
 800b366:	4603      	mov	r3, r0
 800b368:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d136      	bne.n	800b3de <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	8b12      	ldrh	r2, [r2, #24]
 800b378:	4293      	cmp	r3, r2
 800b37a:	d90e      	bls.n	800b39a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	8b12      	ldrh	r2, [r2, #24]
 800b384:	1a9a      	subs	r2, r3, r2
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	8b12      	ldrh	r2, [r2, #24]
 800b392:	441a      	add	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	61da      	str	r2, [r3, #28]
 800b398:	e002      	b.n	800b3a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b3b0:	e006      	b.n	800b3c0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f892 	bl	800b4e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f002 f8d0 	bl	800d57c <osMessageQueuePut>
      break;
 800b3dc:	e014      	b.n	800b408 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d111      	bne.n	800b408 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2204      	movs	r2, #4
 800b3f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b400:	2300      	movs	r3, #0
 800b402:	2200      	movs	r2, #0
 800b404:	f002 f8ba 	bl	800d57c <osMessageQueuePut>
      break;
 800b408:	bf00      	nop
  }
}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b086      	sub	sp, #24
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b424:	2300      	movs	r3, #0
 800b426:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d002      	beq.n	800b438 <CDC_ProcessReception+0x26>
 800b432:	2b04      	cmp	r3, #4
 800b434:	d00e      	beq.n	800b454 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b436:	e051      	b.n	800b4dc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	6a19      	ldr	r1, [r3, #32]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	8b5a      	ldrh	r2, [r3, #26]
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	7b1b      	ldrb	r3, [r3, #12]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f001 fe3b 	bl	800d0c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2204      	movs	r2, #4
 800b44e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b452:	e043      	b.n	800b4dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	7b1b      	ldrb	r3, [r3, #12]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f005 f8e4 	bl	8010628 <USBH_LL_GetURBState>
 800b460:	4603      	mov	r3, r0
 800b462:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b464:	7cfb      	ldrb	r3, [r7, #19]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d137      	bne.n	800b4da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	7b1b      	ldrb	r3, [r3, #12]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f005 f847 	bl	8010504 <USBH_LL_GetLastXferSize>
 800b476:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d016      	beq.n	800b4b0 <CDC_ProcessReception+0x9e>
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	8b5b      	ldrh	r3, [r3, #26]
 800b486:	461a      	mov	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d910      	bls.n	800b4b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	6a1a      	ldr	r2, [r3, #32]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	441a      	add	r2, r3
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2203      	movs	r2, #3
 800b4aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b4ae:	e006      	b.n	800b4be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f81d 	bl	800b4f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2204      	movs	r2, #4
 800b4c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f002 f851 	bl	800d57c <osMessageQueuePut>
      break;
 800b4da:	bf00      	nop
  }
}
 800b4dc:	bf00      	nop
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b534:	2302      	movs	r3, #2
 800b536:	e044      	b.n	800b5c2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	79fa      	ldrb	r2, [r7, #7]
 800b53c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 f841 	bl	800b5d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b584:	2200      	movs	r2, #0
 800b586:	2104      	movs	r1, #4
 800b588:	2010      	movs	r0, #16
 800b58a:	f001 ff84 	bl	800d496 <osMessageQueueNew>
 800b58e:	4602      	mov	r2, r0
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <USBH_Init+0xac>)
 800b598:	4a0d      	ldr	r2, [pc, #52]	; (800b5d0 <USBH_Init+0xb0>)
 800b59a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <USBH_Init+0xac>)
 800b59e:	2280      	movs	r2, #128	; 0x80
 800b5a0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b5a2:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <USBH_Init+0xac>)
 800b5a4:	2218      	movs	r2, #24
 800b5a6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b5a8:	4a08      	ldr	r2, [pc, #32]	; (800b5cc <USBH_Init+0xac>)
 800b5aa:	68f9      	ldr	r1, [r7, #12]
 800b5ac:	4809      	ldr	r0, [pc, #36]	; (800b5d4 <USBH_Init+0xb4>)
 800b5ae:	f001 fec5 	bl	800d33c <osThreadNew>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f004 fee4 	bl	8010388 <USBH_LL_Init>

  return USBH_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	2000063c 	.word	0x2000063c
 800b5d0:	0801111c 	.word	0x0801111c
 800b5d4:	0800c255 	.word	0x0800c255

0800b5d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e009      	b.n	800b5fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	33e0      	adds	r3, #224	; 0xe0
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b0f      	cmp	r3, #15
 800b602:	d9f2      	bls.n	800b5ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	e009      	b.n	800b61e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b614:	2200      	movs	r2, #0
 800b616:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3301      	adds	r3, #1
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b624:	d3f1      	bcc.n	800b60a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2240      	movs	r2, #64	; 0x40
 800b64a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d016      	beq.n	800b6c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10e      	bne.n	800b6bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b6a4:	1c59      	adds	r1, r3, #1
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	33de      	adds	r3, #222	; 0xde
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
 800b6ba:	e004      	b.n	800b6c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	73fb      	strb	r3, [r7, #15]
 800b6c0:	e001      	b.n	800b6c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d204      	bcs.n	800b6fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	78fa      	ldrb	r2, [r7, #3]
 800b6f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b6f8:	e001      	b.n	800b6fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	4608      	mov	r0, r1
 800b716:	4611      	mov	r1, r2
 800b718:	461a      	mov	r2, r3
 800b71a:	4603      	mov	r3, r0
 800b71c:	70fb      	strb	r3, [r7, #3]
 800b71e:	460b      	mov	r3, r1
 800b720:	70bb      	strb	r3, [r7, #2]
 800b722:	4613      	mov	r3, r2
 800b724:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b734:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b736:	e025      	b.n	800b784 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b738:	7dfb      	ldrb	r3, [r7, #23]
 800b73a:	221a      	movs	r2, #26
 800b73c:	fb02 f303 	mul.w	r3, r2, r3
 800b740:	3308      	adds	r3, #8
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4413      	add	r3, r2
 800b746:	3302      	adds	r3, #2
 800b748:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	795b      	ldrb	r3, [r3, #5]
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	429a      	cmp	r2, r3
 800b752:	d002      	beq.n	800b75a <USBH_FindInterface+0x4e>
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	2bff      	cmp	r3, #255	; 0xff
 800b758:	d111      	bne.n	800b77e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b75e:	78ba      	ldrb	r2, [r7, #2]
 800b760:	429a      	cmp	r2, r3
 800b762:	d002      	beq.n	800b76a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b764:	78bb      	ldrb	r3, [r7, #2]
 800b766:	2bff      	cmp	r3, #255	; 0xff
 800b768:	d109      	bne.n	800b77e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b76e:	787a      	ldrb	r2, [r7, #1]
 800b770:	429a      	cmp	r2, r3
 800b772:	d002      	beq.n	800b77a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b774:	787b      	ldrb	r3, [r7, #1]
 800b776:	2bff      	cmp	r3, #255	; 0xff
 800b778:	d101      	bne.n	800b77e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	e006      	b.n	800b78c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	3301      	adds	r3, #1
 800b782:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d9d6      	bls.n	800b738 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b78a:	23ff      	movs	r3, #255	; 0xff
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	371c      	adds	r7, #28
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f004 fe37 	bl	8010414 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f004 ff50 	bl	801064e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b088      	sub	sp, #32
 800b7bc:	af04      	add	r7, sp, #16
 800b7be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d102      	bne.n	800b7da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2203      	movs	r2, #3
 800b7d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b0b      	cmp	r3, #11
 800b7e2:	f200 8247 	bhi.w	800bc74 <USBH_Process+0x4bc>
 800b7e6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <USBH_Process+0x34>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b81d 	.word	0x0800b81d
 800b7f0:	0800b86b 	.word	0x0800b86b
 800b7f4:	0800b8ef 	.word	0x0800b8ef
 800b7f8:	0800bbf3 	.word	0x0800bbf3
 800b7fc:	0800bc75 	.word	0x0800bc75
 800b800:	0800b9af 	.word	0x0800b9af
 800b804:	0800bb7d 	.word	0x0800bb7d
 800b808:	0800ba01 	.word	0x0800ba01
 800b80c:	0800ba3d 	.word	0x0800ba3d
 800b810:	0800ba77 	.word	0x0800ba77
 800b814:	0800bad5 	.word	0x0800bad5
 800b818:	0800bbdb 	.word	0x0800bbdb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 8227 	beq.w	800bc78 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b830:	20c8      	movs	r0, #200	; 0xc8
 800b832:	f004 ff53 	bl	80106dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f004 fe49 	bl	80104ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b860:	2300      	movs	r3, #0
 800b862:	2200      	movs	r2, #0
 800b864:	f001 fe8a 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b868:	e206      	b.n	800bc78 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b870:	2b01      	cmp	r3, #1
 800b872:	d107      	bne.n	800b884 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e025      	b.n	800b8d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b88a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b88e:	d914      	bls.n	800b8ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b896:	3301      	adds	r3, #1
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d903      	bls.n	800b8b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	220d      	movs	r2, #13
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e00e      	b.n	800b8d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	e00a      	b.n	800b8d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b8c0:	f103 020a 	add.w	r2, r3, #10
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b8ca:	200a      	movs	r0, #10
 800b8cc:	f004 ff06 	bl	80106dc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f001 fe48 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800b8ec:	e1cb      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d005      	beq.n	800b904 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8fe:	2104      	movs	r1, #4
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b904:	2064      	movs	r0, #100	; 0x64
 800b906:	f004 fee9 	bl	80106dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f004 fdb8 	bl	8010480 <USBH_LL_GetSpeed>
 800b910:	4603      	mov	r3, r0
 800b912:	461a      	mov	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2205      	movs	r2, #5
 800b91e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b920:	2100      	movs	r1, #0
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fc19 	bl	800d15a <USBH_AllocPipe>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b930:	2180      	movs	r1, #128	; 0x80
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f001 fc11 	bl	800d15a <USBH_AllocPipe>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7919      	ldrb	r1, [r3, #4]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b954:	b292      	uxth	r2, r2
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	2200      	movs	r2, #0
 800b95a:	9201      	str	r2, [sp, #4]
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	4603      	mov	r3, r0
 800b960:	2280      	movs	r2, #128	; 0x80
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f001 fbca 	bl	800d0fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	7959      	ldrb	r1, [r3, #5]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b97c:	b292      	uxth	r2, r2
 800b97e:	9202      	str	r2, [sp, #8]
 800b980:	2200      	movs	r2, #0
 800b982:	9201      	str	r2, [sp, #4]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4603      	mov	r3, r0
 800b988:	2200      	movs	r2, #0
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f001 fbb6 	bl	800d0fc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f001 fde8 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800b9ac:	e16b      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f96e 	bl	800bc90 <USBH_HandleEnum>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f040 815d 	bne.w	800bc7c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d103      	bne.n	800b9dc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2208      	movs	r2, #8
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2207      	movs	r2, #7
 800b9e0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2205      	movs	r2, #5
 800b9e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f001 fdbf 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b9fe:	e13d      	b.n	800bc7c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 813a 	beq.w	800bc80 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba12:	2101      	movs	r1, #1
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2208      	movs	r2, #8
 800ba1c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2205      	movs	r2, #5
 800ba22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba32:	2300      	movs	r3, #0
 800ba34:	2200      	movs	r2, #0
 800ba36:	f001 fda1 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ba3a:	e121      	b.n	800bc80 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fd02 	bl	800c450 <USBH_SetCfg>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d102      	bne.n	800ba58 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2209      	movs	r2, #9
 800ba56:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f001 fd84 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800ba74:	e107      	b.n	800bc86 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ba7c:	f003 0320 	and.w	r3, r3, #32
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d015      	beq.n	800bab0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ba84:	2101      	movs	r1, #1
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fd05 	bl	800c496 <USBH_SetFeature>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d103      	bne.n	800baa0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	220a      	movs	r2, #10
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	e00a      	b.n	800bab6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	2b03      	cmp	r3, #3
 800baa6:	d106      	bne.n	800bab6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	220a      	movs	r2, #10
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	e002      	b.n	800bab6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	220a      	movs	r2, #10
 800bab4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800baca:	2300      	movs	r3, #0
 800bacc:	2200      	movs	r2, #0
 800bace:	f001 fd55 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800bad2:	e0d8      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bada:	2b00      	cmp	r3, #0
 800badc:	d03f      	beq.n	800bb5e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
 800baea:	e016      	b.n	800bb1a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800baec:	7bfa      	ldrb	r2, [r7, #15]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	32de      	adds	r2, #222	; 0xde
 800baf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf6:	791a      	ldrb	r2, [r3, #4]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d108      	bne.n	800bb14 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bb02:	7bfa      	ldrb	r2, [r7, #15]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	32de      	adds	r2, #222	; 0xde
 800bb08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bb12:	e005      	b.n	800bb20 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	3301      	adds	r3, #1
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0e5      	beq.n	800baec <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d016      	beq.n	800bb58 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d109      	bne.n	800bb50 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2206      	movs	r2, #6
 800bb40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb48:	2103      	movs	r1, #3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
 800bb4e:	e006      	b.n	800bb5e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	220d      	movs	r2, #13
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	e002      	b.n	800bb5e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	220d      	movs	r2, #13
 800bb5c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2205      	movs	r2, #5
 800bb62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb72:	2300      	movs	r3, #0
 800bb74:	2200      	movs	r2, #0
 800bb76:	f001 fd01 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800bb7a:	e084      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d017      	beq.n	800bbb6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
 800bb92:	4603      	mov	r3, r0
 800bb94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	220b      	movs	r2, #11
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	e00a      	b.n	800bbbc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d106      	bne.n	800bbbc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	220d      	movs	r2, #13
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e002      	b.n	800bbbc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	220d      	movs	r2, #13
 800bbba:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2205      	movs	r2, #5
 800bbc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f001 fcd2 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800bbd8:	e055      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d04f      	beq.n	800bc84 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	4798      	blx	r3
      }
      break;
 800bbf0:	e048      	b.n	800bc84 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff fcec 	bl	800b5d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d009      	beq.n	800bc1e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc2e:	2105      	movs	r1, #5
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d107      	bne.n	800bc50 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff fda5 	bl	800b798 <USBH_Start>
 800bc4e:	e002      	b.n	800bc56 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f004 fbdf 	bl	8010414 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f001 fc85 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      break;
 800bc72:	e008      	b.n	800bc86 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800bc74:	bf00      	nop
 800bc76:	e006      	b.n	800bc86 <USBH_Process+0x4ce>
      break;
 800bc78:	bf00      	nop
 800bc7a:	e004      	b.n	800bc86 <USBH_Process+0x4ce>
      break;
 800bc7c:	bf00      	nop
 800bc7e:	e002      	b.n	800bc86 <USBH_Process+0x4ce>
    break;
 800bc80:	bf00      	nop
 800bc82:	e000      	b.n	800bc86 <USBH_Process+0x4ce>
      break;
 800bc84:	bf00      	nop
  }
  return USBH_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b088      	sub	sp, #32
 800bc94:	af04      	add	r7, sp, #16
 800bc96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	2b07      	cmp	r3, #7
 800bca6:	f200 8208 	bhi.w	800c0ba <USBH_HandleEnum+0x42a>
 800bcaa:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <USBH_HandleEnum+0x20>)
 800bcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb0:	0800bcd1 	.word	0x0800bcd1
 800bcb4:	0800bd8f 	.word	0x0800bd8f
 800bcb8:	0800bdf9 	.word	0x0800bdf9
 800bcbc:	0800be87 	.word	0x0800be87
 800bcc0:	0800bef1 	.word	0x0800bef1
 800bcc4:	0800bf61 	.word	0x0800bf61
 800bcc8:	0800bffd 	.word	0x0800bffd
 800bccc:	0800c07b 	.word	0x0800c07b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 faec 	bl	800c2b0 <USBH_Get_DevDesc>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d130      	bne.n	800bd44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7919      	ldrb	r1, [r3, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bd06:	b292      	uxth	r2, r2
 800bd08:	9202      	str	r2, [sp, #8]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	9201      	str	r2, [sp, #4]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	4603      	mov	r3, r0
 800bd12:	2280      	movs	r2, #128	; 0x80
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f001 f9f1 	bl	800d0fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7959      	ldrb	r1, [r3, #5]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd2e:	b292      	uxth	r2, r2
 800bd30:	9202      	str	r2, [sp, #8]
 800bd32:	2200      	movs	r2, #0
 800bd34:	9201      	str	r2, [sp, #4]
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f001 f9dd 	bl	800d0fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd42:	e1bc      	b.n	800c0be <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	f040 81b9 	bne.w	800c0be <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd52:	3301      	adds	r3, #1
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d903      	bls.n	800bd6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	220d      	movs	r2, #13
 800bd6a:	701a      	strb	r2, [r3, #0]
      break;
 800bd6c:	e1a7      	b.n	800c0be <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	795b      	ldrb	r3, [r3, #5]
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f001 fa11 	bl	800d19c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	791b      	ldrb	r3, [r3, #4]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 fa0b 	bl	800d19c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
      break;
 800bd8c:	e197      	b.n	800c0be <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bd8e:	2112      	movs	r1, #18
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fa8d 	bl	800c2b0 <USBH_Get_DevDesc>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d103      	bne.n	800bda8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bda6:	e18c      	b.n	800c0c2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	f040 8189 	bne.w	800c0c2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d903      	bls.n	800bdd2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	220d      	movs	r2, #13
 800bdce:	701a      	strb	r2, [r3, #0]
      break;
 800bdd0:	e177      	b.n	800c0c2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	795b      	ldrb	r3, [r3, #5]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f001 f9df 	bl	800d19c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	791b      	ldrb	r3, [r3, #4]
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f001 f9d9 	bl	800d19c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
      break;
 800bdf6:	e164      	b.n	800c0c2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fb04 	bl	800c408 <USBH_SetAddress>
 800be00:	4603      	mov	r3, r0
 800be02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d132      	bne.n	800be70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800be0a:	2002      	movs	r0, #2
 800be0c:	f004 fc66 	bl	80106dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2203      	movs	r2, #3
 800be1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	7919      	ldrb	r1, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800be32:	b292      	uxth	r2, r2
 800be34:	9202      	str	r2, [sp, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	9201      	str	r2, [sp, #4]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	4603      	mov	r3, r0
 800be3e:	2280      	movs	r2, #128	; 0x80
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 f95b 	bl	800d0fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	7959      	ldrb	r1, [r3, #5]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be5a:	b292      	uxth	r2, r2
 800be5c:	9202      	str	r2, [sp, #8]
 800be5e:	2200      	movs	r2, #0
 800be60:	9201      	str	r2, [sp, #4]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	4603      	mov	r3, r0
 800be66:	2200      	movs	r2, #0
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 f947 	bl	800d0fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be6e:	e12a      	b.n	800c0c6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	2b03      	cmp	r3, #3
 800be74:	f040 8127 	bne.w	800c0c6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	220d      	movs	r2, #13
 800be7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	705a      	strb	r2, [r3, #1]
      break;
 800be84:	e11f      	b.n	800c0c6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800be86:	2109      	movs	r1, #9
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fa39 	bl	800c300 <USBH_Get_CfgDesc>
 800be8e:	4603      	mov	r3, r0
 800be90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d103      	bne.n	800bea0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2204      	movs	r2, #4
 800be9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be9e:	e114      	b.n	800c0ca <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	f040 8111 	bne.w	800c0ca <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beae:	3301      	adds	r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d903      	bls.n	800beca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	220d      	movs	r2, #13
 800bec6:	701a      	strb	r2, [r3, #0]
      break;
 800bec8:	e0ff      	b.n	800c0ca <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	795b      	ldrb	r3, [r3, #5]
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f001 f963 	bl	800d19c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	791b      	ldrb	r3, [r3, #4]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 f95d 	bl	800d19c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	701a      	strb	r2, [r3, #0]
      break;
 800beee:	e0ec      	b.n	800c0ca <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fa01 	bl	800c300 <USBH_Get_CfgDesc>
 800befe:	4603      	mov	r3, r0
 800bf00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d103      	bne.n	800bf10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2205      	movs	r2, #5
 800bf0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bf0e:	e0de      	b.n	800c0ce <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	f040 80db 	bne.w	800c0ce <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf1e:	3301      	adds	r3, #1
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d903      	bls.n	800bf3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	220d      	movs	r2, #13
 800bf36:	701a      	strb	r2, [r3, #0]
      break;
 800bf38:	e0c9      	b.n	800c0ce <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	795b      	ldrb	r3, [r3, #5]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 f92b 	bl	800d19c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	791b      	ldrb	r3, [r3, #4]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f001 f925 	bl	800d19c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]
      break;
 800bf5e:	e0b6      	b.n	800c0ce <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d036      	beq.n	800bfd8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf76:	23ff      	movs	r3, #255	; 0xff
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f9e5 	bl	800c348 <USBH_Get_StringDesc>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d111      	bne.n	800bfac <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2205      	movs	r2, #5
 800bf92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f001 fae9 	bl	800d57c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bfaa:	e092      	b.n	800c0d2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	f040 808f 	bne.w	800c0d2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2206      	movs	r2, #6
 800bfb8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2205      	movs	r2, #5
 800bfbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f001 fad3 	bl	800d57c <osMessageQueuePut>
      break;
 800bfd6:	e07c      	b.n	800c0d2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2206      	movs	r2, #6
 800bfdc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2205      	movs	r2, #5
 800bfe2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bff2:	2300      	movs	r3, #0
 800bff4:	2200      	movs	r2, #0
 800bff6:	f001 fac1 	bl	800d57c <osMessageQueuePut>
      break;
 800bffa:	e06a      	b.n	800c0d2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c002:	2b00      	cmp	r3, #0
 800c004:	d027      	beq.n	800c056 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c012:	23ff      	movs	r3, #255	; 0xff
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f997 	bl	800c348 <USBH_Get_StringDesc>
 800c01a:	4603      	mov	r3, r0
 800c01c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2207      	movs	r2, #7
 800c028:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c02a:	e054      	b.n	800c0d6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d151      	bne.n	800c0d6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2207      	movs	r2, #7
 800c036:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2205      	movs	r2, #5
 800c03c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c04c:	2300      	movs	r3, #0
 800c04e:	2200      	movs	r2, #0
 800c050:	f001 fa94 	bl	800d57c <osMessageQueuePut>
      break;
 800c054:	e03f      	b.n	800c0d6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2207      	movs	r2, #7
 800c05a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2205      	movs	r2, #5
 800c060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c070:	2300      	movs	r3, #0
 800c072:	2200      	movs	r2, #0
 800c074:	f001 fa82 	bl	800d57c <osMessageQueuePut>
      break;
 800c078:	e02d      	b.n	800c0d6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c080:	2b00      	cmp	r3, #0
 800c082:	d017      	beq.n	800c0b4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c090:	23ff      	movs	r3, #255	; 0xff
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f958 	bl	800c348 <USBH_Get_StringDesc>
 800c098:	4603      	mov	r3, r0
 800c09a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c0a6:	e018      	b.n	800c0da <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d115      	bne.n	800c0da <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b2:	e012      	b.n	800c0da <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b8:	e00f      	b.n	800c0da <USBH_HandleEnum+0x44a>

    default:
      break;
 800c0ba:	bf00      	nop
 800c0bc:	e00e      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0be:	bf00      	nop
 800c0c0:	e00c      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0c2:	bf00      	nop
 800c0c4:	e00a      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0c6:	bf00      	nop
 800c0c8:	e008      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0ca:	bf00      	nop
 800c0cc:	e006      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0ce:	bf00      	nop
 800c0d0:	e004      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0d2:	bf00      	nop
 800c0d4:	e002      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <USBH_HandleEnum+0x44c>
      break;
 800c0da:	bf00      	nop
  }
  return Status;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c0fa:	bf00      	nop
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f804 	bl	800c12a <USBH_HandleSof>
}
 800c122:	bf00      	nop
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b082      	sub	sp, #8
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b0b      	cmp	r3, #11
 800c13a:	d10a      	bne.n	800c152 <USBH_HandleSof+0x28>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d005      	beq.n	800c152 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	4798      	blx	r3
  }
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c17e:	2300      	movs	r3, #0
 800c180:	2200      	movs	r2, #0
 800c182:	f001 f9fb 	bl	800d57c <osMessageQueuePut>
#endif
#endif

  return;
 800c186:	bf00      	nop
}
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c19e:	bf00      	nop
}
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1de:	2300      	movs	r3, #0
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f001 f9cb 	bl	800d57c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f004 f91a 	bl	801044a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	791b      	ldrb	r3, [r3, #4]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 ffbd 	bl	800d19c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	795b      	ldrb	r3, [r3, #5]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 ffb7 	bl	800d19c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c242:	2300      	movs	r3, #0
 800c244:	2200      	movs	r2, #0
 800c246:	f001 f999 	bl	800d57c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	2200      	movs	r2, #0
 800c26e:	f001 f9e5 	bl	800d63c <osMessageQueueGet>
 800c272:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1f0      	bne.n	800c25c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fa9c 	bl	800b7b8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c280:	e7ec      	b.n	800c25c <USBH_Process_OS+0x8>

0800c282 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f001 f96b 	bl	800d57c <osMessageQueuePut>
#endif

  return USBH_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c2c2:	78fb      	ldrb	r3, [r7, #3]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f864 	bl	800c39e <USBH_GetDescriptor>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2ec:	78fa      	ldrb	r2, [r7, #3]
 800c2ee:	b292      	uxth	r2, r2
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f000 f918 	bl	800c526 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af02      	add	r7, sp, #8
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	331c      	adds	r3, #28
 800c310:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c312:	887b      	ldrh	r3, [r7, #2]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c31c:	2100      	movs	r1, #0
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f83d 	bl	800c39e <USBH_GetDescriptor>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d107      	bne.n	800c33e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c32e:	887b      	ldrh	r3, [r7, #2]
 800c330:	461a      	mov	r2, r3
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f987 	bl	800c648 <USBH_ParseCfgDesc>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	461a      	mov	r2, r3
 800c354:	460b      	mov	r3, r1
 800c356:	72fb      	strb	r3, [r7, #11]
 800c358:	4613      	mov	r3, r2
 800c35a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c364:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c36c:	893b      	ldrh	r3, [r7, #8]
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	460b      	mov	r3, r1
 800c372:	2100      	movs	r1, #0
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 f812 	bl	800c39e <USBH_GetDescriptor>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d107      	bne.n	800c394 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c38a:	893a      	ldrh	r2, [r7, #8]
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 fb24 	bl	800c9dc <USBH_ParseStringDesc>
  }

  return status;
 800c394:	7dfb      	ldrb	r3, [r7, #23]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	607b      	str	r3, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	72fb      	strb	r3, [r7, #11]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d11c      	bne.n	800c3f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2206      	movs	r2, #6
 800c3c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	893a      	ldrh	r2, [r7, #8]
 800c3ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c3d0:	893b      	ldrh	r3, [r7, #8]
 800c3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c3d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3da:	d104      	bne.n	800c3e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f240 4209 	movw	r2, #1033	; 0x409
 800c3e2:	829a      	strh	r2, [r3, #20]
 800c3e4:	e002      	b.n	800c3ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	8b3a      	ldrh	r2, [r7, #24]
 800c3f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c3f2:	8b3b      	ldrh	r3, [r7, #24]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f000 fb3d 	bl	800ca78 <USBH_CtlReq>
 800c3fe:	4603      	mov	r3, r0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	789b      	ldrb	r3, [r3, #2]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d10f      	bne.n	800c43c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2205      	movs	r2, #5
 800c426:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c428:	78fb      	ldrb	r3, [r7, #3]
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fb19 	bl	800ca78 <USBH_CtlReq>
 800c446:	4603      	mov	r3, r0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	789b      	ldrb	r3, [r3, #2]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d10e      	bne.n	800c482 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2209      	movs	r2, #9
 800c46e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	887a      	ldrh	r2, [r7, #2]
 800c474:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 faf6 	bl	800ca78 <USBH_CtlReq>
 800c48c:	4603      	mov	r3, r0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	789b      	ldrb	r3, [r3, #2]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d10f      	bne.n	800c4ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fad2 	bl	800ca78 <USBH_CtlReq>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	789b      	ldrb	r3, [r3, #2]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d10f      	bne.n	800c512 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c504:	78fb      	ldrb	r3, [r7, #3]
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c512:	2200      	movs	r2, #0
 800c514:	2100      	movs	r1, #0
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 faae 	bl	800ca78 <USBH_CtlReq>
 800c51c:	4603      	mov	r3, r0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	4613      	mov	r3, r2
 800c532:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	785a      	ldrb	r2, [r3, #1]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	3302      	adds	r3, #2
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	3303      	adds	r3, #3
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	b29b      	uxth	r3, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	791a      	ldrb	r2, [r3, #4]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	795a      	ldrb	r2, [r3, #5]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	799a      	ldrb	r2, [r3, #6]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	79da      	ldrb	r2, [r3, #7]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	79db      	ldrb	r3, [r3, #7]
 800c584:	2b20      	cmp	r3, #32
 800c586:	dc11      	bgt.n	800c5ac <USBH_ParseDevDesc+0x86>
 800c588:	2b08      	cmp	r3, #8
 800c58a:	db16      	blt.n	800c5ba <USBH_ParseDevDesc+0x94>
 800c58c:	3b08      	subs	r3, #8
 800c58e:	2201      	movs	r2, #1
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bf14      	ite	ne
 800c5a0:	2301      	movne	r3, #1
 800c5a2:	2300      	moveq	r3, #0
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <USBH_ParseDevDesc+0x8a>
 800c5aa:	e006      	b.n	800c5ba <USBH_ParseDevDesc+0x94>
 800c5ac:	2b40      	cmp	r3, #64	; 0x40
 800c5ae:	d104      	bne.n	800c5ba <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	79da      	ldrb	r2, [r3, #7]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	71da      	strb	r2, [r3, #7]
      break;
 800c5b8:	e003      	b.n	800c5c2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2240      	movs	r2, #64	; 0x40
 800c5be:	71da      	strb	r2, [r3, #7]
      break;
 800c5c0:	bf00      	nop
  }

  if (length > 8U)
 800c5c2:	88fb      	ldrh	r3, [r7, #6]
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d939      	bls.n	800c63c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	3309      	adds	r3, #9
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	021b      	lsls	r3, r3, #8
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	330a      	adds	r3, #10
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	330b      	adds	r3, #11
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	330c      	adds	r3, #12
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	b29a      	uxth	r2, r3
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	330d      	adds	r3, #13
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	b29b      	uxth	r3, r3
 800c614:	4313      	orrs	r3, r2
 800c616:	b29a      	uxth	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	7b9a      	ldrb	r2, [r3, #14]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	7bda      	ldrb	r2, [r3, #15]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	7c1a      	ldrb	r2, [r3, #16]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	7c5a      	ldrb	r2, [r3, #17]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	745a      	strb	r2, [r3, #17]
  }
}
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08c      	sub	sp, #48	; 0x30
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c65c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	785a      	ldrb	r2, [r3, #1]
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	3302      	adds	r3, #2
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	b29a      	uxth	r2, r3
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	3303      	adds	r3, #3
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	b29b      	uxth	r3, r3
 800c698:	021b      	lsls	r3, r3, #8
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a4:	bf28      	it	cs
 800c6a6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	791a      	ldrb	r2, [r3, #4]
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	795a      	ldrb	r2, [r3, #5]
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	799a      	ldrb	r2, [r3, #6]
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	79da      	ldrb	r2, [r3, #7]
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	7a1a      	ldrb	r2, [r3, #8]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b09      	cmp	r3, #9
 800c6de:	d002      	beq.n	800c6e6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	2209      	movs	r2, #9
 800c6e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c6e6:	88fb      	ldrh	r3, [r7, #6]
 800c6e8:	2b09      	cmp	r3, #9
 800c6ea:	f240 809d 	bls.w	800c828 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c6ee:	2309      	movs	r3, #9
 800c6f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c6f6:	e081      	b.n	800c7fc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c6f8:	f107 0316 	add.w	r3, r7, #22
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c700:	f000 f99f 	bl	800ca42 <USBH_GetNextDesc>
 800c704:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	785b      	ldrb	r3, [r3, #1]
 800c70a:	2b04      	cmp	r3, #4
 800c70c:	d176      	bne.n	800c7fc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b09      	cmp	r3, #9
 800c714:	d002      	beq.n	800c71c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	2209      	movs	r2, #9
 800c71a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c720:	221a      	movs	r2, #26
 800c722:	fb02 f303 	mul.w	r3, r2, r3
 800c726:	3308      	adds	r3, #8
 800c728:	6a3a      	ldr	r2, [r7, #32]
 800c72a:	4413      	add	r3, r2
 800c72c:	3302      	adds	r3, #2
 800c72e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c732:	69f8      	ldr	r0, [r7, #28]
 800c734:	f000 f87e 	bl	800c834 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c742:	e043      	b.n	800c7cc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c744:	f107 0316 	add.w	r3, r7, #22
 800c748:	4619      	mov	r1, r3
 800c74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74c:	f000 f979 	bl	800ca42 <USBH_GetNextDesc>
 800c750:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	785b      	ldrb	r3, [r3, #1]
 800c756:	2b05      	cmp	r3, #5
 800c758:	d138      	bne.n	800c7cc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	795b      	ldrb	r3, [r3, #5]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d10f      	bne.n	800c782 <USBH_ParseCfgDesc+0x13a>
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	799b      	ldrb	r3, [r3, #6]
 800c766:	2b02      	cmp	r3, #2
 800c768:	d10b      	bne.n	800c782 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	79db      	ldrb	r3, [r3, #7]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10f      	bne.n	800c792 <USBH_ParseCfgDesc+0x14a>
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b09      	cmp	r3, #9
 800c778:	d00b      	beq.n	800c792 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	2209      	movs	r2, #9
 800c77e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c780:	e007      	b.n	800c792 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b07      	cmp	r3, #7
 800c788:	d004      	beq.n	800c794 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2207      	movs	r2, #7
 800c78e:	701a      	strb	r2, [r3, #0]
 800c790:	e000      	b.n	800c794 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c792:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c798:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c79c:	3201      	adds	r2, #1
 800c79e:	00d2      	lsls	r2, r2, #3
 800c7a0:	211a      	movs	r1, #26
 800c7a2:	fb01 f303 	mul.w	r3, r1, r3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	6a3a      	ldr	r2, [r7, #32]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b4:	69b9      	ldr	r1, [r7, #24]
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 f86b 	bl	800c892 <USBH_ParseEPDesc>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c7c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	791b      	ldrb	r3, [r3, #4]
 800c7d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d204      	bcs.n	800c7e2 <USBH_ParseCfgDesc+0x19a>
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	885a      	ldrh	r2, [r3, #2]
 800c7dc:	8afb      	ldrh	r3, [r7, #22]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d8b0      	bhi.n	800c744 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d201      	bcs.n	800c7f2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e01c      	b.n	800c82c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	2b01      	cmp	r3, #1
 800c802:	d805      	bhi.n	800c810 <USBH_ParseCfgDesc+0x1c8>
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	885a      	ldrh	r2, [r3, #2]
 800c808:	8afb      	ldrh	r3, [r7, #22]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f63f af74 	bhi.w	800c6f8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	791b      	ldrb	r3, [r3, #4]
 800c814:	2b02      	cmp	r3, #2
 800c816:	bf28      	it	cs
 800c818:	2302      	movcs	r3, #2
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c820:	429a      	cmp	r2, r3
 800c822:	d201      	bcs.n	800c828 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c824:	2303      	movs	r3, #3
 800c826:	e001      	b.n	800c82c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3730      	adds	r7, #48	; 0x30
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781a      	ldrb	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	785a      	ldrb	r2, [r3, #1]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	789a      	ldrb	r2, [r3, #2]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	78da      	ldrb	r2, [r3, #3]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	791a      	ldrb	r2, [r3, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	795a      	ldrb	r2, [r3, #5]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	799a      	ldrb	r2, [r3, #6]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	79da      	ldrb	r2, [r3, #7]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	7a1a      	ldrb	r2, [r3, #8]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	721a      	strb	r2, [r3, #8]
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c892:	b480      	push	{r7}
 800c894:	b087      	sub	sp, #28
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	781a      	ldrb	r2, [r3, #0]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	785a      	ldrb	r2, [r3, #1]
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	789a      	ldrb	r2, [r3, #2]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	78da      	ldrb	r2, [r3, #3]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3305      	adds	r3, #5
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	799a      	ldrb	r2, [r3, #6]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	889b      	ldrh	r3, [r3, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d102      	bne.n	800c8f4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	75fb      	strb	r3, [r7, #23]
 800c8f2:	e033      	b.n	800c95c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	889b      	ldrh	r3, [r3, #4]
 800c8f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c8fc:	f023 0307 	bic.w	r3, r3, #7
 800c900:	b29a      	uxth	r2, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	889b      	ldrh	r3, [r3, #4]
 800c90a:	b21a      	sxth	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3304      	adds	r3, #4
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	b299      	uxth	r1, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3305      	adds	r3, #5
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	b29b      	uxth	r3, r3
 800c920:	430b      	orrs	r3, r1
 800c922:	b29b      	uxth	r3, r3
 800c924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d110      	bne.n	800c94e <USBH_ParseEPDesc+0xbc>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3304      	adds	r3, #4
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b299      	uxth	r1, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3305      	adds	r3, #5
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	021b      	lsls	r3, r3, #8
 800c93e:	b29b      	uxth	r3, r3
 800c940:	430b      	orrs	r3, r1
 800c942:	b29b      	uxth	r3, r3
 800c944:	b21b      	sxth	r3, r3
 800c946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c94a:	b21b      	sxth	r3, r3
 800c94c:	e001      	b.n	800c952 <USBH_ParseEPDesc+0xc0>
 800c94e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c952:	4313      	orrs	r3, r2
 800c954:	b21b      	sxth	r3, r3
 800c956:	b29a      	uxth	r2, r3
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c962:	2b00      	cmp	r3, #0
 800c964:	d116      	bne.n	800c994 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	78db      	ldrb	r3, [r3, #3]
 800c96a:	f003 0303 	and.w	r3, r3, #3
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d005      	beq.n	800c97e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	78db      	ldrb	r3, [r3, #3]
 800c976:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d127      	bne.n	800c9ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	799b      	ldrb	r3, [r3, #6]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d003      	beq.n	800c98e <USBH_ParseEPDesc+0xfc>
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	799b      	ldrb	r3, [r3, #6]
 800c98a:	2b10      	cmp	r3, #16
 800c98c:	d91f      	bls.n	800c9ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c98e:	2303      	movs	r3, #3
 800c990:	75fb      	strb	r3, [r7, #23]
 800c992:	e01c      	b.n	800c9ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	78db      	ldrb	r3, [r3, #3]
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d10a      	bne.n	800c9b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	799b      	ldrb	r3, [r3, #6]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <USBH_ParseEPDesc+0x11e>
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	799b      	ldrb	r3, [r3, #6]
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d90e      	bls.n	800c9ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	75fb      	strb	r3, [r7, #23]
 800c9b4:	e00b      	b.n	800c9ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	78db      	ldrb	r3, [r3, #3]
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d105      	bne.n	800c9ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	799b      	ldrb	r3, [r3, #6]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d120      	bne.n	800ca36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	1e9a      	subs	r2, r3, #2
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	bf28      	it	cs
 800ca00:	4613      	movcs	r3, r2
 800ca02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3302      	adds	r3, #2
 800ca08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	82fb      	strh	r3, [r7, #22]
 800ca0e:	e00b      	b.n	800ca28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ca10:	8afb      	ldrh	r3, [r7, #22]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	4413      	add	r3, r2
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ca22:	8afb      	ldrh	r3, [r7, #22]
 800ca24:	3302      	adds	r3, #2
 800ca26:	82fb      	strh	r3, [r7, #22]
 800ca28:	8afa      	ldrh	r2, [r7, #22]
 800ca2a:	8abb      	ldrh	r3, [r7, #20]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d3ef      	bcc.n	800ca10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
  }
}
 800ca36:	bf00      	nop
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	881a      	ldrh	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4413      	add	r3, r2
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4413      	add	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	4613      	mov	r3, r2
 800ca84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ca86:	2301      	movs	r3, #1
 800ca88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	789b      	ldrb	r3, [r3, #2]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d002      	beq.n	800ca98 <USBH_CtlReq+0x20>
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d01d      	beq.n	800cad2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ca96:	e043      	b.n	800cb20 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	88fa      	ldrh	r2, [r7, #6]
 800caa2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2201      	movs	r2, #1
 800caa8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2202      	movs	r2, #2
 800caae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cab0:	2301      	movs	r3, #1
 800cab2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2203      	movs	r2, #3
 800cab8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cac8:	2300      	movs	r3, #0
 800caca:	2200      	movs	r2, #0
 800cacc:	f000 fd56 	bl	800d57c <osMessageQueuePut>
      break;
 800cad0:	e026      	b.n	800cb20 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 f82a 	bl	800cb2c <USBH_HandleControl>
 800cad8:	4603      	mov	r3, r0
 800cada:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <USBH_CtlReq+0x70>
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	2b03      	cmp	r3, #3
 800cae6:	d106      	bne.n	800caf6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2201      	movs	r2, #1
 800caec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	761a      	strb	r2, [r3, #24]
 800caf4:	e005      	b.n	800cb02 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d102      	bne.n	800cb02 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2201      	movs	r2, #1
 800cb00:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2203      	movs	r2, #3
 800cb06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb16:	2300      	movs	r3, #0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f000 fd2f 	bl	800d57c <osMessageQueuePut>
      break;
 800cb1e:	bf00      	nop
  }
  return status;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb34:	2301      	movs	r3, #1
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	7e1b      	ldrb	r3, [r3, #24]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	2b0a      	cmp	r3, #10
 800cb44:	f200 8229 	bhi.w	800cf9a <USBH_HandleControl+0x46e>
 800cb48:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <USBH_HandleControl+0x24>)
 800cb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4e:	bf00      	nop
 800cb50:	0800cb7d 	.word	0x0800cb7d
 800cb54:	0800cb97 	.word	0x0800cb97
 800cb58:	0800cc39 	.word	0x0800cc39
 800cb5c:	0800cc5f 	.word	0x0800cc5f
 800cb60:	0800cceb 	.word	0x0800cceb
 800cb64:	0800cd15 	.word	0x0800cd15
 800cb68:	0800cdd7 	.word	0x0800cdd7
 800cb6c:	0800cdf9 	.word	0x0800cdf9
 800cb70:	0800ce8b 	.word	0x0800ce8b
 800cb74:	0800ceb1 	.word	0x0800ceb1
 800cb78:	0800cf43 	.word	0x0800cf43
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f103 0110 	add.w	r1, r3, #16
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	795b      	ldrb	r3, [r3, #5]
 800cb86:	461a      	mov	r2, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fa17 	bl	800cfbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2202      	movs	r2, #2
 800cb92:	761a      	strb	r2, [r3, #24]
      break;
 800cb94:	e20c      	b.n	800cfb0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	795b      	ldrb	r3, [r3, #5]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f003 fd43 	bl	8010628 <USBH_LL_GetURBState>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d12c      	bne.n	800cc06 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7c1b      	ldrb	r3, [r3, #16]
 800cbb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cbb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	8adb      	ldrh	r3, [r3, #22]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cbbe:	7b7b      	ldrb	r3, [r7, #13]
 800cbc0:	2b80      	cmp	r3, #128	; 0x80
 800cbc2:	d103      	bne.n	800cbcc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2203      	movs	r2, #3
 800cbc8:	761a      	strb	r2, [r3, #24]
 800cbca:	e00d      	b.n	800cbe8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2205      	movs	r2, #5
 800cbd0:	761a      	strb	r2, [r3, #24]
 800cbd2:	e009      	b.n	800cbe8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cbd4:	7b7b      	ldrb	r3, [r7, #13]
 800cbd6:	2b80      	cmp	r3, #128	; 0x80
 800cbd8:	d103      	bne.n	800cbe2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2209      	movs	r2, #9
 800cbde:	761a      	strb	r2, [r3, #24]
 800cbe0:	e002      	b.n	800cbe8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2207      	movs	r2, #7
 800cbe6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2203      	movs	r2, #3
 800cbec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f000 fcbc 	bl	800d57c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc04:	e1cb      	b.n	800cf9e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	d003      	beq.n	800cc14 <USBH_HandleControl+0xe8>
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	f040 81c5 	bne.w	800cf9e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	220b      	movs	r2, #11
 800cc18:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc2e:	2300      	movs	r3, #0
 800cc30:	2200      	movs	r2, #0
 800cc32:	f000 fca3 	bl	800d57c <osMessageQueuePut>
      break;
 800cc36:	e1b2      	b.n	800cf9e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6899      	ldr	r1, [r3, #8]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	899a      	ldrh	r2, [r3, #12]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	791b      	ldrb	r3, [r3, #4]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f9f2 	bl	800d03a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2204      	movs	r2, #4
 800cc5a:	761a      	strb	r2, [r3, #24]
      break;
 800cc5c:	e1a8      	b.n	800cfb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	791b      	ldrb	r3, [r3, #4]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f003 fcdf 	bl	8010628 <USBH_LL_GetURBState>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d110      	bne.n	800cc96 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2209      	movs	r2, #9
 800cc78:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2203      	movs	r2, #3
 800cc7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2200      	movs	r2, #0
 800cc92:	f000 fc73 	bl	800d57c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	2b05      	cmp	r3, #5
 800cc9a:	d110      	bne.n	800ccbe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f000 fc60 	bl	800d57c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ccbc:	e171      	b.n	800cfa2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	2b04      	cmp	r3, #4
 800ccc2:	f040 816e 	bne.w	800cfa2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	220b      	movs	r2, #11
 800ccca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2203      	movs	r2, #3
 800ccd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cce0:	2300      	movs	r3, #0
 800cce2:	2200      	movs	r2, #0
 800cce4:	f000 fc4a 	bl	800d57c <osMessageQueuePut>
      break;
 800cce8:	e15b      	b.n	800cfa2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6899      	ldr	r1, [r3, #8]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	899a      	ldrh	r2, [r3, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	795b      	ldrb	r3, [r3, #5]
 800ccf6:	2001      	movs	r0, #1
 800ccf8:	9000      	str	r0, [sp, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f978 	bl	800cff0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2206      	movs	r2, #6
 800cd10:	761a      	strb	r2, [r3, #24]
      break;
 800cd12:	e14d      	b.n	800cfb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	795b      	ldrb	r3, [r3, #5]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f003 fc84 	bl	8010628 <USBH_LL_GetURBState>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d111      	bne.n	800cd4e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2207      	movs	r2, #7
 800cd2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2203      	movs	r2, #3
 800cd34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd44:	2300      	movs	r3, #0
 800cd46:	2200      	movs	r2, #0
 800cd48:	f000 fc18 	bl	800d57c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd4c:	e12b      	b.n	800cfa6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	2b05      	cmp	r3, #5
 800cd52:	d113      	bne.n	800cd7c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	220c      	movs	r2, #12
 800cd58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2203      	movs	r2, #3
 800cd62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd72:	2300      	movs	r3, #0
 800cd74:	2200      	movs	r2, #0
 800cd76:	f000 fc01 	bl	800d57c <osMessageQueuePut>
      break;
 800cd7a:	e114      	b.n	800cfa6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d111      	bne.n	800cda6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2205      	movs	r2, #5
 800cd86:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2203      	movs	r2, #3
 800cd8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f000 fbec 	bl	800d57c <osMessageQueuePut>
      break;
 800cda4:	e0ff      	b.n	800cfa6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	f040 80fc 	bne.w	800cfa6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	220b      	movs	r2, #11
 800cdb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f000 fbd4 	bl	800d57c <osMessageQueuePut>
      break;
 800cdd4:	e0e7      	b.n	800cfa6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	791b      	ldrb	r3, [r3, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	2100      	movs	r1, #0
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f92b 	bl	800d03a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2208      	movs	r2, #8
 800cdf4:	761a      	strb	r2, [r3, #24]

      break;
 800cdf6:	e0db      	b.n	800cfb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	791b      	ldrb	r3, [r3, #4]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f003 fc12 	bl	8010628 <USBH_LL_GetURBState>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d113      	bne.n	800ce36 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	220d      	movs	r2, #13
 800ce12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f000 fba4 	bl	800d57c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce34:	e0b9      	b.n	800cfaa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	d111      	bne.n	800ce60 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	220b      	movs	r2, #11
 800ce40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2203      	movs	r2, #3
 800ce46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce56:	2300      	movs	r3, #0
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f000 fb8f 	bl	800d57c <osMessageQueuePut>
      break;
 800ce5e:	e0a4      	b.n	800cfaa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	2b05      	cmp	r3, #5
 800ce64:	f040 80a1 	bne.w	800cfaa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2203      	movs	r2, #3
 800ce70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce80:	2300      	movs	r3, #0
 800ce82:	2200      	movs	r2, #0
 800ce84:	f000 fb7a 	bl	800d57c <osMessageQueuePut>
      break;
 800ce88:	e08f      	b.n	800cfaa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	795b      	ldrb	r3, [r3, #5]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	9200      	str	r2, [sp, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	2100      	movs	r1, #0
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f8aa 	bl	800cff0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	220a      	movs	r2, #10
 800ceac:	761a      	strb	r2, [r3, #24]
      break;
 800ceae:	e07f      	b.n	800cfb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	795b      	ldrb	r3, [r3, #5]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f003 fbb6 	bl	8010628 <USBH_LL_GetURBState>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d113      	bne.n	800ceee <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	220d      	movs	r2, #13
 800cece:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2203      	movs	r2, #3
 800ced4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cee4:	2300      	movs	r3, #0
 800cee6:	2200      	movs	r2, #0
 800cee8:	f000 fb48 	bl	800d57c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ceec:	e05f      	b.n	800cfae <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d111      	bne.n	800cf18 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2209      	movs	r2, #9
 800cef8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2203      	movs	r2, #3
 800cefe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2200      	movs	r2, #0
 800cf12:	f000 fb33 	bl	800d57c <osMessageQueuePut>
      break;
 800cf16:	e04a      	b.n	800cfae <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b04      	cmp	r3, #4
 800cf1c:	d147      	bne.n	800cfae <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	220b      	movs	r2, #11
 800cf22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2203      	movs	r2, #3
 800cf28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf38:	2300      	movs	r3, #0
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f000 fb1e 	bl	800d57c <osMessageQueuePut>
      break;
 800cf40:	e035      	b.n	800cfae <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	7e5b      	ldrb	r3, [r3, #25]
 800cf46:	3301      	adds	r3, #1
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	765a      	strb	r2, [r3, #25]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	7e5b      	ldrb	r3, [r3, #25]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d806      	bhi.n	800cf64 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf62:	e025      	b.n	800cfb0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf6a:	2106      	movs	r1, #6
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	795b      	ldrb	r3, [r3, #5]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f90d 	bl	800d19c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	791b      	ldrb	r3, [r3, #4]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f907 	bl	800d19c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cf94:	2302      	movs	r3, #2
 800cf96:	73fb      	strb	r3, [r7, #15]
      break;
 800cf98:	e00a      	b.n	800cfb0 <USBH_HandleControl+0x484>

    default:
      break;
 800cf9a:	bf00      	nop
 800cf9c:	e008      	b.n	800cfb0 <USBH_HandleControl+0x484>
      break;
 800cf9e:	bf00      	nop
 800cfa0:	e006      	b.n	800cfb0 <USBH_HandleControl+0x484>
      break;
 800cfa2:	bf00      	nop
 800cfa4:	e004      	b.n	800cfb0 <USBH_HandleControl+0x484>
      break;
 800cfa6:	bf00      	nop
 800cfa8:	e002      	b.n	800cfb0 <USBH_HandleControl+0x484>
      break;
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <USBH_HandleControl+0x484>
      break;
 800cfae:	bf00      	nop
  }

  return status;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop

0800cfbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b088      	sub	sp, #32
 800cfc0:	af04      	add	r7, sp, #16
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfca:	79f9      	ldrb	r1, [r7, #7]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	9303      	str	r3, [sp, #12]
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	9302      	str	r3, [sp, #8]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f003 faf0 	bl	80105c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af04      	add	r7, sp, #16
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	4611      	mov	r1, r2
 800cffc:	461a      	mov	r2, r3
 800cffe:	460b      	mov	r3, r1
 800d000:	80fb      	strh	r3, [r7, #6]
 800d002:	4613      	mov	r3, r2
 800d004:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d014:	7979      	ldrb	r1, [r7, #5]
 800d016:	7e3b      	ldrb	r3, [r7, #24]
 800d018:	9303      	str	r3, [sp, #12]
 800d01a:	88fb      	ldrh	r3, [r7, #6]
 800d01c:	9302      	str	r3, [sp, #8]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	2301      	movs	r3, #1
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	2300      	movs	r3, #0
 800d028:	2200      	movs	r2, #0
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f003 facb 	bl	80105c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b088      	sub	sp, #32
 800d03e:	af04      	add	r7, sp, #16
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	4611      	mov	r1, r2
 800d046:	461a      	mov	r2, r3
 800d048:	460b      	mov	r3, r1
 800d04a:	80fb      	strh	r3, [r7, #6]
 800d04c:	4613      	mov	r3, r2
 800d04e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d050:	7979      	ldrb	r1, [r7, #5]
 800d052:	2300      	movs	r3, #0
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	88fb      	ldrh	r3, [r7, #6]
 800d058:	9302      	str	r3, [sp, #8]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	9301      	str	r3, [sp, #4]
 800d05e:	2301      	movs	r3, #1
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	2300      	movs	r3, #0
 800d064:	2201      	movs	r2, #1
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f003 faad 	bl	80105c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d06c:	2300      	movs	r3, #0

}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b088      	sub	sp, #32
 800d07a:	af04      	add	r7, sp, #16
 800d07c:	60f8      	str	r0, [r7, #12]
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	4611      	mov	r1, r2
 800d082:	461a      	mov	r2, r3
 800d084:	460b      	mov	r3, r1
 800d086:	80fb      	strh	r3, [r7, #6]
 800d088:	4613      	mov	r3, r2
 800d08a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d096:	2300      	movs	r3, #0
 800d098:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d09a:	7979      	ldrb	r1, [r7, #5]
 800d09c:	7e3b      	ldrb	r3, [r7, #24]
 800d09e:	9303      	str	r3, [sp, #12]
 800d0a0:	88fb      	ldrh	r3, [r7, #6]
 800d0a2:	9302      	str	r3, [sp, #8]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f003 fa88 	bl	80105c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af04      	add	r7, sp, #16
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	80fb      	strh	r3, [r7, #6]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0d6:	7979      	ldrb	r1, [r7, #5]
 800d0d8:	2300      	movs	r3, #0
 800d0da:	9303      	str	r3, [sp, #12]
 800d0dc:	88fb      	ldrh	r3, [r7, #6]
 800d0de:	9302      	str	r3, [sp, #8]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	9301      	str	r3, [sp, #4]
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f003 fa6a 	bl	80105c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af04      	add	r7, sp, #16
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	461a      	mov	r2, r3
 800d10a:	4603      	mov	r3, r0
 800d10c:	70fb      	strb	r3, [r7, #3]
 800d10e:	460b      	mov	r3, r1
 800d110:	70bb      	strb	r3, [r7, #2]
 800d112:	4613      	mov	r3, r2
 800d114:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d116:	7878      	ldrb	r0, [r7, #1]
 800d118:	78ba      	ldrb	r2, [r7, #2]
 800d11a:	78f9      	ldrb	r1, [r7, #3]
 800d11c:	8b3b      	ldrh	r3, [r7, #24]
 800d11e:	9302      	str	r3, [sp, #8]
 800d120:	7d3b      	ldrb	r3, [r7, #20]
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	7c3b      	ldrb	r3, [r7, #16]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4603      	mov	r3, r0
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f003 f9fd 	bl	801052a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	460b      	mov	r3, r1
 800d144:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f003 fa1c 	bl	8010588 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	460b      	mov	r3, r1
 800d164:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f836 	bl	800d1d8 <USBH_GetFreePipe>
 800d16c:	4603      	mov	r3, r0
 800d16e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d170:	89fb      	ldrh	r3, [r7, #14]
 800d172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d176:	4293      	cmp	r3, r2
 800d178:	d00a      	beq.n	800d190 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	89fb      	ldrh	r3, [r7, #14]
 800d17e:	f003 030f 	and.w	r3, r3, #15
 800d182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	33e0      	adds	r3, #224	; 0xe0
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	440b      	add	r3, r1
 800d18e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d190:	89fb      	ldrh	r3, [r7, #14]
 800d192:	b2db      	uxtb	r3, r3
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d1a8:	78fb      	ldrb	r3, [r7, #3]
 800d1aa:	2b0f      	cmp	r3, #15
 800d1ac:	d80d      	bhi.n	800d1ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d1ae:	78fb      	ldrb	r3, [r7, #3]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	33e0      	adds	r3, #224	; 0xe0
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	33e0      	adds	r3, #224	; 0xe0
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	440b      	add	r3, r1
 800d1c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
 800d1e8:	e00f      	b.n	800d20a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	33e0      	adds	r3, #224	; 0xe0
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d102      	bne.n	800d204 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	b29b      	uxth	r3, r3
 800d202:	e007      	b.n	800d214 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d204:	7bfb      	ldrb	r3, [r7, #15]
 800d206:	3301      	adds	r3, #1
 800d208:	73fb      	strb	r3, [r7, #15]
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	2b0f      	cmp	r3, #15
 800d20e:	d9ec      	bls.n	800d1ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d210:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <__NVIC_SetPriority>:
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	6039      	str	r1, [r7, #0]
 800d22a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d22c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d230:	2b00      	cmp	r3, #0
 800d232:	db0a      	blt.n	800d24a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	490c      	ldr	r1, [pc, #48]	; (800d26c <__NVIC_SetPriority+0x4c>)
 800d23a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d23e:	0112      	lsls	r2, r2, #4
 800d240:	b2d2      	uxtb	r2, r2
 800d242:	440b      	add	r3, r1
 800d244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d248:	e00a      	b.n	800d260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4908      	ldr	r1, [pc, #32]	; (800d270 <__NVIC_SetPriority+0x50>)
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	f003 030f 	and.w	r3, r3, #15
 800d256:	3b04      	subs	r3, #4
 800d258:	0112      	lsls	r2, r2, #4
 800d25a:	b2d2      	uxtb	r2, r2
 800d25c:	440b      	add	r3, r1
 800d25e:	761a      	strb	r2, [r3, #24]
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	e000e100 	.word	0xe000e100
 800d270:	e000ed00 	.word	0xe000ed00

0800d274 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d274:	b580      	push	{r7, lr}
 800d276:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d278:	4b05      	ldr	r3, [pc, #20]	; (800d290 <SysTick_Handler+0x1c>)
 800d27a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d27c:	f001 ff10 	bl	800f0a0 <xTaskGetSchedulerState>
 800d280:	4603      	mov	r3, r0
 800d282:	2b01      	cmp	r3, #1
 800d284:	d001      	beq.n	800d28a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d286:	f002 fcf7 	bl	800fc78 <xPortSysTickHandler>
  }
}
 800d28a:	bf00      	nop
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	e000e010 	.word	0xe000e010

0800d294 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d294:	b580      	push	{r7, lr}
 800d296:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d298:	2100      	movs	r1, #0
 800d29a:	f06f 0004 	mvn.w	r0, #4
 800d29e:	f7ff ffbf 	bl	800d220 <__NVIC_SetPriority>
#endif
}
 800d2a2:	bf00      	nop
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ae:	f3ef 8305 	mrs	r3, IPSR
 800d2b2:	603b      	str	r3, [r7, #0]
  return(result);
 800d2b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d003      	beq.n	800d2c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d2ba:	f06f 0305 	mvn.w	r3, #5
 800d2be:	607b      	str	r3, [r7, #4]
 800d2c0:	e00c      	b.n	800d2dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d2c2:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <osKernelInitialize+0x44>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d2ca:	4b08      	ldr	r3, [pc, #32]	; (800d2ec <osKernelInitialize+0x44>)
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	e002      	b.n	800d2dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d2dc:	687b      	ldr	r3, [r7, #4]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20000660 	.word	0x20000660

0800d2f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2f6:	f3ef 8305 	mrs	r3, IPSR
 800d2fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d2fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d302:	f06f 0305 	mvn.w	r3, #5
 800d306:	607b      	str	r3, [r7, #4]
 800d308:	e010      	b.n	800d32c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d30a:	4b0b      	ldr	r3, [pc, #44]	; (800d338 <osKernelStart+0x48>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d109      	bne.n	800d326 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d312:	f7ff ffbf 	bl	800d294 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d316:	4b08      	ldr	r3, [pc, #32]	; (800d338 <osKernelStart+0x48>)
 800d318:	2202      	movs	r2, #2
 800d31a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d31c:	f001 fa52 	bl	800e7c4 <vTaskStartScheduler>
      stat = osOK;
 800d320:	2300      	movs	r3, #0
 800d322:	607b      	str	r3, [r7, #4]
 800d324:	e002      	b.n	800d32c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d32c:	687b      	ldr	r3, [r7, #4]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20000660 	.word	0x20000660

0800d33c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08e      	sub	sp, #56	; 0x38
 800d340:	af04      	add	r7, sp, #16
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d34c:	f3ef 8305 	mrs	r3, IPSR
 800d350:	617b      	str	r3, [r7, #20]
  return(result);
 800d352:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d354:	2b00      	cmp	r3, #0
 800d356:	d17e      	bne.n	800d456 <osThreadNew+0x11a>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d07b      	beq.n	800d456 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d35e:	2380      	movs	r3, #128	; 0x80
 800d360:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d362:	2318      	movs	r3, #24
 800d364:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d366:	2300      	movs	r3, #0
 800d368:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d36a:	f04f 33ff 	mov.w	r3, #4294967295
 800d36e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d045      	beq.n	800d402 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <osThreadNew+0x48>
        name = attr->name;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d008      	beq.n	800d3aa <osThreadNew+0x6e>
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2b38      	cmp	r3, #56	; 0x38
 800d39c:	d805      	bhi.n	800d3aa <osThreadNew+0x6e>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <osThreadNew+0x72>
        return (NULL);
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e054      	b.n	800d458 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	089b      	lsrs	r3, r3, #2
 800d3bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00e      	beq.n	800d3e4 <osThreadNew+0xa8>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	2b5f      	cmp	r3, #95	; 0x5f
 800d3cc:	d90a      	bls.n	800d3e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d006      	beq.n	800d3e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <osThreadNew+0xa8>
        mem = 1;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	e010      	b.n	800d406 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10c      	bne.n	800d406 <osThreadNew+0xca>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d108      	bne.n	800d406 <osThreadNew+0xca>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d104      	bne.n	800d406 <osThreadNew+0xca>
          mem = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	61bb      	str	r3, [r7, #24]
 800d400:	e001      	b.n	800d406 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d110      	bne.n	800d42e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d414:	9202      	str	r2, [sp, #8]
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	6a3a      	ldr	r2, [r7, #32]
 800d420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 fff6 	bl	800e414 <xTaskCreateStatic>
 800d428:	4603      	mov	r3, r0
 800d42a:	613b      	str	r3, [r7, #16]
 800d42c:	e013      	b.n	800d456 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d110      	bne.n	800d456 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	b29a      	uxth	r2, r3
 800d438:	f107 0310 	add.w	r3, r7, #16
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f001 f841 	bl	800e4ce <xTaskCreate>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d001      	beq.n	800d456 <osThreadNew+0x11a>
            hTask = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d456:	693b      	ldr	r3, [r7, #16]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3728      	adds	r7, #40	; 0x28
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d468:	f3ef 8305 	mrs	r3, IPSR
 800d46c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d46e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <osDelay+0x1c>
    stat = osErrorISR;
 800d474:	f06f 0305 	mvn.w	r3, #5
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	e007      	b.n	800d48c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 f968 	bl	800e75c <vTaskDelay>
    }
  }

  return (stat);
 800d48c:	68fb      	ldr	r3, [r7, #12]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d496:	b580      	push	{r7, lr}
 800d498:	b08a      	sub	sp, #40	; 0x28
 800d49a:	af02      	add	r7, sp, #8
 800d49c:	60f8      	str	r0, [r7, #12]
 800d49e:	60b9      	str	r1, [r7, #8]
 800d4a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4a6:	f3ef 8305 	mrs	r3, IPSR
 800d4aa:	613b      	str	r3, [r7, #16]
  return(result);
 800d4ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d15f      	bne.n	800d572 <osMessageQueueNew+0xdc>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d05c      	beq.n	800d572 <osMessageQueueNew+0xdc>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d059      	beq.n	800d572 <osMessageQueueNew+0xdc>
    mem = -1;
 800d4be:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d029      	beq.n	800d51e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d012      	beq.n	800d4f8 <osMessageQueueNew+0x62>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	2b4f      	cmp	r3, #79	; 0x4f
 800d4d8:	d90e      	bls.n	800d4f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	695a      	ldr	r2, [r3, #20]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	fb01 f303 	mul.w	r3, r1, r3
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d302      	bcc.n	800d4f8 <osMessageQueueNew+0x62>
        mem = 1;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	e014      	b.n	800d522 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d110      	bne.n	800d522 <osMessageQueueNew+0x8c>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10c      	bne.n	800d522 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d108      	bne.n	800d522 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d104      	bne.n	800d522 <osMessageQueueNew+0x8c>
          mem = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	e001      	b.n	800d522 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d10b      	bne.n	800d540 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691a      	ldr	r2, [r3, #16]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	2100      	movs	r1, #0
 800d532:	9100      	str	r1, [sp, #0]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f000 fa2e 	bl	800d998 <xQueueGenericCreateStatic>
 800d53c:	61f8      	str	r0, [r7, #28]
 800d53e:	e008      	b.n	800d552 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d105      	bne.n	800d552 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d546:	2200      	movs	r2, #0
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fa9c 	bl	800da88 <xQueueGenericCreate>
 800d550:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00c      	beq.n	800d572 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	e001      	b.n	800d56a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d566:	2300      	movs	r3, #0
 800d568:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d56a:	6979      	ldr	r1, [r7, #20]
 800d56c:	69f8      	ldr	r0, [r7, #28]
 800d56e:	f000 fef3 	bl	800e358 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d572:	69fb      	ldr	r3, [r7, #28]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3720      	adds	r7, #32
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	4613      	mov	r3, r2
 800d58a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d594:	f3ef 8305 	mrs	r3, IPSR
 800d598:	617b      	str	r3, [r7, #20]
  return(result);
 800d59a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d028      	beq.n	800d5f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d005      	beq.n	800d5b2 <osMessageQueuePut+0x36>
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <osMessageQueuePut+0x36>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d5b2:	f06f 0303 	mvn.w	r3, #3
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	e038      	b.n	800d62c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d5be:	f107 0210 	add.w	r2, r7, #16
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	68b9      	ldr	r1, [r7, #8]
 800d5c6:	69b8      	ldr	r0, [r7, #24]
 800d5c8:	f000 fbba 	bl	800dd40 <xQueueGenericSendFromISR>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d003      	beq.n	800d5da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d5d2:	f06f 0302 	mvn.w	r3, #2
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	e028      	b.n	800d62c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d025      	beq.n	800d62c <osMessageQueuePut+0xb0>
 800d5e0:	4b15      	ldr	r3, [pc, #84]	; (800d638 <osMessageQueuePut+0xbc>)
 800d5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	e01c      	b.n	800d62c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <osMessageQueuePut+0x82>
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d103      	bne.n	800d606 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d5fe:	f06f 0303 	mvn.w	r3, #3
 800d602:	61fb      	str	r3, [r7, #28]
 800d604:	e012      	b.n	800d62c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d606:	2300      	movs	r3, #0
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	68b9      	ldr	r1, [r7, #8]
 800d60c:	69b8      	ldr	r0, [r7, #24]
 800d60e:	f000 fa99 	bl	800db44 <xQueueGenericSend>
 800d612:	4603      	mov	r3, r0
 800d614:	2b01      	cmp	r3, #1
 800d616:	d009      	beq.n	800d62c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d61e:	f06f 0301 	mvn.w	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	e002      	b.n	800d62c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d626:	f06f 0302 	mvn.w	r3, #2
 800d62a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d62c:	69fb      	ldr	r3, [r7, #28]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3720      	adds	r7, #32
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d64e:	2300      	movs	r3, #0
 800d650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d652:	f3ef 8305 	mrs	r3, IPSR
 800d656:	617b      	str	r3, [r7, #20]
  return(result);
 800d658:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d028      	beq.n	800d6b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d005      	beq.n	800d670 <osMessageQueueGet+0x34>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <osMessageQueueGet+0x34>
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d670:	f06f 0303 	mvn.w	r3, #3
 800d674:	61fb      	str	r3, [r7, #28]
 800d676:	e037      	b.n	800d6e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d678:	2300      	movs	r3, #0
 800d67a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d67c:	f107 0310 	add.w	r3, r7, #16
 800d680:	461a      	mov	r2, r3
 800d682:	68b9      	ldr	r1, [r7, #8]
 800d684:	69b8      	ldr	r0, [r7, #24]
 800d686:	f000 fcd7 	bl	800e038 <xQueueReceiveFromISR>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d003      	beq.n	800d698 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d690:	f06f 0302 	mvn.w	r3, #2
 800d694:	61fb      	str	r3, [r7, #28]
 800d696:	e027      	b.n	800d6e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d024      	beq.n	800d6e8 <osMessageQueueGet+0xac>
 800d69e:	4b15      	ldr	r3, [pc, #84]	; (800d6f4 <osMessageQueueGet+0xb8>)
 800d6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	e01b      	b.n	800d6e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <osMessageQueueGet+0x80>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d103      	bne.n	800d6c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d6bc:	f06f 0303 	mvn.w	r3, #3
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	e011      	b.n	800d6e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	69b8      	ldr	r0, [r7, #24]
 800d6ca:	f000 fbd5 	bl	800de78 <xQueueReceive>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d009      	beq.n	800d6e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d6da:	f06f 0301 	mvn.w	r3, #1
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	e002      	b.n	800d6e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d6e2:	f06f 0302 	mvn.w	r3, #2
 800d6e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d6e8:	69fb      	ldr	r3, [r7, #28]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3720      	adds	r7, #32
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4a07      	ldr	r2, [pc, #28]	; (800d724 <vApplicationGetIdleTaskMemory+0x2c>)
 800d708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	4a06      	ldr	r2, [pc, #24]	; (800d728 <vApplicationGetIdleTaskMemory+0x30>)
 800d70e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2280      	movs	r2, #128	; 0x80
 800d714:	601a      	str	r2, [r3, #0]
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20000664 	.word	0x20000664
 800d728:	200006c4 	.word	0x200006c4

0800d72c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	4a07      	ldr	r2, [pc, #28]	; (800d758 <vApplicationGetTimerTaskMemory+0x2c>)
 800d73c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	4a06      	ldr	r2, [pc, #24]	; (800d75c <vApplicationGetTimerTaskMemory+0x30>)
 800d742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d74a:	601a      	str	r2, [r3, #0]
}
 800d74c:	bf00      	nop
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	200008c4 	.word	0x200008c4
 800d75c:	20000924 	.word	0x20000924

0800d760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f103 0208 	add.w	r2, r3, #8
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f04f 32ff 	mov.w	r2, #4294967295
 800d778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f103 0208 	add.w	r2, r3, #8
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f103 0208 	add.w	r2, r3, #8
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b085      	sub	sp, #20
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	689a      	ldr	r2, [r3, #8]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
}
 800d7f6:	bf00      	nop
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d818:	d103      	bne.n	800d822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e00c      	b.n	800d83c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3308      	adds	r3, #8
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e002      	b.n	800d830 <vListInsert+0x2e>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d2f6      	bcs.n	800d82a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]
}
 800d868:	bf00      	nop
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	6892      	ldr	r2, [r2, #8]
 800d88a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6852      	ldr	r2, [r2, #4]
 800d894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d103      	bne.n	800d8a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	1e5a      	subs	r2, r3, #1
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8f2:	f002 f92f 	bl	800fb54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fe:	68f9      	ldr	r1, [r7, #12]
 800d900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d902:	fb01 f303 	mul.w	r3, r1, r3
 800d906:	441a      	add	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d922:	3b01      	subs	r3, #1
 800d924:	68f9      	ldr	r1, [r7, #12]
 800d926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d928:	fb01 f303 	mul.w	r3, r1, r3
 800d92c:	441a      	add	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	22ff      	movs	r2, #255	; 0xff
 800d936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	22ff      	movs	r2, #255	; 0xff
 800d93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d114      	bne.n	800d972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d01a      	beq.n	800d986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3310      	adds	r3, #16
 800d954:	4618      	mov	r0, r3
 800d956:	f001 f9e3 	bl	800ed20 <xTaskRemoveFromEventList>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d012      	beq.n	800d986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <xQueueGenericReset+0xcc>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	e009      	b.n	800d986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3310      	adds	r3, #16
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff fef2 	bl	800d760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3324      	adds	r3, #36	; 0x24
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff feed 	bl	800d760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d986:	f002 f915 	bl	800fbb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d98a:	2301      	movs	r3, #1
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08e      	sub	sp, #56	; 0x38
 800d99c:	af02      	add	r7, sp, #8
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <xQueueGenericCreateStatic+0x52>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <xQueueGenericCreateStatic+0x56>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <xQueueGenericCreateStatic+0x58>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	623b      	str	r3, [r7, #32]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <xQueueGenericCreateStatic+0x7e>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <xQueueGenericCreateStatic+0x82>
 800da16:	2301      	movs	r3, #1
 800da18:	e000      	b.n	800da1c <xQueueGenericCreateStatic+0x84>
 800da1a:	2300      	movs	r3, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	61fb      	str	r3, [r7, #28]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da36:	2350      	movs	r3, #80	; 0x50
 800da38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2b50      	cmp	r3, #80	; 0x50
 800da3e:	d00a      	beq.n	800da56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	61bb      	str	r3, [r7, #24]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	2201      	movs	r2, #1
 800da66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4613      	mov	r3, r2
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	68b9      	ldr	r1, [r7, #8]
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 f83f 	bl	800dafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da80:	4618      	mov	r0, r3
 800da82:	3730      	adds	r7, #48	; 0x30
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	4613      	mov	r3, r2
 800da94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	613b      	str	r3, [r7, #16]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	fb02 f303 	mul.w	r3, r2, r3
 800daba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	3350      	adds	r3, #80	; 0x50
 800dac0:	4618      	mov	r0, r3
 800dac2:	f002 f969 	bl	800fd98 <pvPortMalloc>
 800dac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d011      	beq.n	800daf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	3350      	adds	r3, #80	; 0x50
 800dad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dae0:	79fa      	ldrb	r2, [r7, #7]
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	4613      	mov	r3, r2
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	68b9      	ldr	r1, [r7, #8]
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 f805 	bl	800dafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800daf2:	69bb      	ldr	r3, [r7, #24]
	}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3720      	adds	r7, #32
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d103      	bne.n	800db18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	69ba      	ldr	r2, [r7, #24]
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	e002      	b.n	800db1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db2a:	2101      	movs	r1, #1
 800db2c:	69b8      	ldr	r0, [r7, #24]
 800db2e:	f7ff fecb 	bl	800d8c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	78fa      	ldrb	r2, [r7, #3]
 800db36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
	...

0800db44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08e      	sub	sp, #56	; 0x38
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
 800db50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800db52:	2300      	movs	r3, #0
 800db54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10a      	bne.n	800db76 <xQueueGenericSend+0x32>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db72:	bf00      	nop
 800db74:	e7fe      	b.n	800db74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d103      	bne.n	800db84 <xQueueGenericSend+0x40>
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <xQueueGenericSend+0x44>
 800db84:	2301      	movs	r3, #1
 800db86:	e000      	b.n	800db8a <xQueueGenericSend+0x46>
 800db88:	2300      	movs	r3, #0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <xQueueGenericSend+0x60>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	d103      	bne.n	800dbb2 <xQueueGenericSend+0x6e>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d101      	bne.n	800dbb6 <xQueueGenericSend+0x72>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e000      	b.n	800dbb8 <xQueueGenericSend+0x74>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10a      	bne.n	800dbd2 <xQueueGenericSend+0x8e>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	623b      	str	r3, [r7, #32]
}
 800dbce:	bf00      	nop
 800dbd0:	e7fe      	b.n	800dbd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbd2:	f001 fa65 	bl	800f0a0 <xTaskGetSchedulerState>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <xQueueGenericSend+0x9e>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d101      	bne.n	800dbe6 <xQueueGenericSend+0xa2>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <xQueueGenericSend+0xa4>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10a      	bne.n	800dc02 <xQueueGenericSend+0xbe>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	61fb      	str	r3, [r7, #28]
}
 800dbfe:	bf00      	nop
 800dc00:	e7fe      	b.n	800dc00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc02:	f001 ffa7 	bl	800fb54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d302      	bcc.n	800dc18 <xQueueGenericSend+0xd4>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d129      	bne.n	800dc6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	68b9      	ldr	r1, [r7, #8]
 800dc1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc1e:	f000 fa8b 	bl	800e138 <prvCopyDataToQueue>
 800dc22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d010      	beq.n	800dc4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	3324      	adds	r3, #36	; 0x24
 800dc30:	4618      	mov	r0, r3
 800dc32:	f001 f875 	bl	800ed20 <xTaskRemoveFromEventList>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d013      	beq.n	800dc64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dc3c:	4b3f      	ldr	r3, [pc, #252]	; (800dd3c <xQueueGenericSend+0x1f8>)
 800dc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	e00a      	b.n	800dc64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d007      	beq.n	800dc64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dc54:	4b39      	ldr	r3, [pc, #228]	; (800dd3c <xQueueGenericSend+0x1f8>)
 800dc56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dc64:	f001 ffa6 	bl	800fbb4 <vPortExitCritical>
				return pdPASS;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e063      	b.n	800dd34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d103      	bne.n	800dc7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc72:	f001 ff9f 	bl	800fbb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e05c      	b.n	800dd34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc80:	f107 0314 	add.w	r3, r7, #20
 800dc84:	4618      	mov	r0, r3
 800dc86:	f001 f8af 	bl	800ede8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc8e:	f001 ff91 	bl	800fbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc92:	f000 fdfd 	bl	800e890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc96:	f001 ff5d 	bl	800fb54 <vPortEnterCritical>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dca0:	b25b      	sxtb	r3, r3
 800dca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca6:	d103      	bne.n	800dcb0 <xQueueGenericSend+0x16c>
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb6:	b25b      	sxtb	r3, r3
 800dcb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcbc:	d103      	bne.n	800dcc6 <xQueueGenericSend+0x182>
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcc6:	f001 ff75 	bl	800fbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcca:	1d3a      	adds	r2, r7, #4
 800dccc:	f107 0314 	add.w	r3, r7, #20
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 f89e 	bl	800ee14 <xTaskCheckForTimeOut>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d124      	bne.n	800dd28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dcde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dce0:	f000 fb22 	bl	800e328 <prvIsQueueFull>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d018      	beq.n	800dd1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	3310      	adds	r3, #16
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 ffc4 	bl	800ec80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dcf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcfa:	f000 faad 	bl	800e258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dcfe:	f000 fdd5 	bl	800e8ac <xTaskResumeAll>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f47f af7c 	bne.w	800dc02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dd0a:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <xQueueGenericSend+0x1f8>)
 800dd0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd10:	601a      	str	r2, [r3, #0]
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	e772      	b.n	800dc02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd1e:	f000 fa9b 	bl	800e258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd22:	f000 fdc3 	bl	800e8ac <xTaskResumeAll>
 800dd26:	e76c      	b.n	800dc02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd2a:	f000 fa95 	bl	800e258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd2e:	f000 fdbd 	bl	800e8ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dd32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3738      	adds	r7, #56	; 0x38
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	e000ed04 	.word	0xe000ed04

0800dd40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b090      	sub	sp, #64	; 0x40
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd6a:	bf00      	nop
 800dd6c:	e7fe      	b.n	800dd6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d103      	bne.n	800dd7c <xQueueGenericSendFromISR+0x3c>
 800dd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <xQueueGenericSendFromISR+0x40>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e000      	b.n	800dd82 <xQueueGenericSendFromISR+0x42>
 800dd80:	2300      	movs	r3, #0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10a      	bne.n	800dd9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd98:	bf00      	nop
 800dd9a:	e7fe      	b.n	800dd9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d103      	bne.n	800ddaa <xQueueGenericSendFromISR+0x6a>
 800dda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d101      	bne.n	800ddae <xQueueGenericSendFromISR+0x6e>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e000      	b.n	800ddb0 <xQueueGenericSendFromISR+0x70>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10a      	bne.n	800ddca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	623b      	str	r3, [r7, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	e7fe      	b.n	800ddc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddca:	f001 ffa5 	bl	800fd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ddce:	f3ef 8211 	mrs	r2, BASEPRI
 800ddd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	61fa      	str	r2, [r7, #28]
 800dde4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dde6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dde8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d302      	bcc.n	800ddfc <xQueueGenericSendFromISR+0xbc>
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d12f      	bne.n	800de5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	68b9      	ldr	r1, [r7, #8]
 800de10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de12:	f000 f991 	bl	800e138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800de1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1e:	d112      	bne.n	800de46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de24:	2b00      	cmp	r3, #0
 800de26:	d016      	beq.n	800de56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	3324      	adds	r3, #36	; 0x24
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 ff77 	bl	800ed20 <xTaskRemoveFromEventList>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00e      	beq.n	800de56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00b      	beq.n	800de56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	e007      	b.n	800de56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800de4a:	3301      	adds	r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	b25a      	sxtb	r2, r3
 800de50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800de56:	2301      	movs	r3, #1
 800de58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800de5a:	e001      	b.n	800de60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3740      	adds	r7, #64	; 0x40
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08c      	sub	sp, #48	; 0x30
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de84:	2300      	movs	r3, #0
 800de86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <xQueueReceive+0x30>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	623b      	str	r3, [r7, #32]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <xQueueReceive+0x3e>
 800deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <xQueueReceive+0x42>
 800deb6:	2301      	movs	r3, #1
 800deb8:	e000      	b.n	800debc <xQueueReceive+0x44>
 800deba:	2300      	movs	r3, #0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10a      	bne.n	800ded6 <xQueueReceive+0x5e>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	61fb      	str	r3, [r7, #28]
}
 800ded2:	bf00      	nop
 800ded4:	e7fe      	b.n	800ded4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ded6:	f001 f8e3 	bl	800f0a0 <xTaskGetSchedulerState>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <xQueueReceive+0x6e>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <xQueueReceive+0x72>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <xQueueReceive+0x74>
 800deea:	2300      	movs	r3, #0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10a      	bne.n	800df06 <xQueueReceive+0x8e>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	61bb      	str	r3, [r7, #24]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df06:	f001 fe25 	bl	800fb54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	2b00      	cmp	r3, #0
 800df14:	d01f      	beq.n	800df56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df16:	68b9      	ldr	r1, [r7, #8]
 800df18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df1a:	f000 f977 	bl	800e20c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	1e5a      	subs	r2, r3, #1
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00f      	beq.n	800df4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	3310      	adds	r3, #16
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fef4 	bl	800ed20 <xTaskRemoveFromEventList>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df3e:	4b3d      	ldr	r3, [pc, #244]	; (800e034 <xQueueReceive+0x1bc>)
 800df40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df4e:	f001 fe31 	bl	800fbb4 <vPortExitCritical>
				return pdPASS;
 800df52:	2301      	movs	r3, #1
 800df54:	e069      	b.n	800e02a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d103      	bne.n	800df64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df5c:	f001 fe2a 	bl	800fbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df60:	2300      	movs	r3, #0
 800df62:	e062      	b.n	800e02a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df6a:	f107 0310 	add.w	r3, r7, #16
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 ff3a 	bl	800ede8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df74:	2301      	movs	r3, #1
 800df76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df78:	f001 fe1c 	bl	800fbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df7c:	f000 fc88 	bl	800e890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df80:	f001 fde8 	bl	800fb54 <vPortEnterCritical>
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df8a:	b25b      	sxtb	r3, r3
 800df8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df90:	d103      	bne.n	800df9a <xQueueReceive+0x122>
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa6:	d103      	bne.n	800dfb0 <xQueueReceive+0x138>
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfb0:	f001 fe00 	bl	800fbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfb4:	1d3a      	adds	r2, r7, #4
 800dfb6:	f107 0310 	add.w	r3, r7, #16
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 ff29 	bl	800ee14 <xTaskCheckForTimeOut>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d123      	bne.n	800e010 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfca:	f000 f997 	bl	800e2fc <prvIsQueueEmpty>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d017      	beq.n	800e004 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	3324      	adds	r3, #36	; 0x24
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	4611      	mov	r1, r2
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 fe4f 	bl	800ec80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfe4:	f000 f938 	bl	800e258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfe8:	f000 fc60 	bl	800e8ac <xTaskResumeAll>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d189      	bne.n	800df06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dff2:	4b10      	ldr	r3, [pc, #64]	; (800e034 <xQueueReceive+0x1bc>)
 800dff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	e780      	b.n	800df06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e006:	f000 f927 	bl	800e258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e00a:	f000 fc4f 	bl	800e8ac <xTaskResumeAll>
 800e00e:	e77a      	b.n	800df06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e012:	f000 f921 	bl	800e258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e016:	f000 fc49 	bl	800e8ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e01c:	f000 f96e 	bl	800e2fc <prvIsQueueEmpty>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	f43f af6f 	beq.w	800df06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3730      	adds	r7, #48	; 0x30
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	e000ed04 	.word	0xe000ed04

0800e038 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08e      	sub	sp, #56	; 0x38
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10a      	bne.n	800e064 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	623b      	str	r3, [r7, #32]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d103      	bne.n	800e072 <xQueueReceiveFromISR+0x3a>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <xQueueReceiveFromISR+0x3e>
 800e072:	2301      	movs	r3, #1
 800e074:	e000      	b.n	800e078 <xQueueReceiveFromISR+0x40>
 800e076:	2300      	movs	r3, #0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	61fb      	str	r3, [r7, #28]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e092:	f001 fe41 	bl	800fd18 <vPortValidateInterruptPriority>
	__asm volatile
 800e096:	f3ef 8211 	mrs	r2, BASEPRI
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	61ba      	str	r2, [r7, #24]
 800e0ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e0ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d02f      	beq.n	800e11e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0cc:	f000 f89e 	bl	800e20c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d2:	1e5a      	subs	r2, r3, #1
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e0:	d112      	bne.n	800e108 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d016      	beq.n	800e118 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	3310      	adds	r3, #16
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 fe16 	bl	800ed20 <xTaskRemoveFromEventList>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00e      	beq.n	800e118 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00b      	beq.n	800e118 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	e007      	b.n	800e118 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e10c:	3301      	adds	r3, #1
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	b25a      	sxtb	r2, r3
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e118:	2301      	movs	r3, #1
 800e11a:	637b      	str	r3, [r7, #52]	; 0x34
 800e11c:	e001      	b.n	800e122 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e11e:	2300      	movs	r3, #0
 800e120:	637b      	str	r3, [r7, #52]	; 0x34
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	f383 8811 	msr	BASEPRI, r3
}
 800e12c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e130:	4618      	mov	r0, r3
 800e132:	3738      	adds	r7, #56	; 0x38
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10d      	bne.n	800e172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d14d      	bne.n	800e1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 ffba 	bl	800f0dc <xTaskPriorityDisinherit>
 800e168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	609a      	str	r2, [r3, #8]
 800e170:	e043      	b.n	800e1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d119      	bne.n	800e1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6858      	ldr	r0, [r3, #4]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	461a      	mov	r2, r3
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	f002 fb38 	bl	80107f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d32b      	bcc.n	800e1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	605a      	str	r2, [r3, #4]
 800e1aa:	e026      	b.n	800e1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68d8      	ldr	r0, [r3, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	f002 fb1e 	bl	80107f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c4:	425b      	negs	r3, r3
 800e1c6:	441a      	add	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68da      	ldr	r2, [r3, #12]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d207      	bcs.n	800e1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e0:	425b      	negs	r3, r3
 800e1e2:	441a      	add	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d105      	bne.n	800e1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e202:	697b      	ldr	r3, [r7, #20]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d018      	beq.n	800e250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68da      	ldr	r2, [r3, #12]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e226:	441a      	add	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68da      	ldr	r2, [r3, #12]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	429a      	cmp	r2, r3
 800e236:	d303      	bcc.n	800e240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68d9      	ldr	r1, [r3, #12]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e248:	461a      	mov	r2, r3
 800e24a:	6838      	ldr	r0, [r7, #0]
 800e24c:	f002 fad4 	bl	80107f8 <memcpy>
	}
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e260:	f001 fc78 	bl	800fb54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e26a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e26c:	e011      	b.n	800e292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e272:	2b00      	cmp	r3, #0
 800e274:	d012      	beq.n	800e29c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	3324      	adds	r3, #36	; 0x24
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fd50 	bl	800ed20 <xTaskRemoveFromEventList>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e286:	f000 fe27 	bl	800eed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dce9      	bgt.n	800e26e <prvUnlockQueue+0x16>
 800e29a:	e000      	b.n	800e29e <prvUnlockQueue+0x46>
					break;
 800e29c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	22ff      	movs	r2, #255	; 0xff
 800e2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e2a6:	f001 fc85 	bl	800fbb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2aa:	f001 fc53 	bl	800fb54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2b6:	e011      	b.n	800e2dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d012      	beq.n	800e2e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 fd2b 	bl	800ed20 <xTaskRemoveFromEventList>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2d0:	f000 fe02 	bl	800eed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dce9      	bgt.n	800e2b8 <prvUnlockQueue+0x60>
 800e2e4:	e000      	b.n	800e2e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	22ff      	movs	r2, #255	; 0xff
 800e2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e2f0:	f001 fc60 	bl	800fbb4 <vPortExitCritical>
}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e304:	f001 fc26 	bl	800fb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d102      	bne.n	800e316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e310:	2301      	movs	r3, #1
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	e001      	b.n	800e31a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e31a:	f001 fc4b 	bl	800fbb4 <vPortExitCritical>

	return xReturn;
 800e31e:	68fb      	ldr	r3, [r7, #12]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e330:	f001 fc10 	bl	800fb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d102      	bne.n	800e346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e340:	2301      	movs	r3, #1
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	e001      	b.n	800e34a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f001 fc33 	bl	800fbb4 <vPortExitCritical>

	return xReturn;
 800e34e:	68fb      	ldr	r3, [r7, #12]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e362:	2300      	movs	r3, #0
 800e364:	60fb      	str	r3, [r7, #12]
 800e366:	e014      	b.n	800e392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e368:	4a0f      	ldr	r2, [pc, #60]	; (800e3a8 <vQueueAddToRegistry+0x50>)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10b      	bne.n	800e38c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e374:	490c      	ldr	r1, [pc, #48]	; (800e3a8 <vQueueAddToRegistry+0x50>)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e37e:	4a0a      	ldr	r2, [pc, #40]	; (800e3a8 <vQueueAddToRegistry+0x50>)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	4413      	add	r3, r2
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e38a:	e006      	b.n	800e39a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3301      	adds	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b07      	cmp	r3, #7
 800e396:	d9e7      	bls.n	800e368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	20000d24 	.word	0x20000d24

0800e3ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3bc:	f001 fbca 	bl	800fb54 <vPortEnterCritical>
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3c6:	b25b      	sxtb	r3, r3
 800e3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3cc:	d103      	bne.n	800e3d6 <vQueueWaitForMessageRestricted+0x2a>
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3dc:	b25b      	sxtb	r3, r3
 800e3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e2:	d103      	bne.n	800e3ec <vQueueWaitForMessageRestricted+0x40>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3ec:	f001 fbe2 	bl	800fbb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	3324      	adds	r3, #36	; 0x24
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	4618      	mov	r0, r3
 800e402:	f000 fc61 	bl	800ecc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e406:	6978      	ldr	r0, [r7, #20]
 800e408:	f7ff ff26 	bl	800e258 <prvUnlockQueue>
	}
 800e40c:	bf00      	nop
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08e      	sub	sp, #56	; 0x38
 800e418:	af04      	add	r7, sp, #16
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10a      	bne.n	800e43e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	623b      	str	r3, [r7, #32]
}
 800e43a:	bf00      	nop
 800e43c:	e7fe      	b.n	800e43c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <xTaskCreateStatic+0x46>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	61fb      	str	r3, [r7, #28]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e45a:	2360      	movs	r3, #96	; 0x60
 800e45c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2b60      	cmp	r3, #96	; 0x60
 800e462:	d00a      	beq.n	800e47a <xTaskCreateStatic+0x66>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	61bb      	str	r3, [r7, #24]
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e47a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d01e      	beq.n	800e4c0 <xTaskCreateStatic+0xac>
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e484:	2b00      	cmp	r3, #0
 800e486:	d01b      	beq.n	800e4c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e490:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	2202      	movs	r2, #2
 800e496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e49a:	2300      	movs	r3, #0
 800e49c:	9303      	str	r3, [sp, #12]
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	9302      	str	r3, [sp, #8]
 800e4a2:	f107 0314 	add.w	r3, r7, #20
 800e4a6:	9301      	str	r3, [sp, #4]
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 f850 	bl	800e558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4ba:	f000 f8df 	bl	800e67c <prvAddNewTaskToReadyList>
 800e4be:	e001      	b.n	800e4c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4c4:	697b      	ldr	r3, [r7, #20]
	}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3728      	adds	r7, #40	; 0x28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b08c      	sub	sp, #48	; 0x30
 800e4d2:	af04      	add	r7, sp, #16
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	603b      	str	r3, [r7, #0]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4de:	88fb      	ldrh	r3, [r7, #6]
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f001 fc58 	bl	800fd98 <pvPortMalloc>
 800e4e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00e      	beq.n	800e50e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4f0:	2060      	movs	r0, #96	; 0x60
 800e4f2:	f001 fc51 	bl	800fd98 <pvPortMalloc>
 800e4f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d003      	beq.n	800e506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	631a      	str	r2, [r3, #48]	; 0x30
 800e504:	e005      	b.n	800e512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e506:	6978      	ldr	r0, [r7, #20]
 800e508:	f001 fd16 	bl	800ff38 <vPortFree>
 800e50c:	e001      	b.n	800e512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e50e:	2300      	movs	r3, #0
 800e510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d017      	beq.n	800e548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	2300      	movs	r3, #0
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	9302      	str	r3, [sp, #8]
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	9301      	str	r3, [sp, #4]
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f000 f80e 	bl	800e558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e53c:	69f8      	ldr	r0, [r7, #28]
 800e53e:	f000 f89d 	bl	800e67c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e542:	2301      	movs	r3, #1
 800e544:	61bb      	str	r3, [r7, #24]
 800e546:	e002      	b.n	800e54e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e548:	f04f 33ff 	mov.w	r3, #4294967295
 800e54c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e54e:	69bb      	ldr	r3, [r7, #24]
	}
 800e550:	4618      	mov	r0, r3
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	461a      	mov	r2, r3
 800e570:	21a5      	movs	r1, #165	; 0xa5
 800e572:	f002 f94f 	bl	8010814 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e580:	3b01      	subs	r3, #1
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	f023 0307 	bic.w	r3, r3, #7
 800e58e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	617b      	str	r3, [r7, #20]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d01f      	beq.n	800e5f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	61fb      	str	r3, [r7, #28]
 800e5ba:	e012      	b.n	800e5e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	7819      	ldrb	r1, [r3, #0]
 800e5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	3334      	adds	r3, #52	; 0x34
 800e5cc:	460a      	mov	r2, r1
 800e5ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d006      	beq.n	800e5ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	61fb      	str	r3, [r7, #28]
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	2b0f      	cmp	r3, #15
 800e5e6:	d9e9      	bls.n	800e5bc <prvInitialiseNewTask+0x64>
 800e5e8:	e000      	b.n	800e5ec <prvInitialiseNewTask+0x94>
			{
				break;
 800e5ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5f4:	e003      	b.n	800e5fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	2b37      	cmp	r3, #55	; 0x37
 800e602:	d901      	bls.n	800e608 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e604:	2337      	movs	r3, #55	; 0x37
 800e606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e60c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e612:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e616:	2200      	movs	r2, #0
 800e618:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61c:	3304      	adds	r3, #4
 800e61e:	4618      	mov	r0, r3
 800e620:	f7ff f8be 	bl	800d7a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e626:	3318      	adds	r3, #24
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff f8b9 	bl	800d7a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e646:	2200      	movs	r2, #0
 800e648:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64c:	2200      	movs	r2, #0
 800e64e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	2200      	movs	r2, #0
 800e654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e658:	683a      	ldr	r2, [r7, #0]
 800e65a:	68f9      	ldr	r1, [r7, #12]
 800e65c:	69b8      	ldr	r0, [r7, #24]
 800e65e:	f001 f94d 	bl	800f8fc <pxPortInitialiseStack>
 800e662:	4602      	mov	r2, r0
 800e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e666:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e674:	bf00      	nop
 800e676:	3720      	adds	r7, #32
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e684:	f001 fa66 	bl	800fb54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e688:	4b2d      	ldr	r3, [pc, #180]	; (800e740 <prvAddNewTaskToReadyList+0xc4>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3301      	adds	r3, #1
 800e68e:	4a2c      	ldr	r2, [pc, #176]	; (800e740 <prvAddNewTaskToReadyList+0xc4>)
 800e690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e692:	4b2c      	ldr	r3, [pc, #176]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d109      	bne.n	800e6ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e69a:	4a2a      	ldr	r2, [pc, #168]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6a0:	4b27      	ldr	r3, [pc, #156]	; (800e740 <prvAddNewTaskToReadyList+0xc4>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d110      	bne.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6a8:	f000 fc3c 	bl	800ef24 <prvInitialiseTaskLists>
 800e6ac:	e00d      	b.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6ae:	4b26      	ldr	r3, [pc, #152]	; (800e748 <prvAddNewTaskToReadyList+0xcc>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6b6:	4b23      	ldr	r3, [pc, #140]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d802      	bhi.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6c4:	4a1f      	ldr	r2, [pc, #124]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6ca:	4b20      	ldr	r3, [pc, #128]	; (800e74c <prvAddNewTaskToReadyList+0xd0>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	4a1e      	ldr	r2, [pc, #120]	; (800e74c <prvAddNewTaskToReadyList+0xd0>)
 800e6d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6d4:	4b1d      	ldr	r3, [pc, #116]	; (800e74c <prvAddNewTaskToReadyList+0xd0>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e0:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <prvAddNewTaskToReadyList+0xd4>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d903      	bls.n	800e6f0 <prvAddNewTaskToReadyList+0x74>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ec:	4a18      	ldr	r2, [pc, #96]	; (800e750 <prvAddNewTaskToReadyList+0xd4>)
 800e6ee:	6013      	str	r3, [r2, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4a15      	ldr	r2, [pc, #84]	; (800e754 <prvAddNewTaskToReadyList+0xd8>)
 800e6fe:	441a      	add	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	3304      	adds	r3, #4
 800e704:	4619      	mov	r1, r3
 800e706:	4610      	mov	r0, r2
 800e708:	f7ff f857 	bl	800d7ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e70c:	f001 fa52 	bl	800fbb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e710:	4b0d      	ldr	r3, [pc, #52]	; (800e748 <prvAddNewTaskToReadyList+0xcc>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00e      	beq.n	800e736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e718:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	429a      	cmp	r2, r3
 800e724:	d207      	bcs.n	800e736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <prvAddNewTaskToReadyList+0xdc>)
 800e728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e736:	bf00      	nop
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	20001238 	.word	0x20001238
 800e744:	20000d64 	.word	0x20000d64
 800e748:	20001244 	.word	0x20001244
 800e74c:	20001254 	.word	0x20001254
 800e750:	20001240 	.word	0x20001240
 800e754:	20000d68 	.word	0x20000d68
 800e758:	e000ed04 	.word	0xe000ed04

0800e75c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e764:	2300      	movs	r3, #0
 800e766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d017      	beq.n	800e79e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <vTaskDelay+0x60>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <vTaskDelay+0x30>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	60bb      	str	r3, [r7, #8]
}
 800e788:	bf00      	nop
 800e78a:	e7fe      	b.n	800e78a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e78c:	f000 f880 	bl	800e890 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e790:	2100      	movs	r1, #0
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fd10 	bl	800f1b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e798:	f000 f888 	bl	800e8ac <xTaskResumeAll>
 800e79c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d107      	bne.n	800e7b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <vTaskDelay+0x64>)
 800e7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7b4:	bf00      	nop
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20001260 	.word	0x20001260
 800e7c0:	e000ed04 	.word	0xe000ed04

0800e7c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08a      	sub	sp, #40	; 0x28
 800e7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7d2:	463a      	mov	r2, r7
 800e7d4:	1d39      	adds	r1, r7, #4
 800e7d6:	f107 0308 	add.w	r3, r7, #8
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fe ff8c 	bl	800d6f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	9202      	str	r2, [sp, #8]
 800e7e8:	9301      	str	r3, [sp, #4]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	460a      	mov	r2, r1
 800e7f2:	4921      	ldr	r1, [pc, #132]	; (800e878 <vTaskStartScheduler+0xb4>)
 800e7f4:	4821      	ldr	r0, [pc, #132]	; (800e87c <vTaskStartScheduler+0xb8>)
 800e7f6:	f7ff fe0d 	bl	800e414 <xTaskCreateStatic>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	4a20      	ldr	r2, [pc, #128]	; (800e880 <vTaskStartScheduler+0xbc>)
 800e7fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e800:	4b1f      	ldr	r3, [pc, #124]	; (800e880 <vTaskStartScheduler+0xbc>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e808:	2301      	movs	r3, #1
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e001      	b.n	800e812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e80e:	2300      	movs	r3, #0
 800e810:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d102      	bne.n	800e81e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e818:	f000 fd22 	bl	800f260 <xTimerCreateTimerTask>
 800e81c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d116      	bne.n	800e852 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	613b      	str	r3, [r7, #16]
}
 800e836:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e838:	4b12      	ldr	r3, [pc, #72]	; (800e884 <vTaskStartScheduler+0xc0>)
 800e83a:	f04f 32ff 	mov.w	r2, #4294967295
 800e83e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e840:	4b11      	ldr	r3, [pc, #68]	; (800e888 <vTaskStartScheduler+0xc4>)
 800e842:	2201      	movs	r2, #1
 800e844:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e846:	4b11      	ldr	r3, [pc, #68]	; (800e88c <vTaskStartScheduler+0xc8>)
 800e848:	2200      	movs	r2, #0
 800e84a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e84c:	f001 f8e0 	bl	800fa10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e850:	e00e      	b.n	800e870 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e858:	d10a      	bne.n	800e870 <vTaskStartScheduler+0xac>
	__asm volatile
 800e85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85e:	f383 8811 	msr	BASEPRI, r3
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	f3bf 8f4f 	dsb	sy
 800e86a:	60fb      	str	r3, [r7, #12]
}
 800e86c:	bf00      	nop
 800e86e:	e7fe      	b.n	800e86e <vTaskStartScheduler+0xaa>
}
 800e870:	bf00      	nop
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	08011128 	.word	0x08011128
 800e87c:	0800eef1 	.word	0x0800eef1
 800e880:	2000125c 	.word	0x2000125c
 800e884:	20001258 	.word	0x20001258
 800e888:	20001244 	.word	0x20001244
 800e88c:	2000123c 	.word	0x2000123c

0800e890 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e890:	b480      	push	{r7}
 800e892:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e894:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <vTaskSuspendAll+0x18>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3301      	adds	r3, #1
 800e89a:	4a03      	ldr	r2, [pc, #12]	; (800e8a8 <vTaskSuspendAll+0x18>)
 800e89c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e89e:	bf00      	nop
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	20001260 	.word	0x20001260

0800e8ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e8ba:	4b42      	ldr	r3, [pc, #264]	; (800e9c4 <xTaskResumeAll+0x118>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10a      	bne.n	800e8d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	603b      	str	r3, [r7, #0]
}
 800e8d4:	bf00      	nop
 800e8d6:	e7fe      	b.n	800e8d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8d8:	f001 f93c 	bl	800fb54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8dc:	4b39      	ldr	r3, [pc, #228]	; (800e9c4 <xTaskResumeAll+0x118>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	4a38      	ldr	r2, [pc, #224]	; (800e9c4 <xTaskResumeAll+0x118>)
 800e8e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8e6:	4b37      	ldr	r3, [pc, #220]	; (800e9c4 <xTaskResumeAll+0x118>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d162      	bne.n	800e9b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8ee:	4b36      	ldr	r3, [pc, #216]	; (800e9c8 <xTaskResumeAll+0x11c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d05e      	beq.n	800e9b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8f6:	e02f      	b.n	800e958 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f8:	4b34      	ldr	r3, [pc, #208]	; (800e9cc <xTaskResumeAll+0x120>)
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3318      	adds	r3, #24
 800e904:	4618      	mov	r0, r3
 800e906:	f7fe ffb5 	bl	800d874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	3304      	adds	r3, #4
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fe ffb0 	bl	800d874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e918:	4b2d      	ldr	r3, [pc, #180]	; (800e9d0 <xTaskResumeAll+0x124>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d903      	bls.n	800e928 <xTaskResumeAll+0x7c>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	4a2a      	ldr	r2, [pc, #168]	; (800e9d0 <xTaskResumeAll+0x124>)
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92c:	4613      	mov	r3, r2
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4413      	add	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4a27      	ldr	r2, [pc, #156]	; (800e9d4 <xTaskResumeAll+0x128>)
 800e936:	441a      	add	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3304      	adds	r3, #4
 800e93c:	4619      	mov	r1, r3
 800e93e:	4610      	mov	r0, r2
 800e940:	f7fe ff3b 	bl	800d7ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e948:	4b23      	ldr	r3, [pc, #140]	; (800e9d8 <xTaskResumeAll+0x12c>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e94e:	429a      	cmp	r2, r3
 800e950:	d302      	bcc.n	800e958 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e952:	4b22      	ldr	r3, [pc, #136]	; (800e9dc <xTaskResumeAll+0x130>)
 800e954:	2201      	movs	r2, #1
 800e956:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e958:	4b1c      	ldr	r3, [pc, #112]	; (800e9cc <xTaskResumeAll+0x120>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1cb      	bne.n	800e8f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e966:	f000 fb7b 	bl	800f060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e96a:	4b1d      	ldr	r3, [pc, #116]	; (800e9e0 <xTaskResumeAll+0x134>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d010      	beq.n	800e998 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e976:	f000 f847 	bl	800ea08 <xTaskIncrementTick>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d002      	beq.n	800e986 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e980:	4b16      	ldr	r3, [pc, #88]	; (800e9dc <xTaskResumeAll+0x130>)
 800e982:	2201      	movs	r2, #1
 800e984:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3b01      	subs	r3, #1
 800e98a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1f1      	bne.n	800e976 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e992:	4b13      	ldr	r3, [pc, #76]	; (800e9e0 <xTaskResumeAll+0x134>)
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e998:	4b10      	ldr	r3, [pc, #64]	; (800e9dc <xTaskResumeAll+0x130>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d009      	beq.n	800e9b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e9a4:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <xTaskResumeAll+0x138>)
 800e9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9aa:	601a      	str	r2, [r3, #0]
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9b4:	f001 f8fe 	bl	800fbb4 <vPortExitCritical>

	return xAlreadyYielded;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20001260 	.word	0x20001260
 800e9c8:	20001238 	.word	0x20001238
 800e9cc:	200011f8 	.word	0x200011f8
 800e9d0:	20001240 	.word	0x20001240
 800e9d4:	20000d68 	.word	0x20000d68
 800e9d8:	20000d64 	.word	0x20000d64
 800e9dc:	2000124c 	.word	0x2000124c
 800e9e0:	20001248 	.word	0x20001248
 800e9e4:	e000ed04 	.word	0xe000ed04

0800e9e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9ee:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <xTaskGetTickCount+0x1c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9f4:	687b      	ldr	r3, [r7, #4]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	2000123c 	.word	0x2000123c

0800ea08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea12:	4b4f      	ldr	r3, [pc, #316]	; (800eb50 <xTaskIncrementTick+0x148>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 808f 	bne.w	800eb3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea1c:	4b4d      	ldr	r3, [pc, #308]	; (800eb54 <xTaskIncrementTick+0x14c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3301      	adds	r3, #1
 800ea22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea24:	4a4b      	ldr	r2, [pc, #300]	; (800eb54 <xTaskIncrementTick+0x14c>)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d120      	bne.n	800ea72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea30:	4b49      	ldr	r3, [pc, #292]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00a      	beq.n	800ea50 <xTaskIncrementTick+0x48>
	__asm volatile
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	603b      	str	r3, [r7, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	e7fe      	b.n	800ea4e <xTaskIncrementTick+0x46>
 800ea50:	4b41      	ldr	r3, [pc, #260]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	60fb      	str	r3, [r7, #12]
 800ea56:	4b41      	ldr	r3, [pc, #260]	; (800eb5c <xTaskIncrementTick+0x154>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a3f      	ldr	r2, [pc, #252]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4a3f      	ldr	r2, [pc, #252]	; (800eb5c <xTaskIncrementTick+0x154>)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	4b3e      	ldr	r3, [pc, #248]	; (800eb60 <xTaskIncrementTick+0x158>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	4a3d      	ldr	r2, [pc, #244]	; (800eb60 <xTaskIncrementTick+0x158>)
 800ea6c:	6013      	str	r3, [r2, #0]
 800ea6e:	f000 faf7 	bl	800f060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea72:	4b3c      	ldr	r3, [pc, #240]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d349      	bcc.n	800eb10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea7c:	4b36      	ldr	r3, [pc, #216]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea86:	4b37      	ldr	r3, [pc, #220]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	601a      	str	r2, [r3, #0]
					break;
 800ea8e:	e03f      	b.n	800eb10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea90:	4b31      	ldr	r3, [pc, #196]	; (800eb58 <xTaskIncrementTick+0x150>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d203      	bcs.n	800eab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaa8:	4a2e      	ldr	r2, [pc, #184]	; (800eb64 <xTaskIncrementTick+0x15c>)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaae:	e02f      	b.n	800eb10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	3304      	adds	r3, #4
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe fedd 	bl	800d874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d004      	beq.n	800eacc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	3318      	adds	r3, #24
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fe fed4 	bl	800d874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead0:	4b25      	ldr	r3, [pc, #148]	; (800eb68 <xTaskIncrementTick+0x160>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d903      	bls.n	800eae0 <xTaskIncrementTick+0xd8>
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eadc:	4a22      	ldr	r2, [pc, #136]	; (800eb68 <xTaskIncrementTick+0x160>)
 800eade:	6013      	str	r3, [r2, #0]
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae4:	4613      	mov	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4413      	add	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	4a1f      	ldr	r2, [pc, #124]	; (800eb6c <xTaskIncrementTick+0x164>)
 800eaee:	441a      	add	r2, r3
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fe fe5f 	bl	800d7ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb00:	4b1b      	ldr	r3, [pc, #108]	; (800eb70 <xTaskIncrementTick+0x168>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d3b8      	bcc.n	800ea7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb0e:	e7b5      	b.n	800ea7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb10:	4b17      	ldr	r3, [pc, #92]	; (800eb70 <xTaskIncrementTick+0x168>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb16:	4915      	ldr	r1, [pc, #84]	; (800eb6c <xTaskIncrementTick+0x164>)
 800eb18:	4613      	mov	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	440b      	add	r3, r1
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d901      	bls.n	800eb2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eb2c:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <xTaskIncrementTick+0x16c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d007      	beq.n	800eb44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	e004      	b.n	800eb44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eb3a:	4b0f      	ldr	r3, [pc, #60]	; (800eb78 <xTaskIncrementTick+0x170>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	4a0d      	ldr	r2, [pc, #52]	; (800eb78 <xTaskIncrementTick+0x170>)
 800eb42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eb44:	697b      	ldr	r3, [r7, #20]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20001260 	.word	0x20001260
 800eb54:	2000123c 	.word	0x2000123c
 800eb58:	200011f0 	.word	0x200011f0
 800eb5c:	200011f4 	.word	0x200011f4
 800eb60:	20001250 	.word	0x20001250
 800eb64:	20001258 	.word	0x20001258
 800eb68:	20001240 	.word	0x20001240
 800eb6c:	20000d68 	.word	0x20000d68
 800eb70:	20000d64 	.word	0x20000d64
 800eb74:	2000124c 	.word	0x2000124c
 800eb78:	20001248 	.word	0x20001248

0800eb7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb82:	4b3a      	ldr	r3, [pc, #232]	; (800ec6c <vTaskSwitchContext+0xf0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb8a:	4b39      	ldr	r3, [pc, #228]	; (800ec70 <vTaskSwitchContext+0xf4>)
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb90:	e068      	b.n	800ec64 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800eb92:	4b37      	ldr	r3, [pc, #220]	; (800ec70 <vTaskSwitchContext+0xf4>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800eb98:	4b36      	ldr	r3, [pc, #216]	; (800ec74 <vTaskSwitchContext+0xf8>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d111      	bne.n	800ebd4 <vTaskSwitchContext+0x58>
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d10b      	bne.n	800ebd4 <vTaskSwitchContext+0x58>
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d105      	bne.n	800ebd4 <vTaskSwitchContext+0x58>
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	330c      	adds	r3, #12
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d008      	beq.n	800ebe6 <vTaskSwitchContext+0x6a>
 800ebd4:	4b27      	ldr	r3, [pc, #156]	; (800ec74 <vTaskSwitchContext+0xf8>)
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	4b26      	ldr	r3, [pc, #152]	; (800ec74 <vTaskSwitchContext+0xf8>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	3334      	adds	r3, #52	; 0x34
 800ebde:	4619      	mov	r1, r3
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	f7f1 fcde 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebe6:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <vTaskSwitchContext+0xfc>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	e010      	b.n	800ec10 <vTaskSwitchContext+0x94>
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10a      	bne.n	800ec0a <vTaskSwitchContext+0x8e>
	__asm volatile
 800ebf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf8:	f383 8811 	msr	BASEPRI, r3
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	607b      	str	r3, [r7, #4]
}
 800ec06:	bf00      	nop
 800ec08:	e7fe      	b.n	800ec08 <vTaskSwitchContext+0x8c>
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	617b      	str	r3, [r7, #20]
 800ec10:	491a      	ldr	r1, [pc, #104]	; (800ec7c <vTaskSwitchContext+0x100>)
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	4613      	mov	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	440b      	add	r3, r1
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d0e4      	beq.n	800ebee <vTaskSwitchContext+0x72>
 800ec24:	697a      	ldr	r2, [r7, #20]
 800ec26:	4613      	mov	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	4a13      	ldr	r2, [pc, #76]	; (800ec7c <vTaskSwitchContext+0x100>)
 800ec30:	4413      	add	r3, r2
 800ec32:	60bb      	str	r3, [r7, #8]
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	685a      	ldr	r2, [r3, #4]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	605a      	str	r2, [r3, #4]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	3308      	adds	r3, #8
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d104      	bne.n	800ec54 <vTaskSwitchContext+0xd8>
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	605a      	str	r2, [r3, #4]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	4a06      	ldr	r2, [pc, #24]	; (800ec74 <vTaskSwitchContext+0xf8>)
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	4a06      	ldr	r2, [pc, #24]	; (800ec78 <vTaskSwitchContext+0xfc>)
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	6013      	str	r3, [r2, #0]
}
 800ec64:	bf00      	nop
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	20001260 	.word	0x20001260
 800ec70:	2000124c 	.word	0x2000124c
 800ec74:	20000d64 	.word	0x20000d64
 800ec78:	20001240 	.word	0x20001240
 800ec7c:	20000d68 	.word	0x20000d68

0800ec80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10a      	bne.n	800eca6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	60fb      	str	r3, [r7, #12]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eca6:	4b07      	ldr	r3, [pc, #28]	; (800ecc4 <vTaskPlaceOnEventList+0x44>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	3318      	adds	r3, #24
 800ecac:	4619      	mov	r1, r3
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7fe fda7 	bl	800d802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	6838      	ldr	r0, [r7, #0]
 800ecb8:	f000 fa7e 	bl	800f1b8 <prvAddCurrentTaskToDelayedList>
}
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20000d64 	.word	0x20000d64

0800ecc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10a      	bne.n	800ecf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	617b      	str	r3, [r7, #20]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ecf0:	4b0a      	ldr	r3, [pc, #40]	; (800ed1c <vTaskPlaceOnEventListRestricted+0x54>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	3318      	adds	r3, #24
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7fe fd5e 	bl	800d7ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d002      	beq.n	800ed0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ed04:	f04f 33ff 	mov.w	r3, #4294967295
 800ed08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	68b8      	ldr	r0, [r7, #8]
 800ed0e:	f000 fa53 	bl	800f1b8 <prvAddCurrentTaskToDelayedList>
	}
 800ed12:	bf00      	nop
 800ed14:	3718      	adds	r7, #24
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	20000d64 	.word	0x20000d64

0800ed20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10a      	bne.n	800ed4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3a:	f383 8811 	msr	BASEPRI, r3
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	60fb      	str	r3, [r7, #12]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	3318      	adds	r3, #24
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fe fd8f 	bl	800d874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed56:	4b1e      	ldr	r3, [pc, #120]	; (800edd0 <xTaskRemoveFromEventList+0xb0>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d11d      	bne.n	800ed9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	3304      	adds	r3, #4
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe fd86 	bl	800d874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6c:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <xTaskRemoveFromEventList+0xb4>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d903      	bls.n	800ed7c <xTaskRemoveFromEventList+0x5c>
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	4a16      	ldr	r2, [pc, #88]	; (800edd4 <xTaskRemoveFromEventList+0xb4>)
 800ed7a:	6013      	str	r3, [r2, #0]
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed80:	4613      	mov	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4413      	add	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4a13      	ldr	r2, [pc, #76]	; (800edd8 <xTaskRemoveFromEventList+0xb8>)
 800ed8a:	441a      	add	r2, r3
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fe fd11 	bl	800d7ba <vListInsertEnd>
 800ed98:	e005      	b.n	800eda6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3318      	adds	r3, #24
 800ed9e:	4619      	mov	r1, r3
 800eda0:	480e      	ldr	r0, [pc, #56]	; (800eddc <xTaskRemoveFromEventList+0xbc>)
 800eda2:	f7fe fd0a 	bl	800d7ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edaa:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <xTaskRemoveFromEventList+0xc0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d905      	bls.n	800edc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edb8:	4b0a      	ldr	r3, [pc, #40]	; (800ede4 <xTaskRemoveFromEventList+0xc4>)
 800edba:	2201      	movs	r2, #1
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	e001      	b.n	800edc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800edc4:	697b      	ldr	r3, [r7, #20]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20001260 	.word	0x20001260
 800edd4:	20001240 	.word	0x20001240
 800edd8:	20000d68 	.word	0x20000d68
 800eddc:	200011f8 	.word	0x200011f8
 800ede0:	20000d64 	.word	0x20000d64
 800ede4:	2000124c 	.word	0x2000124c

0800ede8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800edf0:	4b06      	ldr	r3, [pc, #24]	; (800ee0c <vTaskInternalSetTimeOutState+0x24>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edf8:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <vTaskInternalSetTimeOutState+0x28>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	605a      	str	r2, [r3, #4]
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	20001250 	.word	0x20001250
 800ee10:	2000123c 	.word	0x2000123c

0800ee14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b088      	sub	sp, #32
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10a      	bne.n	800ee3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	613b      	str	r3, [r7, #16]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10a      	bne.n	800ee56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60fb      	str	r3, [r7, #12]
}
 800ee52:	bf00      	nop
 800ee54:	e7fe      	b.n	800ee54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ee56:	f000 fe7d 	bl	800fb54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee5a:	4b1d      	ldr	r3, [pc, #116]	; (800eed0 <xTaskCheckForTimeOut+0xbc>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	69ba      	ldr	r2, [r7, #24]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d102      	bne.n	800ee7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e023      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b15      	ldr	r3, [pc, #84]	; (800eed4 <xTaskCheckForTimeOut+0xc0>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d007      	beq.n	800ee96 <xTaskCheckForTimeOut+0x82>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	69ba      	ldr	r2, [r7, #24]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d302      	bcc.n	800ee96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee90:	2301      	movs	r3, #1
 800ee92:	61fb      	str	r3, [r7, #28]
 800ee94:	e015      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d20b      	bcs.n	800eeb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	1ad2      	subs	r2, r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ff9b 	bl	800ede8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	61fb      	str	r3, [r7, #28]
 800eeb6:	e004      	b.n	800eec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eebe:	2301      	movs	r3, #1
 800eec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eec2:	f000 fe77 	bl	800fbb4 <vPortExitCritical>

	return xReturn;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	2000123c 	.word	0x2000123c
 800eed4:	20001250 	.word	0x20001250

0800eed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eedc:	4b03      	ldr	r3, [pc, #12]	; (800eeec <vTaskMissedYield+0x14>)
 800eede:	2201      	movs	r2, #1
 800eee0:	601a      	str	r2, [r3, #0]
}
 800eee2:	bf00      	nop
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	2000124c 	.word	0x2000124c

0800eef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eef8:	f000 f854 	bl	800efa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eefc:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <prvIdleTask+0x2c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d907      	bls.n	800ef14 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ef04:	4b06      	ldr	r3, [pc, #24]	; (800ef20 <prvIdleTask+0x30>)
 800ef06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ef14:	f7f1 fb3e 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ef18:	e7ee      	b.n	800eef8 <prvIdleTask+0x8>
 800ef1a:	bf00      	nop
 800ef1c:	20000d68 	.word	0x20000d68
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	607b      	str	r3, [r7, #4]
 800ef2e:	e00c      	b.n	800ef4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	4613      	mov	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4a12      	ldr	r2, [pc, #72]	; (800ef84 <prvInitialiseTaskLists+0x60>)
 800ef3c:	4413      	add	r3, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fc0e 	bl	800d760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3301      	adds	r3, #1
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b37      	cmp	r3, #55	; 0x37
 800ef4e:	d9ef      	bls.n	800ef30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef50:	480d      	ldr	r0, [pc, #52]	; (800ef88 <prvInitialiseTaskLists+0x64>)
 800ef52:	f7fe fc05 	bl	800d760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef56:	480d      	ldr	r0, [pc, #52]	; (800ef8c <prvInitialiseTaskLists+0x68>)
 800ef58:	f7fe fc02 	bl	800d760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef5c:	480c      	ldr	r0, [pc, #48]	; (800ef90 <prvInitialiseTaskLists+0x6c>)
 800ef5e:	f7fe fbff 	bl	800d760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef62:	480c      	ldr	r0, [pc, #48]	; (800ef94 <prvInitialiseTaskLists+0x70>)
 800ef64:	f7fe fbfc 	bl	800d760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef68:	480b      	ldr	r0, [pc, #44]	; (800ef98 <prvInitialiseTaskLists+0x74>)
 800ef6a:	f7fe fbf9 	bl	800d760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef6e:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <prvInitialiseTaskLists+0x78>)
 800ef70:	4a05      	ldr	r2, [pc, #20]	; (800ef88 <prvInitialiseTaskLists+0x64>)
 800ef72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef74:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <prvInitialiseTaskLists+0x7c>)
 800ef76:	4a05      	ldr	r2, [pc, #20]	; (800ef8c <prvInitialiseTaskLists+0x68>)
 800ef78:	601a      	str	r2, [r3, #0]
}
 800ef7a:	bf00      	nop
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20000d68 	.word	0x20000d68
 800ef88:	200011c8 	.word	0x200011c8
 800ef8c:	200011dc 	.word	0x200011dc
 800ef90:	200011f8 	.word	0x200011f8
 800ef94:	2000120c 	.word	0x2000120c
 800ef98:	20001224 	.word	0x20001224
 800ef9c:	200011f0 	.word	0x200011f0
 800efa0:	200011f4 	.word	0x200011f4

0800efa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efaa:	e019      	b.n	800efe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800efac:	f000 fdd2 	bl	800fb54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efb0:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <prvCheckTasksWaitingTermination+0x50>)
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	3304      	adds	r3, #4
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fe fc59 	bl	800d874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800efc2:	4b0d      	ldr	r3, [pc, #52]	; (800eff8 <prvCheckTasksWaitingTermination+0x54>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <prvCheckTasksWaitingTermination+0x54>)
 800efca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800efcc:	4b0b      	ldr	r3, [pc, #44]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	4a0a      	ldr	r2, [pc, #40]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800efd6:	f000 fded 	bl	800fbb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 f810 	bl	800f000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efe0:	4b06      	ldr	r3, [pc, #24]	; (800effc <prvCheckTasksWaitingTermination+0x58>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1e1      	bne.n	800efac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800efe8:	bf00      	nop
 800efea:	bf00      	nop
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2000120c 	.word	0x2000120c
 800eff8:	20001238 	.word	0x20001238
 800effc:	20001220 	.word	0x20001220

0800f000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d108      	bne.n	800f024 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	4618      	mov	r0, r3
 800f018:	f000 ff8e 	bl	800ff38 <vPortFree>
				vPortFree( pxTCB );
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 ff8b 	bl	800ff38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f022:	e018      	b.n	800f056 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d103      	bne.n	800f036 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 ff82 	bl	800ff38 <vPortFree>
	}
 800f034:	e00f      	b.n	800f056 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d00a      	beq.n	800f056 <prvDeleteTCB+0x56>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	60fb      	str	r3, [r7, #12]
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <prvDeleteTCB+0x54>
	}
 800f056:	bf00      	nop
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f066:	4b0c      	ldr	r3, [pc, #48]	; (800f098 <prvResetNextTaskUnblockTime+0x38>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d104      	bne.n	800f07a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f070:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <prvResetNextTaskUnblockTime+0x3c>)
 800f072:	f04f 32ff 	mov.w	r2, #4294967295
 800f076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f078:	e008      	b.n	800f08c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07a:	4b07      	ldr	r3, [pc, #28]	; (800f098 <prvResetNextTaskUnblockTime+0x38>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	4a04      	ldr	r2, [pc, #16]	; (800f09c <prvResetNextTaskUnblockTime+0x3c>)
 800f08a:	6013      	str	r3, [r2, #0]
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr
 800f098:	200011f0 	.word	0x200011f0
 800f09c:	20001258 	.word	0x20001258

0800f0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0a6:	4b0b      	ldr	r3, [pc, #44]	; (800f0d4 <xTaskGetSchedulerState+0x34>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d102      	bne.n	800f0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	607b      	str	r3, [r7, #4]
 800f0b2:	e008      	b.n	800f0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0b4:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <xTaskGetSchedulerState+0x38>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d102      	bne.n	800f0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0bc:	2302      	movs	r3, #2
 800f0be:	607b      	str	r3, [r7, #4]
 800f0c0:	e001      	b.n	800f0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0c6:	687b      	ldr	r3, [r7, #4]
	}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	20001244 	.word	0x20001244
 800f0d8:	20001260 	.word	0x20001260

0800f0dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d056      	beq.n	800f1a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f0f2:	4b2e      	ldr	r3, [pc, #184]	; (800f1ac <xTaskPriorityDisinherit+0xd0>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d00a      	beq.n	800f112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	60fb      	str	r3, [r7, #12]
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10a      	bne.n	800f130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	60bb      	str	r3, [r7, #8]
}
 800f12c:	bf00      	nop
 800f12e:	e7fe      	b.n	800f12e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f134:	1e5a      	subs	r2, r3, #1
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f142:	429a      	cmp	r2, r3
 800f144:	d02c      	beq.n	800f1a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d128      	bne.n	800f1a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	3304      	adds	r3, #4
 800f152:	4618      	mov	r0, r3
 800f154:	f7fe fb8e 	bl	800d874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f170:	4b0f      	ldr	r3, [pc, #60]	; (800f1b0 <xTaskPriorityDisinherit+0xd4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	429a      	cmp	r2, r3
 800f176:	d903      	bls.n	800f180 <xTaskPriorityDisinherit+0xa4>
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f17c:	4a0c      	ldr	r2, [pc, #48]	; (800f1b0 <xTaskPriorityDisinherit+0xd4>)
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4a09      	ldr	r2, [pc, #36]	; (800f1b4 <xTaskPriorityDisinherit+0xd8>)
 800f18e:	441a      	add	r2, r3
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	3304      	adds	r3, #4
 800f194:	4619      	mov	r1, r3
 800f196:	4610      	mov	r0, r2
 800f198:	f7fe fb0f 	bl	800d7ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f19c:	2301      	movs	r3, #1
 800f19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1a0:	697b      	ldr	r3, [r7, #20]
	}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3718      	adds	r7, #24
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20000d64 	.word	0x20000d64
 800f1b0:	20001240 	.word	0x20001240
 800f1b4:	20000d68 	.word	0x20000d68

0800f1b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1c2:	4b21      	ldr	r3, [pc, #132]	; (800f248 <prvAddCurrentTaskToDelayedList+0x90>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1c8:	4b20      	ldr	r3, [pc, #128]	; (800f24c <prvAddCurrentTaskToDelayedList+0x94>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3304      	adds	r3, #4
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe fb50 	bl	800d874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1da:	d10a      	bne.n	800f1f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d007      	beq.n	800f1f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e2:	4b1a      	ldr	r3, [pc, #104]	; (800f24c <prvAddCurrentTaskToDelayedList+0x94>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4819      	ldr	r0, [pc, #100]	; (800f250 <prvAddCurrentTaskToDelayedList+0x98>)
 800f1ec:	f7fe fae5 	bl	800d7ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1f0:	e026      	b.n	800f240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1fa:	4b14      	ldr	r3, [pc, #80]	; (800f24c <prvAddCurrentTaskToDelayedList+0x94>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	429a      	cmp	r2, r3
 800f208:	d209      	bcs.n	800f21e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f20a:	4b12      	ldr	r3, [pc, #72]	; (800f254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <prvAddCurrentTaskToDelayedList+0x94>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3304      	adds	r3, #4
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7fe faf3 	bl	800d802 <vListInsert>
}
 800f21c:	e010      	b.n	800f240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21e:	4b0e      	ldr	r3, [pc, #56]	; (800f258 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <prvAddCurrentTaskToDelayedList+0x94>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	3304      	adds	r3, #4
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7fe fae9 	bl	800d802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f230:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	429a      	cmp	r2, r3
 800f238:	d202      	bcs.n	800f240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f23a:	4a08      	ldr	r2, [pc, #32]	; (800f25c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	6013      	str	r3, [r2, #0]
}
 800f240:	bf00      	nop
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	2000123c 	.word	0x2000123c
 800f24c:	20000d64 	.word	0x20000d64
 800f250:	20001224 	.word	0x20001224
 800f254:	200011f4 	.word	0x200011f4
 800f258:	200011f0 	.word	0x200011f0
 800f25c:	20001258 	.word	0x20001258

0800f260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08a      	sub	sp, #40	; 0x28
 800f264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f266:	2300      	movs	r3, #0
 800f268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f26a:	f000 fb07 	bl	800f87c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f26e:	4b1c      	ldr	r3, [pc, #112]	; (800f2e0 <xTimerCreateTimerTask+0x80>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d021      	beq.n	800f2ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f27a:	2300      	movs	r3, #0
 800f27c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f27e:	1d3a      	adds	r2, r7, #4
 800f280:	f107 0108 	add.w	r1, r7, #8
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe fa4f 	bl	800d72c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	9202      	str	r2, [sp, #8]
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	2302      	movs	r3, #2
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	2300      	movs	r3, #0
 800f29e:	460a      	mov	r2, r1
 800f2a0:	4910      	ldr	r1, [pc, #64]	; (800f2e4 <xTimerCreateTimerTask+0x84>)
 800f2a2:	4811      	ldr	r0, [pc, #68]	; (800f2e8 <xTimerCreateTimerTask+0x88>)
 800f2a4:	f7ff f8b6 	bl	800e414 <xTaskCreateStatic>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	4a10      	ldr	r2, [pc, #64]	; (800f2ec <xTimerCreateTimerTask+0x8c>)
 800f2ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2ae:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <xTimerCreateTimerTask+0x8c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d10a      	bne.n	800f2d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	f383 8811 	msr	BASEPRI, r3
 800f2c8:	f3bf 8f6f 	isb	sy
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	613b      	str	r3, [r7, #16]
}
 800f2d2:	bf00      	nop
 800f2d4:	e7fe      	b.n	800f2d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2d6:	697b      	ldr	r3, [r7, #20]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	20001294 	.word	0x20001294
 800f2e4:	08011130 	.word	0x08011130
 800f2e8:	0800f425 	.word	0x0800f425
 800f2ec:	20001298 	.word	0x20001298

0800f2f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08a      	sub	sp, #40	; 0x28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f2fe:	2300      	movs	r3, #0
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d10a      	bne.n	800f31e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	623b      	str	r3, [r7, #32]
}
 800f31a:	bf00      	nop
 800f31c:	e7fe      	b.n	800f31c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f31e:	4b1a      	ldr	r3, [pc, #104]	; (800f388 <xTimerGenericCommand+0x98>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d02a      	beq.n	800f37c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	2b05      	cmp	r3, #5
 800f336:	dc18      	bgt.n	800f36a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f338:	f7ff feb2 	bl	800f0a0 <xTaskGetSchedulerState>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d109      	bne.n	800f356 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f342:	4b11      	ldr	r3, [pc, #68]	; (800f388 <xTimerGenericCommand+0x98>)
 800f344:	6818      	ldr	r0, [r3, #0]
 800f346:	f107 0110 	add.w	r1, r7, #16
 800f34a:	2300      	movs	r3, #0
 800f34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f34e:	f7fe fbf9 	bl	800db44 <xQueueGenericSend>
 800f352:	6278      	str	r0, [r7, #36]	; 0x24
 800f354:	e012      	b.n	800f37c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <xTimerGenericCommand+0x98>)
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	f107 0110 	add.w	r1, r7, #16
 800f35e:	2300      	movs	r3, #0
 800f360:	2200      	movs	r2, #0
 800f362:	f7fe fbef 	bl	800db44 <xQueueGenericSend>
 800f366:	6278      	str	r0, [r7, #36]	; 0x24
 800f368:	e008      	b.n	800f37c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f36a:	4b07      	ldr	r3, [pc, #28]	; (800f388 <xTimerGenericCommand+0x98>)
 800f36c:	6818      	ldr	r0, [r3, #0]
 800f36e:	f107 0110 	add.w	r1, r7, #16
 800f372:	2300      	movs	r3, #0
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	f7fe fce3 	bl	800dd40 <xQueueGenericSendFromISR>
 800f37a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3728      	adds	r7, #40	; 0x28
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	20001294 	.word	0x20001294

0800f38c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b088      	sub	sp, #32
 800f390:	af02      	add	r7, sp, #8
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f396:	4b22      	ldr	r3, [pc, #136]	; (800f420 <prvProcessExpiredTimer+0x94>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe fa65 	bl	800d874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d022      	beq.n	800f3fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	699a      	ldr	r2, [r3, #24]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	18d1      	adds	r1, r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	6978      	ldr	r0, [r7, #20]
 800f3c6:	f000 f8d1 	bl	800f56c <prvInsertTimerInActiveList>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01f      	beq.n	800f410 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	2100      	movs	r1, #0
 800f3da:	6978      	ldr	r0, [r7, #20]
 800f3dc:	f7ff ff88 	bl	800f2f0 <xTimerGenericCommand>
 800f3e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d113      	bne.n	800f410 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	60fb      	str	r3, [r7, #12]
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f404:	f023 0301 	bic.w	r3, r3, #1
 800f408:	b2da      	uxtb	r2, r3
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	6978      	ldr	r0, [r7, #20]
 800f416:	4798      	blx	r3
}
 800f418:	bf00      	nop
 800f41a:	3718      	adds	r7, #24
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	2000128c 	.word	0x2000128c

0800f424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f42c:	f107 0308 	add.w	r3, r7, #8
 800f430:	4618      	mov	r0, r3
 800f432:	f000 f857 	bl	800f4e4 <prvGetNextExpireTime>
 800f436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	4619      	mov	r1, r3
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f000 f803 	bl	800f448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f442:	f000 f8d5 	bl	800f5f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f446:	e7f1      	b.n	800f42c <prvTimerTask+0x8>

0800f448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f452:	f7ff fa1d 	bl	800e890 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f456:	f107 0308 	add.w	r3, r7, #8
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 f866 	bl	800f52c <prvSampleTimeNow>
 800f460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d130      	bne.n	800f4ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10a      	bne.n	800f484 <prvProcessTimerOrBlockTask+0x3c>
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	429a      	cmp	r2, r3
 800f474:	d806      	bhi.n	800f484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f476:	f7ff fa19 	bl	800e8ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f47a:	68f9      	ldr	r1, [r7, #12]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff ff85 	bl	800f38c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f482:	e024      	b.n	800f4ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d008      	beq.n	800f49c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f48a:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <prvProcessTimerOrBlockTask+0x90>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d101      	bne.n	800f498 <prvProcessTimerOrBlockTask+0x50>
 800f494:	2301      	movs	r3, #1
 800f496:	e000      	b.n	800f49a <prvProcessTimerOrBlockTask+0x52>
 800f498:	2300      	movs	r3, #0
 800f49a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f49c:	4b0f      	ldr	r3, [pc, #60]	; (800f4dc <prvProcessTimerOrBlockTask+0x94>)
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	f7fe ff7f 	bl	800e3ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f4ae:	f7ff f9fd 	bl	800e8ac <xTaskResumeAll>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10a      	bne.n	800f4ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f4b8:	4b09      	ldr	r3, [pc, #36]	; (800f4e0 <prvProcessTimerOrBlockTask+0x98>)
 800f4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	f3bf 8f6f 	isb	sy
}
 800f4c8:	e001      	b.n	800f4ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f4ca:	f7ff f9ef 	bl	800e8ac <xTaskResumeAll>
}
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20001290 	.word	0x20001290
 800f4dc:	20001294 	.word	0x20001294
 800f4e0:	e000ed04 	.word	0xe000ed04

0800f4e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f4ec:	4b0e      	ldr	r3, [pc, #56]	; (800f528 <prvGetNextExpireTime+0x44>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <prvGetNextExpireTime+0x16>
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	e000      	b.n	800f4fc <prvGetNextExpireTime+0x18>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d105      	bne.n	800f514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f508:	4b07      	ldr	r3, [pc, #28]	; (800f528 <prvGetNextExpireTime+0x44>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	e001      	b.n	800f518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f514:	2300      	movs	r3, #0
 800f516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f518:	68fb      	ldr	r3, [r7, #12]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	2000128c 	.word	0x2000128c

0800f52c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f534:	f7ff fa58 	bl	800e9e8 <xTaskGetTickCount>
 800f538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f53a:	4b0b      	ldr	r3, [pc, #44]	; (800f568 <prvSampleTimeNow+0x3c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	429a      	cmp	r2, r3
 800f542:	d205      	bcs.n	800f550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f544:	f000 f936 	bl	800f7b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	e002      	b.n	800f556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f556:	4a04      	ldr	r2, [pc, #16]	; (800f568 <prvSampleTimeNow+0x3c>)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f55c:	68fb      	ldr	r3, [r7, #12]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	2000129c 	.word	0x2000129c

0800f56c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b086      	sub	sp, #24
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f57a:	2300      	movs	r3, #0
 800f57c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d812      	bhi.n	800f5b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d302      	bcc.n	800f5a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	617b      	str	r3, [r7, #20]
 800f5a4:	e01b      	b.n	800f5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f5a6:	4b10      	ldr	r3, [pc, #64]	; (800f5e8 <prvInsertTimerInActiveList+0x7c>)
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	3304      	adds	r3, #4
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	f7fe f926 	bl	800d802 <vListInsert>
 800f5b6:	e012      	b.n	800f5de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d206      	bcs.n	800f5ce <prvInsertTimerInActiveList+0x62>
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d302      	bcc.n	800f5ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	617b      	str	r3, [r7, #20]
 800f5cc:	e007      	b.n	800f5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5ce:	4b07      	ldr	r3, [pc, #28]	; (800f5ec <prvInsertTimerInActiveList+0x80>)
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4610      	mov	r0, r2
 800f5da:	f7fe f912 	bl	800d802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f5de:	697b      	ldr	r3, [r7, #20]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20001290 	.word	0x20001290
 800f5ec:	2000128c 	.word	0x2000128c

0800f5f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08e      	sub	sp, #56	; 0x38
 800f5f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5f6:	e0ca      	b.n	800f78e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	da18      	bge.n	800f630 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f5fe:	1d3b      	adds	r3, r7, #4
 800f600:	3304      	adds	r3, #4
 800f602:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10a      	bne.n	800f620 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	61fb      	str	r3, [r7, #28]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f626:	6850      	ldr	r0, [r2, #4]
 800f628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f62a:	6892      	ldr	r2, [r2, #8]
 800f62c:	4611      	mov	r1, r2
 800f62e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	f2c0 80aa 	blt.w	800f78c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63e:	695b      	ldr	r3, [r3, #20]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d004      	beq.n	800f64e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f646:	3304      	adds	r3, #4
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe f913 	bl	800d874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f64e:	463b      	mov	r3, r7
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff ff6b 	bl	800f52c <prvSampleTimeNow>
 800f656:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	f200 8097 	bhi.w	800f78e <prvProcessReceivedCommands+0x19e>
 800f660:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <prvProcessReceivedCommands+0x78>)
 800f662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f666:	bf00      	nop
 800f668:	0800f691 	.word	0x0800f691
 800f66c:	0800f691 	.word	0x0800f691
 800f670:	0800f691 	.word	0x0800f691
 800f674:	0800f705 	.word	0x0800f705
 800f678:	0800f719 	.word	0x0800f719
 800f67c:	0800f763 	.word	0x0800f763
 800f680:	0800f691 	.word	0x0800f691
 800f684:	0800f691 	.word	0x0800f691
 800f688:	0800f705 	.word	0x0800f705
 800f68c:	0800f719 	.word	0x0800f719
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f696:	f043 0301 	orr.w	r3, r3, #1
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	699b      	ldr	r3, [r3, #24]
 800f6a8:	18d1      	adds	r1, r2, r3
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b0:	f7ff ff5c 	bl	800f56c <prvInsertTimerInActiveList>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d069      	beq.n	800f78e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6c8:	f003 0304 	and.w	r3, r3, #4
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d05e      	beq.n	800f78e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	699b      	ldr	r3, [r3, #24]
 800f6d6:	441a      	add	r2, r3
 800f6d8:	2300      	movs	r3, #0
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	2300      	movs	r3, #0
 800f6de:	2100      	movs	r1, #0
 800f6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e2:	f7ff fe05 	bl	800f2f0 <xTimerGenericCommand>
 800f6e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f6e8:	6a3b      	ldr	r3, [r7, #32]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d14f      	bne.n	800f78e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	61bb      	str	r3, [r7, #24]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f70a:	f023 0301 	bic.w	r3, r3, #1
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f716:	e03a      	b.n	800f78e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f71e:	f043 0301 	orr.w	r3, r3, #1
 800f722:	b2da      	uxtb	r2, r3
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	699b      	ldr	r3, [r3, #24]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10a      	bne.n	800f74e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	617b      	str	r3, [r7, #20]
}
 800f74a:	bf00      	nop
 800f74c:	e7fe      	b.n	800f74c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f750:	699a      	ldr	r2, [r3, #24]
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	18d1      	adds	r1, r2, r3
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f75c:	f7ff ff06 	bl	800f56c <prvInsertTimerInActiveList>
					break;
 800f760:	e015      	b.n	800f78e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f768:	f003 0302 	and.w	r3, r3, #2
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d103      	bne.n	800f778 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f772:	f000 fbe1 	bl	800ff38 <vPortFree>
 800f776:	e00a      	b.n	800f78e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f77e:	f023 0301 	bic.w	r3, r3, #1
 800f782:	b2da      	uxtb	r2, r3
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f78a:	e000      	b.n	800f78e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f78c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f78e:	4b08      	ldr	r3, [pc, #32]	; (800f7b0 <prvProcessReceivedCommands+0x1c0>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	1d39      	adds	r1, r7, #4
 800f794:	2200      	movs	r2, #0
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe fb6e 	bl	800de78 <xQueueReceive>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f47f af2a 	bne.w	800f5f8 <prvProcessReceivedCommands+0x8>
	}
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	3730      	adds	r7, #48	; 0x30
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20001294 	.word	0x20001294

0800f7b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7ba:	e048      	b.n	800f84e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7bc:	4b2d      	ldr	r3, [pc, #180]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7c6:	4b2b      	ldr	r3, [pc, #172]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fe f84d 	bl	800d874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e8:	f003 0304 	and.w	r3, r3, #4
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d02e      	beq.n	800f84e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	699b      	ldr	r3, [r3, #24]
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d90e      	bls.n	800f820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f80e:	4b19      	ldr	r3, [pc, #100]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3304      	adds	r3, #4
 800f816:	4619      	mov	r1, r3
 800f818:	4610      	mov	r0, r2
 800f81a:	f7fd fff2 	bl	800d802 <vListInsert>
 800f81e:	e016      	b.n	800f84e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f820:	2300      	movs	r3, #0
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	2300      	movs	r3, #0
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	2100      	movs	r1, #0
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7ff fd60 	bl	800f2f0 <xTimerGenericCommand>
 800f830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d10a      	bne.n	800f84e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83c:	f383 8811 	msr	BASEPRI, r3
 800f840:	f3bf 8f6f 	isb	sy
 800f844:	f3bf 8f4f 	dsb	sy
 800f848:	603b      	str	r3, [r7, #0]
}
 800f84a:	bf00      	nop
 800f84c:	e7fe      	b.n	800f84c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f84e:	4b09      	ldr	r3, [pc, #36]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1b1      	bne.n	800f7bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f858:	4b06      	ldr	r3, [pc, #24]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f85e:	4b06      	ldr	r3, [pc, #24]	; (800f878 <prvSwitchTimerLists+0xc4>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a04      	ldr	r2, [pc, #16]	; (800f874 <prvSwitchTimerLists+0xc0>)
 800f864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f866:	4a04      	ldr	r2, [pc, #16]	; (800f878 <prvSwitchTimerLists+0xc4>)
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	6013      	str	r3, [r2, #0]
}
 800f86c:	bf00      	nop
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	2000128c 	.word	0x2000128c
 800f878:	20001290 	.word	0x20001290

0800f87c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f882:	f000 f967 	bl	800fb54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f886:	4b15      	ldr	r3, [pc, #84]	; (800f8dc <prvCheckForValidListAndQueue+0x60>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d120      	bne.n	800f8d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f88e:	4814      	ldr	r0, [pc, #80]	; (800f8e0 <prvCheckForValidListAndQueue+0x64>)
 800f890:	f7fd ff66 	bl	800d760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f894:	4813      	ldr	r0, [pc, #76]	; (800f8e4 <prvCheckForValidListAndQueue+0x68>)
 800f896:	f7fd ff63 	bl	800d760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f89a:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <prvCheckForValidListAndQueue+0x6c>)
 800f89c:	4a10      	ldr	r2, [pc, #64]	; (800f8e0 <prvCheckForValidListAndQueue+0x64>)
 800f89e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f8a0:	4b12      	ldr	r3, [pc, #72]	; (800f8ec <prvCheckForValidListAndQueue+0x70>)
 800f8a2:	4a10      	ldr	r2, [pc, #64]	; (800f8e4 <prvCheckForValidListAndQueue+0x68>)
 800f8a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <prvCheckForValidListAndQueue+0x74>)
 800f8ac:	4a11      	ldr	r2, [pc, #68]	; (800f8f4 <prvCheckForValidListAndQueue+0x78>)
 800f8ae:	2110      	movs	r1, #16
 800f8b0:	200a      	movs	r0, #10
 800f8b2:	f7fe f871 	bl	800d998 <xQueueGenericCreateStatic>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	4a08      	ldr	r2, [pc, #32]	; (800f8dc <prvCheckForValidListAndQueue+0x60>)
 800f8ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f8bc:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <prvCheckForValidListAndQueue+0x60>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d005      	beq.n	800f8d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f8c4:	4b05      	ldr	r3, [pc, #20]	; (800f8dc <prvCheckForValidListAndQueue+0x60>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	490b      	ldr	r1, [pc, #44]	; (800f8f8 <prvCheckForValidListAndQueue+0x7c>)
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe fd44 	bl	800e358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8d0:	f000 f970 	bl	800fbb4 <vPortExitCritical>
}
 800f8d4:	bf00      	nop
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20001294 	.word	0x20001294
 800f8e0:	20001264 	.word	0x20001264
 800f8e4:	20001278 	.word	0x20001278
 800f8e8:	2000128c 	.word	0x2000128c
 800f8ec:	20001290 	.word	0x20001290
 800f8f0:	20001340 	.word	0x20001340
 800f8f4:	200012a0 	.word	0x200012a0
 800f8f8:	08011138 	.word	0x08011138

0800f8fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3b04      	subs	r3, #4
 800f90c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3b04      	subs	r3, #4
 800f91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	f023 0201 	bic.w	r2, r3, #1
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	3b04      	subs	r3, #4
 800f92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f92c:	4a0c      	ldr	r2, [pc, #48]	; (800f960 <pxPortInitialiseStack+0x64>)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	3b14      	subs	r3, #20
 800f936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	3b04      	subs	r3, #4
 800f942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f06f 0202 	mvn.w	r2, #2
 800f94a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	3b20      	subs	r3, #32
 800f950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f952:	68fb      	ldr	r3, [r7, #12]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr
 800f960:	0800f965 	.word	0x0800f965

0800f964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f96e:	4b12      	ldr	r3, [pc, #72]	; (800f9b8 <prvTaskExitError+0x54>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f976:	d00a      	beq.n	800f98e <prvTaskExitError+0x2a>
	__asm volatile
 800f978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97c:	f383 8811 	msr	BASEPRI, r3
 800f980:	f3bf 8f6f 	isb	sy
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	60fb      	str	r3, [r7, #12]
}
 800f98a:	bf00      	nop
 800f98c:	e7fe      	b.n	800f98c <prvTaskExitError+0x28>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	60bb      	str	r3, [r7, #8]
}
 800f9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f9a2:	bf00      	nop
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d0fc      	beq.n	800f9a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9aa:	bf00      	nop
 800f9ac:	bf00      	nop
 800f9ae:	3714      	adds	r7, #20
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr
 800f9b8:	20000098 	.word	0x20000098
 800f9bc:	00000000 	.word	0x00000000

0800f9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f9c0:	4b07      	ldr	r3, [pc, #28]	; (800f9e0 <pxCurrentTCBConst2>)
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	6808      	ldr	r0, [r1, #0]
 800f9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	f380 8809 	msr	PSP, r0
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f04f 0000 	mov.w	r0, #0
 800f9d6:	f380 8811 	msr	BASEPRI, r0
 800f9da:	4770      	bx	lr
 800f9dc:	f3af 8000 	nop.w

0800f9e0 <pxCurrentTCBConst2>:
 800f9e0:	20000d64 	.word	0x20000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop

0800f9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f9e8:	4808      	ldr	r0, [pc, #32]	; (800fa0c <prvPortStartFirstTask+0x24>)
 800f9ea:	6800      	ldr	r0, [r0, #0]
 800f9ec:	6800      	ldr	r0, [r0, #0]
 800f9ee:	f380 8808 	msr	MSP, r0
 800f9f2:	f04f 0000 	mov.w	r0, #0
 800f9f6:	f380 8814 	msr	CONTROL, r0
 800f9fa:	b662      	cpsie	i
 800f9fc:	b661      	cpsie	f
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	df00      	svc	0
 800fa08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa0a:	bf00      	nop
 800fa0c:	e000ed08 	.word	0xe000ed08

0800fa10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa16:	4b46      	ldr	r3, [pc, #280]	; (800fb30 <xPortStartScheduler+0x120>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a46      	ldr	r2, [pc, #280]	; (800fb34 <xPortStartScheduler+0x124>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d10a      	bne.n	800fa36 <xPortStartScheduler+0x26>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	613b      	str	r3, [r7, #16]
}
 800fa32:	bf00      	nop
 800fa34:	e7fe      	b.n	800fa34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa36:	4b3e      	ldr	r3, [pc, #248]	; (800fb30 <xPortStartScheduler+0x120>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a3f      	ldr	r2, [pc, #252]	; (800fb38 <xPortStartScheduler+0x128>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d10a      	bne.n	800fa56 <xPortStartScheduler+0x46>
	__asm volatile
 800fa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa44:	f383 8811 	msr	BASEPRI, r3
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	60fb      	str	r3, [r7, #12]
}
 800fa52:	bf00      	nop
 800fa54:	e7fe      	b.n	800fa54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa56:	4b39      	ldr	r3, [pc, #228]	; (800fb3c <xPortStartScheduler+0x12c>)
 800fa58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	22ff      	movs	r2, #255	; 0xff
 800fa66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa70:	78fb      	ldrb	r3, [r7, #3]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	4b31      	ldr	r3, [pc, #196]	; (800fb40 <xPortStartScheduler+0x130>)
 800fa7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa7e:	4b31      	ldr	r3, [pc, #196]	; (800fb44 <xPortStartScheduler+0x134>)
 800fa80:	2207      	movs	r2, #7
 800fa82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa84:	e009      	b.n	800fa9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fa86:	4b2f      	ldr	r3, [pc, #188]	; (800fb44 <xPortStartScheduler+0x134>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	4a2d      	ldr	r2, [pc, #180]	; (800fb44 <xPortStartScheduler+0x134>)
 800fa8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faa2:	2b80      	cmp	r3, #128	; 0x80
 800faa4:	d0ef      	beq.n	800fa86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800faa6:	4b27      	ldr	r3, [pc, #156]	; (800fb44 <xPortStartScheduler+0x134>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f1c3 0307 	rsb	r3, r3, #7
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d00a      	beq.n	800fac8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	60bb      	str	r3, [r7, #8]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fac8:	4b1e      	ldr	r3, [pc, #120]	; (800fb44 <xPortStartScheduler+0x134>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	021b      	lsls	r3, r3, #8
 800face:	4a1d      	ldr	r2, [pc, #116]	; (800fb44 <xPortStartScheduler+0x134>)
 800fad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fad2:	4b1c      	ldr	r3, [pc, #112]	; (800fb44 <xPortStartScheduler+0x134>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fada:	4a1a      	ldr	r2, [pc, #104]	; (800fb44 <xPortStartScheduler+0x134>)
 800fadc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fae6:	4b18      	ldr	r3, [pc, #96]	; (800fb48 <xPortStartScheduler+0x138>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a17      	ldr	r2, [pc, #92]	; (800fb48 <xPortStartScheduler+0x138>)
 800faec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800faf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800faf2:	4b15      	ldr	r3, [pc, #84]	; (800fb48 <xPortStartScheduler+0x138>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4a14      	ldr	r2, [pc, #80]	; (800fb48 <xPortStartScheduler+0x138>)
 800faf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fafc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fafe:	f000 f8dd 	bl	800fcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb02:	4b12      	ldr	r3, [pc, #72]	; (800fb4c <xPortStartScheduler+0x13c>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb08:	f000 f8fc 	bl	800fd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb0c:	4b10      	ldr	r3, [pc, #64]	; (800fb50 <xPortStartScheduler+0x140>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a0f      	ldr	r2, [pc, #60]	; (800fb50 <xPortStartScheduler+0x140>)
 800fb12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb18:	f7ff ff66 	bl	800f9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb1c:	f7ff f82e 	bl	800eb7c <vTaskSwitchContext>
	prvTaskExitError();
 800fb20:	f7ff ff20 	bl	800f964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	e000ed00 	.word	0xe000ed00
 800fb34:	410fc271 	.word	0x410fc271
 800fb38:	410fc270 	.word	0x410fc270
 800fb3c:	e000e400 	.word	0xe000e400
 800fb40:	20001390 	.word	0x20001390
 800fb44:	20001394 	.word	0x20001394
 800fb48:	e000ed20 	.word	0xe000ed20
 800fb4c:	20000098 	.word	0x20000098
 800fb50:	e000ef34 	.word	0xe000ef34

0800fb54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	607b      	str	r3, [r7, #4]
}
 800fb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb6e:	4b0f      	ldr	r3, [pc, #60]	; (800fbac <vPortEnterCritical+0x58>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3301      	adds	r3, #1
 800fb74:	4a0d      	ldr	r2, [pc, #52]	; (800fbac <vPortEnterCritical+0x58>)
 800fb76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb78:	4b0c      	ldr	r3, [pc, #48]	; (800fbac <vPortEnterCritical+0x58>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d10f      	bne.n	800fba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb80:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <vPortEnterCritical+0x5c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00a      	beq.n	800fba0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	603b      	str	r3, [r7, #0]
}
 800fb9c:	bf00      	nop
 800fb9e:	e7fe      	b.n	800fb9e <vPortEnterCritical+0x4a>
	}
}
 800fba0:	bf00      	nop
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	20000098 	.word	0x20000098
 800fbb0:	e000ed04 	.word	0xe000ed04

0800fbb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbba:	4b12      	ldr	r3, [pc, #72]	; (800fc04 <vPortExitCritical+0x50>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10a      	bne.n	800fbd8 <vPortExitCritical+0x24>
	__asm volatile
 800fbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc6:	f383 8811 	msr	BASEPRI, r3
 800fbca:	f3bf 8f6f 	isb	sy
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	607b      	str	r3, [r7, #4]
}
 800fbd4:	bf00      	nop
 800fbd6:	e7fe      	b.n	800fbd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fbd8:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <vPortExitCritical+0x50>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	4a09      	ldr	r2, [pc, #36]	; (800fc04 <vPortExitCritical+0x50>)
 800fbe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbe2:	4b08      	ldr	r3, [pc, #32]	; (800fc04 <vPortExitCritical+0x50>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d105      	bne.n	800fbf6 <vPortExitCritical+0x42>
 800fbea:	2300      	movs	r3, #0
 800fbec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	f383 8811 	msr	BASEPRI, r3
}
 800fbf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fbf6:	bf00      	nop
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	20000098 	.word	0x20000098
	...

0800fc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc10:	f3ef 8009 	mrs	r0, PSP
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <pxCurrentTCBConst>)
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	f01e 0f10 	tst.w	lr, #16
 800fc20:	bf08      	it	eq
 800fc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2a:	6010      	str	r0, [r2, #0]
 800fc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc34:	f380 8811 	msr	BASEPRI, r0
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f7fe ff9c 	bl	800eb7c <vTaskSwitchContext>
 800fc44:	f04f 0000 	mov.w	r0, #0
 800fc48:	f380 8811 	msr	BASEPRI, r0
 800fc4c:	bc09      	pop	{r0, r3}
 800fc4e:	6819      	ldr	r1, [r3, #0]
 800fc50:	6808      	ldr	r0, [r1, #0]
 800fc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc56:	f01e 0f10 	tst.w	lr, #16
 800fc5a:	bf08      	it	eq
 800fc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc60:	f380 8809 	msr	PSP, r0
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	f3af 8000 	nop.w

0800fc70 <pxCurrentTCBConst>:
 800fc70:	20000d64 	.word	0x20000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc74:	bf00      	nop
 800fc76:	bf00      	nop

0800fc78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	607b      	str	r3, [r7, #4]
}
 800fc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc92:	f7fe feb9 	bl	800ea08 <xTaskIncrementTick>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc9c:	4b06      	ldr	r3, [pc, #24]	; (800fcb8 <xPortSysTickHandler+0x40>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	2300      	movs	r3, #0
 800fca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	f383 8811 	msr	BASEPRI, r3
}
 800fcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <vPortSetupTimerInterrupt+0x38>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fccc:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <vPortSetupTimerInterrupt+0x3c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a0a      	ldr	r2, [pc, #40]	; (800fcfc <vPortSetupTimerInterrupt+0x40>)
 800fcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd6:	099b      	lsrs	r3, r3, #6
 800fcd8:	4a09      	ldr	r2, [pc, #36]	; (800fd00 <vPortSetupTimerInterrupt+0x44>)
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcde:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fce0:	2207      	movs	r2, #7
 800fce2:	601a      	str	r2, [r3, #0]
}
 800fce4:	bf00      	nop
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	e000e010 	.word	0xe000e010
 800fcf4:	e000e018 	.word	0xe000e018
 800fcf8:	2000006c 	.word	0x2000006c
 800fcfc:	10624dd3 	.word	0x10624dd3
 800fd00:	e000e014 	.word	0xe000e014

0800fd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd14 <vPortEnableVFP+0x10>
 800fd08:	6801      	ldr	r1, [r0, #0]
 800fd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd0e:	6001      	str	r1, [r0, #0]
 800fd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd12:	bf00      	nop
 800fd14:	e000ed88 	.word	0xe000ed88

0800fd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd1e:	f3ef 8305 	mrs	r3, IPSR
 800fd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b0f      	cmp	r3, #15
 800fd28:	d914      	bls.n	800fd54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd2a:	4a17      	ldr	r2, [pc, #92]	; (800fd88 <vPortValidateInterruptPriority+0x70>)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd34:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <vPortValidateInterruptPriority+0x74>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	7afa      	ldrb	r2, [r7, #11]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d20a      	bcs.n	800fd54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	607b      	str	r3, [r7, #4]
}
 800fd50:	bf00      	nop
 800fd52:	e7fe      	b.n	800fd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <vPortValidateInterruptPriority+0x78>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd5c:	4b0d      	ldr	r3, [pc, #52]	; (800fd94 <vPortValidateInterruptPriority+0x7c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d90a      	bls.n	800fd7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd68:	f383 8811 	msr	BASEPRI, r3
 800fd6c:	f3bf 8f6f 	isb	sy
 800fd70:	f3bf 8f4f 	dsb	sy
 800fd74:	603b      	str	r3, [r7, #0]
}
 800fd76:	bf00      	nop
 800fd78:	e7fe      	b.n	800fd78 <vPortValidateInterruptPriority+0x60>
	}
 800fd7a:	bf00      	nop
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	e000e3f0 	.word	0xe000e3f0
 800fd8c:	20001390 	.word	0x20001390
 800fd90:	e000ed0c 	.word	0xe000ed0c
 800fd94:	20001394 	.word	0x20001394

0800fd98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08a      	sub	sp, #40	; 0x28
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fda0:	2300      	movs	r3, #0
 800fda2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fda4:	f7fe fd74 	bl	800e890 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fda8:	4b5d      	ldr	r3, [pc, #372]	; (800ff20 <pvPortMalloc+0x188>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fdb0:	f000 f924 	bl	800fffc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdb4:	4b5b      	ldr	r3, [pc, #364]	; (800ff24 <pvPortMalloc+0x18c>)
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4013      	ands	r3, r2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f040 8093 	bne.w	800fee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d01d      	beq.n	800fe04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fdc8:	2208      	movs	r2, #8
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4413      	add	r3, r2
 800fdce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f003 0307 	and.w	r3, r3, #7
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d014      	beq.n	800fe04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f023 0307 	bic.w	r3, r3, #7
 800fde0:	3308      	adds	r3, #8
 800fde2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00a      	beq.n	800fe04 <pvPortMalloc+0x6c>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	617b      	str	r3, [r7, #20]
}
 800fe00:	bf00      	nop
 800fe02:	e7fe      	b.n	800fe02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d06e      	beq.n	800fee8 <pvPortMalloc+0x150>
 800fe0a:	4b47      	ldr	r3, [pc, #284]	; (800ff28 <pvPortMalloc+0x190>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d869      	bhi.n	800fee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe14:	4b45      	ldr	r3, [pc, #276]	; (800ff2c <pvPortMalloc+0x194>)
 800fe16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe18:	4b44      	ldr	r3, [pc, #272]	; (800ff2c <pvPortMalloc+0x194>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe1e:	e004      	b.n	800fe2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fe20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d903      	bls.n	800fe3c <pvPortMalloc+0xa4>
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1f1      	bne.n	800fe20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe3c:	4b38      	ldr	r3, [pc, #224]	; (800ff20 <pvPortMalloc+0x188>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d050      	beq.n	800fee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe46:	6a3b      	ldr	r3, [r7, #32]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2208      	movs	r2, #8
 800fe4c:	4413      	add	r3, r2
 800fe4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	6a3b      	ldr	r3, [r7, #32]
 800fe56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	1ad2      	subs	r2, r2, r3
 800fe60:	2308      	movs	r3, #8
 800fe62:	005b      	lsls	r3, r3, #1
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d91f      	bls.n	800fea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	f003 0307 	and.w	r3, r3, #7
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00a      	beq.n	800fe90 <pvPortMalloc+0xf8>
	__asm volatile
 800fe7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7e:	f383 8811 	msr	BASEPRI, r3
 800fe82:	f3bf 8f6f 	isb	sy
 800fe86:	f3bf 8f4f 	dsb	sy
 800fe8a:	613b      	str	r3, [r7, #16]
}
 800fe8c:	bf00      	nop
 800fe8e:	e7fe      	b.n	800fe8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fea2:	69b8      	ldr	r0, [r7, #24]
 800fea4:	f000 f90c 	bl	80100c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fea8:	4b1f      	ldr	r3, [pc, #124]	; (800ff28 <pvPortMalloc+0x190>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	4a1d      	ldr	r2, [pc, #116]	; (800ff28 <pvPortMalloc+0x190>)
 800feb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800feb6:	4b1c      	ldr	r3, [pc, #112]	; (800ff28 <pvPortMalloc+0x190>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	4b1d      	ldr	r3, [pc, #116]	; (800ff30 <pvPortMalloc+0x198>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d203      	bcs.n	800feca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fec2:	4b19      	ldr	r3, [pc, #100]	; (800ff28 <pvPortMalloc+0x190>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a1a      	ldr	r2, [pc, #104]	; (800ff30 <pvPortMalloc+0x198>)
 800fec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	4b15      	ldr	r3, [pc, #84]	; (800ff24 <pvPortMalloc+0x18c>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	431a      	orrs	r2, r3
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fede:	4b15      	ldr	r3, [pc, #84]	; (800ff34 <pvPortMalloc+0x19c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3301      	adds	r3, #1
 800fee4:	4a13      	ldr	r2, [pc, #76]	; (800ff34 <pvPortMalloc+0x19c>)
 800fee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fee8:	f7fe fce0 	bl	800e8ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fef2:	f7f0 fb61 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	f003 0307 	and.w	r3, r3, #7
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00a      	beq.n	800ff16 <pvPortMalloc+0x17e>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	60fb      	str	r3, [r7, #12]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <pvPortMalloc+0x17c>
	return pvReturn;
 800ff16:	69fb      	ldr	r3, [r7, #28]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3728      	adds	r7, #40	; 0x28
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	200093a0 	.word	0x200093a0
 800ff24:	200093b4 	.word	0x200093b4
 800ff28:	200093a4 	.word	0x200093a4
 800ff2c:	20009398 	.word	0x20009398
 800ff30:	200093a8 	.word	0x200093a8
 800ff34:	200093ac 	.word	0x200093ac

0800ff38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d04d      	beq.n	800ffe6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff4a:	2308      	movs	r3, #8
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4413      	add	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	4b24      	ldr	r3, [pc, #144]	; (800fff0 <vPortFree+0xb8>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4013      	ands	r3, r2
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10a      	bne.n	800ff7c <vPortFree+0x44>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	60fb      	str	r3, [r7, #12]
}
 800ff78:	bf00      	nop
 800ff7a:	e7fe      	b.n	800ff7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00a      	beq.n	800ff9a <vPortFree+0x62>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff88:	f383 8811 	msr	BASEPRI, r3
 800ff8c:	f3bf 8f6f 	isb	sy
 800ff90:	f3bf 8f4f 	dsb	sy
 800ff94:	60bb      	str	r3, [r7, #8]
}
 800ff96:	bf00      	nop
 800ff98:	e7fe      	b.n	800ff98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	685a      	ldr	r2, [r3, #4]
 800ff9e:	4b14      	ldr	r3, [pc, #80]	; (800fff0 <vPortFree+0xb8>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d01e      	beq.n	800ffe6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d11a      	bne.n	800ffe6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	685a      	ldr	r2, [r3, #4]
 800ffb4:	4b0e      	ldr	r3, [pc, #56]	; (800fff0 <vPortFree+0xb8>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	43db      	mvns	r3, r3
 800ffba:	401a      	ands	r2, r3
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffc0:	f7fe fc66 	bl	800e890 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	4b0a      	ldr	r3, [pc, #40]	; (800fff4 <vPortFree+0xbc>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4413      	add	r3, r2
 800ffce:	4a09      	ldr	r2, [pc, #36]	; (800fff4 <vPortFree+0xbc>)
 800ffd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffd2:	6938      	ldr	r0, [r7, #16]
 800ffd4:	f000 f874 	bl	80100c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ffd8:	4b07      	ldr	r3, [pc, #28]	; (800fff8 <vPortFree+0xc0>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	4a06      	ldr	r2, [pc, #24]	; (800fff8 <vPortFree+0xc0>)
 800ffe0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ffe2:	f7fe fc63 	bl	800e8ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ffe6:	bf00      	nop
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	200093b4 	.word	0x200093b4
 800fff4:	200093a4 	.word	0x200093a4
 800fff8:	200093b0 	.word	0x200093b0

0800fffc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010006:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010008:	4b27      	ldr	r3, [pc, #156]	; (80100a8 <prvHeapInit+0xac>)
 801000a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f003 0307 	and.w	r3, r3, #7
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00c      	beq.n	8010030 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	3307      	adds	r3, #7
 801001a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f023 0307 	bic.w	r3, r3, #7
 8010022:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	4a1f      	ldr	r2, [pc, #124]	; (80100a8 <prvHeapInit+0xac>)
 801002c:	4413      	add	r3, r2
 801002e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010034:	4a1d      	ldr	r2, [pc, #116]	; (80100ac <prvHeapInit+0xb0>)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801003a:	4b1c      	ldr	r3, [pc, #112]	; (80100ac <prvHeapInit+0xb0>)
 801003c:	2200      	movs	r2, #0
 801003e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	4413      	add	r3, r2
 8010046:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010048:	2208      	movs	r2, #8
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	1a9b      	subs	r3, r3, r2
 801004e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f023 0307 	bic.w	r3, r3, #7
 8010056:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	4a15      	ldr	r2, [pc, #84]	; (80100b0 <prvHeapInit+0xb4>)
 801005c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801005e:	4b14      	ldr	r3, [pc, #80]	; (80100b0 <prvHeapInit+0xb4>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2200      	movs	r2, #0
 8010064:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010066:	4b12      	ldr	r3, [pc, #72]	; (80100b0 <prvHeapInit+0xb4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2200      	movs	r2, #0
 801006c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	1ad2      	subs	r2, r2, r3
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801007c:	4b0c      	ldr	r3, [pc, #48]	; (80100b0 <prvHeapInit+0xb4>)
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	4a0a      	ldr	r2, [pc, #40]	; (80100b4 <prvHeapInit+0xb8>)
 801008a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	4a09      	ldr	r2, [pc, #36]	; (80100b8 <prvHeapInit+0xbc>)
 8010092:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010094:	4b09      	ldr	r3, [pc, #36]	; (80100bc <prvHeapInit+0xc0>)
 8010096:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801009a:	601a      	str	r2, [r3, #0]
}
 801009c:	bf00      	nop
 801009e:	3714      	adds	r7, #20
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr
 80100a8:	20001398 	.word	0x20001398
 80100ac:	20009398 	.word	0x20009398
 80100b0:	200093a0 	.word	0x200093a0
 80100b4:	200093a8 	.word	0x200093a8
 80100b8:	200093a4 	.word	0x200093a4
 80100bc:	200093b4 	.word	0x200093b4

080100c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100c8:	4b28      	ldr	r3, [pc, #160]	; (801016c <prvInsertBlockIntoFreeList+0xac>)
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	e002      	b.n	80100d4 <prvInsertBlockIntoFreeList+0x14>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d8f7      	bhi.n	80100ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	4413      	add	r3, r2
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d108      	bne.n	8010102 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	441a      	add	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	68ba      	ldr	r2, [r7, #8]
 801010c:	441a      	add	r2, r3
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d118      	bne.n	8010148 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	4b15      	ldr	r3, [pc, #84]	; (8010170 <prvInsertBlockIntoFreeList+0xb0>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d00d      	beq.n	801013e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	441a      	add	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	e008      	b.n	8010150 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801013e:	4b0c      	ldr	r3, [pc, #48]	; (8010170 <prvInsertBlockIntoFreeList+0xb0>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	e003      	b.n	8010150 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	429a      	cmp	r2, r3
 8010156:	d002      	beq.n	801015e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801015e:	bf00      	nop
 8010160:	3714      	adds	r7, #20
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	20009398 	.word	0x20009398
 8010170:	200093a0 	.word	0x200093a0

08010174 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010178:	2200      	movs	r2, #0
 801017a:	490e      	ldr	r1, [pc, #56]	; (80101b4 <MX_USB_HOST_Init+0x40>)
 801017c:	480e      	ldr	r0, [pc, #56]	; (80101b8 <MX_USB_HOST_Init+0x44>)
 801017e:	f7fb f9cf 	bl	800b520 <USBH_Init>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010188:	f7f1 f824 	bl	80011d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801018c:	490b      	ldr	r1, [pc, #44]	; (80101bc <MX_USB_HOST_Init+0x48>)
 801018e:	480a      	ldr	r0, [pc, #40]	; (80101b8 <MX_USB_HOST_Init+0x44>)
 8010190:	f7fb fa76 	bl	800b680 <USBH_RegisterClass>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d001      	beq.n	801019e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801019a:	f7f1 f81b 	bl	80011d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801019e:	4806      	ldr	r0, [pc, #24]	; (80101b8 <MX_USB_HOST_Init+0x44>)
 80101a0:	f7fb fafa 	bl	800b798 <USBH_Start>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80101aa:	f7f1 f813 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80101ae:	bf00      	nop
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	080101c1 	.word	0x080101c1
 80101b8:	200093b8 	.word	0x200093b8
 80101bc:	20000078 	.word	0x20000078

080101c0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	460b      	mov	r3, r1
 80101ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80101cc:	78fb      	ldrb	r3, [r7, #3]
 80101ce:	3b01      	subs	r3, #1
 80101d0:	2b04      	cmp	r3, #4
 80101d2:	d819      	bhi.n	8010208 <USBH_UserProcess+0x48>
 80101d4:	a201      	add	r2, pc, #4	; (adr r2, 80101dc <USBH_UserProcess+0x1c>)
 80101d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101da:	bf00      	nop
 80101dc:	08010209 	.word	0x08010209
 80101e0:	080101f9 	.word	0x080101f9
 80101e4:	08010209 	.word	0x08010209
 80101e8:	08010201 	.word	0x08010201
 80101ec:	080101f1 	.word	0x080101f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80101f0:	4b09      	ldr	r3, [pc, #36]	; (8010218 <USBH_UserProcess+0x58>)
 80101f2:	2203      	movs	r2, #3
 80101f4:	701a      	strb	r2, [r3, #0]
  break;
 80101f6:	e008      	b.n	801020a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80101f8:	4b07      	ldr	r3, [pc, #28]	; (8010218 <USBH_UserProcess+0x58>)
 80101fa:	2202      	movs	r2, #2
 80101fc:	701a      	strb	r2, [r3, #0]
  break;
 80101fe:	e004      	b.n	801020a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010200:	4b05      	ldr	r3, [pc, #20]	; (8010218 <USBH_UserProcess+0x58>)
 8010202:	2201      	movs	r2, #1
 8010204:	701a      	strb	r2, [r3, #0]
  break;
 8010206:	e000      	b.n	801020a <USBH_UserProcess+0x4a>

  default:
  break;
 8010208:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801020a:	bf00      	nop
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	2000979c 	.word	0x2000979c

0801021c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08a      	sub	sp, #40	; 0x28
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010224:	f107 0314 	add.w	r3, r7, #20
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
 801022c:	605a      	str	r2, [r3, #4]
 801022e:	609a      	str	r2, [r3, #8]
 8010230:	60da      	str	r2, [r3, #12]
 8010232:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a24      	ldr	r2, [pc, #144]	; (80102cc <HAL_HCD_MspInit+0xb0>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d141      	bne.n	80102c2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801023e:	2300      	movs	r3, #0
 8010240:	613b      	str	r3, [r7, #16]
 8010242:	4b23      	ldr	r3, [pc, #140]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 8010244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010246:	4a22      	ldr	r2, [pc, #136]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 8010248:	f043 0302 	orr.w	r3, r3, #2
 801024c:	6313      	str	r3, [r2, #48]	; 0x30
 801024e:	4b20      	ldr	r3, [pc, #128]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 8010250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010252:	f003 0302 	and.w	r3, r3, #2
 8010256:	613b      	str	r3, [r7, #16]
 8010258:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801025a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801025e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010260:	2302      	movs	r3, #2
 8010262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010264:	2300      	movs	r3, #0
 8010266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010268:	2300      	movs	r3, #0
 801026a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801026c:	230c      	movs	r3, #12
 801026e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010270:	f107 0314 	add.w	r3, r7, #20
 8010274:	4619      	mov	r1, r3
 8010276:	4817      	ldr	r0, [pc, #92]	; (80102d4 <HAL_HCD_MspInit+0xb8>)
 8010278:	f7f3 fd68 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801027c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010282:	2300      	movs	r3, #0
 8010284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010286:	2300      	movs	r3, #0
 8010288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801028a:	f107 0314 	add.w	r3, r7, #20
 801028e:	4619      	mov	r1, r3
 8010290:	4810      	ldr	r0, [pc, #64]	; (80102d4 <HAL_HCD_MspInit+0xb8>)
 8010292:	f7f3 fd5b 	bl	8003d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010296:	2300      	movs	r3, #0
 8010298:	60fb      	str	r3, [r7, #12]
 801029a:	4b0d      	ldr	r3, [pc, #52]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 801029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801029e:	4a0c      	ldr	r2, [pc, #48]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 80102a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102a4:	6313      	str	r3, [r2, #48]	; 0x30
 80102a6:	4b0a      	ldr	r3, [pc, #40]	; (80102d0 <HAL_HCD_MspInit+0xb4>)
 80102a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80102b2:	2200      	movs	r2, #0
 80102b4:	2105      	movs	r1, #5
 80102b6:	204d      	movs	r0, #77	; 0x4d
 80102b8:	f7f3 f958 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80102bc:	204d      	movs	r0, #77	; 0x4d
 80102be:	f7f3 f971 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80102c2:	bf00      	nop
 80102c4:	3728      	adds	r7, #40	; 0x28
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	40040000 	.word	0x40040000
 80102d0:	40023800 	.word	0x40023800
 80102d4:	40020400 	.word	0x40020400

080102d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fb ff0d 	bl	800c106 <USBH_LL_IncTimer>
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010302:	4618      	mov	r0, r3
 8010304:	f7fb ff51 	bl	800c1aa <USBH_LL_Connect>
}
 8010308:	bf00      	nop
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801031e:	4618      	mov	r0, r3
 8010320:	f7fb ff66 	bl	800c1f0 <USBH_LL_Disconnect>
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	70fb      	strb	r3, [r7, #3]
 8010338:	4613      	mov	r3, r2
 801033a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010342:	4618      	mov	r0, r3
 8010344:	f7fb ff9d 	bl	800c282 <USBH_LL_NotifyURBChange>
#endif
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801035e:	4618      	mov	r0, r3
 8010360:	f7fb fefb 	bl	800c15a <USBH_LL_PortEnabled>
}
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801037a:	4618      	mov	r0, r3
 801037c:	f7fb ff07 	bl	800c18e <USBH_LL_PortDisabled>
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010396:	2b00      	cmp	r3, #0
 8010398:	d132      	bne.n	8010400 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801039a:	4a1c      	ldr	r2, [pc, #112]	; (801040c <USBH_LL_Init+0x84>)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	4a19      	ldr	r2, [pc, #100]	; (801040c <USBH_LL_Init+0x84>)
 80103a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80103aa:	4b18      	ldr	r3, [pc, #96]	; (801040c <USBH_LL_Init+0x84>)
 80103ac:	4a18      	ldr	r2, [pc, #96]	; (8010410 <USBH_LL_Init+0x88>)
 80103ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80103b0:	4b16      	ldr	r3, [pc, #88]	; (801040c <USBH_LL_Init+0x84>)
 80103b2:	220c      	movs	r2, #12
 80103b4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80103b6:	4b15      	ldr	r3, [pc, #84]	; (801040c <USBH_LL_Init+0x84>)
 80103b8:	2201      	movs	r2, #1
 80103ba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80103bc:	4b13      	ldr	r3, [pc, #76]	; (801040c <USBH_LL_Init+0x84>)
 80103be:	2200      	movs	r2, #0
 80103c0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80103c2:	4b12      	ldr	r3, [pc, #72]	; (801040c <USBH_LL_Init+0x84>)
 80103c4:	2202      	movs	r2, #2
 80103c6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80103c8:	4b10      	ldr	r3, [pc, #64]	; (801040c <USBH_LL_Init+0x84>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80103ce:	4b0f      	ldr	r3, [pc, #60]	; (801040c <USBH_LL_Init+0x84>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80103d4:	4b0d      	ldr	r3, [pc, #52]	; (801040c <USBH_LL_Init+0x84>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80103da:	4b0c      	ldr	r3, [pc, #48]	; (801040c <USBH_LL_Init+0x84>)
 80103dc:	2200      	movs	r2, #0
 80103de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80103e0:	480a      	ldr	r0, [pc, #40]	; (801040c <USBH_LL_Init+0x84>)
 80103e2:	f7f3 ff84 	bl	80042ee <HAL_HCD_Init>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80103ec:	f7f0 fef2 	bl	80011d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80103f0:	4806      	ldr	r0, [pc, #24]	; (801040c <USBH_LL_Init+0x84>)
 80103f2:	f7f4 fb68 	bl	8004ac6 <HAL_HCD_GetCurrentFrame>
 80103f6:	4603      	mov	r3, r0
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7fb fe74 	bl	800c0e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010400:	2300      	movs	r3, #0
}
 8010402:	4618      	mov	r0, r3
 8010404:	3708      	adds	r7, #8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	200097a0 	.word	0x200097a0
 8010410:	40040000 	.word	0x40040000

08010414 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801042a:	4618      	mov	r0, r3
 801042c:	f7f4 fad5 	bl	80049da <HAL_HCD_Start>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f95c 	bl	80106f4 <USBH_Get_USB_Status>
 801043c:	4603      	mov	r3, r0
 801043e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010440:	7bbb      	ldrb	r3, [r7, #14]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010456:	2300      	movs	r3, #0
 8010458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010460:	4618      	mov	r0, r3
 8010462:	f7f4 fadd 	bl	8004a20 <HAL_HCD_Stop>
 8010466:	4603      	mov	r3, r0
 8010468:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801046a:	7bfb      	ldrb	r3, [r7, #15]
 801046c:	4618      	mov	r0, r3
 801046e:	f000 f941 	bl	80106f4 <USBH_Get_USB_Status>
 8010472:	4603      	mov	r3, r0
 8010474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010476:	7bbb      	ldrb	r3, [r7, #14]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010488:	2301      	movs	r3, #1
 801048a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010492:	4618      	mov	r0, r3
 8010494:	f7f4 fb25 	bl	8004ae2 <HAL_HCD_GetCurrentSpeed>
 8010498:	4603      	mov	r3, r0
 801049a:	2b02      	cmp	r3, #2
 801049c:	d00c      	beq.n	80104b8 <USBH_LL_GetSpeed+0x38>
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d80d      	bhi.n	80104be <USBH_LL_GetSpeed+0x3e>
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d002      	beq.n	80104ac <USBH_LL_GetSpeed+0x2c>
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d003      	beq.n	80104b2 <USBH_LL_GetSpeed+0x32>
 80104aa:	e008      	b.n	80104be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80104ac:	2300      	movs	r3, #0
 80104ae:	73fb      	strb	r3, [r7, #15]
    break;
 80104b0:	e008      	b.n	80104c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80104b2:	2301      	movs	r3, #1
 80104b4:	73fb      	strb	r3, [r7, #15]
    break;
 80104b6:	e005      	b.n	80104c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80104b8:	2302      	movs	r3, #2
 80104ba:	73fb      	strb	r3, [r7, #15]
    break;
 80104bc:	e002      	b.n	80104c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80104be:	2301      	movs	r3, #1
 80104c0:	73fb      	strb	r3, [r7, #15]
    break;
 80104c2:	bf00      	nop
  }
  return  speed;
 80104c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f4 fab8 	bl	8004a5a <HAL_HCD_ResetPort>
 80104ea:	4603      	mov	r3, r0
 80104ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f000 f8ff 	bl	80106f4 <USBH_Get_USB_Status>
 80104f6:	4603      	mov	r3, r0
 80104f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010516:	78fa      	ldrb	r2, [r7, #3]
 8010518:	4611      	mov	r1, r2
 801051a:	4618      	mov	r0, r3
 801051c:	f7f4 fabf 	bl	8004a9e <HAL_HCD_HC_GetXferCount>
 8010520:	4603      	mov	r3, r0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3708      	adds	r7, #8
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}

0801052a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801052a:	b590      	push	{r4, r7, lr}
 801052c:	b089      	sub	sp, #36	; 0x24
 801052e:	af04      	add	r7, sp, #16
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	4608      	mov	r0, r1
 8010534:	4611      	mov	r1, r2
 8010536:	461a      	mov	r2, r3
 8010538:	4603      	mov	r3, r0
 801053a:	70fb      	strb	r3, [r7, #3]
 801053c:	460b      	mov	r3, r1
 801053e:	70bb      	strb	r3, [r7, #2]
 8010540:	4613      	mov	r3, r2
 8010542:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010544:	2300      	movs	r3, #0
 8010546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010552:	787c      	ldrb	r4, [r7, #1]
 8010554:	78ba      	ldrb	r2, [r7, #2]
 8010556:	78f9      	ldrb	r1, [r7, #3]
 8010558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801055a:	9302      	str	r3, [sp, #8]
 801055c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	4623      	mov	r3, r4
 801056a:	f7f3 ff22 	bl	80043b2 <HAL_HCD_HC_Init>
 801056e:	4603      	mov	r3, r0
 8010570:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010572:	7bfb      	ldrb	r3, [r7, #15]
 8010574:	4618      	mov	r0, r3
 8010576:	f000 f8bd 	bl	80106f4 <USBH_Get_USB_Status>
 801057a:	4603      	mov	r3, r0
 801057c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801057e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3714      	adds	r7, #20
 8010584:	46bd      	mov	sp, r7
 8010586:	bd90      	pop	{r4, r7, pc}

08010588 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	460b      	mov	r3, r1
 8010592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010598:	2300      	movs	r3, #0
 801059a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105a2:	78fa      	ldrb	r2, [r7, #3]
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f3 ff92 	bl	80044d0 <HAL_HCD_HC_Halt>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f000 f89e 	bl	80106f4 <USBH_Get_USB_Status>
 80105b8:	4603      	mov	r3, r0
 80105ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80105c6:	b590      	push	{r4, r7, lr}
 80105c8:	b089      	sub	sp, #36	; 0x24
 80105ca:	af04      	add	r7, sp, #16
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	4608      	mov	r0, r1
 80105d0:	4611      	mov	r1, r2
 80105d2:	461a      	mov	r2, r3
 80105d4:	4603      	mov	r3, r0
 80105d6:	70fb      	strb	r3, [r7, #3]
 80105d8:	460b      	mov	r3, r1
 80105da:	70bb      	strb	r3, [r7, #2]
 80105dc:	4613      	mov	r3, r2
 80105de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80105ee:	787c      	ldrb	r4, [r7, #1]
 80105f0:	78ba      	ldrb	r2, [r7, #2]
 80105f2:	78f9      	ldrb	r1, [r7, #3]
 80105f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80105f8:	9303      	str	r3, [sp, #12]
 80105fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105fc:	9302      	str	r3, [sp, #8]
 80105fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010606:	9300      	str	r3, [sp, #0]
 8010608:	4623      	mov	r3, r4
 801060a:	f7f3 ff85 	bl	8004518 <HAL_HCD_HC_SubmitRequest>
 801060e:	4603      	mov	r3, r0
 8010610:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010612:	7bfb      	ldrb	r3, [r7, #15]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 f86d 	bl	80106f4 <USBH_Get_USB_Status>
 801061a:	4603      	mov	r3, r0
 801061c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801061e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	bd90      	pop	{r4, r7, pc}

08010628 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801063a:	78fa      	ldrb	r2, [r7, #3]
 801063c:	4611      	mov	r1, r2
 801063e:	4618      	mov	r0, r3
 8010640:	f7f4 fa19 	bl	8004a76 <HAL_HCD_HC_GetURBState>
 8010644:	4603      	mov	r3, r0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010660:	2b00      	cmp	r3, #0
 8010662:	d103      	bne.n	801066c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010664:	78fb      	ldrb	r3, [r7, #3]
 8010666:	4618      	mov	r0, r3
 8010668:	f000 f870 	bl	801074c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801066c:	20c8      	movs	r0, #200	; 0xc8
 801066e:	f7f2 fea1 	bl	80033b4 <HAL_Delay>
  return USBH_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	460b      	mov	r3, r1
 8010686:	70fb      	strb	r3, [r7, #3]
 8010688:	4613      	mov	r3, r2
 801068a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010692:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010694:	78fb      	ldrb	r3, [r7, #3]
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	212c      	movs	r1, #44	; 0x2c
 801069a:	fb01 f303 	mul.w	r3, r1, r3
 801069e:	4413      	add	r3, r2
 80106a0:	333b      	adds	r3, #59	; 0x3b
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d009      	beq.n	80106bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80106a8:	78fb      	ldrb	r3, [r7, #3]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	212c      	movs	r1, #44	; 0x2c
 80106ae:	fb01 f303 	mul.w	r3, r1, r3
 80106b2:	4413      	add	r3, r2
 80106b4:	3354      	adds	r3, #84	; 0x54
 80106b6:	78ba      	ldrb	r2, [r7, #2]
 80106b8:	701a      	strb	r2, [r3, #0]
 80106ba:	e008      	b.n	80106ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80106bc:	78fb      	ldrb	r3, [r7, #3]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	212c      	movs	r1, #44	; 0x2c
 80106c2:	fb01 f303 	mul.w	r3, r1, r3
 80106c6:	4413      	add	r3, r2
 80106c8:	3355      	adds	r3, #85	; 0x55
 80106ca:	78ba      	ldrb	r2, [r7, #2]
 80106cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80106ce:	2300      	movs	r3, #0
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3714      	adds	r7, #20
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7f2 fe65 	bl	80033b4 <HAL_Delay>
}
 80106ea:	bf00      	nop
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
	...

080106f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	2b03      	cmp	r3, #3
 8010706:	d817      	bhi.n	8010738 <USBH_Get_USB_Status+0x44>
 8010708:	a201      	add	r2, pc, #4	; (adr r2, 8010710 <USBH_Get_USB_Status+0x1c>)
 801070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070e:	bf00      	nop
 8010710:	08010721 	.word	0x08010721
 8010714:	08010727 	.word	0x08010727
 8010718:	0801072d 	.word	0x0801072d
 801071c:	08010733 	.word	0x08010733
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	73fb      	strb	r3, [r7, #15]
    break;
 8010724:	e00b      	b.n	801073e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010726:	2302      	movs	r3, #2
 8010728:	73fb      	strb	r3, [r7, #15]
    break;
 801072a:	e008      	b.n	801073e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801072c:	2301      	movs	r3, #1
 801072e:	73fb      	strb	r3, [r7, #15]
    break;
 8010730:	e005      	b.n	801073e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010732:	2302      	movs	r3, #2
 8010734:	73fb      	strb	r3, [r7, #15]
    break;
 8010736:	e002      	b.n	801073e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010738:	2302      	movs	r3, #2
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	bf00      	nop
  }
  return usb_status;
 801073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	4603      	mov	r3, r0
 8010754:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801075a:	79fb      	ldrb	r3, [r7, #7]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d102      	bne.n	8010766 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010760:	2301      	movs	r3, #1
 8010762:	73fb      	strb	r3, [r7, #15]
 8010764:	e001      	b.n	801076a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010766:	2300      	movs	r3, #0
 8010768:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801076a:	7bfb      	ldrb	r3, [r7, #15]
 801076c:	461a      	mov	r2, r3
 801076e:	2110      	movs	r1, #16
 8010770:	4803      	ldr	r0, [pc, #12]	; (8010780 <MX_DriverVbusHS+0x34>)
 8010772:	f7f3 fda3 	bl	80042bc <HAL_GPIO_WritePin>
}
 8010776:	bf00      	nop
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	40020800 	.word	0x40020800

08010784 <__errno>:
 8010784:	4b01      	ldr	r3, [pc, #4]	; (801078c <__errno+0x8>)
 8010786:	6818      	ldr	r0, [r3, #0]
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	2000009c 	.word	0x2000009c

08010790 <__libc_init_array>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	4d0d      	ldr	r5, [pc, #52]	; (80107c8 <__libc_init_array+0x38>)
 8010794:	4c0d      	ldr	r4, [pc, #52]	; (80107cc <__libc_init_array+0x3c>)
 8010796:	1b64      	subs	r4, r4, r5
 8010798:	10a4      	asrs	r4, r4, #2
 801079a:	2600      	movs	r6, #0
 801079c:	42a6      	cmp	r6, r4
 801079e:	d109      	bne.n	80107b4 <__libc_init_array+0x24>
 80107a0:	4d0b      	ldr	r5, [pc, #44]	; (80107d0 <__libc_init_array+0x40>)
 80107a2:	4c0c      	ldr	r4, [pc, #48]	; (80107d4 <__libc_init_array+0x44>)
 80107a4:	f000 fc9e 	bl	80110e4 <_init>
 80107a8:	1b64      	subs	r4, r4, r5
 80107aa:	10a4      	asrs	r4, r4, #2
 80107ac:	2600      	movs	r6, #0
 80107ae:	42a6      	cmp	r6, r4
 80107b0:	d105      	bne.n	80107be <__libc_init_array+0x2e>
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80107b8:	4798      	blx	r3
 80107ba:	3601      	adds	r6, #1
 80107bc:	e7ee      	b.n	801079c <__libc_init_array+0xc>
 80107be:	f855 3b04 	ldr.w	r3, [r5], #4
 80107c2:	4798      	blx	r3
 80107c4:	3601      	adds	r6, #1
 80107c6:	e7f2      	b.n	80107ae <__libc_init_array+0x1e>
 80107c8:	08061e48 	.word	0x08061e48
 80107cc:	08061e48 	.word	0x08061e48
 80107d0:	08061e48 	.word	0x08061e48
 80107d4:	08061e4c 	.word	0x08061e4c

080107d8 <malloc>:
 80107d8:	4b02      	ldr	r3, [pc, #8]	; (80107e4 <malloc+0xc>)
 80107da:	4601      	mov	r1, r0
 80107dc:	6818      	ldr	r0, [r3, #0]
 80107de:	f000 b88d 	b.w	80108fc <_malloc_r>
 80107e2:	bf00      	nop
 80107e4:	2000009c 	.word	0x2000009c

080107e8 <free>:
 80107e8:	4b02      	ldr	r3, [pc, #8]	; (80107f4 <free+0xc>)
 80107ea:	4601      	mov	r1, r0
 80107ec:	6818      	ldr	r0, [r3, #0]
 80107ee:	f000 b819 	b.w	8010824 <_free_r>
 80107f2:	bf00      	nop
 80107f4:	2000009c 	.word	0x2000009c

080107f8 <memcpy>:
 80107f8:	440a      	add	r2, r1
 80107fa:	4291      	cmp	r1, r2
 80107fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010800:	d100      	bne.n	8010804 <memcpy+0xc>
 8010802:	4770      	bx	lr
 8010804:	b510      	push	{r4, lr}
 8010806:	f811 4b01 	ldrb.w	r4, [r1], #1
 801080a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801080e:	4291      	cmp	r1, r2
 8010810:	d1f9      	bne.n	8010806 <memcpy+0xe>
 8010812:	bd10      	pop	{r4, pc}

08010814 <memset>:
 8010814:	4402      	add	r2, r0
 8010816:	4603      	mov	r3, r0
 8010818:	4293      	cmp	r3, r2
 801081a:	d100      	bne.n	801081e <memset+0xa>
 801081c:	4770      	bx	lr
 801081e:	f803 1b01 	strb.w	r1, [r3], #1
 8010822:	e7f9      	b.n	8010818 <memset+0x4>

08010824 <_free_r>:
 8010824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010826:	2900      	cmp	r1, #0
 8010828:	d044      	beq.n	80108b4 <_free_r+0x90>
 801082a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801082e:	9001      	str	r0, [sp, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	f1a1 0404 	sub.w	r4, r1, #4
 8010836:	bfb8      	it	lt
 8010838:	18e4      	addlt	r4, r4, r3
 801083a:	f000 f903 	bl	8010a44 <__malloc_lock>
 801083e:	4a1e      	ldr	r2, [pc, #120]	; (80108b8 <_free_r+0x94>)
 8010840:	9801      	ldr	r0, [sp, #4]
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	b933      	cbnz	r3, 8010854 <_free_r+0x30>
 8010846:	6063      	str	r3, [r4, #4]
 8010848:	6014      	str	r4, [r2, #0]
 801084a:	b003      	add	sp, #12
 801084c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010850:	f000 b8fe 	b.w	8010a50 <__malloc_unlock>
 8010854:	42a3      	cmp	r3, r4
 8010856:	d908      	bls.n	801086a <_free_r+0x46>
 8010858:	6825      	ldr	r5, [r4, #0]
 801085a:	1961      	adds	r1, r4, r5
 801085c:	428b      	cmp	r3, r1
 801085e:	bf01      	itttt	eq
 8010860:	6819      	ldreq	r1, [r3, #0]
 8010862:	685b      	ldreq	r3, [r3, #4]
 8010864:	1949      	addeq	r1, r1, r5
 8010866:	6021      	streq	r1, [r4, #0]
 8010868:	e7ed      	b.n	8010846 <_free_r+0x22>
 801086a:	461a      	mov	r2, r3
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	b10b      	cbz	r3, 8010874 <_free_r+0x50>
 8010870:	42a3      	cmp	r3, r4
 8010872:	d9fa      	bls.n	801086a <_free_r+0x46>
 8010874:	6811      	ldr	r1, [r2, #0]
 8010876:	1855      	adds	r5, r2, r1
 8010878:	42a5      	cmp	r5, r4
 801087a:	d10b      	bne.n	8010894 <_free_r+0x70>
 801087c:	6824      	ldr	r4, [r4, #0]
 801087e:	4421      	add	r1, r4
 8010880:	1854      	adds	r4, r2, r1
 8010882:	42a3      	cmp	r3, r4
 8010884:	6011      	str	r1, [r2, #0]
 8010886:	d1e0      	bne.n	801084a <_free_r+0x26>
 8010888:	681c      	ldr	r4, [r3, #0]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	6053      	str	r3, [r2, #4]
 801088e:	4421      	add	r1, r4
 8010890:	6011      	str	r1, [r2, #0]
 8010892:	e7da      	b.n	801084a <_free_r+0x26>
 8010894:	d902      	bls.n	801089c <_free_r+0x78>
 8010896:	230c      	movs	r3, #12
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	e7d6      	b.n	801084a <_free_r+0x26>
 801089c:	6825      	ldr	r5, [r4, #0]
 801089e:	1961      	adds	r1, r4, r5
 80108a0:	428b      	cmp	r3, r1
 80108a2:	bf04      	itt	eq
 80108a4:	6819      	ldreq	r1, [r3, #0]
 80108a6:	685b      	ldreq	r3, [r3, #4]
 80108a8:	6063      	str	r3, [r4, #4]
 80108aa:	bf04      	itt	eq
 80108ac:	1949      	addeq	r1, r1, r5
 80108ae:	6021      	streq	r1, [r4, #0]
 80108b0:	6054      	str	r4, [r2, #4]
 80108b2:	e7ca      	b.n	801084a <_free_r+0x26>
 80108b4:	b003      	add	sp, #12
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	20009aa4 	.word	0x20009aa4

080108bc <sbrk_aligned>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	4e0e      	ldr	r6, [pc, #56]	; (80108f8 <sbrk_aligned+0x3c>)
 80108c0:	460c      	mov	r4, r1
 80108c2:	6831      	ldr	r1, [r6, #0]
 80108c4:	4605      	mov	r5, r0
 80108c6:	b911      	cbnz	r1, 80108ce <sbrk_aligned+0x12>
 80108c8:	f000 f88c 	bl	80109e4 <_sbrk_r>
 80108cc:	6030      	str	r0, [r6, #0]
 80108ce:	4621      	mov	r1, r4
 80108d0:	4628      	mov	r0, r5
 80108d2:	f000 f887 	bl	80109e4 <_sbrk_r>
 80108d6:	1c43      	adds	r3, r0, #1
 80108d8:	d00a      	beq.n	80108f0 <sbrk_aligned+0x34>
 80108da:	1cc4      	adds	r4, r0, #3
 80108dc:	f024 0403 	bic.w	r4, r4, #3
 80108e0:	42a0      	cmp	r0, r4
 80108e2:	d007      	beq.n	80108f4 <sbrk_aligned+0x38>
 80108e4:	1a21      	subs	r1, r4, r0
 80108e6:	4628      	mov	r0, r5
 80108e8:	f000 f87c 	bl	80109e4 <_sbrk_r>
 80108ec:	3001      	adds	r0, #1
 80108ee:	d101      	bne.n	80108f4 <sbrk_aligned+0x38>
 80108f0:	f04f 34ff 	mov.w	r4, #4294967295
 80108f4:	4620      	mov	r0, r4
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	20009aa8 	.word	0x20009aa8

080108fc <_malloc_r>:
 80108fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010900:	1ccd      	adds	r5, r1, #3
 8010902:	f025 0503 	bic.w	r5, r5, #3
 8010906:	3508      	adds	r5, #8
 8010908:	2d0c      	cmp	r5, #12
 801090a:	bf38      	it	cc
 801090c:	250c      	movcc	r5, #12
 801090e:	2d00      	cmp	r5, #0
 8010910:	4607      	mov	r7, r0
 8010912:	db01      	blt.n	8010918 <_malloc_r+0x1c>
 8010914:	42a9      	cmp	r1, r5
 8010916:	d905      	bls.n	8010924 <_malloc_r+0x28>
 8010918:	230c      	movs	r3, #12
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	2600      	movs	r6, #0
 801091e:	4630      	mov	r0, r6
 8010920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010924:	4e2e      	ldr	r6, [pc, #184]	; (80109e0 <_malloc_r+0xe4>)
 8010926:	f000 f88d 	bl	8010a44 <__malloc_lock>
 801092a:	6833      	ldr	r3, [r6, #0]
 801092c:	461c      	mov	r4, r3
 801092e:	bb34      	cbnz	r4, 801097e <_malloc_r+0x82>
 8010930:	4629      	mov	r1, r5
 8010932:	4638      	mov	r0, r7
 8010934:	f7ff ffc2 	bl	80108bc <sbrk_aligned>
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	4604      	mov	r4, r0
 801093c:	d14d      	bne.n	80109da <_malloc_r+0xde>
 801093e:	6834      	ldr	r4, [r6, #0]
 8010940:	4626      	mov	r6, r4
 8010942:	2e00      	cmp	r6, #0
 8010944:	d140      	bne.n	80109c8 <_malloc_r+0xcc>
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	4631      	mov	r1, r6
 801094a:	4638      	mov	r0, r7
 801094c:	eb04 0803 	add.w	r8, r4, r3
 8010950:	f000 f848 	bl	80109e4 <_sbrk_r>
 8010954:	4580      	cmp	r8, r0
 8010956:	d13a      	bne.n	80109ce <_malloc_r+0xd2>
 8010958:	6821      	ldr	r1, [r4, #0]
 801095a:	3503      	adds	r5, #3
 801095c:	1a6d      	subs	r5, r5, r1
 801095e:	f025 0503 	bic.w	r5, r5, #3
 8010962:	3508      	adds	r5, #8
 8010964:	2d0c      	cmp	r5, #12
 8010966:	bf38      	it	cc
 8010968:	250c      	movcc	r5, #12
 801096a:	4629      	mov	r1, r5
 801096c:	4638      	mov	r0, r7
 801096e:	f7ff ffa5 	bl	80108bc <sbrk_aligned>
 8010972:	3001      	adds	r0, #1
 8010974:	d02b      	beq.n	80109ce <_malloc_r+0xd2>
 8010976:	6823      	ldr	r3, [r4, #0]
 8010978:	442b      	add	r3, r5
 801097a:	6023      	str	r3, [r4, #0]
 801097c:	e00e      	b.n	801099c <_malloc_r+0xa0>
 801097e:	6822      	ldr	r2, [r4, #0]
 8010980:	1b52      	subs	r2, r2, r5
 8010982:	d41e      	bmi.n	80109c2 <_malloc_r+0xc6>
 8010984:	2a0b      	cmp	r2, #11
 8010986:	d916      	bls.n	80109b6 <_malloc_r+0xba>
 8010988:	1961      	adds	r1, r4, r5
 801098a:	42a3      	cmp	r3, r4
 801098c:	6025      	str	r5, [r4, #0]
 801098e:	bf18      	it	ne
 8010990:	6059      	strne	r1, [r3, #4]
 8010992:	6863      	ldr	r3, [r4, #4]
 8010994:	bf08      	it	eq
 8010996:	6031      	streq	r1, [r6, #0]
 8010998:	5162      	str	r2, [r4, r5]
 801099a:	604b      	str	r3, [r1, #4]
 801099c:	4638      	mov	r0, r7
 801099e:	f104 060b 	add.w	r6, r4, #11
 80109a2:	f000 f855 	bl	8010a50 <__malloc_unlock>
 80109a6:	f026 0607 	bic.w	r6, r6, #7
 80109aa:	1d23      	adds	r3, r4, #4
 80109ac:	1af2      	subs	r2, r6, r3
 80109ae:	d0b6      	beq.n	801091e <_malloc_r+0x22>
 80109b0:	1b9b      	subs	r3, r3, r6
 80109b2:	50a3      	str	r3, [r4, r2]
 80109b4:	e7b3      	b.n	801091e <_malloc_r+0x22>
 80109b6:	6862      	ldr	r2, [r4, #4]
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	bf0c      	ite	eq
 80109bc:	6032      	streq	r2, [r6, #0]
 80109be:	605a      	strne	r2, [r3, #4]
 80109c0:	e7ec      	b.n	801099c <_malloc_r+0xa0>
 80109c2:	4623      	mov	r3, r4
 80109c4:	6864      	ldr	r4, [r4, #4]
 80109c6:	e7b2      	b.n	801092e <_malloc_r+0x32>
 80109c8:	4634      	mov	r4, r6
 80109ca:	6876      	ldr	r6, [r6, #4]
 80109cc:	e7b9      	b.n	8010942 <_malloc_r+0x46>
 80109ce:	230c      	movs	r3, #12
 80109d0:	603b      	str	r3, [r7, #0]
 80109d2:	4638      	mov	r0, r7
 80109d4:	f000 f83c 	bl	8010a50 <__malloc_unlock>
 80109d8:	e7a1      	b.n	801091e <_malloc_r+0x22>
 80109da:	6025      	str	r5, [r4, #0]
 80109dc:	e7de      	b.n	801099c <_malloc_r+0xa0>
 80109de:	bf00      	nop
 80109e0:	20009aa4 	.word	0x20009aa4

080109e4 <_sbrk_r>:
 80109e4:	b538      	push	{r3, r4, r5, lr}
 80109e6:	4d06      	ldr	r5, [pc, #24]	; (8010a00 <_sbrk_r+0x1c>)
 80109e8:	2300      	movs	r3, #0
 80109ea:	4604      	mov	r4, r0
 80109ec:	4608      	mov	r0, r1
 80109ee:	602b      	str	r3, [r5, #0]
 80109f0:	f7f2 fc2c 	bl	800324c <_sbrk>
 80109f4:	1c43      	adds	r3, r0, #1
 80109f6:	d102      	bne.n	80109fe <_sbrk_r+0x1a>
 80109f8:	682b      	ldr	r3, [r5, #0]
 80109fa:	b103      	cbz	r3, 80109fe <_sbrk_r+0x1a>
 80109fc:	6023      	str	r3, [r4, #0]
 80109fe:	bd38      	pop	{r3, r4, r5, pc}
 8010a00:	20009aac 	.word	0x20009aac

08010a04 <siprintf>:
 8010a04:	b40e      	push	{r1, r2, r3}
 8010a06:	b500      	push	{lr}
 8010a08:	b09c      	sub	sp, #112	; 0x70
 8010a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8010a0c:	9002      	str	r0, [sp, #8]
 8010a0e:	9006      	str	r0, [sp, #24]
 8010a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a14:	4809      	ldr	r0, [pc, #36]	; (8010a3c <siprintf+0x38>)
 8010a16:	9107      	str	r1, [sp, #28]
 8010a18:	9104      	str	r1, [sp, #16]
 8010a1a:	4909      	ldr	r1, [pc, #36]	; (8010a40 <siprintf+0x3c>)
 8010a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a20:	9105      	str	r1, [sp, #20]
 8010a22:	6800      	ldr	r0, [r0, #0]
 8010a24:	9301      	str	r3, [sp, #4]
 8010a26:	a902      	add	r1, sp, #8
 8010a28:	f000 f874 	bl	8010b14 <_svfiprintf_r>
 8010a2c:	9b02      	ldr	r3, [sp, #8]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	701a      	strb	r2, [r3, #0]
 8010a32:	b01c      	add	sp, #112	; 0x70
 8010a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a38:	b003      	add	sp, #12
 8010a3a:	4770      	bx	lr
 8010a3c:	2000009c 	.word	0x2000009c
 8010a40:	ffff0208 	.word	0xffff0208

08010a44 <__malloc_lock>:
 8010a44:	4801      	ldr	r0, [pc, #4]	; (8010a4c <__malloc_lock+0x8>)
 8010a46:	f000 baf9 	b.w	801103c <__retarget_lock_acquire_recursive>
 8010a4a:	bf00      	nop
 8010a4c:	20009ab0 	.word	0x20009ab0

08010a50 <__malloc_unlock>:
 8010a50:	4801      	ldr	r0, [pc, #4]	; (8010a58 <__malloc_unlock+0x8>)
 8010a52:	f000 baf4 	b.w	801103e <__retarget_lock_release_recursive>
 8010a56:	bf00      	nop
 8010a58:	20009ab0 	.word	0x20009ab0

08010a5c <__ssputs_r>:
 8010a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	688e      	ldr	r6, [r1, #8]
 8010a62:	429e      	cmp	r6, r3
 8010a64:	4682      	mov	sl, r0
 8010a66:	460c      	mov	r4, r1
 8010a68:	4690      	mov	r8, r2
 8010a6a:	461f      	mov	r7, r3
 8010a6c:	d838      	bhi.n	8010ae0 <__ssputs_r+0x84>
 8010a6e:	898a      	ldrh	r2, [r1, #12]
 8010a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a74:	d032      	beq.n	8010adc <__ssputs_r+0x80>
 8010a76:	6825      	ldr	r5, [r4, #0]
 8010a78:	6909      	ldr	r1, [r1, #16]
 8010a7a:	eba5 0901 	sub.w	r9, r5, r1
 8010a7e:	6965      	ldr	r5, [r4, #20]
 8010a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a88:	3301      	adds	r3, #1
 8010a8a:	444b      	add	r3, r9
 8010a8c:	106d      	asrs	r5, r5, #1
 8010a8e:	429d      	cmp	r5, r3
 8010a90:	bf38      	it	cc
 8010a92:	461d      	movcc	r5, r3
 8010a94:	0553      	lsls	r3, r2, #21
 8010a96:	d531      	bpl.n	8010afc <__ssputs_r+0xa0>
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7ff ff2f 	bl	80108fc <_malloc_r>
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	b950      	cbnz	r0, 8010ab8 <__ssputs_r+0x5c>
 8010aa2:	230c      	movs	r3, #12
 8010aa4:	f8ca 3000 	str.w	r3, [sl]
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab8:	6921      	ldr	r1, [r4, #16]
 8010aba:	464a      	mov	r2, r9
 8010abc:	f7ff fe9c 	bl	80107f8 <memcpy>
 8010ac0:	89a3      	ldrh	r3, [r4, #12]
 8010ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aca:	81a3      	strh	r3, [r4, #12]
 8010acc:	6126      	str	r6, [r4, #16]
 8010ace:	6165      	str	r5, [r4, #20]
 8010ad0:	444e      	add	r6, r9
 8010ad2:	eba5 0509 	sub.w	r5, r5, r9
 8010ad6:	6026      	str	r6, [r4, #0]
 8010ad8:	60a5      	str	r5, [r4, #8]
 8010ada:	463e      	mov	r6, r7
 8010adc:	42be      	cmp	r6, r7
 8010ade:	d900      	bls.n	8010ae2 <__ssputs_r+0x86>
 8010ae0:	463e      	mov	r6, r7
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	4632      	mov	r2, r6
 8010ae6:	4641      	mov	r1, r8
 8010ae8:	f000 faaa 	bl	8011040 <memmove>
 8010aec:	68a3      	ldr	r3, [r4, #8]
 8010aee:	1b9b      	subs	r3, r3, r6
 8010af0:	60a3      	str	r3, [r4, #8]
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	4433      	add	r3, r6
 8010af6:	6023      	str	r3, [r4, #0]
 8010af8:	2000      	movs	r0, #0
 8010afa:	e7db      	b.n	8010ab4 <__ssputs_r+0x58>
 8010afc:	462a      	mov	r2, r5
 8010afe:	f000 fab9 	bl	8011074 <_realloc_r>
 8010b02:	4606      	mov	r6, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1e1      	bne.n	8010acc <__ssputs_r+0x70>
 8010b08:	6921      	ldr	r1, [r4, #16]
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f7ff fe8a 	bl	8010824 <_free_r>
 8010b10:	e7c7      	b.n	8010aa2 <__ssputs_r+0x46>
	...

08010b14 <_svfiprintf_r>:
 8010b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b18:	4698      	mov	r8, r3
 8010b1a:	898b      	ldrh	r3, [r1, #12]
 8010b1c:	061b      	lsls	r3, r3, #24
 8010b1e:	b09d      	sub	sp, #116	; 0x74
 8010b20:	4607      	mov	r7, r0
 8010b22:	460d      	mov	r5, r1
 8010b24:	4614      	mov	r4, r2
 8010b26:	d50e      	bpl.n	8010b46 <_svfiprintf_r+0x32>
 8010b28:	690b      	ldr	r3, [r1, #16]
 8010b2a:	b963      	cbnz	r3, 8010b46 <_svfiprintf_r+0x32>
 8010b2c:	2140      	movs	r1, #64	; 0x40
 8010b2e:	f7ff fee5 	bl	80108fc <_malloc_r>
 8010b32:	6028      	str	r0, [r5, #0]
 8010b34:	6128      	str	r0, [r5, #16]
 8010b36:	b920      	cbnz	r0, 8010b42 <_svfiprintf_r+0x2e>
 8010b38:	230c      	movs	r3, #12
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b40:	e0d1      	b.n	8010ce6 <_svfiprintf_r+0x1d2>
 8010b42:	2340      	movs	r3, #64	; 0x40
 8010b44:	616b      	str	r3, [r5, #20]
 8010b46:	2300      	movs	r3, #0
 8010b48:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4a:	2320      	movs	r3, #32
 8010b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b54:	2330      	movs	r3, #48	; 0x30
 8010b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010d00 <_svfiprintf_r+0x1ec>
 8010b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b5e:	f04f 0901 	mov.w	r9, #1
 8010b62:	4623      	mov	r3, r4
 8010b64:	469a      	mov	sl, r3
 8010b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b6a:	b10a      	cbz	r2, 8010b70 <_svfiprintf_r+0x5c>
 8010b6c:	2a25      	cmp	r2, #37	; 0x25
 8010b6e:	d1f9      	bne.n	8010b64 <_svfiprintf_r+0x50>
 8010b70:	ebba 0b04 	subs.w	fp, sl, r4
 8010b74:	d00b      	beq.n	8010b8e <_svfiprintf_r+0x7a>
 8010b76:	465b      	mov	r3, fp
 8010b78:	4622      	mov	r2, r4
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	f7ff ff6d 	bl	8010a5c <__ssputs_r>
 8010b82:	3001      	adds	r0, #1
 8010b84:	f000 80aa 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b8a:	445a      	add	r2, fp
 8010b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 80a2 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ba2:	f10a 0a01 	add.w	sl, sl, #1
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bae:	931a      	str	r3, [sp, #104]	; 0x68
 8010bb0:	4654      	mov	r4, sl
 8010bb2:	2205      	movs	r2, #5
 8010bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb8:	4851      	ldr	r0, [pc, #324]	; (8010d00 <_svfiprintf_r+0x1ec>)
 8010bba:	f7ef fb19 	bl	80001f0 <memchr>
 8010bbe:	9a04      	ldr	r2, [sp, #16]
 8010bc0:	b9d8      	cbnz	r0, 8010bfa <_svfiprintf_r+0xe6>
 8010bc2:	06d0      	lsls	r0, r2, #27
 8010bc4:	bf44      	itt	mi
 8010bc6:	2320      	movmi	r3, #32
 8010bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bcc:	0711      	lsls	r1, r2, #28
 8010bce:	bf44      	itt	mi
 8010bd0:	232b      	movmi	r3, #43	; 0x2b
 8010bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8010bda:	2b2a      	cmp	r3, #42	; 0x2a
 8010bdc:	d015      	beq.n	8010c0a <_svfiprintf_r+0xf6>
 8010bde:	9a07      	ldr	r2, [sp, #28]
 8010be0:	4654      	mov	r4, sl
 8010be2:	2000      	movs	r0, #0
 8010be4:	f04f 0c0a 	mov.w	ip, #10
 8010be8:	4621      	mov	r1, r4
 8010bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bee:	3b30      	subs	r3, #48	; 0x30
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d94e      	bls.n	8010c92 <_svfiprintf_r+0x17e>
 8010bf4:	b1b0      	cbz	r0, 8010c24 <_svfiprintf_r+0x110>
 8010bf6:	9207      	str	r2, [sp, #28]
 8010bf8:	e014      	b.n	8010c24 <_svfiprintf_r+0x110>
 8010bfa:	eba0 0308 	sub.w	r3, r0, r8
 8010bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	46a2      	mov	sl, r4
 8010c08:	e7d2      	b.n	8010bb0 <_svfiprintf_r+0x9c>
 8010c0a:	9b03      	ldr	r3, [sp, #12]
 8010c0c:	1d19      	adds	r1, r3, #4
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	9103      	str	r1, [sp, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfbb      	ittet	lt
 8010c16:	425b      	neglt	r3, r3
 8010c18:	f042 0202 	orrlt.w	r2, r2, #2
 8010c1c:	9307      	strge	r3, [sp, #28]
 8010c1e:	9307      	strlt	r3, [sp, #28]
 8010c20:	bfb8      	it	lt
 8010c22:	9204      	strlt	r2, [sp, #16]
 8010c24:	7823      	ldrb	r3, [r4, #0]
 8010c26:	2b2e      	cmp	r3, #46	; 0x2e
 8010c28:	d10c      	bne.n	8010c44 <_svfiprintf_r+0x130>
 8010c2a:	7863      	ldrb	r3, [r4, #1]
 8010c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010c2e:	d135      	bne.n	8010c9c <_svfiprintf_r+0x188>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	9203      	str	r2, [sp, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bfb8      	it	lt
 8010c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c40:	3402      	adds	r4, #2
 8010c42:	9305      	str	r3, [sp, #20]
 8010c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d10 <_svfiprintf_r+0x1fc>
 8010c48:	7821      	ldrb	r1, [r4, #0]
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	4650      	mov	r0, sl
 8010c4e:	f7ef facf 	bl	80001f0 <memchr>
 8010c52:	b140      	cbz	r0, 8010c66 <_svfiprintf_r+0x152>
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	eba0 000a 	sub.w	r0, r0, sl
 8010c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	4303      	orrs	r3, r0
 8010c62:	3401      	adds	r4, #1
 8010c64:	9304      	str	r3, [sp, #16]
 8010c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c6a:	4826      	ldr	r0, [pc, #152]	; (8010d04 <_svfiprintf_r+0x1f0>)
 8010c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c70:	2206      	movs	r2, #6
 8010c72:	f7ef fabd 	bl	80001f0 <memchr>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d038      	beq.n	8010cec <_svfiprintf_r+0x1d8>
 8010c7a:	4b23      	ldr	r3, [pc, #140]	; (8010d08 <_svfiprintf_r+0x1f4>)
 8010c7c:	bb1b      	cbnz	r3, 8010cc6 <_svfiprintf_r+0x1b2>
 8010c7e:	9b03      	ldr	r3, [sp, #12]
 8010c80:	3307      	adds	r3, #7
 8010c82:	f023 0307 	bic.w	r3, r3, #7
 8010c86:	3308      	adds	r3, #8
 8010c88:	9303      	str	r3, [sp, #12]
 8010c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c8c:	4433      	add	r3, r6
 8010c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c90:	e767      	b.n	8010b62 <_svfiprintf_r+0x4e>
 8010c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c96:	460c      	mov	r4, r1
 8010c98:	2001      	movs	r0, #1
 8010c9a:	e7a5      	b.n	8010be8 <_svfiprintf_r+0xd4>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	3401      	adds	r4, #1
 8010ca0:	9305      	str	r3, [sp, #20]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	f04f 0c0a 	mov.w	ip, #10
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cae:	3a30      	subs	r2, #48	; 0x30
 8010cb0:	2a09      	cmp	r2, #9
 8010cb2:	d903      	bls.n	8010cbc <_svfiprintf_r+0x1a8>
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d0c5      	beq.n	8010c44 <_svfiprintf_r+0x130>
 8010cb8:	9105      	str	r1, [sp, #20]
 8010cba:	e7c3      	b.n	8010c44 <_svfiprintf_r+0x130>
 8010cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e7f0      	b.n	8010ca8 <_svfiprintf_r+0x194>
 8010cc6:	ab03      	add	r3, sp, #12
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cce:	a904      	add	r1, sp, #16
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f3af 8000 	nop.w
 8010cd6:	1c42      	adds	r2, r0, #1
 8010cd8:	4606      	mov	r6, r0
 8010cda:	d1d6      	bne.n	8010c8a <_svfiprintf_r+0x176>
 8010cdc:	89ab      	ldrh	r3, [r5, #12]
 8010cde:	065b      	lsls	r3, r3, #25
 8010ce0:	f53f af2c 	bmi.w	8010b3c <_svfiprintf_r+0x28>
 8010ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ce6:	b01d      	add	sp, #116	; 0x74
 8010ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cec:	ab03      	add	r3, sp, #12
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	4b06      	ldr	r3, [pc, #24]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cf4:	a904      	add	r1, sp, #16
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	f000 f87a 	bl	8010df0 <_printf_i>
 8010cfc:	e7eb      	b.n	8010cd6 <_svfiprintf_r+0x1c2>
 8010cfe:	bf00      	nop
 8010d00:	08061e0c 	.word	0x08061e0c
 8010d04:	08061e16 	.word	0x08061e16
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	08010a5d 	.word	0x08010a5d
 8010d10:	08061e12 	.word	0x08061e12

08010d14 <_printf_common>:
 8010d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	4616      	mov	r6, r2
 8010d1a:	4699      	mov	r9, r3
 8010d1c:	688a      	ldr	r2, [r1, #8]
 8010d1e:	690b      	ldr	r3, [r1, #16]
 8010d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d24:	4293      	cmp	r3, r2
 8010d26:	bfb8      	it	lt
 8010d28:	4613      	movlt	r3, r2
 8010d2a:	6033      	str	r3, [r6, #0]
 8010d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d30:	4607      	mov	r7, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b10a      	cbz	r2, 8010d3a <_printf_common+0x26>
 8010d36:	3301      	adds	r3, #1
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	0699      	lsls	r1, r3, #26
 8010d3e:	bf42      	ittt	mi
 8010d40:	6833      	ldrmi	r3, [r6, #0]
 8010d42:	3302      	addmi	r3, #2
 8010d44:	6033      	strmi	r3, [r6, #0]
 8010d46:	6825      	ldr	r5, [r4, #0]
 8010d48:	f015 0506 	ands.w	r5, r5, #6
 8010d4c:	d106      	bne.n	8010d5c <_printf_common+0x48>
 8010d4e:	f104 0a19 	add.w	sl, r4, #25
 8010d52:	68e3      	ldr	r3, [r4, #12]
 8010d54:	6832      	ldr	r2, [r6, #0]
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	42ab      	cmp	r3, r5
 8010d5a:	dc26      	bgt.n	8010daa <_printf_common+0x96>
 8010d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d60:	1e13      	subs	r3, r2, #0
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	bf18      	it	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	0692      	lsls	r2, r2, #26
 8010d6a:	d42b      	bmi.n	8010dc4 <_printf_common+0xb0>
 8010d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d70:	4649      	mov	r1, r9
 8010d72:	4638      	mov	r0, r7
 8010d74:	47c0      	blx	r8
 8010d76:	3001      	adds	r0, #1
 8010d78:	d01e      	beq.n	8010db8 <_printf_common+0xa4>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	68e5      	ldr	r5, [r4, #12]
 8010d7e:	6832      	ldr	r2, [r6, #0]
 8010d80:	f003 0306 	and.w	r3, r3, #6
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	bf08      	it	eq
 8010d88:	1aad      	subeq	r5, r5, r2
 8010d8a:	68a3      	ldr	r3, [r4, #8]
 8010d8c:	6922      	ldr	r2, [r4, #16]
 8010d8e:	bf0c      	ite	eq
 8010d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d94:	2500      	movne	r5, #0
 8010d96:	4293      	cmp	r3, r2
 8010d98:	bfc4      	itt	gt
 8010d9a:	1a9b      	subgt	r3, r3, r2
 8010d9c:	18ed      	addgt	r5, r5, r3
 8010d9e:	2600      	movs	r6, #0
 8010da0:	341a      	adds	r4, #26
 8010da2:	42b5      	cmp	r5, r6
 8010da4:	d11a      	bne.n	8010ddc <_printf_common+0xc8>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e008      	b.n	8010dbc <_printf_common+0xa8>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4649      	mov	r1, r9
 8010db0:	4638      	mov	r0, r7
 8010db2:	47c0      	blx	r8
 8010db4:	3001      	adds	r0, #1
 8010db6:	d103      	bne.n	8010dc0 <_printf_common+0xac>
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	e7c6      	b.n	8010d52 <_printf_common+0x3e>
 8010dc4:	18e1      	adds	r1, r4, r3
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	2030      	movs	r0, #48	; 0x30
 8010dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dce:	4422      	add	r2, r4
 8010dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dd8:	3302      	adds	r3, #2
 8010dda:	e7c7      	b.n	8010d6c <_printf_common+0x58>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4622      	mov	r2, r4
 8010de0:	4649      	mov	r1, r9
 8010de2:	4638      	mov	r0, r7
 8010de4:	47c0      	blx	r8
 8010de6:	3001      	adds	r0, #1
 8010de8:	d0e6      	beq.n	8010db8 <_printf_common+0xa4>
 8010dea:	3601      	adds	r6, #1
 8010dec:	e7d9      	b.n	8010da2 <_printf_common+0x8e>
	...

08010df0 <_printf_i>:
 8010df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	7e0f      	ldrb	r7, [r1, #24]
 8010df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df8:	2f78      	cmp	r7, #120	; 0x78
 8010dfa:	4691      	mov	r9, r2
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	469a      	mov	sl, r3
 8010e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e06:	d807      	bhi.n	8010e18 <_printf_i+0x28>
 8010e08:	2f62      	cmp	r7, #98	; 0x62
 8010e0a:	d80a      	bhi.n	8010e22 <_printf_i+0x32>
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	f000 80d8 	beq.w	8010fc2 <_printf_i+0x1d2>
 8010e12:	2f58      	cmp	r7, #88	; 0x58
 8010e14:	f000 80a3 	beq.w	8010f5e <_printf_i+0x16e>
 8010e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e20:	e03a      	b.n	8010e98 <_printf_i+0xa8>
 8010e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e26:	2b15      	cmp	r3, #21
 8010e28:	d8f6      	bhi.n	8010e18 <_printf_i+0x28>
 8010e2a:	a101      	add	r1, pc, #4	; (adr r1, 8010e30 <_printf_i+0x40>)
 8010e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e30:	08010e89 	.word	0x08010e89
 8010e34:	08010e9d 	.word	0x08010e9d
 8010e38:	08010e19 	.word	0x08010e19
 8010e3c:	08010e19 	.word	0x08010e19
 8010e40:	08010e19 	.word	0x08010e19
 8010e44:	08010e19 	.word	0x08010e19
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08010e19 	.word	0x08010e19
 8010e50:	08010e19 	.word	0x08010e19
 8010e54:	08010e19 	.word	0x08010e19
 8010e58:	08010e19 	.word	0x08010e19
 8010e5c:	08010fa9 	.word	0x08010fa9
 8010e60:	08010ecd 	.word	0x08010ecd
 8010e64:	08010f8b 	.word	0x08010f8b
 8010e68:	08010e19 	.word	0x08010e19
 8010e6c:	08010e19 	.word	0x08010e19
 8010e70:	08010fcb 	.word	0x08010fcb
 8010e74:	08010e19 	.word	0x08010e19
 8010e78:	08010ecd 	.word	0x08010ecd
 8010e7c:	08010e19 	.word	0x08010e19
 8010e80:	08010e19 	.word	0x08010e19
 8010e84:	08010f93 	.word	0x08010f93
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	1d1a      	adds	r2, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	602a      	str	r2, [r5, #0]
 8010e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e0a3      	b.n	8010fe4 <_printf_i+0x1f4>
 8010e9c:	6820      	ldr	r0, [r4, #0]
 8010e9e:	6829      	ldr	r1, [r5, #0]
 8010ea0:	0606      	lsls	r6, r0, #24
 8010ea2:	f101 0304 	add.w	r3, r1, #4
 8010ea6:	d50a      	bpl.n	8010ebe <_printf_i+0xce>
 8010ea8:	680e      	ldr	r6, [r1, #0]
 8010eaa:	602b      	str	r3, [r5, #0]
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	da03      	bge.n	8010eb8 <_printf_i+0xc8>
 8010eb0:	232d      	movs	r3, #45	; 0x2d
 8010eb2:	4276      	negs	r6, r6
 8010eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eb8:	485e      	ldr	r0, [pc, #376]	; (8011034 <_printf_i+0x244>)
 8010eba:	230a      	movs	r3, #10
 8010ebc:	e019      	b.n	8010ef2 <_printf_i+0x102>
 8010ebe:	680e      	ldr	r6, [r1, #0]
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ec6:	bf18      	it	ne
 8010ec8:	b236      	sxthne	r6, r6
 8010eca:	e7ef      	b.n	8010eac <_printf_i+0xbc>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	6820      	ldr	r0, [r4, #0]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	6029      	str	r1, [r5, #0]
 8010ed4:	0601      	lsls	r1, r0, #24
 8010ed6:	d501      	bpl.n	8010edc <_printf_i+0xec>
 8010ed8:	681e      	ldr	r6, [r3, #0]
 8010eda:	e002      	b.n	8010ee2 <_printf_i+0xf2>
 8010edc:	0646      	lsls	r6, r0, #25
 8010ede:	d5fb      	bpl.n	8010ed8 <_printf_i+0xe8>
 8010ee0:	881e      	ldrh	r6, [r3, #0]
 8010ee2:	4854      	ldr	r0, [pc, #336]	; (8011034 <_printf_i+0x244>)
 8010ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8010ee6:	bf0c      	ite	eq
 8010ee8:	2308      	moveq	r3, #8
 8010eea:	230a      	movne	r3, #10
 8010eec:	2100      	movs	r1, #0
 8010eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ef2:	6865      	ldr	r5, [r4, #4]
 8010ef4:	60a5      	str	r5, [r4, #8]
 8010ef6:	2d00      	cmp	r5, #0
 8010ef8:	bfa2      	ittt	ge
 8010efa:	6821      	ldrge	r1, [r4, #0]
 8010efc:	f021 0104 	bicge.w	r1, r1, #4
 8010f00:	6021      	strge	r1, [r4, #0]
 8010f02:	b90e      	cbnz	r6, 8010f08 <_printf_i+0x118>
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	d04d      	beq.n	8010fa4 <_printf_i+0x1b4>
 8010f08:	4615      	mov	r5, r2
 8010f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8010f12:	5dc7      	ldrb	r7, [r0, r7]
 8010f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f18:	4637      	mov	r7, r6
 8010f1a:	42bb      	cmp	r3, r7
 8010f1c:	460e      	mov	r6, r1
 8010f1e:	d9f4      	bls.n	8010f0a <_printf_i+0x11a>
 8010f20:	2b08      	cmp	r3, #8
 8010f22:	d10b      	bne.n	8010f3c <_printf_i+0x14c>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	07de      	lsls	r6, r3, #31
 8010f28:	d508      	bpl.n	8010f3c <_printf_i+0x14c>
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6861      	ldr	r1, [r4, #4]
 8010f2e:	4299      	cmp	r1, r3
 8010f30:	bfde      	ittt	le
 8010f32:	2330      	movle	r3, #48	; 0x30
 8010f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f3c:	1b52      	subs	r2, r2, r5
 8010f3e:	6122      	str	r2, [r4, #16]
 8010f40:	f8cd a000 	str.w	sl, [sp]
 8010f44:	464b      	mov	r3, r9
 8010f46:	aa03      	add	r2, sp, #12
 8010f48:	4621      	mov	r1, r4
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	f7ff fee2 	bl	8010d14 <_printf_common>
 8010f50:	3001      	adds	r0, #1
 8010f52:	d14c      	bne.n	8010fee <_printf_i+0x1fe>
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	b004      	add	sp, #16
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	4835      	ldr	r0, [pc, #212]	; (8011034 <_printf_i+0x244>)
 8010f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f64:	6829      	ldr	r1, [r5, #0]
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f6c:	6029      	str	r1, [r5, #0]
 8010f6e:	061d      	lsls	r5, r3, #24
 8010f70:	d514      	bpl.n	8010f9c <_printf_i+0x1ac>
 8010f72:	07df      	lsls	r7, r3, #31
 8010f74:	bf44      	itt	mi
 8010f76:	f043 0320 	orrmi.w	r3, r3, #32
 8010f7a:	6023      	strmi	r3, [r4, #0]
 8010f7c:	b91e      	cbnz	r6, 8010f86 <_printf_i+0x196>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	f023 0320 	bic.w	r3, r3, #32
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	2310      	movs	r3, #16
 8010f88:	e7b0      	b.n	8010eec <_printf_i+0xfc>
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	f043 0320 	orr.w	r3, r3, #32
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	2378      	movs	r3, #120	; 0x78
 8010f94:	4828      	ldr	r0, [pc, #160]	; (8011038 <_printf_i+0x248>)
 8010f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f9a:	e7e3      	b.n	8010f64 <_printf_i+0x174>
 8010f9c:	0659      	lsls	r1, r3, #25
 8010f9e:	bf48      	it	mi
 8010fa0:	b2b6      	uxthmi	r6, r6
 8010fa2:	e7e6      	b.n	8010f72 <_printf_i+0x182>
 8010fa4:	4615      	mov	r5, r2
 8010fa6:	e7bb      	b.n	8010f20 <_printf_i+0x130>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	6826      	ldr	r6, [r4, #0]
 8010fac:	6961      	ldr	r1, [r4, #20]
 8010fae:	1d18      	adds	r0, r3, #4
 8010fb0:	6028      	str	r0, [r5, #0]
 8010fb2:	0635      	lsls	r5, r6, #24
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	d501      	bpl.n	8010fbc <_printf_i+0x1cc>
 8010fb8:	6019      	str	r1, [r3, #0]
 8010fba:	e002      	b.n	8010fc2 <_printf_i+0x1d2>
 8010fbc:	0670      	lsls	r0, r6, #25
 8010fbe:	d5fb      	bpl.n	8010fb8 <_printf_i+0x1c8>
 8010fc0:	8019      	strh	r1, [r3, #0]
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	4615      	mov	r5, r2
 8010fc8:	e7ba      	b.n	8010f40 <_printf_i+0x150>
 8010fca:	682b      	ldr	r3, [r5, #0]
 8010fcc:	1d1a      	adds	r2, r3, #4
 8010fce:	602a      	str	r2, [r5, #0]
 8010fd0:	681d      	ldr	r5, [r3, #0]
 8010fd2:	6862      	ldr	r2, [r4, #4]
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7ef f90a 	bl	80001f0 <memchr>
 8010fdc:	b108      	cbz	r0, 8010fe2 <_printf_i+0x1f2>
 8010fde:	1b40      	subs	r0, r0, r5
 8010fe0:	6060      	str	r0, [r4, #4]
 8010fe2:	6863      	ldr	r3, [r4, #4]
 8010fe4:	6123      	str	r3, [r4, #16]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fec:	e7a8      	b.n	8010f40 <_printf_i+0x150>
 8010fee:	6923      	ldr	r3, [r4, #16]
 8010ff0:	462a      	mov	r2, r5
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	47d0      	blx	sl
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	d0ab      	beq.n	8010f54 <_printf_i+0x164>
 8010ffc:	6823      	ldr	r3, [r4, #0]
 8010ffe:	079b      	lsls	r3, r3, #30
 8011000:	d413      	bmi.n	801102a <_printf_i+0x23a>
 8011002:	68e0      	ldr	r0, [r4, #12]
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	4298      	cmp	r0, r3
 8011008:	bfb8      	it	lt
 801100a:	4618      	movlt	r0, r3
 801100c:	e7a4      	b.n	8010f58 <_printf_i+0x168>
 801100e:	2301      	movs	r3, #1
 8011010:	4632      	mov	r2, r6
 8011012:	4649      	mov	r1, r9
 8011014:	4640      	mov	r0, r8
 8011016:	47d0      	blx	sl
 8011018:	3001      	adds	r0, #1
 801101a:	d09b      	beq.n	8010f54 <_printf_i+0x164>
 801101c:	3501      	adds	r5, #1
 801101e:	68e3      	ldr	r3, [r4, #12]
 8011020:	9903      	ldr	r1, [sp, #12]
 8011022:	1a5b      	subs	r3, r3, r1
 8011024:	42ab      	cmp	r3, r5
 8011026:	dcf2      	bgt.n	801100e <_printf_i+0x21e>
 8011028:	e7eb      	b.n	8011002 <_printf_i+0x212>
 801102a:	2500      	movs	r5, #0
 801102c:	f104 0619 	add.w	r6, r4, #25
 8011030:	e7f5      	b.n	801101e <_printf_i+0x22e>
 8011032:	bf00      	nop
 8011034:	08061e1d 	.word	0x08061e1d
 8011038:	08061e2e 	.word	0x08061e2e

0801103c <__retarget_lock_acquire_recursive>:
 801103c:	4770      	bx	lr

0801103e <__retarget_lock_release_recursive>:
 801103e:	4770      	bx	lr

08011040 <memmove>:
 8011040:	4288      	cmp	r0, r1
 8011042:	b510      	push	{r4, lr}
 8011044:	eb01 0402 	add.w	r4, r1, r2
 8011048:	d902      	bls.n	8011050 <memmove+0x10>
 801104a:	4284      	cmp	r4, r0
 801104c:	4623      	mov	r3, r4
 801104e:	d807      	bhi.n	8011060 <memmove+0x20>
 8011050:	1e43      	subs	r3, r0, #1
 8011052:	42a1      	cmp	r1, r4
 8011054:	d008      	beq.n	8011068 <memmove+0x28>
 8011056:	f811 2b01 	ldrb.w	r2, [r1], #1
 801105a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801105e:	e7f8      	b.n	8011052 <memmove+0x12>
 8011060:	4402      	add	r2, r0
 8011062:	4601      	mov	r1, r0
 8011064:	428a      	cmp	r2, r1
 8011066:	d100      	bne.n	801106a <memmove+0x2a>
 8011068:	bd10      	pop	{r4, pc}
 801106a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801106e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011072:	e7f7      	b.n	8011064 <memmove+0x24>

08011074 <_realloc_r>:
 8011074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011078:	4680      	mov	r8, r0
 801107a:	4614      	mov	r4, r2
 801107c:	460e      	mov	r6, r1
 801107e:	b921      	cbnz	r1, 801108a <_realloc_r+0x16>
 8011080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011084:	4611      	mov	r1, r2
 8011086:	f7ff bc39 	b.w	80108fc <_malloc_r>
 801108a:	b92a      	cbnz	r2, 8011098 <_realloc_r+0x24>
 801108c:	f7ff fbca 	bl	8010824 <_free_r>
 8011090:	4625      	mov	r5, r4
 8011092:	4628      	mov	r0, r5
 8011094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011098:	f000 f81b 	bl	80110d2 <_malloc_usable_size_r>
 801109c:	4284      	cmp	r4, r0
 801109e:	4607      	mov	r7, r0
 80110a0:	d802      	bhi.n	80110a8 <_realloc_r+0x34>
 80110a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110a6:	d812      	bhi.n	80110ce <_realloc_r+0x5a>
 80110a8:	4621      	mov	r1, r4
 80110aa:	4640      	mov	r0, r8
 80110ac:	f7ff fc26 	bl	80108fc <_malloc_r>
 80110b0:	4605      	mov	r5, r0
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d0ed      	beq.n	8011092 <_realloc_r+0x1e>
 80110b6:	42bc      	cmp	r4, r7
 80110b8:	4622      	mov	r2, r4
 80110ba:	4631      	mov	r1, r6
 80110bc:	bf28      	it	cs
 80110be:	463a      	movcs	r2, r7
 80110c0:	f7ff fb9a 	bl	80107f8 <memcpy>
 80110c4:	4631      	mov	r1, r6
 80110c6:	4640      	mov	r0, r8
 80110c8:	f7ff fbac 	bl	8010824 <_free_r>
 80110cc:	e7e1      	b.n	8011092 <_realloc_r+0x1e>
 80110ce:	4635      	mov	r5, r6
 80110d0:	e7df      	b.n	8011092 <_realloc_r+0x1e>

080110d2 <_malloc_usable_size_r>:
 80110d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110d6:	1f18      	subs	r0, r3, #4
 80110d8:	2b00      	cmp	r3, #0
 80110da:	bfbc      	itt	lt
 80110dc:	580b      	ldrlt	r3, [r1, r0]
 80110de:	18c0      	addlt	r0, r0, r3
 80110e0:	4770      	bx	lr
	...

080110e4 <_init>:
 80110e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e6:	bf00      	nop
 80110e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ea:	bc08      	pop	{r3}
 80110ec:	469e      	mov	lr, r3
 80110ee:	4770      	bx	lr

080110f0 <_fini>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	bf00      	nop
 80110f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f6:	bc08      	pop	{r3}
 80110f8:	469e      	mov	lr, r3
 80110fa:	4770      	bx	lr
